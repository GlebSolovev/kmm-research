
../../benchmarkAnalysis/Ring::ForLoops.intArrayLoop/linuxX64/unordered/main.kexe:	file format elf64-x86-64

Disassembly of section .init:

<_init>:
               	subq	$8, %rsp
               	movq	305509(%rip), %rax      # 0x45dfb0 <write+0x45dfb0>
               	testq	%rax, %rax
               	je	0x413655 <_init+0x15>
               	callq	0x413690 <__gmon_start__@plt>
               	callq	0x4152d1 <frame_dummy>
               	callq	0x442d58 <__do_global_ctors_aux>
               	addq	$8, %rsp
               	retq

Disassembly of section .plt:

<.plt>:
               	pushq	305530(%rip)            # 0x45dff0 <_GLOBAL_OFFSET_TABLE_+0x8>
               	jmpq	*305532(%rip)           # 0x45dff8 <_GLOBAL_OFFSET_TABLE_+0x10>
               	nop
               	nop
               	nop
               	nop

<__libc_start_main@plt>:
               	jmpq	*305530(%rip)           # 0x45e000 <_GLOBAL_OFFSET_TABLE_+0x18>
               	pushq	$0
               	jmp	0x413670 <.plt>

<__gmon_start__@plt>:
               	jmpq	*305522(%rip)           # 0x45e008 <_GLOBAL_OFFSET_TABLE_+0x20>
               	pushq	$1
               	jmp	0x413670 <.plt>

<__tls_get_addr@plt>:
               	jmpq	*305514(%rip)           # 0x45e010 <_GLOBAL_OFFSET_TABLE_+0x28>
               	pushq	$2
               	jmp	0x413670 <.plt>

<memmove@plt>:
               	jmpq	*305506(%rip)           # 0x45e018 <_GLOBAL_OFFSET_TABLE_+0x30>
               	pushq	$3
               	jmp	0x413670 <.plt>

<calloc@plt>:
               	jmpq	*305498(%rip)           # 0x45e020 <_GLOBAL_OFFSET_TABLE_+0x38>
               	pushq	$4
               	jmp	0x413670 <.plt>

<free@plt>:
               	jmpq	*305490(%rip)           # 0x45e028 <_GLOBAL_OFFSET_TABLE_+0x40>
               	pushq	$5
               	jmp	0x413670 <.plt>

<strlen@plt>:
               	jmpq	*305482(%rip)           # 0x45e030 <_GLOBAL_OFFSET_TABLE_+0x48>
               	pushq	$6
               	jmp	0x413670 <.plt>

<memcpy@plt>:
               	jmpq	*305474(%rip)           # 0x45e038 <_GLOBAL_OFFSET_TABLE_+0x50>
               	pushq	$7
               	jmp	0x413670 <.plt>

<_Unwind_Resume@plt>:
               	jmpq	*305466(%rip)           # 0x45e040 <_GLOBAL_OFFSET_TABLE_+0x58>
               	pushq	$8
               	jmp	0x413670 <.plt>

<memset@plt>:
               	jmpq	*305458(%rip)           # 0x45e048 <_GLOBAL_OFFSET_TABLE_+0x60>
               	pushq	$9
               	jmp	0x413670 <.plt>

<sched_yield@plt>:
               	jmpq	*305450(%rip)           # 0x45e050 <_GLOBAL_OFFSET_TABLE_+0x68>
               	pushq	$10
               	jmp	0x413670 <.plt>

<pthread_mutex_lock@plt>:
               	jmpq	*305442(%rip)           # 0x45e058 <_GLOBAL_OFFSET_TABLE_+0x70>
               	pushq	$11
               	jmp	0x413670 <.plt>

<pthread_cond_timedwait@plt>:
               	jmpq	*305434(%rip)           # 0x45e060 <_GLOBAL_OFFSET_TABLE_+0x78>
               	pushq	$12
               	jmp	0x413670 <.plt>

<pthread_mutex_unlock@plt>:
               	jmpq	*305426(%rip)           # 0x45e068 <_GLOBAL_OFFSET_TABLE_+0x80>
               	pushq	$13
               	jmp	0x413670 <.plt>

<pthread_self@plt>:
               	jmpq	*305418(%rip)           # 0x45e070 <_GLOBAL_OFFSET_TABLE_+0x88>
               	pushq	$14
               	jmp	0x413670 <.plt>

<pthread_setname_np@plt>:
               	jmpq	*305410(%rip)           # 0x45e078 <_GLOBAL_OFFSET_TABLE_+0x90>
               	pushq	$15
               	jmp	0x413670 <.plt>

<memcmp@plt>:
               	jmpq	*305402(%rip)           # 0x45e080 <_GLOBAL_OFFSET_TABLE_+0x98>
               	pushq	$16
               	jmp	0x413670 <.plt>

<fputs@plt>:
               	jmpq	*305394(%rip)           # 0x45e088 <_GLOBAL_OFFSET_TABLE_+0xa0>
               	pushq	$17
               	jmp	0x413670 <.plt>

<clock_gettime@plt>:
               	jmpq	*305386(%rip)           # 0x45e090 <_GLOBAL_OFFSET_TABLE_+0xa8>
               	pushq	$18
               	jmp	0x413670 <.plt>

<syscall@plt>:
               	jmpq	*305378(%rip)           # 0x45e098 <_GLOBAL_OFFSET_TABLE_+0xb0>
               	pushq	$19
               	jmp	0x413670 <.plt>

<getrusage@plt>:
               	jmpq	*305370(%rip)           # 0x45e0a0 <_GLOBAL_OFFSET_TABLE_+0xb8>
               	pushq	$20
               	jmp	0x413670 <.plt>

<snprintf@plt>:
               	jmpq	*305362(%rip)           # 0x45e0a8 <_GLOBAL_OFFSET_TABLE_+0xc0>
               	pushq	$21
               	jmp	0x413670 <.plt>

<pthread_key_create@plt>:
               	jmpq	*305354(%rip)           # 0x45e0b0 <_GLOBAL_OFFSET_TABLE_+0xc8>
               	pushq	$22
               	jmp	0x413670 <.plt>

<pthread_setspecific@plt>:
               	jmpq	*305346(%rip)           # 0x45e0b8 <_GLOBAL_OFFSET_TABLE_+0xd0>
               	pushq	$23
               	jmp	0x413670 <.plt>

<sysconf@plt>:
               	jmpq	*305338(%rip)           # 0x45e0c0 <_GLOBAL_OFFSET_TABLE_+0xd8>
               	pushq	$24
               	jmp	0x413670 <.plt>

<mmap@plt>:
               	jmpq	*305330(%rip)           # 0x45e0c8 <_GLOBAL_OFFSET_TABLE_+0xe0>
               	pushq	$25
               	jmp	0x413670 <.plt>

<__errno_location@plt>:
               	jmpq	*305322(%rip)           # 0x45e0d0 <_GLOBAL_OFFSET_TABLE_+0xe8>
               	pushq	$26
               	jmp	0x413670 <.plt>

<strerror@plt>:
               	jmpq	*305314(%rip)           # 0x45e0d8 <_GLOBAL_OFFSET_TABLE_+0xf0>
               	pushq	$27
               	jmp	0x413670 <.plt>

<munmap@plt>:
               	jmpq	*305306(%rip)           # 0x45e0e0 <_GLOBAL_OFFSET_TABLE_+0xf8>
               	pushq	$28
               	jmp	0x413670 <.plt>

<vsnprintf@plt>:
               	jmpq	*305298(%rip)           # 0x45e0e8 <_GLOBAL_OFFSET_TABLE_+0x100>
               	pushq	$29
               	jmp	0x413670 <.plt>

<strncpy@plt>:
               	jmpq	*305290(%rip)           # 0x45e0f0 <_GLOBAL_OFFSET_TABLE_+0x108>
               	pushq	$30
               	jmp	0x413670 <.plt>

<strncat@plt>:
               	jmpq	*305282(%rip)           # 0x45e0f8 <_GLOBAL_OFFSET_TABLE_+0x110>
               	pushq	$31
               	jmp	0x413670 <.plt>

<__ctype_toupper_loc@plt>:
               	jmpq	*305274(%rip)           # 0x45e100 <_GLOBAL_OFFSET_TABLE_+0x118>
               	pushq	$32
               	jmp	0x413670 <.plt>

<strstr@plt>:
               	jmpq	*305266(%rip)           # 0x45e108 <_GLOBAL_OFFSET_TABLE_+0x120>
               	pushq	$33
               	jmp	0x413670 <.plt>

<strtol@plt>:
               	jmpq	*305258(%rip)           # 0x45e110 <_GLOBAL_OFFSET_TABLE_+0x128>
               	pushq	$34
               	jmp	0x413670 <.plt>

<madvise@plt>:
               	jmpq	*305250(%rip)           # 0x45e118 <_GLOBAL_OFFSET_TABLE_+0x130>
               	pushq	$35
               	jmp	0x413670 <.plt>

<access@plt>:
               	jmpq	*305242(%rip)           # 0x45e120 <_GLOBAL_OFFSET_TABLE_+0x138>
               	pushq	$36
               	jmp	0x413670 <.plt>

<mprotect@plt>:
               	jmpq	*305234(%rip)           # 0x45e128 <_GLOBAL_OFFSET_TABLE_+0x140>
               	pushq	$37
               	jmp	0x413670 <.plt>

<write@plt>:
               	jmpq	*305226(%rip)           # 0x45e130 <_GLOBAL_OFFSET_TABLE_+0x148>
               	pushq	$38
               	jmp	0x413670 <.plt>

<abort@plt>:
               	jmpq	*305218(%rip)           # 0x45e138 <_GLOBAL_OFFSET_TABLE_+0x150>
               	pushq	$39
               	jmp	0x413670 <.plt>

<dladdr@plt>:
               	jmpq	*305210(%rip)           # 0x45e140 <_GLOBAL_OFFSET_TABLE_+0x158>
               	pushq	$40
               	jmp	0x413670 <.plt>

<strrchr@plt>:
               	jmpq	*305202(%rip)           # 0x45e148 <_GLOBAL_OFFSET_TABLE_+0x160>
               	pushq	$41
               	jmp	0x413670 <.plt>

<open@plt>:
               	jmpq	*305194(%rip)           # 0x45e150 <_GLOBAL_OFFSET_TABLE_+0x168>
               	pushq	$42
               	jmp	0x413670 <.plt>

<__fxstat@plt>:
               	jmpq	*305186(%rip)           # 0x45e158 <_GLOBAL_OFFSET_TABLE_+0x170>
               	pushq	$43
               	jmp	0x413670 <.plt>

<_Unwind_Backtrace@plt>:
               	jmpq	*305178(%rip)           # 0x45e160 <_GLOBAL_OFFSET_TABLE_+0x178>
               	pushq	$44
               	jmp	0x413670 <.plt>

<_Unwind_GetIP@plt>:
               	jmpq	*305170(%rip)           # 0x45e168 <_GLOBAL_OFFSET_TABLE_+0x180>
               	pushq	$45
               	jmp	0x413670 <.plt>

<bcmp@plt>:
               	jmpq	*305162(%rip)           # 0x45e170 <_GLOBAL_OFFSET_TABLE_+0x188>
               	pushq	$46
               	jmp	0x413670 <.plt>

<pthread_cond_signal@plt>:
               	jmpq	*305154(%rip)           # 0x45e178 <_GLOBAL_OFFSET_TABLE_+0x190>
               	pushq	$47
               	jmp	0x413670 <.plt>

<pthread_mutex_init@plt>:
               	jmpq	*305146(%rip)           # 0x45e180 <_GLOBAL_OFFSET_TABLE_+0x198>
               	pushq	$48
               	jmp	0x413670 <.plt>

<pthread_cond_init@plt>:
               	jmpq	*305138(%rip)           # 0x45e188 <_GLOBAL_OFFSET_TABLE_+0x1a0>
               	pushq	$49
               	jmp	0x413670 <.plt>

<pthread_mutex_destroy@plt>:
               	jmpq	*305130(%rip)           # 0x45e190 <_GLOBAL_OFFSET_TABLE_+0x1a8>
               	pushq	$50
               	jmp	0x413670 <.plt>

<pthread_cond_destroy@plt>:
               	jmpq	*305122(%rip)           # 0x45e198 <_GLOBAL_OFFSET_TABLE_+0x1b0>
               	pushq	$51
               	jmp	0x413670 <.plt>

<pthread_once@plt>:
               	jmpq	*305114(%rip)           # 0x45e1a0 <_GLOBAL_OFFSET_TABLE_+0x1b8>
               	pushq	$52
               	jmp	0x413670 <.plt>

<pthread_getspecific@plt>:
               	jmpq	*305106(%rip)           # 0x45e1a8 <_GLOBAL_OFFSET_TABLE_+0x1c0>
               	pushq	$53
               	jmp	0x413670 <.plt>

<pthread_detach@plt>:
               	jmpq	*305098(%rip)           # 0x45e1b0 <_GLOBAL_OFFSET_TABLE_+0x1c8>
               	pushq	$54
               	jmp	0x413670 <.plt>

<pthread_cond_broadcast@plt>:
               	jmpq	*305090(%rip)           # 0x45e1b8 <_GLOBAL_OFFSET_TABLE_+0x1d0>
               	pushq	$55
               	jmp	0x413670 <.plt>

<sleep@plt>:
               	jmpq	*305082(%rip)           # 0x45e1c0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
               	pushq	$56
               	jmp	0x413670 <.plt>

<_Exit@plt>:
               	jmpq	*305074(%rip)           # 0x45e1c8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
               	pushq	$57
               	jmp	0x413670 <.plt>

<_Unwind_GetDataRelBase@plt>:
               	jmpq	*305066(%rip)           # 0x45e1d0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
               	pushq	$58
               	jmp	0x413670 <.plt>

<_Unwind_GetTextRelBase@plt>:
               	jmpq	*305058(%rip)           # 0x45e1d8 <_GLOBAL_OFFSET_TABLE_+0x1f0>
               	pushq	$59
               	jmp	0x413670 <.plt>

<_Unwind_GetRegionStart@plt>:
               	jmpq	*305050(%rip)           # 0x45e1e0 <_GLOBAL_OFFSET_TABLE_+0x1f8>
               	pushq	$60
               	jmp	0x413670 <.plt>

<_Unwind_GetLanguageSpecificData@plt>:
               	jmpq	*305042(%rip)           # 0x45e1e8 <_GLOBAL_OFFSET_TABLE_+0x200>
               	pushq	$61
               	jmp	0x413670 <.plt>

<_Unwind_GetIPInfo@plt>:
               	jmpq	*305034(%rip)           # 0x45e1f0 <_GLOBAL_OFFSET_TABLE_+0x208>
               	pushq	$62
               	jmp	0x413670 <.plt>

<_Unwind_SetGR@plt>:
               	jmpq	*305026(%rip)           # 0x45e1f8 <_GLOBAL_OFFSET_TABLE_+0x210>
               	pushq	$63
               	jmp	0x413670 <.plt>

<_Unwind_SetIP@plt>:
               	jmpq	*305018(%rip)           # 0x45e200 <_GLOBAL_OFFSET_TABLE_+0x218>
               	pushq	$64
               	jmp	0x413670 <.plt>

<strcmp@plt>:
               	jmpq	*305010(%rip)           # 0x45e208 <_GLOBAL_OFFSET_TABLE_+0x220>
               	pushq	$65
               	jmp	0x413670 <.plt>

<malloc@plt>:
               	jmpq	*305002(%rip)           # 0x45e210 <_GLOBAL_OFFSET_TABLE_+0x228>
               	pushq	$66
               	jmp	0x413670 <.plt>

<_Unwind_RaiseException@plt>:
               	jmpq	*304994(%rip)           # 0x45e218 <_GLOBAL_OFFSET_TABLE_+0x230>
               	pushq	$67
               	jmp	0x413670 <.plt>

<_Unwind_DeleteException@plt>:
               	jmpq	*304986(%rip)           # 0x45e220 <_GLOBAL_OFFSET_TABLE_+0x238>
               	pushq	$68
               	jmp	0x413670 <.plt>

<_Unwind_Resume_or_Rethrow@plt>:
               	jmpq	*304978(%rip)           # 0x45e228 <_GLOBAL_OFFSET_TABLE_+0x240>
               	pushq	$69
               	jmp	0x413670 <.plt>

<fputc@plt>:
               	jmpq	*304970(%rip)           # 0x45e230 <_GLOBAL_OFFSET_TABLE_+0x248>
               	pushq	$70
               	jmp	0x413670 <.plt>

<pthread_key_delete@plt>:
               	jmpq	*304962(%rip)           # 0x45e238 <_GLOBAL_OFFSET_TABLE_+0x250>
               	pushq	$71
               	jmp	0x413670 <.plt>

<__cxa_atexit@plt>:
               	jmpq	*304954(%rip)           # 0x45e240 <_GLOBAL_OFFSET_TABLE_+0x258>
               	pushq	$72
               	jmp	0x413670 <.plt>

<pthread_cond_wait@plt>:
               	jmpq	*304946(%rip)           # 0x45e248 <_GLOBAL_OFFSET_TABLE_+0x260>
               	pushq	$73
               	jmp	0x413670 <.plt>

<ceil@plt>:
               	jmpq	*304938(%rip)           # 0x45e250 <_GLOBAL_OFFSET_TABLE_+0x268>
               	pushq	$74
               	jmp	0x413670 <.plt>

<floor@plt>:
               	jmpq	*304930(%rip)           # 0x45e258 <_GLOBAL_OFFSET_TABLE_+0x270>
               	pushq	$75
               	jmp	0x413670 <.plt>

<memchr@plt>:
               	jmpq	*304922(%rip)           # 0x45e260 <_GLOBAL_OFFSET_TABLE_+0x278>
               	pushq	$76
               	jmp	0x413670 <.plt>

<pthread_join@plt>:
               	jmpq	*304914(%rip)           # 0x45e268 <_GLOBAL_OFFSET_TABLE_+0x280>
               	pushq	$77
               	jmp	0x413670 <.plt>

<pthread_create@plt>:
               	jmpq	*304906(%rip)           # 0x45e270 <_GLOBAL_OFFSET_TABLE_+0x288>
               	pushq	$78
               	jmp	0x413670 <.plt>

<get_nprocs@plt>:
               	jmpq	*304898(%rip)           # 0x45e278 <_GLOBAL_OFFSET_TABLE_+0x290>
               	pushq	$79
               	jmp	0x413670 <.plt>

<nanosleep@plt>:
               	jmpq	*304890(%rip)           # 0x45e280 <_GLOBAL_OFFSET_TABLE_+0x298>
               	pushq	$80
               	jmp	0x413670 <.plt>

<_ITM_RU1@plt>:
               	jmpq	*304882(%rip)           # 0x45e288 <_GLOBAL_OFFSET_TABLE_+0x2a0>
               	pushq	$81
               	jmp	0x413670 <.plt>

<_ZGTtnam@plt>:
               	jmpq	*304874(%rip)           # 0x45e290 <_GLOBAL_OFFSET_TABLE_+0x2a8>
               	pushq	$82
               	jmp	0x413670 <.plt>

<_ITM_memcpyRtWn@plt>:
               	jmpq	*304866(%rip)           # 0x45e298 <_GLOBAL_OFFSET_TABLE_+0x2b0>
               	pushq	$83
               	jmp	0x413670 <.plt>

<_ITM_RU8@plt>:
               	jmpq	*304858(%rip)           # 0x45e2a0 <_GLOBAL_OFFSET_TABLE_+0x2b8>
               	pushq	$84
               	jmp	0x413670 <.plt>

<_ITM_addUserCommitAction@plt>:
               	jmpq	*304850(%rip)           # 0x45e2a8 <_GLOBAL_OFFSET_TABLE_+0x2c0>
               	pushq	$85
               	jmp	0x413670 <.plt>

<_ITM_memcpyRnWt@plt>:
               	jmpq	*304842(%rip)           # 0x45e2b0 <_GLOBAL_OFFSET_TABLE_+0x2c8>
               	pushq	$86
               	jmp	0x413670 <.plt>

<_ZGTtdlPv@plt>:
               	jmpq	*304834(%rip)           # 0x45e2b8 <_GLOBAL_OFFSET_TABLE_+0x2d0>
               	pushq	$87
               	jmp	0x413670 <.plt>

<fopen@plt>:
               	jmpq	*304826(%rip)           # 0x45e2c0 <_GLOBAL_OFFSET_TABLE_+0x2d8>
               	pushq	$88
               	jmp	0x413670 <.plt>

<strtoul@plt>:
               	jmpq	*304818(%rip)           # 0x45e2c8 <_GLOBAL_OFFSET_TABLE_+0x2e0>
               	pushq	$89
               	jmp	0x413670 <.plt>

<fclose@plt>:
               	jmpq	*304810(%rip)           # 0x45e2d0 <_GLOBAL_OFFSET_TABLE_+0x2e8>
               	pushq	$90
               	jmp	0x413670 <.plt>

<fileno@plt>:
               	jmpq	*304802(%rip)           # 0x45e2d8 <_GLOBAL_OFFSET_TABLE_+0x2f0>
               	pushq	$91
               	jmp	0x413670 <.plt>

<read@plt>:
               	jmpq	*304794(%rip)           # 0x45e2e0 <_GLOBAL_OFFSET_TABLE_+0x2f8>
               	pushq	$92
               	jmp	0x413670 <.plt>

<ioctl@plt>:
               	jmpq	*304786(%rip)           # 0x45e2e8 <_GLOBAL_OFFSET_TABLE_+0x300>
               	pushq	$93
               	jmp	0x413670 <.plt>

Disassembly of section .text:

<_GLOBAL__sub_I_GlobalData.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 313317(%rip)     # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	movups	%xmm0, 313294(%rip)     # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	movl	$1, 313316(%rip)        # 0x460470 <kotlin::mm::GlobalData::instance_+0x38>
               	movq	$0, 313337(%rip)        # 0x460490 <kotlin::mm::GlobalData::instance_+0x58>
               	movups	%xmm0, 313302(%rip)     # 0x460474 <kotlin::mm::GlobalData::instance_+0x3c>
               	movq	$0, 313307(%rip)        # 0x460484 <kotlin::mm::GlobalData::instance_+0x4c>
               	leaq	313320(%rip), %rax      # 0x460498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 313321(%rip)      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x68>
               	movq	%rax, 313306(%rip)      # 0x460498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	$0, 313311(%rip)        # 0x4604a8 <kotlin::mm::GlobalData::instance_+0x70>
               	leaq	313312(%rip), %rax      # 0x4604b0 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	%rax, 313313(%rip)      # 0x4604b8 <kotlin::mm::GlobalData::instance_+0x80>
               	movq	%rax, 313298(%rip)      # 0x4604b0 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	$0, 313303(%rip)        # 0x4604c0 <kotlin::mm::GlobalData::instance_+0x88>
               	movb	$0, 313304(%rip)        # 0x4604c8 <kotlin::mm::GlobalData::instance_+0x90>
               	leaq	313305(%rip), %rax      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 313306(%rip)      # 0x4604d8 <kotlin::mm::GlobalData::instance_+0xa0>
               	movq	%rax, 313291(%rip)      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	$0, 313296(%rip)        # 0x4604e0 <kotlin::mm::GlobalData::instance_+0xa8>
               	leaq	313297(%rip), %rax      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%rax, 313298(%rip)      # 0x4604f0 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%rax, 313283(%rip)      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	$0, 313288(%rip)        # 0x4604f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 313289(%rip)        # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	leaq	313290(%rip), %rax      # 0x460508 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 313291(%rip)      # 0x460510 <kotlin::mm::GlobalData::instance_+0xd8>
               	movq	%rax, 313276(%rip)      # 0x460508 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	$0, 313281(%rip)        # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	leaq	313282(%rip), %rax      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%rax, 313283(%rip)      # 0x460528 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%rax, 313268(%rip)      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	$0, 313273(%rip)        # 0x460530 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 313274(%rip)        # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	movl	$1, %edi
               	movl	$512, %esi              # imm = 0x200
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	addq	$8, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%r13)
               	movups	%xmm0, 32(%r13)
               	movb	$0, 48(%r13)
               	leaq	56(%r13), %rcx
               	movl	$100000, 56(%r13)       # imm = 0x186A0
               	movq	$10240, 64(%r13)        # imm = 0x2800
               	movb	$1, 72(%r13)
               	movaps	192602(%rip), %xmm0     # 0x442e20 <_IO_stdin_used+0x60>
               	movups	%xmm0, 80(%r13)
               	movabsq	$4602678819172646912, %rdx # imm = 0x3FE0000000000000
               	movq	%rdx, 96(%r13)
               	movaps	192592(%rip), %xmm0     # 0x442e30 <_IO_stdin_used+0x70>
               	movups	%xmm0, 104(%r13)
               	leaq	160(%r13), %r14
               	movq	%rax, 160(%r13)
               	movq	%rcx, 168(%r13)
               	leaq	176(%r13), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 176(%r13)
               	movups	%xmm0, 192(%r13)
               	movups	%xmm0, 208(%r13)
               	movq	%rbp, 224(%r13)
               	leaq	232(%r13), %rdi
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	movq	$0, 280(%r13)
               	movq	%rbp, 288(%r13)
               	leaq	296(%r13), %rdi
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	movq	$0, 344(%r13)
               	movq	%rbp, 352(%r13)
               	leaq	360(%r13), %rdi
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	movq	$0, 408(%r13)
               	movq	%rbp, 416(%r13)
               	leaq	424(%r13), %rdi
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	movb	$0, 472(%r13)
               	movq	$0, 480(%r13)
               	movl	$1, %edi
               	movl	$312, %esi              # imm = 0x138
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	$0, 32(%rax)
               	leaq	40(%rax), %rdi
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movups	%xmm0, 88(%rbx)
               	movq	$0, 120(%rbx)
               	movq	%r14, 128(%rbx)
               	leaq	73081(%rip), %rax       # 0x425c60 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 144(%rbx)
               	leaq	73115(%rip), %rax       # 0x425c90 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>
               	movq	%rax, 152(%rbx)
               	movq	$0, 160(%rbx)
               	movw	$256, 168(%rbx)         # imm = 0x100
               	movups	%xmm0, 176(%rbx)
               	movups	%xmm0, 192(%rbx)
               	movq	$0, 208(%rbx)
               	leaq	216(%rbx), %rdi
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	movb	$0, 264(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 272(%rbx)
               	movups	%xmm0, 288(%rbx)
               	movq	$0, 304(%rbx)
               	movq	%rbx, 488(%r13)
               	leaq	316826(%rip), %rax      # 0x461500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 496(%r13)
               	movq	168(%r13), %r12
               	movq	%r14, 216(%rsp)
               	leaq	73117(%rip), %rax       # 0x425d20 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
               	movq	%rax, 240(%rsp)
               	leaq	73118(%rip), %rax       # 0x425d30 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 232(%rsp)
               	movq	232(%rsp), %rax
               	movq	240(%rsp), %rcx
               	movq	$0, 232(%rsp)
               	movups	72(%r12), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movq	216(%rsp), %rdx
               	movq	%rdx, 72(%r12)
               	movq	224(%rsp), %rdx
               	movq	%rdx, 80(%r12)
               	movdqu	88(%r12), %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	movq	%rax, 88(%r12)
               	movq	%rcx, 96(%r12)
               	movq	%xmm0, %rax
               	testq	%rax, %rax
               	je	0x41400b <_GLOBAL__sub_I_GlobalData.cpp+0x3ab>
               	leaq	48(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	$0, 200(%rsp)
               	movq	88(%r12), %rcx
               	testq	%rcx, %rcx
               	movq	%rbp, 248(%rsp)
               	movq	%r14, 256(%rsp)
               	je	0x41405d <_GLOBAL__sub_I_GlobalData.cpp+0x3fd>
               	leaq	72(%r12), %rsi
               	leaq	184(%rsp), %rdi
               	movl	$2, %edx
               	callq	*%rcx
               	movups	88(%r12), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movups	%xmm0, 200(%rsp)
               	jmp	0x41406d <_GLOBAL__sub_I_GlobalData.cpp+0x40d>
               	movups	200(%rsp), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movl	$1, %edi
               	movl	$224, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movups	184(%rsp), %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 200(%rsp)
               	movaps	128(%rsp), %xmm0
               	movaps	%xmm0, 160(%rsp)
               	leaq	296750(%rip), %rax      # 0x45c7e0 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rbx)
               	movq	%r12, 8(%rbx)
               	leaq	312264(%rip), %rax      # 0x460488 <kotlin::mm::GlobalData::instance_+0x50>
               	movq	%rax, 16(%rbx)
               	movq	%r12, 24(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%rbx)
               	movq	%r12, 48(%rbx)
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 56(%rbx)
               	movaps	144(%rsp), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movups	64(%rbx), %xmm1
               	movaps	%xmm1, 144(%rsp)
               	movups	%xmm0, 64(%rbx)
               	movaps	160(%rsp), %xmm0
               	movq	$0, 160(%rsp)
               	movq	88(%rbx), %rax
               	movq	%rax, 168(%rsp)
               	movups	%xmm0, 80(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 112(%rbx)
               	movups	%xmm0, 96(%rbx)
               	movq	$0, 128(%rbx)
               	leaq	136(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	callq	0x43cb60 <std::condition_variable::condition_variable()>
               	movb	$1, 184(%rbx)
               	movabsq	$9223372036854775807, %r14 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r14), %rax
               	testq	%rbp, %rbp
               	cmovnsq	%r14, %rax
               	imulq	$1000, %rbp, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r14, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	leaq	96(%rbx), %rcx
               	movq	%rax, 200(%rbx)
               	movb	$0, 208(%rbx)
               	leaq	16(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rsp)
               	movups	%xmm0, 24(%rsp)
               	movq	%rax, (%rsp)
               	movabsq	$8243114992121955143, %rax # imm = 0x72656D6954204347
               	movq	%rax, 16(%rsp)
               	movabsq	$7233174018586845298, %rax # imm = 0x6461657268742072
               	movq	%rax, 23(%rsp)
               	movq	$15, 8(%rsp)
               	movq	(%rsp), %rbp
               	movb	$0, 15(%rbp)
               	movb	$1, 32(%rsp)
               	movq	$0, 216(%rbx)
               	movq	%rbx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	leaq	61018(%rip), %rax       # 0x423070 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rax, %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	movb	$0, 112(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x414275 <_GLOBAL__sub_I_GlobalData.cpp+0x615>
               	leaq	96(%rsp), %rax
               	movq	%rax, 80(%rsp)
               	movq	8(%rsp), %r15
               	cmpq	$15, %r15
               	jbe	0x414263 <_GLOBAL__sub_I_GlobalData.cpp+0x603>
               	testq	%r15, %r15
               	js	0x41462e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
               	leaq	1(%r15), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 80(%rsp)
               	movq	%r15, 96(%rsp)
               	testq	%r15, %r15
               	je	0x41428b <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
               	cmpq	$1, %r15
               	jne	0x41427d <_GLOBAL__sub_I_GlobalData.cpp+0x61d>
               	movb	(%rbp), %cl
               	movb	%cl, (%rax)
               	jmp	0x41428b <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
               	movb	$1, %r14b
               	xorl	%r15d, %r15d
               	jmp	0x4142a5 <_GLOBAL__sub_I_GlobalData.cpp+0x645>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	movq	%r15, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r15, 88(%rsp)
               	movq	80(%rsp), %rax
               	movb	$0, (%rax,%r15)
               	movb	$1, 112(%rsp)
               	movb	$1, %r15b
               	xorl	%r14d, %r14d
               	leaq	61460(%rip), %rbp       # 0x4232c0 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rbp, 120(%rsp)
               	movl	$88, %edi
               	callq	0x43bf19 <operator new(unsigned long)>
               	leaq	216(%rbx), %rdi
               	leaq	296271(%rip), %rcx      # 0x45c818 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rcx, (%rax)
               	movaps	48(%rsp), %xmm0
               	movups	%xmm0, 8(%rax)
               	movdqa	64(%rsp), %xmm0
               	movdqu	%xmm0, 24(%rax)
               	movb	$0, 72(%rax)
               	testb	%r14b, %r14b
               	leaq	16(%rsp), %r14
               	jne	0x41433f <_GLOBAL__sub_I_GlobalData.cpp+0x6df>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	movq	%rdx, 40(%rax)
               	movq	80(%rsp), %rsi
               	leaq	96(%rsp), %rcx
               	cmpq	%rcx, %rsi
               	je	0x414317 <_GLOBAL__sub_I_GlobalData.cpp+0x6b7>
               	movq	%rsi, 40(%rax)
               	movq	96(%rsp), %rdx
               	movq	%rdx, 56(%rax)
               	jmp	0x41431f <_GLOBAL__sub_I_GlobalData.cpp+0x6bf>
               	movdqu	(%rcx), %xmm0
               	movdqu	%xmm0, (%rdx)
               	movq	88(%rsp), %rdx
               	movq	%rdx, 48(%rax)
               	movq	%rcx, 80(%rsp)
               	movq	$0, 88(%rsp)
               	movb	$0, 96(%rsp)
               	movb	$1, 72(%rax)
               	movq	%rbp, 80(%rax)
               	movq	%rax, 40(%rsp)
               	movq	302193(%rip), %rdx      # 0x45dfc0 <write+0x45dfc0>
               	leaq	40(%rsp), %rsi
               	callq	0x43f14e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414369 <_GLOBAL__sub_I_GlobalData.cpp+0x709>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	je	0x41438d <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
               	movq	80(%rsp), %rdi
               	leaq	96(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41438d <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x4143a2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x4143a2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
               	callq	0x4136d0 <free@plt>
               	movq	160(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143c1 <_GLOBAL__sub_I_GlobalData.cpp+0x761>
               	leaq	144(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	64(%r12), %rbp
               	movq	%rbx, 64(%r12)
               	testq	%rbp, %rbp
               	je	0x4143e1 <_GLOBAL__sub_I_GlobalData.cpp+0x781>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	200(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414400 <_GLOBAL__sub_I_GlobalData.cpp+0x7a0>
               	leaq	184(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	232(%rsp), %rax
               	testq	%rax, %rax
               	je	0x41441f <_GLOBAL__sub_I_GlobalData.cpp+0x7bf>
               	leaq	216(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	movdqa	%xmm0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	movq	%r14, (%rsp)
               	movabsq	$7018141387277222727, %rax # imm = 0x6165726874204347
               	movq	%rax, 16(%rsp)
               	movw	$100, 24(%rsp)
               	movq	$9, 8(%rsp)
               	movb	$1, 32(%rsp)
               	movq	$0, 184(%rsp)
               	movq	256(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movb	$0, 88(%rsp)
               	leaq	72(%rsp), %rbp
               	movq	%rbp, 56(%rsp)
               	movq	8(%rsp), %rbx
               	cmpq	$15, %rbx
               	jbe	0x4144ba <_GLOBAL__sub_I_GlobalData.cpp+0x85a>
               	testq	%rbx, %rbx
               	js	0x41462e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
               	leaq	1(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 72(%rsp)
               	testq	%rbx, %rbx
               	jne	0x4144c2 <_GLOBAL__sub_I_GlobalData.cpp+0x862>
               	jmp	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	movq	%rbp, %rax
               	testq	%rbx, %rbx
               	je	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	cmpq	$1, %rbx
               	jne	0x4144d0 <_GLOBAL__sub_I_GlobalData.cpp+0x870>
               	movb	16(%rsp), %cl
               	movb	%cl, (%rax)
               	jmp	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r13, %r12
               	addq	$480, %r12              # imm = 0x1E0
               	movq	%rbx, 64(%rsp)
               	movq	56(%rsp), %rax
               	movb	$0, (%rax,%rbx)
               	movb	$1, 88(%rsp)
               	leaq	71774(%rip), %rbx       # 0x425d60 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
               	movq	%rbx, 96(%rsp)
               	movl	$64, %edi
               	callq	0x43bf19 <operator new(unsigned long)>
               	leaq	295840(%rip), %rcx      # 0x45c8b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	movq	56(%rsp), %rdx
               	cmpq	%rbp, %rdx
               	je	0x41454c <_GLOBAL__sub_I_GlobalData.cpp+0x8ec>
               	movq	%rdx, 16(%rax)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x414555 <_GLOBAL__sub_I_GlobalData.cpp+0x8f5>
               	movdqu	(%rbp), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rbp, 56(%rsp)
               	movq	$0, 64(%rsp)
               	movb	$0, 72(%rsp)
               	movb	$1, 48(%rax)
               	movq	%rbx, 56(%rax)
               	movq	%rax, 144(%rsp)
               	movq	301624(%rip), %rdx      # 0x45dfc0 <write+0x45dfc0>
               	leaq	184(%rsp), %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x43f14e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4145b0 <_GLOBAL__sub_I_GlobalData.cpp+0x950>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	je	0x4145d2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
               	movq	56(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x4145d2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, (%r12)
               	jne	0x414889 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
               	movq	184(%rsp), %rax
               	movq	%rax, (%r12)
               	movq	$0, 184(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x41460a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x41460a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
               	callq	0x4136d0 <free@plt>
               	movl	$0, 504(%r13)
               	movq	%r13, 311076(%rip)      # 0x460540 <kotlin::mm::GlobalData::instance_+0x108>
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	198667(%rip), %rdi      # 0x444e40 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4361b0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	200(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414674 <_GLOBAL__sub_I_GlobalData.cpp+0xa14>
               	leaq	184(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, 128(%rsp)
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4146a7 <_GLOBAL__sub_I_GlobalData.cpp+0xa47>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	jne	0x4146c4 <_GLOBAL__sub_I_GlobalData.cpp+0xa64>
               	jmp	0x4146d3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	movq	%rax, 128(%rsp)
               	movq	56(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x4146d3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x4146e8 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x4146e8 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
               	callq	0x4136d0 <free@plt>
               	movq	488(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x41485c <_GLOBAL__sub_I_GlobalData.cpp+0xbfc>
               	leaq	88(%rbx), %rbp
               	cmpq	$0, 301236(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x414716 <_GLOBAL__sub_I_GlobalData.cpp+0xab6>
               	movq	%rbp, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x41479d <_GLOBAL__sub_I_GlobalData.cpp+0xb3d>
               	cmpq	$0, (%rbx)
               	jne	0x414734 <_GLOBAL__sub_I_GlobalData.cpp+0xad4>
               	cmpq	$0, 301204(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movq	%rbp, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movb	$1, 168(%rbx)
               	leaq	40(%rbx), %r15
               	movq	%r15, %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	cmpq	$0, 301161(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x414759 <_GLOBAL__sub_I_GlobalData.cpp+0xaf9>
               	movq	%rbp, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::thread::join()>
               	movb	$0, 168(%rbx)
               	cmpq	$0, 301128(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4147a4 <_GLOBAL__sub_I_GlobalData.cpp+0xb44>
               	movq	%rbp, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x41488e <_GLOBAL__sub_I_GlobalData.cpp+0xc2e>
               	movb	$1, 169(%rbx)
               	movq	%r15, %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	cmpq	$0, 301087(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	jne	0x41472a <_GLOBAL__sub_I_GlobalData.cpp+0xaca>
               	jmp	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movb	$1, 169(%rbx)
               	movq	%r15, %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	leaq	216(%rbx), %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	movq	144(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4147dc <_GLOBAL__sub_I_GlobalData.cpp+0xb7c>
               	leaq	128(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	leaq	40(%rbx), %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	leaq	16(%rbx), %r15
               	movq	16(%rbx), %rbp
               	movq	$0, 16(%rbx)
               	movq	%rbp, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x41482e <_GLOBAL__sub_I_GlobalData.cpp+0xbce>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	48(%rsp), %r14
               	movq	%rbp, 48(%rsp)
               	testq	%r14, %r14
               	je	0x4147fa <_GLOBAL__sub_I_GlobalData.cpp+0xb9a>
               	movq	%r14, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x4147fa <_GLOBAL__sub_I_GlobalData.cpp+0xb9a>
               	leaq	48(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r15, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpq	$0, (%rbx)
               	je	0x414854 <_GLOBAL__sub_I_GlobalData.cpp+0xbf4>
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x414889 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 488(%r13)
               	movq	%r12, %rdi
               	callq	0x423750 <kotlin::ScopedThread::~ScopedThread()>
               	movq	248(%rsp), %rdi
               	callq	0x427070 <GCStateHolder::~GCStateHolder()>
               	movq	128(%rsp), %rdi
               	callq	0x423060 <__clang_call_terminate>
               	callq	0x43c2c3 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x423740 <std::thread::~thread()>
               	movq	%rbp, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4148db <_GLOBAL__sub_I_GlobalData.cpp+0xc7b>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	movb	112(%rsp), %r15b
               	jmp	0x4148ee <_GLOBAL__sub_I_GlobalData.cpp+0xc8e>
               	movq	%rax, %rbx
               	testb	%r15b, %r15b
               	je	0x414907 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
               	movq	80(%rsp), %rdi
               	leaq	96(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414907 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x414921 <_GLOBAL__sub_I_GlobalData.cpp+0xcc1>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414921 <_GLOBAL__sub_I_GlobalData.cpp+0xcc1>
               	callq	0x4136d0 <free@plt>
               	movq	128(%rsp), %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<_GLOBAL__sub_I_CallsChecker.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	310355(%rip), %rax      # 0x4605a8 <(anonymous namespace)::checker+0x30>
               	movq	%rax, 310300(%rip)      # 0x460578 <(anonymous namespace)::checker>
               	movq	$1, 310297(%rip)        # 0x460580 <(anonymous namespace)::checker+0x8>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 310295(%rip)     # 0x460588 <(anonymous namespace)::checker+0x10>
               	movl	$1065353216, 310301(%rip) # imm = 0x3F800000
                                                # 0x460598 <(anonymous namespace)::checker+0x20>
               	leaq	310302(%rip), %rdi      # 0x4605a0 <(anonymous namespace)::checker+0x28>
               	xorl	%ebp, %ebp
               	movl	$3792, %edx             # imm = 0xED0
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movl	$237, %ebx
               	leaq	302996(%rip), %r12      # 0x45e930 <Kotlin_callsCheckerGoodFunctionNames>
               	leaq	310229(%rip), %r15      # 0x460578 <(anonymous namespace)::checker>
               	jmp	0x4149d0 <_GLOBAL__sub_I_CallsChecker.cpp+0x90>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, 56(%r15,%rbp,2)
               	movq	%r14, 64(%r15,%rbp,2)
               	addq	$-1, %rbx
               	addq	$8, %rbp
               	cmpq	$1, %rbx
               	jbe	0x4149de <_GLOBAL__sub_I_CallsChecker.cpp+0x9e>
               	movq	(%rbp,%r12), %r14
               	testq	%r14, %r14
               	jne	0x4149b0 <_GLOBAL__sub_I_CallsChecker.cpp+0x70>
               	xorl	%eax, %eax
               	jmp	0x4149b8 <_GLOBAL__sub_I_CallsChecker.cpp+0x78>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414b06 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	leaq	310209(%rip), %rbx      # 0x4605b0 <(anonymous namespace)::checker+0x38>
               	leaq	313978(%rip), %rsi      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	movl	$14, %edx
               	movq	%rbx, %rdi
               	callq	0x4237a0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	leaq	310198(%rip), %rax      # 0x4605c0 <(anonymous namespace)::checker+0x48>
               	leaq	310431(%rip), %rbp      # 0x4606b0 <(anonymous namespace)::checker+0x138>
               	movq	%r15, %r13
               	negq	%r13
               	jmp	0x414a8c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	nopl	(%rax)
               	testl	%eax, %eax
               	js	0x414a40 <_GLOBAL__sub_I_CallsChecker.cpp+0x100>
               	movq	%r14, %rdi
               	callq	0x423c80 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	jne	0x414a8c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	jmp	0x414ae5 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	nopl	(%rax)
               	movups	(%r14), %xmm0
               	movaps	%xmm0, (%rsp)
               	leaq	(%r14,%r13), %rax
               	addq	$-56, %rax
               	testq	%rax, %rax
               	jle	0x414a75 <_GLOBAL__sub_I_CallsChecker.cpp+0x135>
               	shrq	$4, %rax
               	addq	$1, %rax
               	movq	%r14, %rcx
               	movups	-16(%rcx), %xmm0
               	movups	%xmm0, (%rcx)
               	addq	$-16, %rcx
               	addq	$-1, %rax
               	cmpq	$1, %rax
               	jg	0x414a60 <_GLOBAL__sub_I_CallsChecker.cpp+0x120>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, 310064(%rip)     # 0x4605b0 <(anonymous namespace)::checker+0x38>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	je	0x414ae5 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	movq	%rax, %r14
               	movq	(%rax), %rdx
               	movq	310039(%rip), %rax      # 0x4605b0 <(anonymous namespace)::checker+0x38>
               	movq	%rdx, %r12
               	subq	%rax, %r12
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x414ac0 <_GLOBAL__sub_I_CallsChecker.cpp+0x180>
               	movq	310025(%rip), %rsi      # 0x4605b8 <(anonymous namespace)::checker+0x40>
               	movq	24(%rbx), %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x414a20 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	cmpq	$2147483647, %r12       # imm = 0x7FFFFFFF
               	jg	0x414a24 <_GLOBAL__sub_I_CallsChecker.cpp+0xe4>
               	cmpq	$-2147483648, %r12      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %r12d
               	movl	%r12d, %eax
               	jmp	0x414a20 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414b06 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	movl	$312, %ebx              # imm = 0x138
               	leaq	(%r15,%rbx), %rdi
               	callq	0x423c80 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	addq	$16, %rbx
               	cmpq	$3832, %rbx             # imm = 0xEF8
               	jne	0x414af0 <_GLOBAL__sub_I_CallsChecker.cpp+0x1b0>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_ThreadSuspension.cpp>:
               	leaq	309793(%rip), %rdi      # 0x460548 <(anonymous namespace)::gSuspensionCondVar>
               	jmp	0x43cb60 <std::condition_variable::condition_variable()>
               	nopl	(%rax)

<_GLOBAL__sub_I_ConcurrentMarkAndSweep.cpp>:
               	leaq	313705(%rip), %rdi      # 0x4614a0 <(anonymous namespace)::markingCondVar>
               	jmp	0x43cb60 <std::condition_variable::condition_variable()>

<_GLOBAL__sub_I_eh_alloc.cc>:
               	xorl	%eax, %eax
               	leaq	413947(%rip), %rdi      # 0x479c40 <(anonymous namespace)::emergency_pool>
               	movl	$10, %ecx
               	pushq	%rdx
               	rep		stosl	%eax, %es:(%rdi)
               	movl	$72704, %edi            # imm = 0x11C00
               	movq	$72704, 413979(%rip)    # imm = 0x11C00
                                                # 0x479c78 <(anonymous namespace)::emergency_pool+0x38>
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, 413959(%rip)      # 0x479c70 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rax, %rax
               	jne	0x414b86 <_GLOBAL__sub_I_eh_alloc.cc+0x4a>
               	movq	$0, 413951(%rip)        # 0x479c78 <(anonymous namespace)::emergency_pool+0x38>
               	movq	$0, 413924(%rip)        # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x414b9c <_GLOBAL__sub_I_eh_alloc.cc+0x60>
               	movq	%rax, 413915(%rip)      # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	movq	$72704, (%rax)          # imm = 0x11C00
               	movq	$0, 8(%rax)
               	popq	%rax
               	retq

<_GLOBAL__sub_I_system_error.cc>:
               	pushq	%rax
               	leaq	300882(%rip), %rdx      # 0x45e2f8 <__dso_handle>
               	leaq	308747(%rip), %rsi      # 0x4601b8 <(anonymous namespace)::generic_category_instance>
               	leaq	164308(%rip), %rdi      # 0x43cd88 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	callq	0x413b00 <__cxa_atexit@plt>
               	leaq	300856(%rip), %rdx      # 0x45e2f8 <__dso_handle>
               	leaq	308713(%rip), %rsi      # 0x4601b0 <(anonymous namespace)::system_category_instance>
               	popq	%rcx
               	leaq	164247(%rip), %rdi      # 0x43cd66 <(anonymous namespace)::system_error_category::~system_error_category()>
               	jmp	0x413b00 <__cxa_atexit@plt>

<get_available_features>:
               	btl	$27, %edi
               	pushq	%rbx
               	movl	%edx, %r11d
               	jae	0x414c06 <get_available_features+0x32>
               	xorl	%ecx, %ecx
               	xgetbv
               	movl	%eax, %edx
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x414c06 <get_available_features+0x32>
               	andl	$230, %eax
               	xorl	%r10d, %r10d
               	movl	$1, %r9d
               	cmpl	$230, %eax
               	sete	%r10b
               	jmp	0x414c0c <get_available_features+0x38>
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	movl	%esi, %r8d
               	shrl	$15, %r8d
               	andl	$1, %r8d
               	btl	$23, %esi
               	jae	0x414c21 <get_available_features+0x4d>
               	orl	$2, %r8d
               	btl	$25, %esi
               	jae	0x414c2b <get_available_features+0x57>
               	orl	$8, %r8d
               	btl	$26, %esi
               	jae	0x414c35 <get_available_features+0x61>
               	orl	$16, %r8d
               	btl	$23, %edi
               	jae	0x414c3f <get_available_features+0x6b>
               	orl	$4, %r8d
               	btl	$25, %edi
               	jae	0x414c4c <get_available_features+0x78>
               	orl	$262144, %r8d           # imm = 0x40000
               	testb	$2, %dil
               	je	0x414c59 <get_available_features+0x85>
               	orl	$524288, %r8d           # imm = 0x80000
               	testb	$1, %dil
               	je	0x414c63 <get_available_features+0x8f>
               	orl	$32, %r8d
               	btl	$9, %edi
               	jae	0x414c6d <get_available_features+0x99>
               	orl	$64, %r8d
               	btl	$19, %edi
               	jae	0x414c77 <get_available_features+0xa3>
               	orb	$-128, %r8b
               	btl	$20, %edi
               	jae	0x414c84 <get_available_features+0xb0>
               	orl	$256, %r8d              # imm = 0x100
               	testl	%r9d, %r9d
               	je	0x414ca3 <get_available_features+0xcf>
               	btl	$28, %edi
               	jae	0x414c96 <get_available_features+0xc2>
               	orl	$512, %r8d              # imm = 0x200
               	btl	$12, %edi
               	jae	0x414ca3 <get_available_features+0xcf>
               	orl	$16384, %r8d            # imm = 0x4000
               	xorl	%esi, %esi
               	cmpl	$6, %r11d
               	jle	0x414db3 <get_available_features+0x1df>
               	movl	$7, %eax
               	movl	%esi, %ecx
               	cpuid
               	testb	$8, %bl
               	je	0x414cc4 <get_available_features+0xf0>
               	orl	$65536, %r8d            # imm = 0x10000
               	testl	%r9d, %r9d
               	je	0x414cd5 <get_available_features+0x101>
               	testb	$32, %bl
               	je	0x414cd5 <get_available_features+0x101>
               	orl	$1024, %r8d             # imm = 0x400
               	btl	$8, %ebx
               	jae	0x414ce2 <get_available_features+0x10e>
               	orl	$131072, %r8d           # imm = 0x20000
               	xorl	%esi, %esi
               	testl	%r10d, %r10d
               	je	0x414db3 <get_available_features+0x1df>
               	btl	$16, %ebx
               	jae	0x414cfa <get_available_features+0x126>
               	orl	$32768, %r8d            # imm = 0x8000
               	testl	%ebx, %ebx
               	jns	0x414d05 <get_available_features+0x131>
               	orl	$1048576, %r8d          # imm = 0x100000
               	btl	$30, %ebx
               	jae	0x414d12 <get_available_features+0x13e>
               	orl	$2097152, %r8d          # imm = 0x200000
               	btl	$17, %ebx
               	jae	0x414d1f <get_available_features+0x14b>
               	orl	$4194304, %r8d          # imm = 0x400000
               	btl	$28, %ebx
               	jae	0x414d2c <get_available_features+0x158>
               	orl	$8388608, %r8d          # imm = 0x800000
               	btl	$26, %ebx
               	jae	0x414d39 <get_available_features+0x165>
               	orl	$33554432, %r8d         # imm = 0x2000000
               	btl	$27, %ebx
               	jae	0x414d46 <get_available_features+0x172>
               	orl	$16777216, %r8d         # imm = 0x1000000
               	btl	$21, %ebx
               	jae	0x414d53 <get_available_features+0x17f>
               	orl	$134217728, %r8d        # imm = 0x8000000
               	testb	$2, %cl
               	je	0x414d5f <get_available_features+0x18b>
               	orl	$67108864, %r8d         # imm = 0x4000000
               	testb	$64, %cl
               	je	0x414d6b <get_available_features+0x197>
               	orl	$2147483648, %r8d       # imm = 0x80000000
               	movl	%ecx, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	btl	$10, %ecx
               	jae	0x414d7c <get_available_features+0x1a8>
               	orl	$2, %esi
               	btl	$11, %ecx
               	jae	0x414d85 <get_available_features+0x1b1>
               	orl	$4, %esi
               	btl	$12, %ecx
               	jae	0x414d8e <get_available_features+0x1ba>
               	orl	$8, %esi
               	btl	$14, %ecx
               	jae	0x414d9b <get_available_features+0x1c7>
               	orl	$1073741824, %r8d       # imm = 0x40000000
               	testb	$4, %dl
               	je	0x414da7 <get_available_features+0x1d3>
               	orl	$268435456, %r8d        # imm = 0x10000000
               	andb	$8, %dl
               	je	0x414db3 <get_available_features+0x1df>
               	orl	$536870912, %r8d        # imm = 0x20000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cpuid
               	cmpl	$2147483648, %eax       # imm = 0x80000000
               	jbe	0x414df3 <get_available_features+0x21f>
               	movl	$2147483649, %eax       # imm = 0x80000001
               	cpuid
               	testb	$64, %cl
               	je	0x414dd4 <get_available_features+0x200>
               	orl	$2048, %r8d             # imm = 0x800
               	testl	%r9d, %r9d
               	je	0x414df3 <get_available_features+0x21f>
               	btl	$16, %ecx
               	jae	0x414de6 <get_available_features+0x212>
               	orl	$4096, %r8d             # imm = 0x1000
               	btl	$11, %ecx
               	jae	0x414df3 <get_available_features+0x21f>
               	orl	$8192, %r8d             # imm = 0x2000
               	movl	%r8d, 413394(%rip)      # 0x479ccc <__cpu_model+0xc>
               	popq	%rbx
               	movl	%esi, 413391(%rip)      # 0x479cd0 <__cpu_features2>
               	retq

<__cpu_indicator_init>:
               	xorl	%r9d, %r9d
               	cmpl	$0, 413364(%rip)        # 0x479cc0 <__cpu_model>
               	jne	0x4151f6 <__cpu_indicator_init+0x3f4>
               	pushq	%rbx
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414e2b <__cpu_indicator_init+0x29>
               	movl	%r9d, %eax
               	cpuid
               	movl	%ebx, %r10d
               	movl	%eax, %r8d
               	testl	%eax, %eax
               	jg	0x414e3e <__cpu_indicator_init+0x3c>
               	movl	$3, 413323(%rip)        # 0x479cc0 <__cpu_model>
               	orl	$-1, %r9d
               	jmp	0x4151f1 <__cpu_indicator_init+0x3ef>
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414e2b <__cpu_indicator_init+0x29>
               	movl	$1, %eax
               	cpuid
               	movl	%edx, %esi
               	movl	%ecx, %edi
               	movl	%eax, %edx
               	movl	%eax, %r11d
               	shrl	$4, %edx
               	movl	%eax, %ecx
               	shrl	$8, %r11d
               	shrl	$12, %ecx
               	andl	$15, %edx
               	andl	$15, %r11d
               	andl	$240, %ecx
               	cmpl	$1970169159, %r10d      # imm = 0x756E6547
               	jne	0x4150c8 <__cpu_indicator_init+0x2c6>
               	cmpl	$6, %r11d
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	%edx, %eax
               	orl	%ecx, %eax
               	testb	%bl, %bl
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$62, %eax
               	je	0x415064 <__cpu_indicator_init+0x262>
               	ja	0x414f55 <__cpu_indicator_init+0x153>
               	cmpl	$38, %eax
               	je	0x41500a <__cpu_indicator_init+0x208>
               	ja	0x414ef9 <__cpu_indicator_init+0xf7>
               	cmpl	$28, %eax
               	je	0x41500a <__cpu_indicator_init+0x208>
               	ja	0x414ed8 <__cpu_indicator_init+0xd6>
               	cmpl	$23, %eax
               	je	0x4150a7 <__cpu_indicator_init+0x2a5>
               	cmpl	$26, %eax
               	je	0x415040 <__cpu_indicator_init+0x23e>
               	cmpl	$15, %eax
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	jmp	0x4150a7 <__cpu_indicator_init+0x2a5>
               	cmpl	$31, %eax
               	ja	0x414eeb <__cpu_indicator_init+0xe9>
               	cmpl	$30, %eax
               	jb	0x4150a7 <__cpu_indicator_init+0x2a5>
               	jmp	0x415040 <__cpu_indicator_init+0x23e>
               	cmpl	$37, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$47, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	ja	0x414f34 <__cpu_indicator_init+0x132>
               	cmpl	$44, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	ja	0x414f1d <__cpu_indicator_init+0x11b>
               	cmpl	$42, %eax
               	je	0x415058 <__cpu_indicator_init+0x256>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$45, %eax
               	je	0x415058 <__cpu_indicator_init+0x256>
               	cmpl	$46, %eax
               	je	0x415040 <__cpu_indicator_init+0x23e>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$58, %eax
               	je	0x415064 <__cpu_indicator_init+0x262>
               	ja	0x414f47 <__cpu_indicator_init+0x145>
               	cmpl	$55, %eax
               	jmp	0x414fc7 <__cpu_indicator_init+0x1c5>
               	cmpl	$60, %eax
               	je	0x415070 <__cpu_indicator_init+0x26e>
               	cmpl	$61, %eax
               	jmp	0x414f9e <__cpu_indicator_init+0x19c>
               	cmpl	$85, %eax
               	je	0x415094 <__cpu_indicator_init+0x292>
               	ja	0x414fa9 <__cpu_indicator_init+0x1a7>
               	cmpl	$71, %eax
               	je	0x41507c <__cpu_indicator_init+0x27a>
               	ja	0x414f82 <__cpu_indicator_init+0x180>
               	cmpl	$63, %eax
               	je	0x415070 <__cpu_indicator_init+0x26e>
               	cmpl	$69, %eax
               	jae	0x415070 <__cpu_indicator_init+0x26e>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$77, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	ja	0x414f92 <__cpu_indicator_init+0x190>
               	cmpl	$74, %eax
               	jmp	0x414fc7 <__cpu_indicator_init+0x1c5>
               	cmpl	$78, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	cmpl	$79, %eax
               	je	0x41507c <__cpu_indicator_init+0x27a>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$94, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	ja	0x414fce <__cpu_indicator_init+0x1cc>
               	cmpl	$87, %eax
               	je	0x415028 <__cpu_indicator_init+0x226>
               	jb	0x41507c <__cpu_indicator_init+0x27a>
               	cmpl	$90, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	cmpl	$93, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$133, %eax
               	je	0x415034 <__cpu_indicator_init+0x232>
               	ja	0x414fef <__cpu_indicator_init+0x1ed>
               	cmpl	$102, %eax
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	movabsq	$73014444035, %rax      # imm = 0x1100000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	cmpl	$142, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	cmpl	$158, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$1, 412848(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$6, 412833(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$7, 412818(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$11, 412806(%rip)       # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movabsq	$4294967299, %rax       # imm = 0x100000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$8589934595, %rax       # imm = 0x200000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$12884901891, %rax      # imm = 0x300000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$51539607555, %rax      # imm = 0xC00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$55834574851, %rax      # imm = 0xD00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$60129542147, %rax      # imm = 0xE00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$64424509443, %rax      # imm = 0xF00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$68719476739, %rax      # imm = 0x1000000003
               	movq	%rax, 412703(%rip)      # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$2, 412691(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	movl	%r8d, %edx
               	callq	0x414bd4 <get_available_features>
               	movl	$1, 412669(%rip)        # 0x479cc0 <__cpu_model>
               	jmp	0x4151e2 <__cpu_indicator_init+0x3e0>
               	cmpl	$1752462657, %r10d      # imm = 0x68747541
               	jne	0x4151e7 <__cpu_indicator_init+0x3e5>
               	cmpl	$15, %r11d
               	jne	0x4151d0 <__cpu_indicator_init+0x3ce>
               	shrl	$20, %eax
               	orl	%ecx, %edx
               	movzbl	%al, %eax
               	decl	%eax
               	cmpl	$7, %eax
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	leaq	201903(%rip), %rcx      # 0x4465a8 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::word_size+0x8>
               	movslq	(%rcx,%rax,4), %rax
               	addq	%rcx, %rax
               	jmpq	*%rax
               	movl	$4, 412600(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	cmpl	$4, %edx
               	je	0x41512e <__cpu_indicator_init+0x32c>
               	cmpl	$8, %edx
               	je	0x41513d <__cpu_indicator_init+0x33b>
               	cmpl	$2, %edx
               	jne	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$4, 412575(%rip)        # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$5, 412560(%rip)        # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$6, 412545(%rip)        # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$8, 412526(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$5, 412514(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	cmpl	$2, %edx
               	jne	0x415173 <__cpu_indicator_init+0x371>
               	movl	$8, 412503(%rip)        # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$15, %edx
               	ja	0x415184 <__cpu_indicator_init+0x382>
               	movl	$7, 412486(%rip)        # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$47, %edx
               	jbe	0x415167 <__cpu_indicator_init+0x365>
               	cmpl	$79, %edx
               	ja	0x41519a <__cpu_indicator_init+0x398>
               	movl	$9, 412464(%rip)        # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$127, %edx
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$10, 412447(%rip)       # 0x479cc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$9, 412431(%rip)        # 0x479cc4 <__cpu_model+0x4>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$10, 412419(%rip)       # 0x479cc4 <__cpu_model+0x4>
               	cmpl	$31, %edx
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$11, 412408(%rip)       # 0x479cc8 <__cpu_model+0x8>
               	movl	%r8d, %edx
               	callq	0x414bd4 <get_available_features>
               	movl	$2, 412382(%rip)        # 0x479cc0 <__cpu_model>
               	xorl	%r9d, %r9d
               	jmp	0x4151f1 <__cpu_indicator_init+0x3ef>
               	movl	$3, 412367(%rip)        # 0x479cc0 <__cpu_model>
               	movl	%r9d, %eax
               	popq	%rbx
               	retq
               	movl	%r9d, %eax
               	retq

<_start>:
               	xorl	%ebp, %ebp
               	movq	%rdx, %r9
               	popq	%rsi
               	movq	%rsp, %rdx
               	andq	$-16, %rsp
               	pushq	%rax
               	pushq	%rsp
               	movq	$4468016, %r8           # imm = 0x442D30
               	movq	$4467920, %rcx          # imm = 0x442CD0
               	movq	$4435360, %rdi          # imm = 0x43ADA0
               	callq	0x413680 <__libc_start_main@plt>
               	hlt

<deregister_tm_clones>:
               	movl	$4587968, %eax          # imm = 0x4601C0
               	cmpq	$4587968, %rax          # imm = 0x4601C0
               	je	0x415242 <deregister_tm_clones+0x1e>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x415242 <deregister_tm_clones+0x1e>
               	movl	$4587968, %edi          # imm = 0x4601C0
               	jmpq	*%rax
               	retq

<register_tm_clones>:
               	movl	$4587968, %esi          # imm = 0x4601C0
               	movl	$2, %ecx
               	subq	$4587968, %rsi          # imm = 0x4601C0
               	sarq	$3, %rsi
               	movq	%rsi, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	testq	%rax, %rax
               	je	0x415279 <register_tm_clones+0x36>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x415279 <register_tm_clones+0x36>
               	movl	$4587968, %edi          # imm = 0x4601C0
               	jmpq	*%rax
               	retq

<__do_global_dtors_aux>:
               	cmpb	$0, 307007(%rip)        # 0x4601c0 <completed.7240>
               	jne	0x4152d0 <__do_global_dtors_aux+0x56>
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%r12
               	movl	$4548760, %r12d         # imm = 0x456898
               	pushq	%rbx
               	movl	$4548768, %ebx          # imm = 0x4568A0
               	subq	$4548760, %rbx          # imm = 0x456898
               	sarq	$3, %rbx
               	decq	%rbx
               	movq	306974(%rip), %rax      # 0x4601c8 <dtor_idx.7242>
               	cmpq	%rbx, %rax
               	jae	0x4152bf <__do_global_dtors_aux+0x45>
               	incq	%rax
               	movq	%rax, 306959(%rip)      # 0x4601c8 <dtor_idx.7242>
               	callq	*(%r12,%rax,8)
               	jmp	0x4152a3 <__do_global_dtors_aux+0x29>
               	callq	0x415224 <deregister_tm_clones>
               	popq	%rbx
               	popq	%r12
               	movb	$1, 306930(%rip)        # 0x4601c0 <completed.7240>
               	popq	%rbp
               	retq
               	retq

<frame_dummy>:
               	jmp	0x415243 <register_tm_clones>
               	nopl	(%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	277822(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 16(%rsp)
               	movb	311599(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415372 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x92>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4154d9 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f9>
               	movq	296(%r15), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rcx)
               	movq	$0, 24(%rcx)
               	leaq	267675(%rip), %rdx      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%rax, 80(%rsp)
               	movl	8(%rbx), %edx
               	cmpl	%ebp, %edx
               	cmovlel	%edx, %ebp
               	movq	(%rbx), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41557f <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x29f>
               	movq	(%rax), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41558e <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x2ae>
               	testl	%ebp, %ebp
               	js	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	cmpl	%ebp, 8(%rbx)
               	jb	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	cmpl	%ebp, 24(%rcx)
               	jb	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	movq	(%rax), %rdx
               	testl	%ebp, %ebp
               	jle	0x4154b1 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1d1>
               	movl	%ebp, %esi
               	leaq	-1(%rsi), %rdi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$7, %rdi
               	jae	0x41542b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x14b>
               	xorl	%edi, %edi
               	jmp	0x415489 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1a9>
               	andl	$-8, %esi
               	xorl	%edi, %edi
               	movq	16(%rbx,%rdi,8), %rbp
               	movq	%rbp, 32(%rcx,%rdi,8)
               	movq	24(%rbx,%rdi,8), %rbp
               	movq	%rbp, 40(%rcx,%rdi,8)
               	movq	32(%rbx,%rdi,8), %rbp
               	movq	%rbp, 48(%rcx,%rdi,8)
               	movq	40(%rbx,%rdi,8), %rbp
               	movq	%rbp, 56(%rcx,%rdi,8)
               	movq	48(%rbx,%rdi,8), %rbp
               	movq	%rbp, 64(%rcx,%rdi,8)
               	movq	56(%rbx,%rdi,8), %rbp
               	movq	%rbp, 72(%rcx,%rdi,8)
               	movq	64(%rbx,%rdi,8), %rbp
               	movq	%rbp, 80(%rcx,%rdi,8)
               	movq	72(%rbx,%rdi,8), %rbp
               	movq	%rbp, 88(%rcx,%rdi,8)
               	addq	$8, %rdi
               	cmpq	%rdi, %rsi
               	jne	0x415430 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x150>
               	testq	%rdx, %rdx
               	je	0x4154b1 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1d1>
               	leaq	(%rbx,%rdi,8), %rsi
               	addq	$16, %rsi
               	leaq	(%rcx,%rdi,8), %rcx
               	addq	$32, %rcx
               	xorl	%edi, %edi
               	movq	(%rsi,%rdi,8), %rbp
               	movq	%rbp, (%rcx,%rdi,8)
               	addq	$1, %rdi
               	cmpq	%rdi, %rdx
               	jne	0x4154a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1c0>
               	movq	%rax, 88(%rsp)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r14
               	leaq	40(%rsp), %r12
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	289165(%rip), %rsi      # 0x45bea0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	268797(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	leaq	267210(%rip), %rsi      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	leaq	267195(%rip), %rsi      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	nopl	(%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	277114(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	310889(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415638 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x98>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4156e8 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x148>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	267255(%rip), %rcx      # 0x456a70 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415693 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	shlq	$2, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136b0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	288638(%rip), %rsi      # 0x45bea0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	268269(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	nop

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	276618(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	310393(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415828 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x98>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4158d7 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x147>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	266615(%rip), %rcx      # 0x4569e0 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415883 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136b0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	288143(%rip), %rsi      # 0x45bea0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	267774(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	nop

<kfun:kotlin.Any#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	310030(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415993 <kfun:kotlin.Any#hashCode(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Any#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	271451(%rip), %rax      # 0x457e40 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 128(%rsp)
               	leaq	276067(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 120(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	309842(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415a4f <kfun:kotlin.Any#toString(){}kotlin.String+0xaf>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 16(%rsp)
               	movq	8(%rsp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x415aa2 <kfun:kotlin.Any#toString(){}kotlin.String+0x102>
               	leaq	64(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419700 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	movq	%rax, 64(%rsp)
               	testq	%rax, %rax
               	leaq	287860(%rip), %r13      # 0x45bf10 <__unnamed_2>
               	cmovneq	%rax, %r13
               	jmp	0x415ab2 <kfun:kotlin.Any#toString(){}kotlin.String+0x112>
               	movq	$0, 64(%rsp)
               	leaq	287838(%rip), %r13      # 0x45bf10 <__unnamed_2>
               	leaq	72(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	288(%r14), %rcx
               	movq	%rcx, 152(%rsp)
               	leaq	144(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movabsq	$51539607552, %rcx      # imm = 0xC00000000
               	movq	%rcx, 160(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movl	%eax, %edi
               	movq	%r15, %rsi
               	callq	0x43a470 <Kotlin_Long_toStringRadix>
               	movq	%rax, %rbp
               	leaq	120(%rsp), %rbx
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	287675(%rip), %rsi      # 0x45bf30 <__unnamed_3>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	309432(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415be9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x415c09 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	movb	8(%r14), %al
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$82, 92(%rcx)
               	jne	0x415c09 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	xorb	8(%rbx), %al
               	xorb	$1, %al
               	jmp	0x415c0b <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x3b>
               	xorl	%eax, %eax
               	andb	$1, %al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309352(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c39 <kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	287504(%rip), %rcx      # 0x45bf50 <__unnamed_4>
               	cmpb	$0, 8(%rbx)
               	leaq	287525(%rip), %rax      # 0x45bf70 <__unnamed_5>
               	cmovneq	%rcx, %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	309294(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c73 <kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movzbl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309256(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c99 <kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Enum#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	309214(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415cc3 <kfun:kotlin.Enum#hashCode(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Enum#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309176(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415ce9 <kfun:kotlin.Enum#toString(){}kotlin.String+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309128(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d19 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	nopl	(%rax,%rax)

<kfun:kotlin.String#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309080(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d49 <kfun:kotlin.String#toString(){}kotlin.String+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.String#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	309038(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d73 <kfun:kotlin.String#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$168, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	40(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rbp      # imm = 0x600000000
               	movq	%rbp, 32(%rsp)
               	movb	308904(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415df9 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x79>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, 8(%r14)
               	movq	$0, 16(%r14)
               	movq	%r15, %rdi
               	callq	0x43a570 <Kotlin_getCurrentStackTrace>
               	movq	%rax, 24(%r14)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	268374(%rip), %rcx      # 0x457690 <ktypeglobal:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 48(%rsp)
               	movq	%r14, 24(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	269165(%rip), %rax      # 0x4579e0 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 8(%rsp)
               	movq	%rcx, 56(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 128(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	268764(%rip), %rbp      # 0x4578c0 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 136(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 24(%r15)
               	movl	303894(%rip), %eax      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x415f16 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x196>
               	leaq	303882(%rip), %rdi      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	12335(%rip), %rsi       # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	movq	303811(%rip), %rbx      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 32(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	269329(%rip), %rax      # 0x457b90 <ktypeglobal:kotlin.native.concurrent.Lock#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rbp, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	268637(%rip), %r13      # 0x457950 <ktypeglobal:kotlin.native.concurrent.AtomicInt#internal>
               	movq	%r13, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 24(%rbx)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%r13, 16(%rax)
               	movq	%rcx, 96(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 32(%rbx)
               	movq	%rbp, 40(%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 32(%r14)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$168, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable#<get-message>(){}kotlin.String?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	308248(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416089 <kfun:kotlin.Throwable#<get-message>(){}kotlin.String?+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	308200(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160b9 <kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	308152(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160e9 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	268514(%rip), %rcx      # 0x4579e0 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%r14, %rsi
               	cmpq	%rcx, %rax
               	je	0x41610d <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x3d>
               	callq	0x418c40 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>
               	jmp	0x416112 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x42>
               	callq	0x418900 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.Throwable#printStackTrace(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$280, %rsp              # imm = 0x118
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movups	%xmm0, 80(%rsp)
               	movups	%xmm0, 96(%rsp)
               	leaq	267432(%rip), %rax      # 0x457600 <ktypeglobal:kotlin.Throwable.ExceptionTraceBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 72(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 184(%rsp)
               	leaq	176(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbp      # imm = 0x400000000
               	movq	%rbp, 192(%rsp)
               	movb	307948(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4161b5 <kfun:kotlin.Throwable#printStackTrace(){}+0x95>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	72(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 160(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 144(%rsp)
               	movq	%rbx, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	273951(%rip), %rcx      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 152(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, 88(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	%rcx, 120(%rsp)
               	movq	$0, 8(%rax)
               	leaq	272400(%rip), %rax      # 0x458aa0 <ktypeglobal:kotlin.collections.HashSet#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 256(%rsp)
               	movaps	%xmm0, 240(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 248(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 256(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$96, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rcx
               	movq	%rcx, 112(%rsp)
               	movq	$0, 8(%rax)
               	leaq	270952(%rip), %rax      # 0x458570 <ktypeglobal:kotlin.collections.HashMap#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rcx, 264(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	263627(%rip), %rcx      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%r14, 32(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	263851(%rip), %r13      # 0x456a70 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%r13, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%rbp, 40(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%r13, 16(%rax)
               	movl	$16, 24(%rax)
               	movq	%rcx, 48(%rsp)
               	movq	%r14, 24(%rbx)
               	movq	$0, 32(%rbx)
               	movq	%rbp, 40(%rbx)
               	movq	%rcx, 48(%rbx)
               	movq	$2, 80(%rbx)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	xorps	%xmm0, %xmm0
               	movq	288(%r12), %rax
               	movq	%rax, 216(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 224(%rsp)
               	movq	48(%rbx), %rax
               	movq	%rax, 232(%rsp)
               	movl	8(%rax), %eax
               	movq	216(%rsp), %rcx
               	bsrl	%eax, %edx
               	xorl	$31, %edx
               	addl	$1, %edx
               	testl	%eax, %eax
               	movl	$33, %eax
               	cmovnel	%edx, %eax
               	movq	%rcx, 288(%r12)
               	movl	%eax, 88(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%r15)
               	movq	120(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movb	$1, 104(%rsp)
               	movq	80(%rsp), %rbx
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	leaq	284800(%rip), %rdx      # 0x45bda8 <__unnamed_6>
               	leaq	72(%rsp), %rdi
               	movq	%rbx, %rsi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	testb	%al, %al
               	je	0x416565 <kfun:kotlin.Throwable#printStackTrace(){}+0x445>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x416587 <kfun:kotlin.Throwable#printStackTrace(){}+0x467>
               	movq	184(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$280, %rsp              # imm = 0x118
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	306955(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416596 <kfun:kotlin.Throwable#printStackTrace(){}+0x476>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rsp), %rsi
               	movq	%rsi, 48(%rsp)
               	leaq	285161(%rip), %rdx      # 0x45bf90 <__unnamed_7>
               	leaq	72(%rsp), %rdi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	268370(%rip), %rcx      # 0x457e40 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 64(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f80 <ThrowInvalidReceiverTypeException>

<kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	306736(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416671 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x71>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 32(%rbx)
               	jne	0x4166cd <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xcd>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	%rbx, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	testq	%r14, %r14
               	je	0x4166e4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xe4>
               	leaq	72(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*128(%rax)
               	movq	%rax, %rdi
               	jmp	0x4166eb <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xeb>
               	leaq	32(%rsp), %rdx
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e9c0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x4168e2 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2e2>
               	leaq	284469(%rip), %rdi      # 0x45be20 <__unnamed_8>
               	callq	0x43aa30 <Kotlin_io_Console_println>
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 128(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 288(%rbp)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 64(%rsp)
               	movl	16(%r14), %r15d
               	testl	%r15d, %r15d
               	jns	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movq	8(%r14), %r12
               	movq	%r12, 120(%rsp)
               	movq	%r12, 128(%rsp)
               	movl	8(%r12), %eax
               	movl	%eax, %ebx
               	sarl	$31, %ebx
               	andl	%eax, %ebx
               	movl	8(%r12), %edx
               	movl	%r15d, %edi
               	movl	%ebx, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%r12), %rax
               	cmpl	%ebx, %r15d
               	jge	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movslq	%r15d, %r9
               	leaq	(%r12,%r9,2), %r11
               	addq	$16, %r11
               	movl	%r15d, %r10d
               	notl	%r10d
               	addl	%ebx, %r10d
               	cmpl	$15, %r10d
               	jb	0x41689c <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x29c>
               	addq	$1, %r10
               	movq	%r10, %r8
               	andq	$-16, %r8
               	leaq	-16(%r8), %rax
               	movq	%rax, %rdi
               	shrq	$4, %rdi
               	addq	$1, %rdi
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpq	$112, %rax
               	jae	0x4167d6 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1d6>
               	xorl	%eax, %eax
               	jmp	0x416861 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x261>
               	leaq	(%r12,%r9,2), %rsi
               	addq	$240, %rsi
               	andq	$-8, %rdi
               	negq	%rdi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopl	(%rax)
               	movups	%xmm0, -208(%rsi,%rcx,2)
               	movups	%xmm0, -224(%rsi,%rcx,2)
               	movups	%xmm0, -192(%rsi,%rcx,2)
               	movups	%xmm0, -176(%rsi,%rcx,2)
               	movups	%xmm0, -160(%rsi,%rcx,2)
               	movups	%xmm0, -144(%rsi,%rcx,2)
               	movups	%xmm0, -128(%rsi,%rcx,2)
               	movups	%xmm0, -112(%rsi,%rcx,2)
               	movups	%xmm0, -96(%rsi,%rcx,2)
               	movups	%xmm0, -80(%rsi,%rcx,2)
               	movups	%xmm0, -64(%rsi,%rcx,2)
               	movups	%xmm0, -48(%rsi,%rcx,2)
               	movups	%xmm0, -32(%rsi,%rcx,2)
               	movups	%xmm0, -16(%rsi,%rcx,2)
               	leaq	128(%rcx), %rax
               	movups	%xmm0, 16(%rsi,%rcx,2)
               	movups	%xmm0, (%rsi,%rcx,2)
               	movq	%rax, %rcx
               	addq	$8, %rdi
               	jne	0x4167f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1f0>
               	testq	%rdx, %rdx
               	je	0x416890 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x290>
               	addq	%r9, %r9
               	leaq	(%r9,%rax,2), %rax
               	addq	%r12, %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x416880 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x280>
               	cmpq	%r8, %r10
               	je	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	addl	%r8d, %r15d
               	leaq	(%r11,%r8,2), %r11
               	subl	%r15d, %ebx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movw	$0, (%r11,%rax,2)
               	addq	$1, %rax
               	cmpl	%eax, %ebx
               	jne	0x4168b0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2b0>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	$0, 16(%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r14, 24(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 256(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rcx, (%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$124554051584, %rax     # imm = 0x1D00000000
               	movq	%rax, 48(%rsp)
               	movb	305869(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4169d4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0xd4>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	8(%rax), %rdi
               	movq	%r14, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x416af9 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1f9>
               	leaq	120(%rsp), %rbx
               	leaq	112(%rsp), %r13
               	leaq	104(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	283552(%rip), %rsi      # 0x45bda8 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	128(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	8(%r12), %rax
               	cmpq	%r14, %rax
               	movq	%r14, %rbp
               	movq	%r14, 8(%rsp)
               	je	0x416b8a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28a>
               	movq	24(%rax), %r15
               	movl	8(%r15), %ebx
               	movq	24(%rbp), %r14
               	movl	8(%r14), %ebp
               	cmpl	%ebp, %ebx
               	movl	%ebx, %edx
               	cmovgl	%ebp, %edx
               	xorl	%r13d, %r13d
               	testl	%edx, %edx
               	cmovsl	%r13d, %edx
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	movq	%r12, 24(%rsp)
               	cmpq	%r13, %rdx
               	je	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	nopl	(%rax)
               	movzbl	305649(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416abb <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1bb>
               	movq	%rdx, %r12
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdx
               	movq	24(%rsp), %r12
               	cmpl	%ebp, 8(%r14)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	cmpl	%ebx, 8(%r15)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movslq	%ebp, %rax
               	movslq	%ebx, %rcx
               	movq	16(%r15,%rcx,8), %rcx
               	cmpq	%rcx, 16(%r14,%rax,8)
               	jne	0x416b8e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>
               	addq	$1, %r13
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	cmpq	%r13, %rdx
               	jne	0x416aa0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1a0>
               	jmp	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	leaq	72(%rsp), %r13
               	leaq	64(%rsp), %rbx
               	leaq	56(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	283284(%rip), %rsi      # 0x45bda8 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283791(%rip), %rsi      # 0x45bfc0 <__unnamed_9>
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	leaq	80(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283413(%rip), %rsi      # 0x45be80 <__unnamed_10>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	xorl	%eax, %eax
               	jmp	0x416cf3 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3f3>
               	xorl	%ebx, %ebx
               	jmp	0x416ba1 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2a1>
               	movl	%r13d, %edx
               	xorl	%eax, %eax
               	addl	$-1, %edx
               	cmovsl	%eax, %edx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rbx
               	leaq	136(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x4160d0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %eax
               	movq	%rbx, 16(%rsp)
               	subl	%ebx, %eax
               	testl	%eax, %eax
               	jle	0x416c68 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x368>
               	movl	%eax, %r14d
               	xorl	%r15d, %r15d
               	leaq	283712(%rip), %rbx      # 0x45c010 <__unnamed_11>
               	movzbl	305345(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416be0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2e0>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x4160d0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r15
               	jae	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movq	16(%rax,%r15,8), %r13
               	addq	$1, %r15
               	movq	%r13, 152(%rsp)
               	movq	16(%r12), %rbp
               	movq	%rbp, %rdi
               	leaq	283020(%rip), %rsi      # 0x45bda8 <__unnamed_6>
               	leaq	160(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	168(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	leaq	176(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	cmpq	%r15, %r14
               	movq	8(%rsp), %rbp
               	jne	0x416bd0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2d0>
               	movq	16(%rsp), %r14
               	testl	%r14d, %r14d
               	je	0x416ce0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3e0>
               	leaq	192(%rsp), %r13
               	leaq	184(%rsp), %rdx
               	leaq	200(%rsp), %r15
               	movq	16(%r12), %rbx
               	leaq	282898(%rip), %rsi      # 0x45bda8 <__unnamed_6>
               	movq	%rbx, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283531(%rip), %rsi      # 0x45c030 <__unnamed_12>
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r14d, %esi
               	movq	%r15, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	283547(%rip), %rsi      # 0x45c060 <__unnamed_13>
               	movq	%rbx, %rdi
               	leaq	208(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	40(%rbp), %rcx
               	movq	%rcx, 216(%rsp)
               	movb	$1, %al
               	testq	%rcx, %rcx
               	jne	0x416d1a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x41a>
               	movq	40(%rsp), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 288(%rdx)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	(%rsp), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	266480(%rip), %rcx      # 0x457e40 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 224(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f80 <ThrowInvalidReceiverTypeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	$0, 8(%rsp)
               	leaq	266362(%rip), %rax      # 0x457e40 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 136(%rsp)
               	leaq	270979(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 32(%rsp)
               	movb	304751(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416e32 <kfun:kotlin.Throwable#toString(){}kotlin.String+0xc2>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	64(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rsp, %rdi
               	movq	%rdi, 40(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rbx, %rsi
               	callq	0x419470 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x416e7a <kfun:kotlin.Throwable#toString(){}kotlin.String+0x10a>
               	leaq	56(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x419390 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	274698(%rip), %rbx      # 0x459f80 <__unnamed_14>
               	cmovneq	%rax, %rbx
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f46 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1d6>
               	movq	%rbp, %r15
               	leaq	80(%rsp), %r13
               	leaq	128(%rsp), %rbp
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283119(%rip), %rsi      # 0x45c0c0 <__unnamed_15>
               	movq	%rbp, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f19 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1a9>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x416f20 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1b0>
               	leaq	282368(%rip), %rsi      # 0x45be20 <__unnamed_8>
               	movq	%r15, %rbp
               	leaq	128(%rsp), %rbx
               	movq	%rbx, %rdi
               	leaq	112(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%rbp)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	%rbx, %rax
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1624, %rsp             # imm = 0x658
               	movq	%rsi, 136(%rsp)
               	movq	%rdi, %rbx
               	movb	304390(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416f9b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x2b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 576(%rsp)
               	movaps	%xmm0, 560(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 24(%rsp)
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 568(%rsp)
               	leaq	560(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 576(%rsp)
               	movq	24(%rbx), %rcx
               	movq	%rcx, 8(%rsp)
               	movl	8(%rcx), %r13d
               	movq	-64(%rax), %rdx
               	movl	$1, %ecx
               	movl	$1, %esi
               	xchgl	%esi, 328(%rdx)
               	movl	%esi, 108(%rsp)
               	movq	$0, 120(%rsp)
               	movl	$1, 128(%rsp)
               	movb	$0, 132(%rsp)
               	movq	-64(%rax), %rax
               	testq	%rax, %rax
               	je	0x417064 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xf4>
               	xchgl	%ecx, 328(%rax)
               	movq	%rax, 120(%rsp)
               	movl	%ecx, 128(%rsp)
               	movb	$1, 132(%rsp)
               	movq	%rdx, 144(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 48(%rsp)
               	movq	48(%rsp), %rax
               	movq	32(%rsp), %r15
               	subq	%r15, %rax
               	sarq	$5, %rax
               	cmpq	%r13, %rax
               	jae	0x41717e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x20e>
               	movq	40(%rsp), %rbx
               	movq	%rbx, %r12
               	subq	%r15, %r12
               	movl	$32, %esi
               	movq	%r13, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r14
               	cmpq	%r15, %rbx
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	leaq	16(%r14), %rax
               	leaq	16(%r15), %rcx
               	jmp	0x417105 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x195>
               	nopl	(%rax,%rax)
               	movq	%rdx, -16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, (%rax)
               	movq	-8(%rcx), %rdx
               	movq	%rdx, -8(%rax)
               	movq	%rcx, -16(%rcx)
               	movq	$0, -8(%rcx)
               	movb	$0, (%rcx)
               	addq	$32, %rax
               	leaq	32(%rcx), %rdx
               	addq	$16, %rcx
               	cmpq	%rbx, %rcx
               	movq	%rdx, %rcx
               	je	0x41711a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1aa>
               	movq	%rax, -16(%rax)
               	movq	-16(%rcx), %rdx
               	cmpq	%rcx, %rdx
               	jne	0x4170d0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x160>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x4170da <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x16a>
               	cmpq	%rbx, %r15
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	movq	%r15, %rbp
               	jmp	0x417139 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c9>
               	nopl	(%rax,%rax)
               	addq	$16, %rbp
               	cmpq	%rbx, %rbp
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	movq	(%rbp), %rdi
               	addq	$16, %rbp
               	cmpq	%rbp, %rdi
               	je	0x417130 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
               	callq	0x4136d0 <free@plt>
               	jmp	0x417130 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
               	sarq	$5, %r12
               	testq	%r15, %r15
               	je	0x41715e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1ee>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, 32(%rsp)
               	shlq	$5, %r12
               	addq	%r14, %r12
               	movq	%r12, 40(%rsp)
               	movq	%r13, %rax
               	shlq	$5, %rax
               	addq	%r14, %rax
               	movq	%rax, 48(%rsp)
               	testl	%r13d, %r13d
               	je	0x417766 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
               	leaq	176(%rsp), %rax
               	movq	%rax, 160(%rsp)
               	movq	$0, 168(%rsp)
               	movb	$0, 176(%rsp)
               	movq	$-1, 192(%rsp)
               	leaq	216(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	movq	$0, 208(%rsp)
               	movb	$0, 216(%rsp)
               	movq	$-1, 232(%rsp)
               	leaq	256(%rsp), %rax
               	movq	%rax, 240(%rsp)
               	movq	$0, 248(%rsp)
               	movb	$0, 256(%rsp)
               	movq	$-1, 272(%rsp)
               	leaq	296(%rsp), %rax
               	movq	%rax, 280(%rsp)
               	movq	$0, 288(%rsp)
               	movb	$0, 296(%rsp)
               	movq	$-1, 312(%rsp)
               	leaq	336(%rsp), %rax
               	movq	%rax, 320(%rsp)
               	movq	$0, 328(%rsp)
               	movb	$0, 336(%rsp)
               	movq	$-1, 352(%rsp)
               	leaq	376(%rsp), %rax
               	movq	%rax, 360(%rsp)
               	movq	$0, 368(%rsp)
               	movb	$0, 376(%rsp)
               	movq	$-1, 392(%rsp)
               	leaq	416(%rsp), %rax
               	movq	%rax, 400(%rsp)
               	movq	$0, 408(%rsp)
               	movb	$0, 416(%rsp)
               	movq	$-1, 432(%rsp)
               	leaq	456(%rsp), %rax
               	movq	%rax, 440(%rsp)
               	movq	$0, 448(%rsp)
               	movb	$0, 456(%rsp)
               	movq	$-1, 472(%rsp)
               	leaq	496(%rsp), %rax
               	movq	%rax, 480(%rsp)
               	movq	$0, 488(%rsp)
               	movb	$0, 496(%rsp)
               	movq	$-1, 512(%rsp)
               	leaq	536(%rsp), %rax
               	movq	%rax, 520(%rsp)
               	movq	$0, 528(%rsp)
               	movb	$0, 536(%rsp)
               	movq	$-1, 552(%rsp)
               	leaq	80(%rsp), %rbp
               	leaq	592(%rsp), %r15
               	xorl	%r14d, %r14d
               	movq	8(%rsp), %rbx
               	movq	%r13, 96(%rsp)
               	jmp	0x4173d4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
               	movq	%rcx, (%r13)
               	movq	80(%rsp), %rax
               	movq	%rax, 16(%r13)
               	movq	8(%rsp), %rbx
               	movq	72(%rsp), %rax
               	movq	%rax, 8(%r13)
               	movq	%rbp, 64(%rsp)
               	movq	$0, 72(%rsp)
               	movb	$0, 80(%rsp)
               	addq	$32, %r13
               	movq	%r13, 40(%rsp)
               	movq	96(%rsp), %r13
               	leaq	592(%rsp), %r15
               	addq	$1, %r14
               	cmpq	%r13, %r14
               	je	0x417662 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6f2>
               	movq	16(%rbx,%r14,8), %rcx
               	cmpq	$2, %rcx
               	jb	0x4173c7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x457>
               	addq	$-1, %rcx
               	movq	40(%rsp), %r13
               	movq	32(%rsp), %rax
               	movq	%r13, %rbx
               	movq	%rax, 16(%rsp)
               	subq	%rax, %rbx
               	movq	%rbx, %r12
               	sarq	$5, %r12
               	leaq	186805(%rip), %rax      # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%rax, (%rsp)
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	xorl	%r8d, %r8d
               	leaq	186786(%rip), %r9       # 0x444dbc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%eax, %eax
               	callq	0x435b50 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
               	movq	%rbp, 64(%rsp)
               	movq	%r15, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rbp, %rcx
               	movq	%rax, %rbp
               	movq	%rcx, %rax
               	cmpq	$16, %rbp
               	jb	0x41745e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ee>
               	testq	%rbp, %rbp
               	js	0x417a17 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaa7>
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 64(%rsp)
               	movq	%rbp, 80(%rsp)
               	testq	%rbp, %rbp
               	je	0x417487 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
               	cmpq	$1, %rbp
               	jne	0x417474 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x504>
               	movb	592(%rsp), %cl
               	movb	%cl, (%rax)
               	jmp	0x417487 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
               	movq	%rax, %rdi
               	leaq	592(%rsp), %rsi
               	movq	%rbp, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%rbp, 72(%rsp)
               	movq	64(%rsp), %rax
               	movb	$0, (%rax,%rbp)
               	cmpq	%r13, 48(%rsp)
               	je	0x4174c3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x553>
               	leaq	16(%r13), %rax
               	movq	%rax, (%r13)
               	movq	64(%rsp), %rcx
               	leaq	80(%rsp), %rbp
               	cmpq	%rbp, %rcx
               	jne	0x417383 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x413>
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x417390 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x420>
               	testq	%rbx, %rbx
               	movq	%r12, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r12), %r15
               	movabsq	$576460752303423487, %rcx # imm = 0x7FFFFFFFFFFFFFF
               	cmpq	%rcx, %r15
               	cmovaq	%rcx, %r15
               	addq	%r12, %rax
               	cmovbq	%rcx, %r15
               	testq	%r15, %r15
               	leaq	80(%rsp), %rbx
               	je	0x417507 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x597>
               	movl	$32, %esi
               	movq	%r15, %rdi
               	callq	0x4136c0 <calloc@plt>
               	jmp	0x417509 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
               	xorl	%eax, %eax
               	shlq	$5, %r12
               	leaq	(%rax,%r12), %rdx
               	addq	$16, %rdx
               	movq	%rdx, (%rax,%r12)
               	movq	64(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	je	0x417536 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5c6>
               	leaq	(%rax,%r12), %rdx
               	movq	%rcx, (%rdx)
               	movq	80(%rsp), %rcx
               	movq	%rcx, 16(%rax,%r12)
               	jmp	0x41753c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5cc>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 8(%rax,%r12)
               	movq	%rbx, 64(%rsp)
               	movq	$0, 72(%rsp)
               	movb	$0, 80(%rsp)
               	movq	16(%rsp), %r12
               	cmpq	%r12, %r13
               	movq	%rax, 152(%rsp)
               	je	0x41760c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x69c>
               	leaq	16(%rax), %rcx
               	leaq	16(%r12), %rax
               	jmp	0x4175b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x646>
               	nopl	(%rax)
               	movq	%rcx, -16(%rbp)
               	movq	(%rax), %rcx
               	movq	%rcx, (%rbp)
               	movq	-8(%rax), %rcx
               	movq	%rcx, -8(%rbp)
               	movq	%rax, -16(%rax)
               	movq	$0, -8(%rax)
               	movb	$0, (%rax)
               	leaq	32(%rbp), %rcx
               	leaq	32(%rax), %rdx
               	addq	$16, %rax
               	cmpq	%r13, %rax
               	movq	%rdx, %rax
               	je	0x4175cf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x65f>
               	movq	%rcx, %rbp
               	movq	%rcx, -16(%rcx)
               	movq	-16(%rax), %rcx
               	cmpq	%rax, %rcx
               	jne	0x417580 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x610>
               	movups	(%rcx), %xmm0
               	movups	%xmm0, (%rbp)
               	jmp	0x41758b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x61b>
               	addq	$16, %rbp
               	addq	$32, %rbp
               	cmpq	%r12, %r13
               	je	0x417610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
               	movq	%r12, %rbx
               	jmp	0x4175f9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x689>
               	nopl	(%rax,%rax)
               	addq	$16, %rbx
               	cmpq	%r13, %rbx
               	je	0x417610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4175f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4175f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
               	leaq	32(%rax), %rbp
               	testq	%r12, %r12
               	movq	96(%rsp), %r13
               	je	0x417622 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6b2>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	152(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rbp, 40(%rsp)
               	shlq	$5, %r15
               	addq	%rax, %r15
               	movq	%r15, 48(%rsp)
               	movq	64(%rsp), %rdi
               	leaq	80(%rsp), %rbp
               	cmpq	%rbp, %rdi
               	movq	8(%rsp), %rbx
               	je	0x4173bf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4173bf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
               	movq	520(%rsp), %rdi
               	leaq	536(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41767c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x70c>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417696 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x726>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x740>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176ca <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x75a>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176e4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x774>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176fe <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x78e>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417718 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7a8>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417732 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7c2>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41774c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7dc>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417766 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	120(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	movl	128(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	cmpl	$1, %eax
               	jne	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	movb	302346(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	addq	$328, %rdi              # imm = 0x148
               	movl	108(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	cmpl	$1, %eax
               	jne	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	movb	302287(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 616(%rsp)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 600(%rsp)
               	leaq	592(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 608(%rsp)
               	movq	40(%rsp), %rbp
               	movq	32(%rsp), %r13
               	movq	%rbp, %r14
               	subq	%r13, %r14
               	movq	%r14, %rbx
               	shrq	$5, %rbx
               	testl	%ebx, %ebx
               	movq	%r13, 16(%rsp)
               	movq	%rbp, 8(%rsp)
               	js	0x417a23 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xab3>
               	movq	296(%rax), %rdi
               	movq	%r14, %rax
               	shrq	$2, %rax
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%rax, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	258244(%rip), %rax      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%r15)
               	movl	%ebx, 24(%r15)
               	movq	%rcx, 96(%rsp)
               	movq	%rcx, 616(%rsp)
               	cmpq	%r13, %rbp
               	jne	0x4178b7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x947>
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417975 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa05>
               	sarq	$5, %r14
               	cmpq	$1, %r14
               	movl	$1, %ebp
               	cmovaq	%r14, %rbp
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	xorl	%ebx, %ebx
               	leaq	160(%rsp), %r14
               	movabsq	$4294967296, %r12       # imm = 0x100000000
               	nopl	(%rax,%rax)
               	movq	$0, 184(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 168(%rsp)
               	movq	%r14, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 176(%rsp)
               	movq	(%r13), %rdi
               	leaq	184(%rsp), %rsi
               	callq	0x4366e0 <CreateStringFromCString>
               	movq	184(%rsp), %rax
               	movq	%rbx, %rcx
               	sarq	$29, %rcx
               	movq	%rax, 32(%r15,%rcx)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	%r12, %rbx
               	addq	$32, %r13
               	addq	$-1, %rbp
               	jne	0x4178f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x980>
               	movq	96(%rsp), %r15
               	movq	%r15, 584(%rsp)
               	movq	600(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	16(%rsp), %r14
               	movq	8(%rsp), %rbp
               	cmpq	%rbp, %r14
               	je	0x4179cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa5c>
               	movq	%r14, %rbx
               	jmp	0x4179b9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa49>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%rbp, %rbx
               	je	0x4179cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa5c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4179b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa40>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4179b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa40>
               	testq	%r14, %r14
               	je	0x4179d9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa69>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	136(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	568(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$1624, %rsp             # imm = 0x658
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	185378(%rip), %rdi      # 0x444e40 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4361b0 <std::__throw_length_error(char const*)>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	movq	%rax, %rbx
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417c87 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd17>
               	movq	%rax, %rbx
               	movq	520(%rsp), %rdi
               	leaq	536(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b56 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbe6>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b74 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc04>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b92 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc22>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bb0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc40>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bce <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc5e>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bec <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc7c>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c0a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc9a>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c28 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xcb8>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c46 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xcd6>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
               	callq	0x43b5e5 <operator delete(void*)>
               	leaq	32(%rsp), %rdi
               	callq	0x4361d0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
               	leaq	112(%rsp), %rdi
               	callq	0x436230 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a71 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb01>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a8a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb1a>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417aa3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb33>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417abc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb4c>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417ad5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb65>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417aee <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb7e>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b07 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb97>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b20 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbb0>
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b35 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbc5>
               	jmp	0x417b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
               	movq	%rax, %rbx
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	600(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	8(%rsp), %rax
               	cmpq	%rax, 16(%rsp)
               	je	0x417cc4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd54>
               	movq	16(%rsp), %rbp
               	movq	(%rbp), %rdi
               	addq	$16, %rbp
               	cmpq	%rbp, %rdi
               	je	0x417cb9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd49>
               	callq	0x4136d0 <free@plt>
               	addq	$16, %rbp
               	cmpq	8(%rsp), %rbp
               	jne	0x417ca7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd37>
               	cmpq	$0, 16(%rsp)
               	je	0x417cd6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd66>
               	movq	16(%rsp), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<checkRangeIndexes>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movl	%edi, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 192(%rsp)
               	movups	%xmm0, 8(%rsp)
               	leaq	267032(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 32(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 64(%rsp)
               	movb	300795(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417da6 <checkRangeIndexes+0xc6>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebx, %ebx
               	js	0x417dd8 <checkRangeIndexes+0xf8>
               	cmpl	%r15d, %ebp
               	jg	0x417dd8 <checkRangeIndexes+0xf8>
               	cmpl	%ebp, %ebx
               	jg	0x417eb5 <checkRangeIndexes+0x1d5>
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rsp, %rdi
               	movq	%rdi, 72(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	80(%rsp), %rdx
               	leaq	279274(%rip), %rsi      # 0x45c0e0 <__unnamed_16>
               	movq	%rsp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	88(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebx, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	96(%rsp), %rdx
               	leaq	279287(%rip), %rsi      # 0x45c110 <__unnamed_17>
               	movq	%rsp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	104(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebp, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	112(%rsp), %rdx
               	leaq	279300(%rip), %rsi      # 0x45c140 <__unnamed_18>
               	movq	%rsp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	120(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%r15d, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	258090(%rip), %rcx      # 0x456ec0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 136(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 144(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	152(%rsp), %rdx
               	leaq	279045(%rip), %rsi      # 0x45c0e0 <__unnamed_16>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	160(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	168(%rsp), %rdx
               	leaq	279128(%rip), %rsi      # 0x45c160 <__unnamed_19>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	176(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebp, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	184(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	258038(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 192(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	300250(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417fc7 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x17>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x417ff2 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x42>
               	cmpl	%ebp, 8(%rbx)
               	jbe	0x418001 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x51>
               	movq	(%rbx), %rax
               	movslq	%ebp, %rax
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256343(%rip), %rsi      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edx, %r14d
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	300150(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41802b <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x1b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x4180b6 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa6>
               	movl	8(%rbx), %edx
               	movl	%ebp, %edi
               	movl	%r14d, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%rbx), %rax
               	cmpl	%r14d, %ebp
               	jge	0x4180b1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movslq	%ebp, %rdx
               	notl	%ebp
               	addl	%r14d, %ebp
               	je	0x418094 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x84>
               	addq	$1, %rbp
               	movq	%rbp, %rcx
               	andq	$-2, %rcx
               	leaq	(%rcx,%rdx), %rax
               	leaq	(%rbx,%rdx,8), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, (%rdx,%rsi,8)
               	addq	$2, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x418080 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x70>
               	cmpq	%rcx, %rbp
               	jne	0x418097 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x87>
               	jmp	0x4180b1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movq	%rdx, %rax
               	movl	%r14d, %ecx
               	nopw	(%rax,%rax)
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$1, %rax
               	cmpl	%eax, %ecx
               	jne	0x4180a0 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x90>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	256147(%rip), %rsi      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.MemoryModel.$init_global#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$384, %rsp              # imm = 0x180
               	leaq	88(%rsp), %rbx
               	movl	$296, %edx              # imm = 0x128
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 96(%rsp)
               	movq	%rbx, 288(%r14)
               	movabsq	$158913789952, %rax     # imm = 0x2500000000
               	movq	%rax, 104(%rsp)
               	movb	299885(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418134 <kfun:kotlin.native.MemoryModel.$init_global#internal+0x64>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	259636(%rip), %rbx      # 0x457790 <ktypeglobal:kotlin.native.MemoryModel#internal>
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 112(%rsp)
               	movq	%rcx, 120(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 128(%rsp)
               	movq	%rcx, 136(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	255821(%rip), %rbx      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 160(%rsp)
               	movq	%rcx, 168(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 176(%rsp)
               	movq	120(%rsp), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 16(%rax)
               	movq	168(%rsp), %rax
               	movq	%rax, 192(%rsp)
               	movq	136(%rsp), %rcx
               	movq	%rcx, 200(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 24(%rax)
               	movq	168(%rsp), %rax
               	movq	%rax, 208(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 216(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	168(%rsp), %rsi
               	movq	%rsi, 224(%rsp)
               	movq	%rsi, 294697(%rip)      # 0x4601d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	leaq	294690(%rip), %rdi      # 0x4601d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rsi), %rax
               	movq	%rax, 232(%rsp)
               	leaq	278223(%rip), %rcx      # 0x45c190 <__unnamed_20>
               	movq	%rcx, 8(%rax)
               	movl	$0, 16(%rax)
               	movq	24(%rsi), %rax
               	movq	%rax, 240(%rsp)
               	leaq	278225(%rip), %rcx      # 0x45c1b0 <__unnamed_21>
               	movq	%rcx, 8(%rax)
               	movl	$1, 16(%rax)
               	movq	16(%rsi), %rax
               	movq	%rax, 248(%rsp)
               	leaq	278227(%rip), %rcx      # 0x45c1d0 <__unnamed_22>
               	movq	%rcx, 8(%rax)
               	movl	$2, 16(%rax)
               	callq	0x424710 <InitAndRegisterGlobal>
               	movq	294588(%rip), %rax      # 0x4601d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rax), %rcx
               	movq	%rcx, 256(%rsp)
               	movq	%rcx, 264(%rsp)
               	movq	24(%rax), %rcx
               	movq	%rcx, 272(%rsp)
               	movq	%rcx, 280(%rsp)
               	movq	16(%rax), %rax
               	movq	%rax, 288(%rsp)
               	movq	%rax, 296(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 304(%rsp)
               	movq	%rcx, 312(%rsp)
               	movq	312(%rsp), %rax
               	movq	%rax, 320(%rsp)
               	movq	264(%rsp), %rcx
               	movq	%rcx, 328(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 16(%rax)
               	movq	312(%rsp), %rax
               	movq	%rax, 336(%rsp)
               	movq	280(%rsp), %rcx
               	movq	%rcx, 344(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 24(%rax)
               	movq	312(%rsp), %rax
               	movq	%rax, 352(%rsp)
               	movq	296(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	312(%rsp), %rbx
               	movq	%rbx, 368(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r15
               	movq	$0, 8(%rax)
               	leaq	266761(%rip), %rcx      # 0x459680 <ktypeglobal:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0#internal>
               	movq	%rcx, 16(%rax)
               	movq	%r15, 24(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	266468(%rip), %rcx      # 0x459590 <ktypeglobal:kotlin.enums.EnumEntriesList#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r15, 24(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	leaq	72(%rsp), %rsi
               	movq	288(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	%rbx, %rdi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rbx, 376(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	leaq	294083(%rip), %rdi      # 0x4601d8 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movq	%rbx, %rsi
               	callq	0x424710 <InitAndRegisterGlobal>
               	movq	96(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$384, %rsp              # imm = 0x180
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	32(%rsp), %r12
               	leaq	40(%rsp), %rbp
               	movups	%xmm0, 88(%rsp)
               	leaq	264923(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	298700(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4185d5 <kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String+0x95>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r14
               	movq	%r14, 24(%rsp)
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	0x418670 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	277492(%rip), %rsi      # 0x45c200 <__unnamed_23>
               	movq	%r14, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 56(%rsp)
               	leaq	64(%rsp), %rsi
               	callq	0x418670 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	leaq	72(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r15)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.debugString#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movups	%xmm0, 144(%rsp)
               	leaq	264622(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 136(%rsp)
               	movq	$0, 40(%rsp)
               	leaq	259954(%rip), %rax      # 0x457e40 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 64(%rsp)
               	movb	298369(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418720 <kfun:kotlin.native.concurrent.debugString#internal+0xb0>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x418885 <kfun:kotlin.native.concurrent.debugString#internal+0x215>
               	leaq	96(%rsp), %rbp
               	leaq	88(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	%r12, 72(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	32(%rsp), %rdi
               	movq	%rdi, 80(%rsp)
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rsi
               	callq	0x419470 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	276797(%rip), %rsi      # 0x45c0c0 <__unnamed_15>
               	movq	%r12, %rdi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*120(%rax)
               	movl	%eax, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 168(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 176(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbp, %rsi
               	callq	0x43a470 <Kotlin_Long_toStringRadix>
               	movq	%rax, 24(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	jmp	0x41888c <kfun:kotlin.native.concurrent.debugString#internal+0x21c>
               	leaq	275860(%rip), %rax      # 0x45be20 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	297941(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4188cc <kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String+0x1c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	leaq	181634(%rip), %rdx      # 0x444e58 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x437120 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x4366e0 <CreateStringFromCString>
               	movq	%rax, (%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 16(%rsp)
               	movb	297752(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418989 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x89>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	292978(%rip), %eax      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x4189ba <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0xba>
               	leaq	292966(%rip), %rdi      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1419(%rip), %rsi        # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 292895(%rip)      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418a57 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x157>
               	movq	24(%r12), %r15
               	movq	%r15, %rdi
               	callq	0x419140 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	movq	16(%r12), %rax
               	movq	%rax, 40(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 48(%rsp)
               	cmpq	%rbx, 292850(%rip)      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418a4f <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x14f>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	movq	8(%rax), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x418a78 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x178>
               	leaq	80(%rsp), %rsi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$89, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	callq	*(%rax)
               	movq	%rax, %rbx
               	movq	16(%r12), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rbx, 8(%rax)
               	movq	8(%r12), %rax
               	movq	%rax, 112(%rsp)
               	movq	$0, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%r15, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	297353(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418b18 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x68>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r14), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	292580(%rip), %eax      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418b48 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x98>
               	leaq	292568(%rip), %rdi      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1021(%rip), %rsi        # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 292497(%rip)      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	setne	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	297167(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x418c03 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x93>
               	movq	%r15, %rdi
               	callq	0x418ab0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	je	0x418c14 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xa4>
               	leaq	24(%rsp), %rsi
               	movq	%r15, %rdi
               	callq	0x418900 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	testq	%rax, %rax
               	je	0x418c1d <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xad>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rcx)
               	jmp	0x418c24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x418ab0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x418bd9 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x69>
               	leaq	275973(%rip), %rax      # 0x45c220 <__unnamed_24>
               	jmp	0x418c24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	leaq	274940(%rip), %rax      # 0x45be20 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	296940(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418cb5 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x75>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %r14
               	movq	%r14, %rdi
               	callq	0x419140 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 176(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$73014444032, %rax      # imm = 0x1100000000
               	movq	%rax, 64(%rsp)
               	movq	8(%rbx), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	80(%rsp), %rbp
               	movq	%rbp, 88(%rsp)
               	movl	292040(%rip), %eax      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418d64 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x124>
               	leaq	292028(%rip), %rdi      # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	481(%rip), %rsi         # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	cmpq	291957(%rip), %rbp      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	je	0x418e06 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1c6>
               	movq	80(%rsp), %rbp
               	movq	%rbp, 96(%rsp)
               	movl	291991(%rip), %eax      # 0x460218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418d99 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x159>
               	leaq	291979(%rip), %rdi      # 0x460218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	684(%rip), %rsi         # 0x419040 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	movq	291912(%rip), %rax      # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 104(%rsp)
               	cmpq	%rax, %rbp
               	jne	0x418e78 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x238>
               	movq	8(%rbx), %rax
               	movq	291879(%rip), %rcx      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	254490(%rip), %rcx      # 0x457000 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	275578(%rip), %rsi      # 0x45c270 <__unnamed_25>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	8(%rbx), %r13
               	movl	291848(%rip), %eax      # 0x460218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418e28 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1e8>
               	leaq	291836(%rip), %rdi      # 0x460218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	541(%rip), %rsi         # 0x419040 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	movq	291769(%rip), %rax      # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 8(%r13)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	testq	%rdi, %rdi
               	je	0x418ebc <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x27c>
               	leaq	144(%rsp), %rsi
               	callq	0x416f70 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, 80(%rsp)
               	movq	$0, 16(%rbx)
               	movq	8(%rbx), %rax
               	movq	80(%rsp), %rcx
               	movq	%rcx, 176(%rsp)
               	movq	%rcx, 8(%rax)
               	movq	80(%rsp), %rbx
               	movq	%rbx, 32(%rsp)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %r15
               	movq	%r15, 136(%rsp)
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	8(%rbx), %rax
               	movq	291563(%rip), %rcx      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 24(%rsp)
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%r14, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	296199(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418f9a <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal+0x5a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256686(%rip), %rdx      # 0x457a70 <ktypeglobal:kotlin.native.concurrent.UNINITIALIZED#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 291342(%rip)      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	leaq	291335(%rip), %rdi      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	291328(%rip), %rax      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	291262(%rip), %rsi      # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	callq	0x424710 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	295943(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41909a <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal+0x5a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256574(%rip), %rdx      # 0x457b00 <ktypeglobal:kotlin.native.concurrent.INITIALIZING#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 291094(%rip)      # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	leaq	291087(%rip), %rdi      # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	291080(%rip), %rax      # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	291014(%rip), %rsi      # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	callq	0x424710 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#lock(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rdi, %rbx
               	movb	295749(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41915c <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %rcx
               	movl	-72(%rax), %ecx
               	cmpl	$2, %ecx
               	je	0x4192ce <kfun:kotlin.native.concurrent.Lock#lock(){}+0x18e>
               	cmpl	$3, %ecx
               	je	0x41932c <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1ec>
               	movl	$2, -72(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	callq	0x424b00 <LookupTLS>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	256542(%rip), %rcx      # 0x457c20 <ktypeglobal:kotlin.native.concurrent.CurrentThread#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	callq	0x424b00 <LookupTLS>
               	movq	%rbp, (%rax)
               	callq	0x424b00 <LookupTLS>
               	movq	(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	-64(%r14), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	251445(%rip), %rdx      # 0x4568c0 <ktypeglobal:kotlin.Any#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 8(%rbp)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x424b00 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r15)
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x424b00 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	nopl	(%rax)
               	movzbl	295329(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419300 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1c0>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	sete	%cl
               	cmpl	%ebp, %eax
               	je	0x419318 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1d8>
               	testb	%cl, %cl
               	je	0x4192f0 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1b0>
               	jmp	0x419321 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1e1>
               	movq	16(%rbx), %rax
               	lock
               	addl	$1, 8(%rax)
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a170 <ThrowFileFailedToInitializeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#unlock(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	295246(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419353 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movl	8(%rax), %eax
               	testl	%eax, %eax
               	jle	0x419369 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x29>
               	movq	16(%rbx), %rax
               	lock
               	addl	$-1, 8(%rax)
               	popq	%rbx
               	retq
               	callq	0x424b00 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	8(%rbx), %rcx
               	xorl	%edx, %edx
               	lock
               	cmpxchgl	%edx, 8(%rcx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	295078(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x419405 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x75>
               	movq	8(%r15), %rax
               	testl	$512, 88(%rax)          # imm = 0x200
               	jne	0x419417 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x87>
               	jmp	0x419446 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	testl	$512, 88(%rax)          # imm = 0x200
               	je	0x419446 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	movq	80(%rax), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x419446 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	leaq	32(%rsp), %rdx
               	movl	$46, %esi
               	callq	0x4201a0 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	movq	%rax, %rdi
               	movl	$36, %esi
               	movq	%r14, %rdx
               	callq	0x4201a0 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	jmp	0x419448 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb8>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	261041(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	movb	294818(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4194ff <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x8f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	88(%rax), %ecx
               	testl	$256, %ecx              # imm = 0x100
               	jne	0x419531 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xc1>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	72(%rax), %r15
               	movq	%r15, 24(%rsp)
               	xorl	%ebx, %ebx
               	testq	%r15, %r15
               	je	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	andl	$512, %ecx              # imm = 0x200
               	je	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	movq	80(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	testq	%rbx, %rbx
               	je	0x41950e <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x9e>
               	cmpl	$0, 8(%r15)
               	je	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	leaq	48(%rsp), %r12
               	leaq	80(%rsp), %r13
               	movq	%r13, 40(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	273713(%rip), %rsi      # 0x45c2c0 <__unnamed_26>
               	movq	%r13, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	jmp	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	nop

<kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	294600(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4195d9 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x419604 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x419604 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	8(%rbx), %rax
               	cmpq	%rax, 8(%r14)
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	294526(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419623 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	movl	289775(%rip), %eax      # 0x46021c <state_global$kotlin.native.internal.NativePtr>
               	cmpl	$2, %eax
               	je	0x419645 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x35>
               	leaq	289763(%rip), %rdi      # 0x46021c <state_global$kotlin.native.internal.NativePtr>
               	leaq	704(%rip), %rsi         # 0x419900 <kfun:kotlin.native.internal.NativePtr.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	xorl	%ebx, %eax
               	popq	%rbx
               	retq

<kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	294376(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4196b9 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String+0x69>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x419700 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	273458(%rip), %rsi      # 0x45c300 <__unnamed_27>
               	cmovneq	%rax, %rsi
               	leaq	273415(%rip), %rdi      # 0x45c2e0 <__unnamed_28>
               	movq	%r12, %rdx
               	callq	0x436ef0 <Kotlin_String_plusImpl>
               	movq	%rax, (%r12)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movups	%xmm0, 120(%rsp)
               	leaq	260385(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	294158(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419793 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x93>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	80(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	testq	%rbx, %rbx
               	je	0x419839 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x139>
               	movq	72(%rax), %r15
               	movq	%r15, 64(%rsp)
               	testq	%r15, %r15
               	je	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	movl	8(%r15), %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	cmpb	$0, 171183(%rip)        # 0x4434a8 <BOOLEAN_RANGE_TO>
               	jne	0x419840 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	testl	%ebp, %ebp
               	jne	0x419840 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	testl	%ebp, %ebp
               	movq	$0, 8(%rax)
               	leaq	250582(%rip), %rdx      # 0x456b00 <ktypeglobal:kotlin.Boolean#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	sete	24(%rax)
               	jmp	0x41985a <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x15a>
               	xorl	%ebx, %ebx
               	jmp	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	xorl	%eax, %eax
               	testl	%ebp, %ebp
               	sete	%al
               	shlq	$4, %rax
               	leaq	271790(%rip), %rcx      # 0x45be00 <BOOLEAN_CACHE>
               	addq	%rax, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	%rcx, 72(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	testq	%rcx, %rcx
               	je	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	cmpb	$0, 8(%rcx)
               	jne	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	leaq	88(%rsp), %r13
               	leaq	112(%rsp), %rbp
               	movq	%rbp, 80(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	272920(%rip), %rsi      # 0x45c2c0 <__unnamed_26>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.internal.NativePtr.$init_global#internal>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	293705(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419958 <kfun:kotlin.native.internal.NativePtr.$init_global#internal+0x58>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	255568(%rip), %rdx      # 0x457fd0 <ktypeglobal:kotlin.native.internal.NativePtr.Companion#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 288864(%rip)      # 0x4601f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	leaq	288857(%rip), %rdi      # 0x4601f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	288850(%rip), %rax      # 0x4601f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	$0, 8(%rax)
               	movq	288835(%rip), %rsi      # 0x4601f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	callq	0x424710 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	leaq	32(%rsp), %rbx
               	movups	%xmm0, 104(%rsp)
               	leaq	259652(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	293427(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419a6e <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x9e>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	96(%rsp), %rdi
               	movq	%rdi, 24(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	leaq	272574(%rip), %rbx      # 0x45c370 <__unnamed_29>
               	movq	%rbx, %rsi
               	cmpq	%r15, %rax
               	je	0x419ae3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	testq	%rax, %rax
               	je	0x419adc <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x10c>
               	leaq	40(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x419ae3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	leaq	271165(%rip), %rsi      # 0x45be20 <__unnamed_8>
               	movq	%rsi, 40(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	272543(%rip), %rsi      # 0x45c3a0 <__unnamed_30>
               	movq	%rbp, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*8(%rax)
               	cmpq	%r15, %rax
               	je	0x419b68 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	testq	%rax, %rax
               	je	0x419b61 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x191>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rbx
               	jmp	0x419b68 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	leaq	271032(%rip), %rbx      # 0x45be20 <__unnamed_8>
               	leaq	80(%rsp), %rdx
               	movq	%rbx, 72(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	293076(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419bcd <kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4199d0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<ThrowNullPointerException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	292948(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419c4d <ThrowNullPointerException+0x5d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	251236(%rip), %rcx      # 0x4571e0 <ktypeglobal:kotlin.NullPointerException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowArrayIndexOutOfBoundsException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	292740(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419d1d <ThrowArrayIndexOutOfBoundsException+0x5d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	251188(%rip), %rcx      # 0x457280 <ktypeglobal:kotlin.ArrayIndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowClassCastException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$176, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 160(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	254043(%rip), %rax      # 0x457e40 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 32(%rsp)
               	leaq	258662(%rip), %rcx      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 72(%rsp)
               	leaq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 80(%rsp)
               	movb	292420(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419e5d <ThrowClassCastException+0xcd>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 88(%rsp)
               	movq	%rbx, 16(%rsp)
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 96(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	112(%rsp), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	48(%rsp), %rdi
               	movq	%rdi, 104(%rsp)
               	movq	%rax, 56(%rsp)
               	callq	0x419650 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	120(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rdx
               	leaq	271612(%rip), %rsi      # 0x45c3c0 <__unnamed_31>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	136(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419650 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	144(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	152(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	250855(%rip), %rcx      # 0x457320 <ktypeglobal:kotlin.ClassCastException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 160(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	72(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowInvalidReceiverTypeException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	292021(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419fec <ThrowInvalidReceiverTypeException+0x6c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$27, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	leaq	32(%rsp), %rdx
               	testq	%rax, %rax
               	leaq	271408(%rip), %rsi      # 0x45c450 <__unnamed_32>
               	cmovneq	%rax, %rsi
               	leaq	271317(%rip), %rdi      # 0x45c400 <__unnamed_33>
               	callq	0x436ef0 <Kotlin_String_plusImpl>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	249278(%rip), %rcx      # 0x456e20 <ktypeglobal:kotlin.RuntimeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 40(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax)

<ThrowIllegalArgumentException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	291748(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a0fd <ThrowIllegalArgumentException+0x5d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	249396(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowFileFailedToInitializeException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	291540(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a1cd <ThrowFileFailedToInitializeException+0x5d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	251428(%rip), %rcx      # 0x457820 <ktypeglobal:kotlin.native.FileFailedToInitializeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	leaq	270948(%rip), %rsi      # 0x45c470 <__unnamed_34>
               	movq	%rbx, %rdi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<ReportUnhandledException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %rbx
               	movq	$0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 16(%rsp)
               	movb	291333(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a29c <ReportUnhandledException+0x5c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	270909(%rip), %rdi      # 0x45c4e0 <__unnamed_35>
               	callq	0x43a750 <Kotlin_io_Console_print>
               	movq	%rbx, %rdi
               	callq	0x416120 <kfun:kotlin.Throwable#printStackTrace(){}>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 80(%rsp)
               	movb	291146(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a357 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x67>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	253297(%rip), %rdx      # 0x4580f0 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movq	%rcx, 286313(%rip)      # 0x4601f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	286306(%rip), %rax      # 0x4601f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 8(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 144(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 104(%rsp)
               	leaq	96(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%rbx, 112(%rsp)
               	movl	286197(%rip), %eax      # 0x460210 <state_global$kotlin.native.MemoryModel>
               	cmpl	$2, %eax
               	je	0x41a433 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x143>
               	leaq	286185(%rip), %rdi      # 0x460210 <state_global$kotlin.native.MemoryModel>
               	leaq	-9054(%rip), %rsi       # 0x4180d0 <kfun:kotlin.native.MemoryModel.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	movq	286102(%rip), %r13      # 0x4601d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 32(%rsp)
               	movl	8(%r13), %ebp
               	testl	%ebp, %ebp
               	js	0x41a62c <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33c>
               	movq	296(%r15), %rdi
               	leaq	31(,%rbp,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	246932(%rip), %rax      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r14, 40(%rsp)
               	movl	8(%r13), %ebp
               	xorl	%r12d, %r12d
               	testl	%ebp, %ebp
               	cmovsl	%r12d, %ebp
               	cmpl	%r12d, %ebp
               	je	0x41a51b <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x22b>
               	nop
               	movzbl	290737(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a4f0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x200>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r13,%r12,8), %rax
               	movq	%rax, 48(%rsp)
               	movl	16(%rax), %ecx
               	cmpl	%ecx, 24(%rbx)
               	jbe	0x41a627 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x337>
               	movslq	%ecx, %rcx
               	movq	16(%rbx), %rdx
               	movq	%rax, 32(%rbx,%rcx,8)
               	addq	$1, %r12
               	cmpl	%r12d, %ebp
               	jne	0x41a4e0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x1f0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x41a631 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x341>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%r14, 120(%rsp)
               	cmpl	$2, 24(%rbx)
               	jbe	0x41a627 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x337>
               	movq	48(%rbx), %rdi
               	movq	%rdi, 152(%rsp)
               	movq	104(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	285799(%rip), %rax      # 0x4601d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	16(%rax), %rsi
               	movq	%rsi, 160(%rsp)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*112(%rax)
               	movl	%eax, %ebx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	250644(%rip), %rdx      # 0x4578c0 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rdx, 16(%rax)
               	testb	%bl, %bl
               	je	0x41a5c6 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2d6>
               	movq	%rcx, 168(%rsp)
               	movq	$0, 24(%rax)
               	jmp	0x41a5de <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2ee>
               	movq	%rcx, 176(%rsp)
               	movq	$0, 24(%rax)
               	movq	%rcx, 184(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rcx, 8(%rax)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	285691(%rip), %rsi      # 0x4601f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	leaq	285684(%rip), %rdi      # 0x4601f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	callq	0x424710 <InitAndRegisterGlobal>
               	movq	72(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	leaq	246552(%rip), %rsi      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%r14, %rdi
               	callq	0x419d90 <ThrowClassCastException>

<kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r14d
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 144(%rsp)
               	movups	%xmm0, 184(%rsp)
               	leaq	256443(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 176(%rsp)
               	movups	%xmm0, 160(%rsp)
               	movq	%rax, 152(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 16(%rsp)
               	movb	290201(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a708 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xc8>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41a737 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%r14d, %ebx
               	jg	0x41a737 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%ebx, %ebp
               	jg	0x41a804 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x1c4>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	32(%rsp), %r12
               	leaq	176(%rsp), %r13
               	movq	%r13, 24(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	269779(%rip), %rsi      # 0x45c530 <__unnamed_36>
               	movq	%r13, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebp, %esi
               	leaq	40(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	269794(%rip), %rsi      # 0x45c560 <__unnamed_37>
               	movq	%r13, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	268703(%rip), %rsi      # 0x45c140 <__unnamed_18>
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%r14d, %esi
               	leaq	72(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	leaq	80(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	247498(%rip), %rcx      # 0x456ec0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 88(%rsp)
               	jmp	0x41a8b4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x274>
               	leaq	112(%rsp), %r14
               	leaq	104(%rsp), %r13
               	leaq	152(%rsp), %r12
               	movq	%r12, 96(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	269569(%rip), %rsi      # 0x45c530 <__unnamed_36>
               	movq	%r12, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	269634(%rip), %rsi      # 0x45c590 <__unnamed_38>
               	movq	%r12, %rdi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	128(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	136(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	247480(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 144(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdi, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movq	$0, 224(%rsp)
               	movups	%xmm0, 248(%rsp)
               	leaq	255812(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 240(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 200(%rsp)
               	leaq	192(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 208(%rsp)
               	movb	289575(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a97a <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0xaa>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	240(%rsp), %rbx
               	movq	%rbx, 216(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	$0, 176(%rsp)
               	leaq	144(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	288(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 128(%rsp)
               	leaq	248525(%rip), %rax      # 0x4574d1 <ktypeglobal:kotlin.String#internal+0x1>
               	andq	$-4, %rax
               	movq	%rax, 8(%rsp)
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	267318(%rip), %r14      # 0x45be60 <__unnamed_39>
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r12, %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 136(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%rax, %r12
               	movl	$1, %ebp
               	leaq	32(%rsp), %r14
               	jmp	0x41aa9f <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1cf>
               	nop
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	leaq	80(%rsp), %rdx
               	callq	0x41eaa0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addl	$1, %ebp
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41acba <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3ea>
               	movzbl	289220(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aadd <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x20d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	leaq	152(%rsp), %rsi
               	callq	*8(%rax)
               	movq	%rax, %r15
               	cmpl	$2, %ebp
               	jl	0x41ab6b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x29b>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %r14
               	movq	%r13, %r12
               	leaq	267012(%rip), %r13      # 0x45be40 <__unnamed_40>
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	movq	%r12, %r13
               	movq	%r14, %r12
               	leaq	32(%rsp), %r14
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	leaq	160(%rsp), %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r14, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	cmpq	$0, 16(%rsp)
               	je	0x41ac10 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x340>
               	movq	16(%rsp), %rcx
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	8(%rcx), %rdi
               	leaq	251029(%rip), %rcx      # 0x458060 <ktypeglobal:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	cmpq	%rcx, %rax
               	je	0x41ac70 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3a0>
               	leaq	269157(%rip), %rsi      # 0x45c740 <__unnamed_41>
               	cmpq	%rdi, %r15
               	je	0x41ac07 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	leaq	266809(%rip), %rsi      # 0x45be20 <__unnamed_8>
               	testq	%r15, %r15
               	je	0x41ac07 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%rsi, 64(%rsp)
               	jmp	0x41ac85 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3b5>
               	nop
               	testq	%r15, %r15
               	je	0x41aa80 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	cmpl	$25, (%rax,%rcx)
               	je	0x41aa80 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$84, 92(%rax)
               	jne	0x41ac92 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3c2>
               	movzwl	8(%r15), %esi
               	movq	%rbx, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41e9c0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x41aa90 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1c0>
               	nopw	%cs:(%rax,%rax)
               	movq	%r15, %rsi
               	leaq	56(%rsp), %rdx
               	callq	0x4199d0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, %rsi
               	movq	%rax, 56(%rsp)
               	movq	%rbx, %rdi
               	leaq	72(%rsp), %rdx
               	jmp	0x41aa8b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	leaq	104(%rsp), %rdx
               	jmp	0x41aa8b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	leaq	176(%rsp), %r14
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	266652(%rip), %rbp      # 0x45be80 <__unnamed_10>
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 176(%rsp)
               	movq	%rbx, 224(%rsp)
               	movq	120(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	200(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	288568(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ad69 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41ae17 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc7>
               	testq	%rbx, %rbx
               	je	0x41ae10 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41ae10 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41ae10 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	16(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movb	288357(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ae3c <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x1c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	xorl	%ebp, %ebp
               	jmp	0x41af10 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xf0>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41af50 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x130>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41af54 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x134>
               	movzbl	288088(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aed0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41aed0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41af0e <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xee>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%ebp, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288014(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41af93 <kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	287982(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afb3 <kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpl	$0, 76(%rbx)
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	287944(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afd9 <kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	movb	287871(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b022 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x22>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movl	68(%r12), %r13d
               	leal	-1(%r13), %eax
               	movslq	%eax, %rbx
               	jmp	0x41b08d <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x8d>
               	nop
               	testq	%r14, %r14
               	je	0x41b121 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x121>
               	addq	$-1, %rbx
               	testl	%ebx, %ebx
               	js	0x41b0f4 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xf4>
               	movzbl	287744(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b0a1 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xa1>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b126 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	addl	$-1, %r13d
               	cmpl	$0, 16(%rax,%rbx,4)
               	js	0x41b089 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41b12b <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x12b>
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b126 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	movq	16(%rax,%rbx,8), %rdi
               	movq	%rdi, 40(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b080 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x80>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41b089 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	jmp	0x41b0fa <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	movl	$4294967295, %r13d      # imm = 0xFFFFFFFF
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testl	%r13d, %r13d
               	setns	%al
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ebx, %r13d
               	jmp	0x41b0fa <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419bf0 <ThrowNullPointerException>

<kfun:kotlin.collections.HashMap#get(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	287498(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b197 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x67>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41b1c6 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x96>
               	movq	16(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	testq	%rcx, %rcx
               	je	0x41b1e3 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb3>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41b1e8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb8>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, (%r14)
               	jmp	0x41b1c8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x98>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	287288(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b269 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x79>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	movl	%eax, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movq	16(%r12), %rcx
               	movq	%rcx, 104(%rsp)
               	testq	%rcx, %rcx
               	jne	0x41b369 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x179>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	8(%r12), %rax
               	movq	%rax, 72(%rsp)
               	movl	8(%rax), %r13d
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%r13d, %r13d
               	js	0x41b3d4 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1e4>
               	movq	296(%rbx), %rdi
               	leaq	31(,%r13,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	243193(%rip), %rdx      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r13d, 24(%rax)
               	movq	%rcx, 120(%rsp)
               	movq	%rcx, 16(%r12)
               	movq	%rcx, 24(%rsp)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%ebp, %ebp
               	js	0x41b392 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1a2>
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3cf <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movq	(%rcx), %rax
               	movslq	%ebp, %rax
               	movq	%r15, 16(%rcx,%rax,8)
               	xorl	%eax, %eax
               	jmp	0x41b3ae <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1be>
               	notl	%ebp
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3cf <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movslq	%ebp, %rdx
               	movq	16(%rcx,%rdx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	(%rcx), %rsi
               	movq	%r15, 16(%rcx,%rdx,8)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	244580(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	264884(%rip), %rsi      # 0x45bec0 <__unnamed_42>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#remove(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	286735(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b492 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0x72>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41cd00 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x41b4ca <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xaa>
               	movq	16(%rbx), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b4eb <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xcb>
               	cmpl	%eax, 8(%rdi)
               	jbe	0x41b4f0 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xd0>
               	movslq	%eax, %rcx
               	movq	16(%rdi,%rcx,8), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	%eax, %esi
               	callq	0x417fb0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	jmp	0x41b4cc <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xac>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	286518(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b56b <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0x6b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	40(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b5b5 <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	250524(%rip), %rdx      # 0x458840 <ktypeglobal:kotlin.collections.HashMapKeys#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 40(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	286310(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b63b <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x6b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b685 <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	250556(%rip), %rdx      # 0x458930 <ktypeglobal:kotlin.collections.HashMapEntrySet#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 56(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	286178(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b6bf <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x1f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41b79f <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xff>
               	testq	%rbx, %rbx
               	je	0x41b79b <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	cmpl	$65, (%rax,%rcx)
               	jne	0x41b79b <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movl	76(%r14), %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41b7a3 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x103>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41d3c0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	movl	%eax, %ecx
               	jmp	0x41b7a5 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x105>
               	xorl	%ecx, %ecx
               	jmp	0x41b7bb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	movb	$1, %cl
               	jmp	0x41b7bb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	xorl	%ecx, %ecx
               	movq	%r15, %rax
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	285800(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b839 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x69>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d5f0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r14d, %r14d
               	leaq	32(%rsp), %r12
               	movabsq	$34359738368, %r13      # imm = 0x800000000
               	jmp	0x41b886 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xb6>
               	nop
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	xorl	%eax, %ebp
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addl	%ebp, %r14d
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	jge	0x41b96d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x19d>
               	movzbl	285691(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b8a6 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xd6>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r12, 288(%r15)
               	movq	%r13, 48(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41b990 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1c0>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rsp)
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b98b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b930 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x160>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	jmp	0x41b932 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x162>
               	nopl	(%rax)
               	xorl	%ebp, %ebp
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 80(%rsp)
               	testq	%rax, %rax
               	je	0x41b9d3 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x203>
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b98b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 88(%rsp)
               	testq	%rdi, %rdi
               	jne	0x41b860 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x90>
               	xorl	%eax, %eax
               	jmp	0x41b86d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x9d>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%r14d, %eax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	242632(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	callq	0x419bf0 <ThrowNullPointerException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, 8(%rsp)
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	48(%rsp), %rbp
               	leaq	56(%rsp), %r15
               	movups	%xmm0, 216(%rsp)
               	leaq	251447(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 208(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 32(%rsp)
               	movb	285219(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ba7e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x9e>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	leal	(%rax,%rax,2), %esi
               	addl	$2, %esi
               	leaq	208(%rsp), %r12
               	movq	%r12, 40(%rsp)
               	movq	%r12, %rdi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	264333(%rip), %rsi      # 0x45c330 <__unnamed_43>
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41d5f0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	jmp	0x41bafa <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	leaq	192(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addl	$1, %r13d
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	jge	0x41bd04 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x324>
               	movzbl	285063(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bb1a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x13a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r13d, %r13d
               	jle	0x41bb33 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x153>
               	movq	%r12, %rdi
               	leaq	262935(%rip), %rsi      # 0x45be40 <__unnamed_40>
               	leaq	64(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 192(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 96(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41bd56 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x376>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 112(%rsp)
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd51 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x371>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %r15
               	movq	%r15, 120(%rsp)
               	testq	%r15, %r15
               	je	0x41bc10 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x230>
               	movq	8(%rbx), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bc20 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x240>
               	movq	%r12, %rdi
               	leaq	264046(%rip), %rsi      # 0x45c370 <__unnamed_29>
               	leaq	128(%rsp), %rdx
               	jmp	0x41bc49 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x269>
               	nop
               	xorl	%esi, %esi
               	jmp	0x41bc3e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x25e>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	136(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	leaq	144(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	$61, %esi
               	leaq	152(%rsp), %rdx
               	callq	0x41e9c0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 160(%rsp)
               	testq	%rax, %rax
               	je	0x41bd99 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3b9>
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd51 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x371>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 168(%rsp)
               	testq	%rbp, %rbp
               	je	0x41bad0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf0>
               	movq	8(%rbx), %rsi
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bce0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x300>
               	movq	%r12, %rdi
               	leaq	263848(%rip), %rsi      # 0x45c370 <__unnamed_29>
               	leaq	176(%rsp), %rdx
               	jmp	0x41badd <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xfd>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	leaq	184(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	jmp	0x41bad2 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf2>
               	leaq	72(%rsp), %rdx
               	leaq	263744(%rip), %rsi      # 0x45c350 <__unnamed_44>
               	leaq	208(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	8(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241666(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	callq	0x419bf0 <ThrowNullPointerException>
               	nop

<kfun:kotlin.collections.HashMap#checkIsMutable(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	284324(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bdfd <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x5d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 80(%r14)
               	je	0x41be18 <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x78>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	242272(%rip), %rcx      # 0x4570a0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.rehash#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 144(%rsp)
               	movb	284093(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bee4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	cmpl	%eax, 68(%rbx)
               	jle	0x41c01e <kfun:kotlin.collections.HashMap.rehash#internal+0x1be>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movq	16(%rbx), %r15
               	movq	%r15, 56(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	jmp	0x41bf60 <kfun:kotlin.collections.HashMap.rehash#internal+0x100>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	movq	%rdx, 16(%r15,%rcx,8)
               	addl	$1, %r12d
               	addq	$1, %r13
               	movl	68(%rbx), %edx
               	movslq	%edx, %rax
               	cmpq	%rax, %r13
               	jge	0x41bfea <kfun:kotlin.collections.HashMap.rehash#internal+0x18a>
               	movzbl	283942(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bf7b <kfun:kotlin.collections.HashMap.rehash#internal+0x11b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %rax
               	movq	%rax, 64(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	cmpl	$0, 16(%rax,%r13,4)
               	js	0x41bf5c <kfun:kotlin.collections.HashMap.rehash#internal+0xfc>
               	movq	8(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%rax,%r13,8), %rdx
               	movq	%rdx, 88(%rsp)
               	cmpl	%r12d, %ecx
               	jbe	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	(%rax), %rcx
               	movslq	%r12d, %rcx
               	movq	%rdx, 16(%rax,%rcx,8)
               	testq	%r15, %r15
               	je	0x41bf58 <kfun:kotlin.collections.HashMap.rehash#internal+0xf8>
               	movl	8(%r15), %eax
               	cmpq	%rax, %r13
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%r15,%r13,8), %rdx
               	movq	%rdx, 96(%rsp)
               	cmpl	%r12d, %eax
               	ja	0x41bf50 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%r12d, %esi
               	callq	0x418010 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	testq	%r15, %r15
               	je	0x41c00e <kfun:kotlin.collections.HashMap.rehash#internal+0x1ae>
               	movl	68(%rbx), %edx
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x418010 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	movl	%r12d, 68(%rbx)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rdx
               	movq	%rdx, 288(%rbp)
               	movabsq	$17179869184, %r13      # imm = 0x400000000
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%r14d, %eax
               	jne	0x41c112 <kfun:kotlin.collections.HashMap.rehash#internal+0x2b2>
               	movq	32(%rbx), %r15
               	movq	%r15, 160(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdx, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r14d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	8(%r15), %edx
               	xorl	%r12d, %r12d
               	xorl	%edi, %edi
               	movl	%r14d, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%r15), %rax
               	testl	%r14d, %r14d
               	jle	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	16(%r15), %r9
               	leal	-1(%r14), %r8d
               	cmpl	$7, %r8d
               	jb	0x41c249 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e9>
               	addq	$1, %r8
               	movq	%r8, %r12
               	andq	$-8, %r12
               	leaq	-8(%r12), %rax
               	movq	%rax, %rsi
               	shrq	$3, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$56, %rax
               	jae	0x41c185 <kfun:kotlin.collections.HashMap.rehash#internal+0x325>
               	xorl	%eax, %eax
               	jmp	0x41c20e <kfun:kotlin.collections.HashMap.rehash#internal+0x3ae>
               	testl	%r14d, %r14d
               	js	0x41c482 <kfun:kotlin.collections.HashMap.rehash#internal+0x622>
               	movq	296(%rbp), %rdi
               	movl	%r14d, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	239900(%rip), %rdx      # 0x456a70 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r14d, 24(%rax)
               	movq	%rcx, 152(%rsp)
               	movq	%rcx, 32(%rbx)
               	bsrl	%r14d, %eax
               	xorl	$31, %eax
               	addl	$1, %eax
               	testl	%r14d, %r14d
               	movl	$33, %ecx
               	cmovnel	%eax, %ecx
               	movl	%ecx, 72(%rbx)
               	jmp	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	240(%r15), %rdi
               	andq	$-8, %rsi
               	negq	%rsi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopl	(%rax,%rax)
               	movups	%xmm0, -208(%rdi,%rcx,4)
               	movups	%xmm0, -224(%rdi,%rcx,4)
               	movups	%xmm0, -192(%rdi,%rcx,4)
               	movups	%xmm0, -176(%rdi,%rcx,4)
               	movups	%xmm0, -160(%rdi,%rcx,4)
               	movups	%xmm0, -144(%rdi,%rcx,4)
               	movups	%xmm0, -128(%rdi,%rcx,4)
               	movups	%xmm0, -112(%rdi,%rcx,4)
               	movups	%xmm0, -96(%rdi,%rcx,4)
               	movups	%xmm0, -80(%rdi,%rcx,4)
               	movups	%xmm0, -64(%rdi,%rcx,4)
               	movups	%xmm0, -48(%rdi,%rcx,4)
               	movups	%xmm0, -32(%rdi,%rcx,4)
               	movups	%xmm0, -16(%rdi,%rcx,4)
               	leaq	64(%rcx), %rax
               	movups	%xmm0, 16(%rdi,%rcx,4)
               	movups	%xmm0, (%rdi,%rcx,4)
               	movq	%rax, %rcx
               	addq	$8, %rsi
               	jne	0x41c1a0 <kfun:kotlin.collections.HashMap.rehash#internal+0x340>
               	testq	%rdx, %rdx
               	je	0x41c240 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e0>
               	leaq	(%r15,%rax,4), %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x41c230 <kfun:kotlin.collections.HashMap.rehash#internal+0x3d0>
               	cmpq	%r12, %r8
               	je	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	(%r9,%r12,4), %r9
               	subl	%r12d, %r14d
               	xorl	%eax, %eax
               	nop
               	movl	$0, (%r9,%rax,4)
               	addq	$1, %rax
               	cmpl	%eax, %r14d
               	jne	0x41c250 <kfun:kotlin.collections.HashMap.rehash#internal+0x3f0>
               	xorl	%r14d, %r14d
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jge	0x41c40a <kfun:kotlin.collections.HashMap.rehash#internal+0x5aa>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movb	283154(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c28f <kfun:kotlin.collections.HashMap.rehash#internal+0x42f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 48(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%rax,%r14,8), %rdi
               	movq	%rdi, 64(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c310 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %r15d # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %r15d
               	jmp	0x41c313 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b3>
               	xorl	%r15d, %r15d
               	leaq	1(%r14), %rax
               	movq	%rax, 120(%rsp)
               	movl	64(%rbx), %r12d
               	jmp	0x41c334 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addl	$-1, %r15d
               	addl	$-1, %r12d
               	movzbl	282969(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c348 <kfun:kotlin.collections.HashMap.rehash#internal+0x4e8>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	cmpl	%r15d, 8(%rax)
               	jbe	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movslq	%r15d, %rcx
               	cmpl	$0, 16(%rax,%rcx,4)
               	je	0x41c3c0 <kfun:kotlin.collections.HashMap.rehash#internal+0x560>
               	testl	%r12d, %r12d
               	js	0x41c42b <kfun:kotlin.collections.HashMap.rehash#internal+0x5cb>
               	testl	%r15d, %r15d
               	jne	0x41c330 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r15d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c330 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	movq	%rax, 80(%rsp)
               	movq	(%rax), %rdx
               	movq	120(%rsp), %rdx
               	movl	%edx, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	(%rax), %rcx
               	movl	%r15d, 16(%rax,%r14,4)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rdx, %r14
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jl	0x41c280 <kfun:kotlin.collections.HashMap.rehash#internal+0x420>
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	240545(%rip), %rcx      # 0x457000 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 168(%rsp)
               	leaq	262638(%rip), %rsi      # 0x45c660 <__unnamed_45>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.findKey#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 48(%rsp)
               	movb	282530(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c4ff <kfun:kotlin.collections.HashMap.findKey#internal+0x6f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41c523 <kfun:kotlin.collections.HashMap.findKey#internal+0x93>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %ebx # imm = 0x9E3779B9
               	movl	72(%r12), %ecx
               	shrl	%cl, %ebx
               	jmp	0x41c525 <kfun:kotlin.collections.HashMap.findKey#internal+0x95>
               	xorl	%ebx, %ebx
               	movl	64(%r12), %r13d
               	jmp	0x41c533 <kfun:kotlin.collections.HashMap.findKey#internal+0xa3>
               	nop
               	addl	$-1, %ebx
               	addl	$-1, %r13d
               	movzbl	282458(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c547 <kfun:kotlin.collections.HashMap.findKey#internal+0xb7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%r12), %rax
               	movq	%rax, 56(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41c638 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebx, %rcx
               	movl	16(%rax,%rcx,4), %ebp
               	testl	%ebp, %ebp
               	je	0x41c616 <kfun:kotlin.collections.HashMap.findKey#internal+0x186>
               	jle	0x41c5b5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	addl	$-1, %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41c638 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebp, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c5b0 <kfun:kotlin.collections.HashMap.findKey#internal+0x120>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41c5b5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	jmp	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testq	%r14, %r14
               	je	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	testl	%r13d, %r13d
               	js	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testl	%ebx, %ebx
               	jne	0x41c530 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ebx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	jmp	0x41c530 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%ebp, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 192(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 144(%rsp)
               	movb	282057(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6d8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x98>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	xorps	%xmm0, %xmm0
               	movq	%rbp, 40(%rsp)
               	movb	282026(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6fa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xba>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	xorl	%r15d, %r15d
               	movl	$0, %r13d
               	testq	%r14, %r14
               	je	0x41c728 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xe8>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	imull	$2654435769, %eax, %r13d # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %r13d
               	movq	%r14, %r12
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rdx
               	movq	288(%rdx), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rdx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	movq	8(%rsp), %rcx
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	movq	%rcx, 288(%rdx)
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	jmp	0x41c7a8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x168>
               	nopl	(%rax,%rax)
               	addl	$1, %r15d
               	addl	$-1, %r13d
               	movzbl	281833(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c7bb <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x17b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movq	32(%rbx), %rcx
               	movq	%rcx, 152(%rsp)
               	cmpl	%r13d, 8(%rcx)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%r13d, %rax
               	movl	16(%rcx,%rax,4), %ebp
               	testl	%ebp, %ebp
               	jle	0x41c8a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x260>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%rbp), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c830 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rsi
               	callq	*112(%rax)
               	xorps	%xmm0, %xmm0
               	testb	%al, %al
               	je	0x41c839 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f9>
               	jmp	0x41cc13 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d3>
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x41cc13 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d3>
               	cmpl	%r15d, %r14d
               	je	0x41cac0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x480>
               	testl	%r13d, %r13d
               	jne	0x41c7a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rcx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r13d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rcx)
               	jmp	0x41c7a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	nopl	(%rax)
               	movl	68(%rbx), %r8d
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	%rsp, %rdi
               	movq	%rdi, 288(%rbp)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	8(%rbx), %rdx
               	movq	%rdx, 24(%rsp)
               	movl	8(%rdx), %edx
               	movq	8(%rsp), %rsi
               	movq	%rsi, 288(%rbp)
               	cmpl	%edx, %r8d
               	jl	0x41cc3d <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5fd>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdi, 288(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	68(%rbx), %eax
               	movl	%esi, %edx
               	subl	%eax, %edx
               	testl	%edx, %edx
               	movq	%r12, %r14
               	movq	%rdi, %r12
               	movq	%rcx, %r13
               	jg	0x41c99c <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
               	movl	76(%rbx), %edx
               	subl	%edx, %esi
               	testl	%esi, %esi
               	jle	0x41c99c <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
               	subl	%edx, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	3(%rcx), %edx
               	testl	%ecx, %ecx
               	cmovnsl	%ecx, %edx
               	sarl	$2, %edx
               	cmpl	%edx, %eax
               	jge	0x41cb20 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>
               	movl	68(%rbx), %eax
               	incl	%eax
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	movabsq	$42949672960, %rcx      # imm = 0xA00000000
               	movq	%rcx, 64(%rsp)
               	js	0x41ccb5 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x675>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	cmpl	%eax, %ecx
               	jge	0x41cc02 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5c2>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	(%rcx,%rcx,2), %ecx
               	movl	%ecx, %r15d
               	shrl	$31, %r15d
               	addl	%ecx, %r15d
               	sarl	%r15d
               	cmpl	%eax, %r15d
               	cmovll	%eax, %r15d
               	movq	8(%rbx), %rdi
               	movq	%rdi, 80(%rsp)
               	movl	%r15d, %esi
               	leaq	88(%rsp), %rdx
               	callq	0x4152e0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 88(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 96(%rsp)
               	testq	%rdi, %rdi
               	je	0x41cb69 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x529>
               	movl	%r15d, %esi
               	leaq	104(%rsp), %rdx
               	callq	0x4152e0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 104(%rsp)
               	jmp	0x41cb6b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x52b>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	%r12, %r14
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	xorl	%eax, %eax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rdi
               	movq	%rdi, 112(%rsp)
               	movl	%r15d, %esi
               	leaq	120(%rsp), %rdx
               	callq	0x4155a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 24(%rbx)
               	testl	%r15d, %r15d
               	jle	0x41cba2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x562>
               	leal	(%r15,%r15,2), %eax
               	testl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	jne	0x41cbaa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x56a>
               	xorl	%esi, %esi
               	jmp	0x41cbba <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x57a>
               	movl	$3, %eax
               	xorps	%xmm0, %xmm0
               	bsrl	%eax, %ecx
               	xorl	$31, %ecx
               	xorb	$31, %cl
               	movl	$1, %esi
               	shll	%cl, %esi
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%eax, %esi
               	jle	0x41cc02 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5c2>
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	negl	%ebp
               	movq	136(%rsp), %rax
               	movq	40(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	movl	%ebp, %eax
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	68(%rbx), %ebp
               	leal	1(%rbp), %ecx
               	movl	%ecx, 68(%rbx)
               	movq	8(%rbx), %rsi
               	movq	%rsi, 160(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%ebp, %rdx
               	movq	(%rsi), %rdi
               	movq	%r12, 16(%rsi,%rdx,8)
               	movq	24(%rbx), %rsi
               	movq	%rsi, 168(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movq	(%rsi), %rdi
               	movl	%r13d, 16(%rsi,%rdx,4)
               	movq	32(%rbx), %rdx
               	movq	%rdx, 176(%rsp)
               	cmpl	%r13d, 8(%rdx)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movq	(%rdx), %rsi
               	movl	%ecx, 16(%rdx,%rax,4)
               	movl	76(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 76(%rbx)
               	cmpl	64(%rbx), %r15d
               	jle	0x41cc15 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
               	movl	%r15d, 64(%rbx)
               	jmp	0x41cc15 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	239331(%rip), %rcx      # 0x4573c0 <ktypeglobal:kotlin.OutOfMemoryError#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	280456(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cd19 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41cd3e <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x3e>
               	movl	%eax, %ebp
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	callq	0x41cd50 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	jmp	0x41cd43 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x43>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movl	%ebp, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.removeKeyAt#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movb	280283(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cdc6 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x76>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%ebp, %esi
               	callq	0x417fb0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	movq	24(%rbx), %rax
               	movq	%rax, 112(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movl	%ebp, 12(%rsp)
               	movslq	%ebp, %rcx
               	movq	%rcx, 64(%rsp)
               	movl	16(%rax,%rcx,4), %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	56(%rsp), %rsi
               	movq	288(%rsi), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 144(%rsp)
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	jmp	0x41ceee <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x19e>
               	movq	(%rax), %rcx
               	movq	72(%rsp), %rcx
               	movl	%edx, 16(%rax,%rcx,4)
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	addl	$-1, %r14d
               	js	0x41d117 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3c7>
               	movzbl	279971(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x41cf20 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1d0>
               	testl	%r12d, %r12d
               	je	0x41cf2f <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1df>
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jle	0x41cf8e <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x23e>
               	jmp	0x41d0dd <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%rsp), %rsi
               	testl	%r12d, %r12d
               	jne	0x41cefe <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1ae>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movl	8(%rax), %r12d
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jg	0x41d0dd <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	addl	$-1, %r12d
               	movq	%rax, 160(%rsp)
               	movl	8(%rax), %ecx
               	cmpl	%r12d, %ecx
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movslq	%r12d, %rdx
               	movl	16(%rax,%rdx,4), %r13d
               	testl	%r13d, %r13d
               	je	0x41d0f3 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3a3>
               	js	0x41d010 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2c0>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%r13), %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movslq	%ebp, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41d040 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	56(%rsp), %rsi
               	imull	$2654435769, %eax, %eax # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %eax
               	jmp	0x41d042 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f2>
               	nop
               	movq	%rax, 176(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	jmp	0x41cedc <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x18c>
               	nopw	(%rax,%rax)
               	xorl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	subl	%r12d, %eax
               	addl	$-1, %ecx
               	andl	%eax, %ecx
               	cmpl	%r15d, %ecx
               	jl	0x41cee4 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x194>
               	movq	32(%rbx), %rax
               	movq	%rax, 200(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	%r13d, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 208(%rsp)
               	cmpl	%ebp, 8(%rax)
               	ja	0x41ced0 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x180>
               	jmp	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	%rax, 152(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	ja	0x41d107 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3b7>
               	jmp	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	%rax, 168(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$0, 16(%rax,%rcx,4)
               	jmp	0x41d13a <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3ea>
               	movq	32(%rbx), %rax
               	movq	%rax, 216(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	12(%rsp), %ecx
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movq	24(%rbx), %rax
               	movq	%rax, 120(%rsp)
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movq	64(%rsp), %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	76(%rbx), %eax
               	addl	$-1, %eax
               	movl	%eax, 76(%rbx)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	279176(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d219 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x79>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d2b6 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x116>
               	movq	16(%r14), %rcx
               	movq	%rcx, 32(%rsp)
               	testq	%rcx, %rcx
               	je	0x41d2da <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13a>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d2df <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13f>
               	leaq	48(%rsp), %rsi
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*8(%rax)
               	testq	%rbx, %rbx
               	je	0x41d2ba <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x11a>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41d2c0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	xorl	%eax, %eax
               	jmp	0x41d2c0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	testq	%rax, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	278849(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d360 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0x70>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d394 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa4>
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d3b1 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xc1>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	jne	0x41d396 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa6>
               	callq	0x419bf0 <ThrowNullPointerException>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r12
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	278640(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d431 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x71>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r14
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41d502 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x142>
               	movzbl	278536(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d499 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xd9>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41d4fe <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	60(%rcx), %edx
               	movq	64(%rcx), %rcx
               	andl	$168, %edx
               	shlq	$4, %rdx
               	cmpl	$168, (%rcx,%rdx)
               	jne	0x41d51f <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x15f>
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41d1a0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x41d460 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xa0>
               	xorl	%eax, %eax
               	jmp	0x41d504 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x144>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	243866(%rip), %rsi      # 0x458dc0 <kclass:kotlin.collections.Map.Entry>
               	movq	%rax, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	jmp	0x41d530 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x170>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$4294967165, %eax       # imm = 0xFFFFFF7D
               	cmpl	$2, %eax
               	jb	0x41d4fe <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nop

<kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	278295(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d58a <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>+0x1a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241867(%rip), %rcx      # 0x458690 <ktypeglobal:kotlin.collections.HashMap.KeysItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	278167(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d60a <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>+0x1a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241883(%rip), %rcx      # 0x458720 <ktypeglobal:kotlin.collections.HashMap.EntriesItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#initNext(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	277972(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6d9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6d9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
               	nop
               	movl	16(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 16(%rbx)
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d70e <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x9e>
               	movq	24(%rcx), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d722 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xb2>
               	cltq
               	cmpl	$0, 16(%rcx,%rax,4)
               	jns	0x41d70e <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x9e>
               	movzbl	277909(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6d0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x60>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6d0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x60>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	277854(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d743 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	setl	%al
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#remove(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	277806(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d773 <kfun:kotlin.collections.HashMap.Itr#remove(){}+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	8(%rbx), %rdi
               	movl	20(%rbx), %esi
               	callq	0x41cd50 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movl	$4294967295, 20(%rbx)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	277654(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d80b <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %ecx
               	movq	8(%r15), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41d869 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc9>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%r15)
               	movl	%ecx, 20(%r15)
               	movq	8(%rax), %rax
               	movq	%rax, 32(%rsp)
               	movl	20(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d8ad <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x10d>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	%r15, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234734(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	277359(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d932 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %eax
               	movq	8(%r15), %r13
               	cmpl	68(%r13), %eax
               	jge	0x41d9b2 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf2>
               	leal	1(%rax), %ecx
               	movl	%ecx, 16(%r15)
               	movl	%eax, 20(%r15)
               	movl	20(%r15), %ebp
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241208(%rip), %rcx      # 0x4587b0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r13, 24(%rax)
               	movl	%ebp, 32(%rax)
               	movq	%r15, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234405(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	277055(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41da62 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x62>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movl	16(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41da99 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x99>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	276895(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41db02 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x62>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	je	0x41db3e <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9e>
               	movl	16(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41db43 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa3>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	276701(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dbc4 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x74>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41dcab <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41dcab <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	32(%rsp), %r12
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%rax, %r15
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%r15, %r15
               	je	0x41dca6 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x156>
               	movq	(%r15), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41dcab <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41daa0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rbx, %rbx
               	je	0x41dcc7 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x177>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41dcad <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	testq	%rax, %rax
               	je	0x41dc4e <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0xfe>
               	xorl	%eax, %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%rax, %rax
               	sete	%al
               	jmp	0x41dcad <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	24(%rsp), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	276319(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dd42 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0x72>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r15
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	xorl	%ebx, %ebx
               	movl	$0, %ebp
               	testq	%rax, %rax
               	je	0x41dd70 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xa0>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebp
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41daa0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41dd92 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xc2>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebx
               	xorl	%ebx, %ebp
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movl	%ebp, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	64(%rsp), %rbp
               	movups	%xmm0, 16(%rsp)
               	leaq	242278(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 48(%rsp)
               	movb	276053(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de4c <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x9c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r13
               	leaq	88(%rsp), %r12
               	leaq	8(%rsp), %rdi
               	movq	%rdi, 56(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%rax, %rax
               	je	0x41de97 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe7>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41de99 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe9>
               	xorl	%esi, %esi
               	leaq	8(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	255216(%rip), %rsi      # 0x45c3a0 <__unnamed_30>
               	movq	%rbp, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rsi
               	callq	0x41daa0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41deea <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13a>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41deec <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13c>
               	xorl	%esi, %esi
               	leaq	112(%rsp), %rdx
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	275806(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df43 <kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	275774(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df63 <kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	275736(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df89 <kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	275668(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dfcd <kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?+0x1d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d2f0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	275545(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e048 <kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean+0x58>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	233520(%rip), %rcx      # 0x4570a0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	275448(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0a9 <kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cd00 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	275384(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0e9 <kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d570 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	275323(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e126 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x26>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbp), %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e279 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movl	%eax, %r13d
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e2a6 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1a6>
               	cmpl	%r13d, 8(%rax)
               	jbe	0x41e2ab <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r13d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e274 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x174>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e279 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	238925(%rip), %rdx      # 0x4587b0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%r15)
               	movq	%r12, 24(%rax)
               	movl	%r13d, 32(%rax)
               	jmp	0x41e27b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x17b>
               	testq	%rax, %rax
               	je	0x41e234 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x134>
               	xorl	%ecx, %ecx
               	movq	%rcx, (%r15)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movq	%rcx, (%r15)
               	movq	%rcx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	274904(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2c9 <kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d5f0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	274862(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2f3 <kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	274830(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e313 <kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	274792(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e339 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e375 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e375 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d1a0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	274692(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e39d <kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?+0x1d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	*248(%rax)
               	movq	%rax, (%r15)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	274569(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e418 <kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean+0x58>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	232544(%rip), %rcx      # 0x4570a0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	274464(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e481 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x21>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e5d6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e5d6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	8(%rbp), %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e5df <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movl	%eax, %r12d
               	movq	16(%r15), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e606 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1a6>
               	cmpl	%r12d, 8(%rax)
               	jbe	0x41e60b <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r12d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e5da <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17a>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e5df <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x41cd50 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movb	$1, %cl
               	jmp	0x41e5e1 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x181>
               	xorl	%ecx, %ecx
               	jmp	0x41e5f7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x197>
               	testq	%rax, %rax
               	je	0x41e5c7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x167>
               	xorl	%ecx, %ecx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	274040(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e629 <kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d3c0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	273998(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e653 <kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	273966(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e673 <kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	273928(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e699 <kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	273860(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e6dd <kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?+0x1d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d2f0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	273800(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e719 <kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	273736(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e759 <kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cd00 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	273672(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e799 <kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d570 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	273553(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e810 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0x60>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41e871 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0xc1>
               	movq	296(%rbx), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	229780(%rip), %rdx      # 0x4569e0 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 8(%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	273422(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e893 <kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 16(%rsp)
               	movb	273311(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e902 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x62>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r15, 48(%rsp)
               	testl	%ebp, %ebp
               	js	0x41e96f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	cmpl	%ebp, 16(%r14)
               	jle	0x41e96f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	8(%r14), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41e9b2 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x112>
               	movslq	%ebp, %rcx
               	movzwl	16(%rax,%rcx,2), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	230697(%rip), %rcx      # 0x456ec0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, 8(%rsp)
               	movl	%esi, %r15d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	273008(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ea31 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0x71>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 40(%rsp)
               	movl	16(%rbx), %r14d
               	leal	1(%r14), %r13d
               	movq	%rbx, %rdi
               	movl	%r13d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r13d, 16(%rbx)
               	cmpl	%r14d, 8(%rbp)
               	jbe	0x41ea99 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd9>
               	movslq	%r14d, %rax
               	movq	(%rbp), %rcx
               	movw	%r15w, 16(%rbp,%rax,2)
               	movq	8(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	movb	272865(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eac0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder+0x20>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	leaq	250710(%rip), %rbx      # 0x45be20 <__unnamed_8>
               	cmovneq	%r12, %rbx
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r15, (%r14)
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%r8, 24(%rsp)
               	movl	%ecx, %ebx
               	movl	%edx, %r13d
               	movq	%rsi, %r15
               	movq	%rdi, 8(%rsp)
               	movb	272722(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eb4f <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	250567(%rip), %rbp      # 0x45be20 <__unnamed_8>
               	cmovneq	%r15, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 16(%rsp)
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movl	%r13d, %edi
               	movl	%ebx, %esi
               	movl	%eax, %edx
               	callq	0x41a640 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
               	movl	%ebx, %r14d
               	subl	%r13d, %r14d
               	movq	8(%rsp), %r15
               	movl	16(%r15), %esi
               	addl	%r14d, %esi
               	movq	%r15, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x41ec8b <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x16b>
               	movl	16(%r15), %eax
               	movq	8(%r15), %rcx
               	movq	%rcx, 56(%rsp)
               	movslq	%eax, %r15
               	leaq	(%rcx,%r15,2), %rdi
               	addq	$16, %rdi
               	movslq	%r13d, %rax
               	leaq	16(,%rax,2), %rsi
               	addq	%rbp, %rsi
               	movslq	%r14d, %rbp
               	movq	%rbp, %rdx
               	addq	%rbp, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	addl	%r15d, %ebp
               	movq	8(%rsp), %r15
               	movq	%r15, %rdi
               	movl	%ebp, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebp, 16(%r15)
               	movq	24(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	16(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpl	%r13d, %ebx
               	cmovll	%r13d, %ebx
               	cmpl	%r13d, %ebx
               	je	0x41ec56 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
               	nopl	(%rax,%rax)
               	movzbl	272369(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ecb0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %r14
               	movq	%r14, 64(%rsp)
               	movl	16(%r15), %r12d
               	leal	1(%r12), %r15d
               	movq	8(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rsp), %rax
               	movl	%r15d, 16(%rax)
               	movq	8(%rsp), %r15
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movl	%r13d, %esi
               	callq	*8(%rax)
               	cmpl	%r12d, 8(%r14)
               	jbe	0x41ed24 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x204>
               	movslq	%r12d, %rcx
               	addl	$1, %r13d
               	movq	(%r14), %rdx
               	movw	%ax, 16(%r14,%rcx,2)
               	cmpl	%r13d, %ebx
               	jne	0x41eca0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
               	jmp	0x41ec56 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdx, 24(%rsp)
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 48(%rsp)
               	movb	272130(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ed9f <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$11, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	16(%rbx), %r15d
               	movq	8(%rbx), %r14
               	movq	%r14, 56(%rsp)
               	leaq	12(%rsp), %rbp
               	leaq	155794(%rip), %rdx      # 0x444e58 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movl	$12, %esi
               	movq	%rbp, %rdi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x437120 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movb	12(%rsp), %al
               	testb	%al, %al
               	je	0x41ee06 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
               	movslq	%r15d, %rcx
               	leaq	12(%rsp), %rbp
               	leaq	(%r14,%rcx,2), %rcx
               	addq	$16, %rcx
               	movsbl	%al, %eax
               	movw	%ax, (%rcx)
               	addq	$2, %rcx
               	movzbl	1(%rbp), %eax
               	addq	$1, %rbp
               	testb	%al, %al
               	jne	0x41edf0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xc0>
               	leaq	12(%rsp), %rax
               	subl	%eax, %ebp
               	addl	%ebp, %r15d
               	movq	%rbx, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%rbx)
               	movq	24(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	271847(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eeba <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder+0x6a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	249692(%rip), %rbx      # 0x45be20 <__unnamed_8>
               	cmovneq	%r15, %rbx
               	movl	8(%rbx), %esi
               	addl	16(%r12), %esi
               	movq	%r12, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	16(%r12), %eax
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rbx), %edx
               	movslq	%eax, %rbp
               	leaq	(%rcx,%rbp,2), %rdi
               	addq	$16, %rdi
               	addq	$16, %rbx
               	movslq	%edx, %r15
               	leaq	(%r15,%r15), %rdx
               	movq	%rbx, %rsi
               	callq	0x4136f0 <memcpy@plt>
               	addl	%ebp, %r15d
               	movq	%r12, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%r12)
               	movq	%r12, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	271602(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41efaf <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0x6f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%r14d, 8(%rax)
               	jge	0x41eff3 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0xb3>
               	leaq	48(%rsp), %rdx
               	movq	8(%rbx), %rax
               	movq	%rax, 32(%rsp)
               	movl	8(%rax), %eax
               	leal	(%rax,%rax), %esi
               	addl	$2, %esi
               	cmpl	%r14d, %esi
               	cmovll	%r14d, %esi
               	movq	8(%rbx), %rdi
               	movq	%rdi, 40(%rsp)
               	callq	0x415790 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	271402(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f077 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x67>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %r15
               	movq	%r15, 24(%rsp)
               	movl	16(%rbx), %ebp
               	testl	%ebp, %ebp
               	je	0x41f0ee <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0xde>
               	js	0x41f155 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x145>
               	movslq	%ebp, %r12
               	movq	296(%r13), %rdi
               	leaq	31(,%rbp), %rsi
               	addq	%rbp, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	230407(%rip), %rcx      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, (%r14)
               	leaq	32(%rax), %rdi
               	addq	$16, %r15
               	addq	%r12, %r12
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%rbx, (%r14)
               	jmp	0x41f134 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x124>
               	movq	$0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 48(%rsp)
               	leaq	248963(%rip), %rbx      # 0x45bda8 <__unnamed_6>
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	271058(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f1cf <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x6f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41f221 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	cmpl	$18, (%rax,%rcx)
               	jne	0x41f221 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*24(%rax)
               	movl	%eax, %ecx
               	movb	$1, %al
               	testb	%cl, %cl
               	jne	0x41f2e5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f2a4 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movq	(%r12), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	*144(%rcx)
               	testb	%al, %al
               	je	0x41f2df <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x17f>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f2e3 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x183>
               	movzbl	270788(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f260 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f260 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	xorl	%eax, %eax
               	jmp	0x41f2e5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	270734(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f313 <kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testl	%eax, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	leaq	237060(%rip), %rax      # 0x459160 <ktypeglobal:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	270580(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f3ad <kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String+0x7d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rsp, %rsi
               	movq	%rsi, 40(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	callq	0x41a8d0 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>
               	movq	%rax, (%r14)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movb	270500(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f3fd <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%rbx, 8(%r15)
               	je	0x41f420 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x40>
               	testq	%rbx, %rbx
               	je	0x41f429 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x49>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rax)
               	jmp	0x41f430 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	250649(%rip), %rax      # 0x45c740 <__unnamed_41>
               	jmp	0x41f430 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	248304(%rip), %rax      # 0x45be20 <__unnamed_8>
               	movq	%rax, (%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	270408(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f459 <kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	237004(%rip), %rdx      # 0x459260 <ktypeglobal:kotlin.collections.AbstractList.IteratorImpl#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%rbx)
               	movq	%r14, 24(%rax)
               	movq	%rcx, (%rbx)
               	movq	%rcx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r13
               	movb	270286(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f4d3 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r13, %rbx
               	je	0x41f6e8 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x238>
               	testq	%rbx, %rbx
               	je	0x41f6e4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$43, %ecx
               	shlq	$4, %rcx
               	cmpl	$43, (%rax,%rcx)
               	jne	0x41f6e4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41f6ec <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23c>
               	movq	%r14, 8(%rsp)
               	leaq	64(%rsp), %r15
               	leaq	56(%rsp), %r12
               	leaq	48(%rsp), %rbp
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	%rax, %r14
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f629 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	nopl	(%rax)
               	testq	%rax, %rax
               	jne	0x41f6e0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x230>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f6f0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x240>
               	movzbl	269883(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f666 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x1b6>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbp
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41f620 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x170>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	jne	0x41f629 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	xorl	%ecx, %ecx
               	jmp	0x41f6f2 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x242>
               	xorl	%ecx, %ecx
               	jmp	0x41f70d <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	movb	$1, %cl
               	jmp	0x41f70d <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	xorl	%ecx, %ecx
               	jmp	0x41f6f7 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x247>
               	movb	$1, %cl
               	movq	8(%rsp), %r14
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	movb	269667(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f73e <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x1e>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	movl	$1, %r12d
               	jmp	0x41f81c <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xfc>
               	nopl	(%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movl	%r12d, %ebp
               	shll	$5, %ebp
               	subl	%r12d, %ebp
               	testq	%rax, %rax
               	je	0x41f860 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x140>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movl	%ebp, %r12d
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f864 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x144>
               	movzbl	269388(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f7d0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f7d0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41f817 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xf7>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%r12d, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	269308(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f8a5 <kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal+0x15>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %ebp
               	movq	8(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*136(%rax)
               	cmpl	%eax, %ebp
               	setl	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	269167(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f932 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0x62>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testb	%al, %al
               	je	0x41f982 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0xb2>
               	movq	8(%rbx), %rdi
               	movl	16(%rbx), %esi
               	leal	1(%rsi), %eax
               	movl	%eax, 16(%rbx)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdx
               	callq	*192(%rax)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	226262(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	235095(%rip), %rax      # 0x459060 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	268872(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fa59 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0x89>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41fa7c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	cmpl	%ebx, %ebp
               	jge	0x41fa7c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r15
               	leaq	80(%rsp), %r12
               	movq	%r12, 24(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	248732(%rip), %rsi      # 0x45c640 <__unnamed_46>
               	movq	%r12, %rdi
               	movq	%r15, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	247421(%rip), %rsi      # 0x45c140 <__unnamed_18>
               	movq	%r12, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	64(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	226217(%rip), %rcx      # 0x456ec0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a540 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	268625(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb50 <kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean+0x10>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	268521(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fbb8 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing+0x58>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	225696(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any>:
               	pushq	%rax
               	movb	268433(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc10 <kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any+0x10>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x41fb60 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268398(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc33 <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fc7d <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5d>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41fc7d <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5d>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	24(%rax), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	268289(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fca0 <kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int+0x10>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268254(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcc3 <kfun:kotlin.collections.EmptySet#toString(){}kotlin.String+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	248502(%rip), %rax      # 0x45c780 <__unnamed_47>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int>:
               	pushq	%rax
               	movb	268225(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fce0 <kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int+0x10>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	268193(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd00 <kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean+0x10>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268158(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd23 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fd32 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x22>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268110(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd53 <kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	24(%rax), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*%rax
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268046(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd93 <kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	255334(%rip), %rax      # 0x45e300 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?>:
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movb	268014(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fdb3 <kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	$0, (%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rsi, %rbx
               	movb	267976(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fdd9 <kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rdi, %rbx
               	movb	267928(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe09 <kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	267889(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe30 <kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int+0x10>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	267854(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe53 <kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String+0x13>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	244726(%rip), %rax      # 0x45ba50 <__unnamed_48>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 16(%rsp)
               	movb	267733(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fecc <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x6c>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r15), %rax
               	movq	%rax, 24(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x41ff09 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0xa9>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 16(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.<get-size>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	267533(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ff94 <kfun:kotlin.enums.EnumEntriesList.<get-size>#internal+0x64>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.get#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	267380(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42002d <kfun:kotlin.enums.EnumEntriesList.get#internal+0x6d>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rax, %rbx
               	movl	8(%rax), %esi
               	movl	%r12d, %edi
               	callq	0x41f9d0 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>
               	cmpl	%r12d, 8(%rbx)
               	jbe	0x420070 <kfun:kotlin.enums.EnumEntriesList.get#internal+0xb0>
               	movslq	%r12d, %rax
               	movq	16(%rbx,%rax,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.contains#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	267190(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4200eb <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x6b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x420105 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x85>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$-86, %eax
               	cmpl	$14, %eax
               	jbe	0x420109 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x89>
               	xorl	%eax, %eax
               	jmp	0x420148 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xc8>
               	leaq	24(%rsp), %rsi
               	movq	%r14, %rdi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	16(%r15), %ecx
               	testl	%ecx, %ecx
               	js	0x420128 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa8>
               	movl	8(%rax), %edx
               	leal	-1(%rdx), %esi
               	cmpl	%ecx, %esi
               	jge	0x42012c <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xac>
               	xorl	%eax, %eax
               	jmp	0x42013d <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xbd>
               	cmpl	%ecx, %edx
               	jbe	0x42015e <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xde>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rax, 32(%rsp)
               	cmpq	%r15, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	267032(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420189 <kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x19>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	266982(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4201bb <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x1b>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	leal	-1(%rax), %edx
               	movzwl	%bp, %esi
               	movq	%rbx, %rdi
               	callq	0x420230 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
               	cmpl	$-1, %eax
               	je	0x420216 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x76>
               	movl	8(%rbx), %edx
               	addl	$1, %eax
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	movq	%r14, %rcx
               	callq	0x436fc0 <Kotlin_String_subSequence>
               	movq	%rax, %rbx
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x420221 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x81>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	225960(%rip), %rsi      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>

<kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	leaq	223093(%rip), %rax      # 0x4569e0 <ktypeglobal:kotlin.CharArray#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movl	$1, 136(%rsp)
               	movw	$0, 144(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movb	266700(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4202d5 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xa5>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	je	0x42033c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42033c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	8(%r12), %ecx
               	testl	%ecx, %ecx
               	je	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leal	-1(%rcx), %edx
               	cmpl	%r15d, %ecx
               	cmoval	%r15d, %edx
               	testl	%edx, %edx
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%edx, %edx
               	nop
               	cmpw	%bp, 16(%r12,%rdx,2)
               	je	0x420536 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x306>
               	addq	$-1, %rdx
               	leal	1(%rdx), %ecx
               	testl	%ecx, %ecx
               	jg	0x420320 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leaq	128(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	48(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rcx
               	movw	%bp, 16(%rax)
               	movq	48(%rsp), %r14
               	movq	%r14, 64(%rsp)
               	cmpl	$1, 8(%r14)
               	jne	0x42043c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	testq	%r12, %r12
               	je	0x42043c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42043c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 112(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 96(%rsp)
               	movl	8(%r14), %eax
               	cmpl	$1, %eax
               	jne	0x42053e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x30e>
               	movzwl	16(%r14), %esi
               	movq	88(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	8(%r12), %edx
               	testl	%edx, %edx
               	je	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leal	-1(%rdx), %ecx
               	cmpl	%r15d, %edx
               	cmoval	%r15d, %ecx
               	testl	%ecx, %ecx
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ecx, %ecx
               	nopl	(%rax)
               	cmpw	%si, 16(%r12,%rcx,2)
               	je	0x42053a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x30a>
               	addq	$-1, %rcx
               	leal	1(%rcx), %edx
               	testl	%edx, %edx
               	jg	0x420420 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f0>
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	addl	$-1, %ebp
               	cmpl	%r15d, %ebp
               	cmovgl	%r15d, %ebp
               	testl	%ebp, %ebp
               	js	0x42050a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2da>
               	xorl	%r13d, %r13d
               	movq	%rbx, 8(%rsp)
               	movb	266263(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42048a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x25a>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbp), %eax
               	movl	%eax, 4(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	callq	*8(%rax)
               	movl	%eax, %ebx
               	movl	8(%r14), %r15d
               	testl	%r15d, %r15d
               	cmovsl	%r13d, %r15d
               	xorl	%r13d, %r13d
               	cmpl	%r13d, %r15d
               	je	0x4204f1 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c1>
               	movzbl	266177(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4204e0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b0>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpw	%bx, 16(%r14,%r13,2)
               	je	0x420511 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e1>
               	addq	$1, %r13
               	cmpl	%r13d, %r15d
               	jne	0x4204d0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a0>
               	testl	%ebp, %ebp
               	movl	4(%rsp), %eax
               	movl	%eax, %ebp
               	movq	8(%rsp), %rbx
               	movl	$0, %r13d
               	jg	0x42047b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x24b>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ebp, %eax
               	movq	8(%rsp), %rbx
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%edx, %eax
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ecx, %eax
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	testl	%eax, %eax
               	jne	0x42057c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x34c>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	223254(%rip), %rcx      # 0x456d80 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	leaq	245830(%rip), %rsi      # 0x45c5c0 <__unnamed_49>
               	jmp	0x4205b4 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x384>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	223676(%rip), %rcx      # 0x456f60 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	245820(%rip), %rsi      # 0x45c5f0 <__unnamed_50>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:#main(){}>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	leaq	234200(%rip), %rax      # 0x4598d0 <ktypeglobal:ForLoopsBenchmark#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 32(%rsp)
               	movb	265816(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420649 <kfun:#main(){}+0x79>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rsp, %rax
               	movq	%rax, 40(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	%rbx, 64(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$40024, %esi            # imm = 0x9C58
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r12
               	leaq	16(%rax), %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	222147(%rip), %rax      # 0x456a70 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rax, 16(%r12)
               	movl	$10000, 24(%r12)        # imm = 0x2710
               	movq	%r15, 72(%rsp)
               	xorl	%ebx, %ebx
               	cmpq	$10000, %rbx            # imm = 0x2710
               	je	0x420701 <kfun:#main(){}+0x131>
               	nop
               	movzbl	265665(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4206e0 <kfun:#main(){}+0x110>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	24(%r12), %eax
               	cmpq	%rax, %rbx
               	jae	0x420761 <kfun:#main(){}+0x191>
               	movq	16(%r12), %rax
               	movl	%ebx, 32(%r12,%rbx,4)
               	addq	$1, %rbx
               	cmpq	$10000, %rbx            # imm = 0x2710
               	jne	0x4206d0 <kfun:#main(){}+0x100>
               	movq	%r15, 8(%rsp)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	8(%rsp), %rax
               	movl	8(%rax), %eax
               	xorl	%ebx, %ebx
               	testl	%eax, %eax
               	cmovnsl	%eax, %ebx
               	jmp	0x420733 <kfun:#main(){}+0x163>
               	nopw	%cs:(%rax,%rax)
               	addl	$-1, %ebx
               	testl	%ebx, %ebx
               	je	0x420749 <kfun:#main(){}+0x179>
               	movzbl	265562(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420730 <kfun:#main(){}+0x160>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x420730 <kfun:#main(){}+0x160>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265498(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420787 <kfun:#main(){}+0x1b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420796 <kfun:#main(){}+0x1c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260715(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265434(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4207c7 <kfun:#main(){}+0x1f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4207d6 <kfun:#main(){}+0x206>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260651(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265370(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420807 <kfun:#main(){}+0x237>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420816 <kfun:#main(){}+0x246>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260587(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265306(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420847 <kfun:#main(){}+0x277>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420856 <kfun:#main(){}+0x286>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260523(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265242(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420887 <kfun:#main(){}+0x2b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420896 <kfun:#main(){}+0x2c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260459(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265178(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4208c7 <kfun:#main(){}+0x2f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4208d6 <kfun:#main(){}+0x306>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260395(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265114(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420907 <kfun:#main(){}+0x337>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420916 <kfun:#main(){}+0x346>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260331(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265050(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420947 <kfun:#main(){}+0x377>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420956 <kfun:#main(){}+0x386>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260267(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264986(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420987 <kfun:#main(){}+0x3b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420996 <kfun:#main(){}+0x3c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260203(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264922(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209c7 <kfun:#main(){}+0x3f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4209d6 <kfun:#main(){}+0x406>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260139(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264858(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a07 <kfun:#main(){}+0x437>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a16 <kfun:#main(){}+0x446>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260075(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264794(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a47 <kfun:#main(){}+0x477>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a56 <kfun:#main(){}+0x486>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260011(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264730(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a87 <kfun:#main(){}+0x4b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a96 <kfun:#main(){}+0x4c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259947(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264666(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ac7 <kfun:#main(){}+0x4f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ad6 <kfun:#main(){}+0x506>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259883(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264602(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b07 <kfun:#main(){}+0x537>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b16 <kfun:#main(){}+0x546>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259819(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264538(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b47 <kfun:#main(){}+0x577>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b56 <kfun:#main(){}+0x586>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259755(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264474(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b87 <kfun:#main(){}+0x5b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b96 <kfun:#main(){}+0x5c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259691(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264410(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420bc7 <kfun:#main(){}+0x5f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420bd6 <kfun:#main(){}+0x606>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259627(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264346(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c07 <kfun:#main(){}+0x637>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c16 <kfun:#main(){}+0x646>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259563(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264282(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c47 <kfun:#main(){}+0x677>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c56 <kfun:#main(){}+0x686>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259499(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264218(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c87 <kfun:#main(){}+0x6b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c96 <kfun:#main(){}+0x6c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259435(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264154(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cc7 <kfun:#main(){}+0x6f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420cd6 <kfun:#main(){}+0x706>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259371(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264090(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d07 <kfun:#main(){}+0x737>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d16 <kfun:#main(){}+0x746>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259307(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264026(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d47 <kfun:#main(){}+0x777>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d56 <kfun:#main(){}+0x786>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259243(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263962(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d87 <kfun:#main(){}+0x7b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d96 <kfun:#main(){}+0x7c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259179(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263898(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420dc7 <kfun:#main(){}+0x7f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420dd6 <kfun:#main(){}+0x806>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259115(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263834(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e07 <kfun:#main(){}+0x837>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e16 <kfun:#main(){}+0x846>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259051(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263770(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e47 <kfun:#main(){}+0x877>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e56 <kfun:#main(){}+0x886>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258987(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263706(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e87 <kfun:#main(){}+0x8b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e96 <kfun:#main(){}+0x8c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258923(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263642(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ec7 <kfun:#main(){}+0x8f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ed6 <kfun:#main(){}+0x906>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258859(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263578(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f07 <kfun:#main(){}+0x937>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f16 <kfun:#main(){}+0x946>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258795(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263514(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f47 <kfun:#main(){}+0x977>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f56 <kfun:#main(){}+0x986>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258731(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263450(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f87 <kfun:#main(){}+0x9b7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f96 <kfun:#main(){}+0x9c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258667(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263386(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420fc7 <kfun:#main(){}+0x9f7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420fd6 <kfun:#main(){}+0xa06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258603(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263322(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421007 <kfun:#main(){}+0xa37>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421016 <kfun:#main(){}+0xa46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258539(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263258(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421047 <kfun:#main(){}+0xa77>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421056 <kfun:#main(){}+0xa86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258475(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263194(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421087 <kfun:#main(){}+0xab7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421096 <kfun:#main(){}+0xac6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258411(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263130(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4210c7 <kfun:#main(){}+0xaf7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4210d6 <kfun:#main(){}+0xb06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258347(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263066(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421107 <kfun:#main(){}+0xb37>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421116 <kfun:#main(){}+0xb46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258283(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263002(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421147 <kfun:#main(){}+0xb77>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421156 <kfun:#main(){}+0xb86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258219(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262937(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421188 <kfun:#main(){}+0xbb8>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4211b4 <kfun:#main(){}+0xbe4>
               	testl	%ebx, %ebx
               	je	0x4211bc <kfun:#main(){}+0xbec>
               	movq	$0, 258097(%rip)        # 0x4601d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	$0, 258094(%rip)        # 0x4601d8 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movl	$0, 258140(%rip)        # 0x460210 <state_global$kotlin.native.MemoryModel>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	258117(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopw	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262826(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4211f7 <kfun:#main(){}+0xc27>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421206 <kfun:#main(){}+0xc36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258043(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262762(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421237 <kfun:#main(){}+0xc67>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421246 <kfun:#main(){}+0xc76>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257979(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262698(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421277 <kfun:#main(){}+0xca7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421286 <kfun:#main(){}+0xcb6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257915(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262634(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212b7 <kfun:#main(){}+0xce7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4212c6 <kfun:#main(){}+0xcf6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257851(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262569(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212f8 <kfun:#main(){}+0xd28>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421319 <kfun:#main(){}+0xd49>
               	testl	%ebx, %ebx
               	je	0x421321 <kfun:#main(){}+0xd51>
               	movq	$0, 257745(%rip)        # 0x4601e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movl	$0, 257787(%rip)        # 0x460214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257760(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262473(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421358 <kfun:#main(){}+0xd88>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421379 <kfun:#main(){}+0xda9>
               	testl	%ebx, %ebx
               	je	0x421381 <kfun:#main(){}+0xdb1>
               	movq	$0, 257657(%rip)        # 0x4601e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movl	$0, 257695(%rip)        # 0x460218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257664(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262378(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4213b7 <kfun:#main(){}+0xde7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4213c6 <kfun:#main(){}+0xdf6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257595(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262314(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4213f7 <kfun:#main(){}+0xe27>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421406 <kfun:#main(){}+0xe36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257531(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262250(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421437 <kfun:#main(){}+0xe67>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421446 <kfun:#main(){}+0xe76>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257467(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262186(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421477 <kfun:#main(){}+0xea7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421486 <kfun:#main(){}+0xeb6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257403(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262122(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214b7 <kfun:#main(){}+0xee7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4214c6 <kfun:#main(){}+0xef6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257339(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262057(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214f8 <kfun:#main(){}+0xf28>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421519 <kfun:#main(){}+0xf49>
               	testl	%ebx, %ebx
               	je	0x421521 <kfun:#main(){}+0xf51>
               	movq	$0, 257249(%rip)        # 0x4601f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movl	$0, 257283(%rip)        # 0x46021c <state_global$kotlin.native.internal.NativePtr>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257248(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261962(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421557 <kfun:#main(){}+0xf87>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421566 <kfun:#main(){}+0xf96>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257179(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261898(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421597 <kfun:#main(){}+0xfc7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4215a6 <kfun:#main(){}+0xfd6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257115(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	261833(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4215d8 <kfun:#main(){}+0x1008>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4215f9 <kfun:#main(){}+0x1029>
               	testl	%ebx, %ebx
               	je	0x421601 <kfun:#main(){}+0x1031>
               	movq	$0, 257033(%rip)        # 0x4601f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movl	$0, 257063(%rip)        # 0x460220 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257024(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261738(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421637 <kfun:#main(){}+0x1067>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421646 <kfun:#main(){}+0x1076>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256955(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261674(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421677 <kfun:#main(){}+0x10a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421686 <kfun:#main(){}+0x10b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256891(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261610(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4216b7 <kfun:#main(){}+0x10e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4216c6 <kfun:#main(){}+0x10f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256827(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261546(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4216f7 <kfun:#main(){}+0x1127>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421706 <kfun:#main(){}+0x1136>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256763(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261482(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421737 <kfun:#main(){}+0x1167>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421746 <kfun:#main(){}+0x1176>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256699(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261418(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421777 <kfun:#main(){}+0x11a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421786 <kfun:#main(){}+0x11b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256635(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261354(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217b7 <kfun:#main(){}+0x11e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4217c6 <kfun:#main(){}+0x11f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256571(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261290(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217f7 <kfun:#main(){}+0x1227>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421806 <kfun:#main(){}+0x1236>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256507(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261226(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421837 <kfun:#main(){}+0x1267>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421846 <kfun:#main(){}+0x1276>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256443(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261162(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421877 <kfun:#main(){}+0x12a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421886 <kfun:#main(){}+0x12b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256379(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261098(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218b7 <kfun:#main(){}+0x12e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4218c6 <kfun:#main(){}+0x12f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256315(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261034(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218f7 <kfun:#main(){}+0x1327>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421906 <kfun:#main(){}+0x1336>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256251(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260970(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421937 <kfun:#main(){}+0x1367>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421946 <kfun:#main(){}+0x1376>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256187(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260906(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421977 <kfun:#main(){}+0x13a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421986 <kfun:#main(){}+0x13b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256123(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260841(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4219b8 <kfun:#main(){}+0x13e8>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4219cf <kfun:#main(){}+0x13ff>
               	testl	%ebx, %ebx
               	je	0x4219d7 <kfun:#main(){}+0x1407>
               	movq	$0, 248113(%rip)        # 0x45e300 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	256042(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260746(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a17 <kfun:#main(){}+0x1447>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421a26 <kfun:#main(){}+0x1456>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255963(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260681(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a58 <kfun:#main(){}+0x1488>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421a6f <kfun:#main(){}+0x149f>
               	testl	%ebx, %ebx
               	je	0x421a77 <kfun:#main(){}+0x14a7>
               	movq	$0, 247961(%rip)        # 0x45e308 <kvar:kotlin.collections.EmptySet.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255882(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260586(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ab7 <kfun:#main(){}+0x14e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ac6 <kfun:#main(){}+0x14f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255803(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260522(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421af7 <kfun:#main(){}+0x1527>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421b06 <kfun:#main(){}+0x1536>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255739(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260457(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b38 <kfun:#main(){}+0x1568>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421b4f <kfun:#main(){}+0x157f>
               	testl	%ebx, %ebx
               	je	0x421b57 <kfun:#main(){}+0x1587>
               	movq	$0, 247745(%rip)        # 0x45e310 <kvar:kotlin.coroutines.EmptyCoroutineContext.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255658(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260362(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b97 <kfun:#main(){}+0x15c7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ba6 <kfun:#main(){}+0x15d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255579(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260298(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421bd7 <kfun:#main(){}+0x1607>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421be6 <kfun:#main(){}+0x1616>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255515(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260233(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c18 <kfun:#main(){}+0x1648>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421c39 <kfun:#main(){}+0x1669>
               	testl	%ebx, %ebx
               	je	0x421c41 <kfun:#main(){}+0x1671>
               	movq	$0, 255441(%rip)        # 0x460200 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	movl	$0, 255467(%rip)        # 0x460224 <state_global$kotlin.ranges.IntRange>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255424(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424790 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260138(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c77 <kfun:#main(){}+0x16a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421c86 <kfun:#main(){}+0x16b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255355(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260074(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421cb7 <kfun:#main(){}+0x16e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421cc6 <kfun:#main(){}+0x16f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255291(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260010(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421cf7 <kfun:#main(){}+0x1727>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d06 <kfun:#main(){}+0x1736>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255227(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259946(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d37 <kfun:#main(){}+0x1767>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d46 <kfun:#main(){}+0x1776>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255163(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259882(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d77 <kfun:#main(){}+0x17a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d86 <kfun:#main(){}+0x17b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255099(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259818(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421db7 <kfun:#main(){}+0x17e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421dc6 <kfun:#main(){}+0x17f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255035(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259754(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421df7 <kfun:#main(){}+0x1827>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e06 <kfun:#main(){}+0x1836>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254971(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259690(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e37 <kfun:#main(){}+0x1867>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e46 <kfun:#main(){}+0x1876>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254907(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259626(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e77 <kfun:#main(){}+0x18a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e86 <kfun:#main(){}+0x18b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254843(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259562(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421eb7 <kfun:#main(){}+0x18e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ec6 <kfun:#main(){}+0x18f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254779(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259498(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ef7 <kfun:#main(){}+0x1927>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f06 <kfun:#main(){}+0x1936>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254715(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259434(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f37 <kfun:#main(){}+0x1967>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f46 <kfun:#main(){}+0x1976>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254651(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259370(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f77 <kfun:#main(){}+0x19a7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f86 <kfun:#main(){}+0x19b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254587(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259306(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fb7 <kfun:#main(){}+0x19e7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421fc6 <kfun:#main(){}+0x19f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254523(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259242(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ff7 <kfun:#main(){}+0x1a27>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422006 <kfun:#main(){}+0x1a36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254459(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259178(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422037 <kfun:#main(){}+0x1a67>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422046 <kfun:#main(){}+0x1a76>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254395(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259114(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422077 <kfun:#main(){}+0x1aa7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422086 <kfun:#main(){}+0x1ab6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254331(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259050(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220b7 <kfun:#main(){}+0x1ae7>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220c6 <kfun:#main(){}+0x1af6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254267(%rip), %rsi      # 0x460208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424790 <AddTLSRecord>

<_Konan_constructors>:
               	cmpl	$0, 254273(%rip)        # 0x460228 <state_global$kotlin.ranges.IntRange+0x4>
               	je	0x4220f7 <_Konan_constructors+0x17>
               	cmpl	$0, 254268(%rip)        # 0x46022c <state_global$kotlin.ranges.IntRange+0x8>
               	je	0x423015 <_Konan_constructors+0xf35>
               	retq
               	movl	$1, 254247(%rip)        # 0x460228 <state_global$kotlin.ranges.IntRange+0x4>
               	movq	359200(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 359156(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	leaq	359149(%rip), %rax      # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246258(%rip), %rdx      # 0x45e318 <init_node>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 359160(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	359153(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 359109(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246234(%rip), %rdx      # 0x45e328 <init_node.16>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 359120(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	359113(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 359069(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246210(%rip), %rdx      # 0x45e338 <init_node.17>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 359080(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	359073(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 359029(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246186(%rip), %rdx      # 0x45e348 <init_node.18>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 359040(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	359033(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358989(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246162(%rip), %rdx      # 0x45e358 <init_node.19>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 359000(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358993(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358949(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246138(%rip), %rdx      # 0x45e368 <init_node.20>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358960(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358953(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358909(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246114(%rip), %rdx      # 0x45e378 <init_node.21>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358920(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358913(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358869(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246090(%rip), %rdx      # 0x45e388 <init_node.22>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358880(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358873(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358829(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246066(%rip), %rdx      # 0x45e398 <init_node.23>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358840(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358833(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358789(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246042(%rip), %rdx      # 0x45e3a8 <init_node.24>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358800(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358793(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358749(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246018(%rip), %rdx      # 0x45e3b8 <init_node.25>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358760(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358753(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358709(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245994(%rip), %rdx      # 0x45e3c8 <init_node.26>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358720(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358713(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358669(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245970(%rip), %rdx      # 0x45e3d8 <init_node.27>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358680(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358673(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358629(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245946(%rip), %rdx      # 0x45e3e8 <init_node.28>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358640(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358633(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358589(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245922(%rip), %rdx      # 0x45e3f8 <init_node.29>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358600(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358593(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358549(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245898(%rip), %rdx      # 0x45e408 <init_node.30>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358560(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358553(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358509(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245874(%rip), %rdx      # 0x45e418 <init_node.31>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358520(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358513(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358469(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245850(%rip), %rdx      # 0x45e428 <init_node.32>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358480(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358473(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358429(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245826(%rip), %rdx      # 0x45e438 <init_node.33>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358440(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358433(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358389(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245802(%rip), %rdx      # 0x45e448 <init_node.34>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358400(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358393(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358349(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245778(%rip), %rdx      # 0x45e458 <init_node.35>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358360(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358353(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358309(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245754(%rip), %rdx      # 0x45e468 <init_node.36>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358320(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358313(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358269(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245730(%rip), %rdx      # 0x45e478 <init_node.37>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358280(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358273(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358229(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245706(%rip), %rdx      # 0x45e488 <init_node.38>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358240(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358233(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358189(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245682(%rip), %rdx      # 0x45e498 <init_node.39>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358200(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358193(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358149(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245658(%rip), %rdx      # 0x45e4a8 <init_node.40>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358160(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358153(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358109(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245634(%rip), %rdx      # 0x45e4b8 <init_node.41>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358120(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358113(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358069(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245610(%rip), %rdx      # 0x45e4c8 <init_node.42>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358080(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358073(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358029(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245586(%rip), %rdx      # 0x45e4d8 <init_node.43>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358040(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	358033(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357989(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245562(%rip), %rdx      # 0x45e4e8 <init_node.44>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358000(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357993(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357949(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245538(%rip), %rdx      # 0x45e4f8 <init_node.45>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357960(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357953(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357909(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245514(%rip), %rdx      # 0x45e508 <init_node.46>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357920(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357913(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357869(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245490(%rip), %rdx      # 0x45e518 <init_node.47>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357880(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357873(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357829(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245466(%rip), %rdx      # 0x45e528 <init_node.48>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357840(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357833(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357789(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245442(%rip), %rdx      # 0x45e538 <init_node.49>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357800(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357793(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357749(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245418(%rip), %rdx      # 0x45e548 <init_node.50>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357760(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357753(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357709(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245394(%rip), %rdx      # 0x45e558 <init_node.51>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357720(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357713(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357669(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245370(%rip), %rdx      # 0x45e568 <init_node.52>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357680(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357673(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357629(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245346(%rip), %rdx      # 0x45e578 <init_node.53>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357640(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357633(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357589(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245322(%rip), %rdx      # 0x45e588 <init_node.54>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357600(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357593(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357549(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245298(%rip), %rdx      # 0x45e598 <init_node.55>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357560(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357553(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357509(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245274(%rip), %rdx      # 0x45e5a8 <init_node.56>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357520(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357513(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357469(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245250(%rip), %rdx      # 0x45e5b8 <init_node.57>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357480(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357473(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357429(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245226(%rip), %rdx      # 0x45e5c8 <init_node.58>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357440(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357433(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357389(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245202(%rip), %rdx      # 0x45e5d8 <init_node.59>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357400(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357393(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357349(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245178(%rip), %rdx      # 0x45e5e8 <init_node.60>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357360(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357353(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357309(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245154(%rip), %rdx      # 0x45e5f8 <init_node.61>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357320(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357313(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357269(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245130(%rip), %rdx      # 0x45e608 <init_node.62>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357280(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357273(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357229(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245106(%rip), %rdx      # 0x45e618 <init_node.63>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357240(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357233(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357189(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245082(%rip), %rdx      # 0x45e628 <init_node.64>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357200(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357193(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357149(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245058(%rip), %rdx      # 0x45e638 <init_node.65>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357160(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357153(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357109(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245034(%rip), %rdx      # 0x45e648 <init_node.66>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357120(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357113(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357069(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245010(%rip), %rdx      # 0x45e658 <init_node.67>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357080(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357073(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357029(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244986(%rip), %rdx      # 0x45e668 <init_node.68>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357040(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	357033(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356989(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244962(%rip), %rdx      # 0x45e678 <init_node.69>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357000(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356993(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356949(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244938(%rip), %rdx      # 0x45e688 <init_node.70>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356960(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356953(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356909(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244914(%rip), %rdx      # 0x45e698 <init_node.71>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356920(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356913(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356869(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244890(%rip), %rdx      # 0x45e6a8 <init_node.72>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356880(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356873(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356829(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244866(%rip), %rdx      # 0x45e6b8 <init_node.73>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356840(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356833(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356789(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244842(%rip), %rdx      # 0x45e6c8 <init_node.74>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356800(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356793(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356749(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244818(%rip), %rdx      # 0x45e6d8 <init_node.75>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356760(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356753(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356709(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244794(%rip), %rdx      # 0x45e6e8 <init_node.76>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356720(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356713(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356669(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244770(%rip), %rdx      # 0x45e6f8 <init_node.77>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356680(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356673(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356629(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244746(%rip), %rdx      # 0x45e708 <init_node.78>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356640(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356633(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356589(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244722(%rip), %rdx      # 0x45e718 <init_node.79>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356600(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356593(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356549(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244698(%rip), %rdx      # 0x45e728 <init_node.80>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356560(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356553(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356509(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244674(%rip), %rdx      # 0x45e738 <init_node.81>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356520(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356513(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356469(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244650(%rip), %rdx      # 0x45e748 <init_node.82>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356480(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356473(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356429(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244626(%rip), %rdx      # 0x45e758 <init_node.83>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356440(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356433(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356389(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244602(%rip), %rdx      # 0x45e768 <init_node.84>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356400(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356393(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356349(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244578(%rip), %rdx      # 0x45e778 <init_node.85>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356360(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356353(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356309(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244554(%rip), %rdx      # 0x45e788 <init_node.86>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356320(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356313(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356269(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244530(%rip), %rdx      # 0x45e798 <init_node.87>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356280(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356273(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356229(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244506(%rip), %rdx      # 0x45e7a8 <init_node.88>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356240(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356233(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356189(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244482(%rip), %rdx      # 0x45e7b8 <init_node.89>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356200(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356193(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356149(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244458(%rip), %rdx      # 0x45e7c8 <init_node.90>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356160(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356153(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356109(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244434(%rip), %rdx      # 0x45e7d8 <init_node.91>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356120(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356113(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356069(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244410(%rip), %rdx      # 0x45e7e8 <init_node.92>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356080(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356073(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356029(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244386(%rip), %rdx      # 0x45e7f8 <init_node.93>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356040(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	356033(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355989(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244362(%rip), %rdx      # 0x45e808 <init_node.94>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356000(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355993(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355949(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244338(%rip), %rdx      # 0x45e818 <init_node.95>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355960(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355953(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355909(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244314(%rip), %rdx      # 0x45e828 <init_node.96>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355920(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355913(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355869(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244290(%rip), %rdx      # 0x45e838 <init_node.97>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355880(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355873(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355829(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244266(%rip), %rdx      # 0x45e848 <init_node.98>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355840(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355833(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355789(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244242(%rip), %rdx      # 0x45e858 <init_node.99>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355800(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355793(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355749(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244218(%rip), %rdx      # 0x45e868 <init_node.100>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355760(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355753(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355709(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244194(%rip), %rdx      # 0x45e878 <init_node.101>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355720(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355713(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355669(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244170(%rip), %rdx      # 0x45e888 <init_node.102>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355680(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355673(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355629(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244146(%rip), %rdx      # 0x45e898 <init_node.103>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355640(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355633(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355589(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244122(%rip), %rdx      # 0x45e8a8 <init_node.104>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355600(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355593(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355549(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244098(%rip), %rdx      # 0x45e8b8 <init_node.105>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355560(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355553(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355509(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244074(%rip), %rdx      # 0x45e8c8 <init_node.106>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355520(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355513(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355469(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244050(%rip), %rdx      # 0x45e8d8 <init_node.107>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355480(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355473(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355429(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244026(%rip), %rdx      # 0x45e8e8 <init_node.108>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355440(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355433(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355389(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244002(%rip), %rdx      # 0x45e8f8 <init_node.109>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355400(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	movq	355393(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355349(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243978(%rip), %rax      # 0x45e908 <init_node.110>
               	movq	%rax, (%rcx)
               	movq	%rax, 355360(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	cmpl	$0, 250397(%rip)        # 0x46022c <state_global$kotlin.ranges.IntRange+0x8>
               	jne	0x4220f6 <_Konan_constructors+0x16>
               	movl	$1, 250381(%rip)        # 0x46022c <state_global$kotlin.ranges.IntRange+0x8>
               	leaq	355298(%rip), %rax      # 0x479c08 <(anonymous namespace)::initHeadNode>
               	movq	355323(%rip), %rcx      # 0x479c28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355279(%rip)        # 0x479c08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243924(%rip), %rax      # 0x45e918 <init_node.111>
               	movq	%rax, (%rcx)
               	movq	%rax, 355290(%rip)      # 0x479c28 <(anonymous namespace)::initTailNode>
               	retq
               	nop

<kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>:
               	jmp	0x413720 <sched_yield@plt>
               	nopw	%cs:(%rax,%rax)

<__clang_call_terminate>:
               	pushq	%rax
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c2c3 <std::terminate()>
               	nopl	(%rax,%rax)

<void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, (%rsp)
               	movq	%rdi, %r13
               	cmpq	$0, 241451(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42309f <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2f>
               	movq	%r13, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x423278 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x208>
               	cmpb	$0, 88(%r13)
               	je	0x423252 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	leaq	40(%r13), %r15
               	jmp	0x4230eb <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x7b>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	96(%r13), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	movabsq	$9223372036854775807, %rsi # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rsi, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 104(%r13)
               	nopl	(%rax)
               	cmpb	$0, 88(%r13)
               	je	0x423252 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	movb	$0, 112(%r13)
               	movq	104(%r13), %r14
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	cmpq	%r14, %rax
               	jge	0x4231af <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x13f>
               	xorl	%ecx, %ecx
               	cmpq	%rax, %r14
               	setns	%cl
               	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rdx, %rcx
               	movq	%r14, %rbp
               	subq	%rax, %rbp
               	cmovoq	%rcx, %rbp
               	movabsq	$86400000000000, %rax   # imm = 0x4E94914F0000
               	cmpq	%rax, %rbp
               	cmovgq	%rax, %rbp
               	callq	0x43cf00 <std::chrono::_V2::system_clock::now()>
               	movq	%rax, %rbx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	movabsq	$1237940039285380275, %rcx # imm = 0x112E0BE826D694B3
               	imulq	%rcx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$26, %rbp
               	addq	%rax, %rbp
               	imulq	$-1000000000, %rbp, %r12 # imm = 0xC4653600
               	addq	%rbx, %r12
               	nopl	(%rax,%rax)
               	cmpb	$0, 112(%r13)
               	jne	0x4230e0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	movq	%rbp, 8(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	leaq	8(%rsp), %rdx
               	callq	0x413740 <pthread_cond_timedwait@plt>
               	callq	0x43cf00 <std::chrono::_V2::system_clock::now()>
               	cmpq	%rbx, %rax
               	jl	0x423170 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x100>
               	cmpb	$0, 112(%r13)
               	je	0x4230f4 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x84>
               	jmp	0x4230e0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	cmpq	$0, 241153(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4231c1 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x151>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	(%rsp), %rax
               	movq	(%rax), %rbx
               	movq	16(%rbx), %rax
               	movl	(%rax), %eax
               	cmpl	$1, %eax
               	je	0x42322d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	56(%rbx), %rcx
               	movq	48(%rbx), %rdx
               	movq	24(%rdx), %rdx
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%rbp), %rsi
               	testq	%rdx, %rdx
               	cmovnsq	%rbp, %rsi
               	imulq	$1000, %rdx, %rdx       # imm = 0x3E8
               	cmovoq	%rsi, %rdx
               	xorl	%esi, %esi
               	movq	%rcx, %rdi
               	addq	%rdx, %rdi
               	setns	%sil
               	addq	%rbp, %rsi
               	addq	%rcx, %rdx
               	cmovoq	%rsi, %rdx
               	cmpq	%rdx, %rax
               	jl	0x42322d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	cmpq	$0, 80(%rbx)
               	je	0x423273 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x203>
               	leaq	64(%rbx), %rdi
               	callq	*88(%rbx)
               	cmpq	$0, 241027(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4230b0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	%r13, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x4230b0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	cmpq	$0, 240990(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x423264 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1f4>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43cf72 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpq	$0, 240918(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4232ac <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x23c>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x4232ea <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2a>
               	movq	(%rdi), %r12
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rdi
               	addq	(%r15), %rdi
               	testb	$1, %al
               	je	0x423300 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	(%rdi), %rcx
               	movq	-1(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234749(%rip), %rax      # 0x45c818 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423336 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423336 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f0e0 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234701(%rip), %rax      # 0x45c818 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423366 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423366 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rcx
               	leaq	24(%rdi), %rsi
               	leaq	16(%rdi), %rdx
               	movq	80(%rdi), %r9
               	movb	$0, 40(%rsp)
               	cmpb	$0, 72(%rdi)
               	je	0x4233ec <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x6c>
               	leaq	24(%rsp), %r8
               	movq	%r8, 8(%rsp)
               	movq	40(%rdi), %rax
               	leaq	56(%rdi), %rbx
               	cmpq	%rbx, %rax
               	je	0x4233c7 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x47>
               	movq	%rax, 8(%rsp)
               	movq	56(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	jmp	0x4233ce <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x4e>
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%r8)
               	movq	48(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movq	%rbx, 40(%rdi)
               	movq	$0, 48(%rdi)
               	movb	$0, 56(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%r9
               	cmpb	$0, 40(%rsp)
               	je	0x42340f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x42340f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x423433 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x423433 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234389(%rip), %rax      # 0x45c7e0 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x423680 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x423471 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x31>
               	addq	$64, %rbx
               	movq	%rbx, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234325(%rip), %rax      # 0x45c7e0 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x423680 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4234ae <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x2e>
               	leaq	64(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nop

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)>:
               	pushq	%rax
               	movq	40(%rsi), %rcx
               	lock
               	addq	%rcx, 32(%rdi)
               	movq	32(%rdi), %rcx
               	movq	40(%rdi), %rdx
               	addq	%rcx, %rdx
               	movq	24(%rdi), %rcx
               	movq	32(%rcx), %rcx
               	cmpq	%rcx, %rdx
               	jb	0x4234f3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x33>
               	movq	%rdi, %rax
               	cmpq	$0, 80(%rdi)
               	je	0x4234f5 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x35>
               	leaq	64(%rax), %rdi
               	callq	*88(%rax)
               	popq	%rax
               	retq
               	callq	0x43cf72 <std::__throw_bad_function_call()>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	xorl	%eax, %eax
               	xchgq	%rax, 32(%rdi)
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	xchgq	%rax, 56(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %r15
               	leaq	96(%rbx), %r14
               	cmpq	$0, 240250(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x423550 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0x40>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4235d3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xc3>
               	movabsq	$9223372036854775807, %r12 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r12), %rax
               	testq	%r15, %r15
               	cmovnsq	%r12, %rax
               	imulq	$1000, %r15, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r12, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 200(%rbx)
               	movb	$1, 208(%rbx)
               	cmpq	$0, 240137(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4235b9 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xa9>
               	movq	%r14, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$136, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x43cb98 <std::condition_variable::notify_all()>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)>:
               	movq	%rsi, %rax
               	xchgq	%rax, 40(%rdi)
               	movq	24(%rdi), %rax
               	movb	16(%rax), %al
               	testb	$1, %al
               	je	0x423678 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	%rsi, %xmm1
               	punpckldq	128993(%rip), %xmm1 # xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
                                                # 0x442df0 <_IO_stdin_used+0x30>
               	subpd	129001(%rip), %xmm1     # 0x442e00 <_IO_stdin_used+0x40>
               	movapd	%xmm1, %xmm0
               	unpckhpd	%xmm1, %xmm0            # xmm0 = xmm0[1],xmm1[1]
               	addsd	%xmm1, %xmm0
               	movq	24(%rdi), %rax
               	movsd	40(%rax), %xmm1         # xmm1 = mem[0],zero
               	divsd	%xmm1, %xmm0
               	movapd	128984(%rip), %xmm1     # 0x442e10 <_IO_stdin_used+0x50>
               	andpd	%xmm0, %xmm1
               	ucomisd	129164(%rip), %xmm1     # 0x442ed0 <_IO_stdin_used+0x110>
               	je	0x423678 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	24(%rdi), %rax
               	movq	48(%rax), %rax
               	xorps	%xmm1, %xmm1
               	cvtsi2sd	%rax, %xmm1
               	movq	24(%rdi), %rax
               	movq	56(%rax), %rax
               	cvtsi2sd	%rax, %xmm2
               	maxsd	%xmm0, %xmm1
               	minsd	%xmm1, %xmm2
               	cvttsd2si	%xmm2, %rax
               	movq	24(%rdi), %rcx
               	xchgq	%rax, 32(%rcx)
               	retq
               	nopl	(%rax)

<kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	cmpq	$0, 239912(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42369e <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x1e>
               	movq	%r15, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4236fd <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x7d>
               	movb	$0, 88(%r15)
               	movb	$1, 112(%r15)
               	testq	%r15, %r15
               	je	0x4236bf <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	cmpq	$0, 239875(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4236bf <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	movq	%r15, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	leaq	40(%r15), %r14
               	movq	%r14, %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	leaq	120(%r15), %rbx
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	je	0x4236eb <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x6b>
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x4236f8 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x78>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x43cb6a <std::condition_variable::~condition_variable()>
               	callq	0x43c2c3 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	jmp	0x423719 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x99>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x423740 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	120(%r15), %rdi
               	callq	0x423750 <kotlin::ScopedThread::~ScopedThread()>
               	addq	$40, %r15
               	movq	%r15, %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax)

<std::thread::~thread()>:
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	jne	0x423749 <std::thread::~thread()+0x9>
               	popq	%rax
               	retq
               	callq	0x43c2c3 <std::terminate()>
               	nop

<kotlin::ScopedThread::~ScopedThread()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	je	0x423768 <kotlin::ScopedThread::~ScopedThread()+0x18>
               	movq	%rdi, %rbx
               	callq	0x43f0f4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x423770 <kotlin::ScopedThread::~ScopedThread()+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x43c2c3 <std::terminate()>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x423740 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax,%rax)
               	nopl	(%rax)
		...

<void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %rbx
               	subq	%rdi, %rbx
               	cmpq	$257, %rbx              # imm = 0x101
               	jl	0x423c6f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movq	%rdx, %r12
               	movq	%rsi, %r14
               	movq	%rdi, %rbp
               	leaq	16(%rdi), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rdi, 64(%rsp)
               	nopl	(%rax,%rax)
               	testq	%r12, %r12
               	movq	%r14, 8(%rsp)
               	je	0x423bc6 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x426>
               	shrq	%rbx
               	andq	$-16, %rbx
               	leaq	(%rbx,%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	-16(%r14), %rax
               	movq	%rax, 48(%rsp)
               	movq	16(%rbp), %r15
               	movq	24(%rbp), %rdi
               	movq	(%rbp,%rbx), %r13
               	movq	8(%rbp,%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rbx
               	subq	%r13, %rbx
               	movq	%r15, %rdx
               	cmovaq	%r13, %rdx
               	testq	%rdx, %rdx
               	movq	%r12, 80(%rsp)
               	je	0x423860 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	movq	%r13, 72(%rsp)
               	movq	%rdi, %r13
               	movq	40(%rsp), %rsi
               	callq	0x413780 <memcmp@plt>
               	movq	%r13, %rdi
               	movq	72(%rsp), %r13
               	testl	%eax, %eax
               	je	0x423860 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	testl	%eax, %eax
               	jns	0x423882 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	jmp	0x423960 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423882 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423960 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x4238c0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x4238c0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	testl	%eax, %eax
               	jns	0x4238e2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	jmp	0x42399a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x4238e2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x42399a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423920 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423920 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x42394c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	jmp	0x423a5b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	nop
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x42394c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423a5b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	jmp	0x423a69 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2c9>
               	nop
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x4239c5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	movq	%r13, %rdx
               	movq	%rdi, %r13
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x413780 <memcmp@plt>
               	movq	%r13, %rdi
               	testl	%eax, %eax
               	je	0x4239c5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	testl	%eax, %eax
               	jns	0x4239e7 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	jmp	0x423b9f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	movq	8(%rsp), %r15
               	jmp	0x423a9f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x4239e7 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423b9f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x423a10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423a10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423a38 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	jmp	0x423a5b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423a38 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423a5b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	jmp	0x423a9f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	48(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	32(%rsp), %r13
               	jmp	0x423a9f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	nop
               	movups	(%r14), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movups	(%r15), %xmm0
               	movups	%xmm0, (%r14)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	movq	64(%rsp), %rbp
               	movq	(%rbp), %rbx
               	movq	8(%rbp), %r12
               	jmp	0x423ad2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x332>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423b00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x360>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	16(%r14), %r13
               	testl	%eax, %eax
               	jns	0x423b04 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x364>
               	movq	%r13, %r14
               	movq	(%r13), %rdx
               	movq	%rdx, %rbp
               	subq	%rbx, %rbp
               	cmovaq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423ab0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	movq	8(%r14), %rdi
               	movq	%r12, %rsi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423aca <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x32a>
               	jmp	0x423ab0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	nopl	(%rax)
               	leaq	16(%r14), %r13
               	addq	$-16, %r15
               	movq	%r15, %rcx
               	jmp	0x423b32 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x392>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423b60 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	-16(%r15), %rcx
               	testl	%eax, %eax
               	jns	0x423b60 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	movq	%rcx, %r15
               	movq	(%rcx), %rdx
               	movq	%rbx, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423b10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	movq	8(%r15), %rsi
               	movq	%r12, %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423b2a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x38a>
               	jmp	0x423b10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	cmpq	%r15, %r14
               	jb	0x423a80 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2e0>
               	movq	80(%rsp), %r12
               	addq	$-1, %r12
               	movq	%r14, %rdi
               	movq	8(%rsp), %rsi
               	movq	%r12, %rdx
               	callq	0x4237a0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	movq	%r14, %rbx
               	movq	64(%rsp), %rbp
               	subq	%rbp, %rbx
               	cmpq	$256, %rbx              # imm = 0x100
               	jg	0x4237e0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
               	jmp	0x423c6f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	8(%rsp), %r15
               	jmp	0x423a78 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2d8>
               	shrq	$4, %rbx
               	leaq	-2(%rbx), %rax
               	shrq	$63, %rax
               	leaq	(%rbx,%rax), %r14
               	addq	$-2, %r14
               	sarq	%r14
               	movq	%r14, %r15
               	shlq	$4, %r15
               	movq	(%rbp,%r15), %rcx
               	movq	8(%rbp,%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x423d00 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	%rbp, %r15
               	addq	$-8, %r15
               	cmpq	$-1, %r14
               	je	0x423c33 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x493>
               	nopl	(%rax)
               	movq	-8(%r15), %rcx
               	movq	(%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x423d00 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	$-16, %r15
               	cmpq	$-1, %r14
               	jne	0x423c10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x470>
               	movq	8(%rsp), %rbx
               	addq	$-16, %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	8(%rbx), %r8
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rbx)
               	movq	%rbx, %r14
               	subq	%rbp, %r14
               	movq	%r14, %rdx
               	sarq	$4, %rdx
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x423d00 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-16, %rbx
               	cmpq	$16, %r14
               	jg	0x423c40 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4a0>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %r15
               	movq	8(%rdi), %r14
               	movl	$2147483648, %r12d      # imm = 0x80000000
               	nopl	(%rax,%rax)
               	movq	-16(%rbx), %rdx
               	movq	%r15, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%r15, %rdx
               	testq	%rdx, %rdx
               	je	0x423cc3 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x43>
               	movq	-8(%rbx), %rsi
               	movq	%r14, %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423cd9 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x59>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423cea <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	cmovlel	%r12d, %ebp
               	movl	%ebp, %eax
               	testl	%eax, %eax
               	jns	0x423cea <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	movups	-16(%rbx), %xmm0
               	movups	%xmm0, (%rbx)
               	addq	$-16, %rbx
               	jmp	0x423ca0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x20>
               	movq	%r15, (%rbx)
               	movq	%r14, 8(%rbx)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, 16(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%rdi, %r14
               	leaq	-1(%rdx), %rax
               	shrq	$63, %rax
               	movq	%rdx, 32(%rsp)
               	leaq	(%rdx,%rax), %rbx
               	addq	$-1, %rbx
               	sarq	%rbx
               	movq	%rsi, %r12
               	movq	%rsi, 8(%rsp)
               	cmpq	%rsi, %rbx
               	jle	0x423dff <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	movq	8(%rsp), %rbp
               	jmp	0x423d74 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x74>
               	nop
               	movq	%r13, %r12
               	movq	%r12, %rax
               	shlq	$4, %rax
               	shlq	$4, %rbp
               	movups	(%r14,%rax), %xmm0
               	movups	%xmm0, (%r14,%rbp)
               	movq	%r12, %rbp
               	cmpq	%rbx, %r12
               	jge	0x423dff <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	leaq	2(,%rbp), %r12
               	addq	%rbp, %r12
               	leaq	1(,%rbp), %r13
               	addq	%rbp, %r13
               	movq	%r12, %rax
               	shlq	$4, %rax
               	movq	(%r14,%rax), %rdx
               	movq	%r13, %rcx
               	shlq	$4, %rcx
               	movq	(%r14,%rcx), %rsi
               	movq	%rdx, %r15
               	subq	%rsi, %r15
               	cmovaq	%rsi, %rdx
               	testq	%rdx, %rdx
               	je	0x423dd0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	movq	8(%r14,%rcx), %rsi
               	movq	8(%r14,%rax), %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423dd0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	testl	%eax, %eax
               	js	0x423d50 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	jmp	0x423df7 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf7>
               	nop
               	cmpq	$2147483647, %r15       # imm = 0x7FFFFFFF
               	jg	0x423d53 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x53>
               	cmpq	$-2147483648, %r15      # imm = 0x80000000
               	jg	0x423dec <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xec>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	movl	%r15d, %eax
               	testl	%eax, %eax
               	js	0x423d50 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	%r12, %r13
               	jmp	0x423d50 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	32(%rsp), %rcx
               	testb	$1, %cl
               	jne	0x423e40 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	-2(%rcx), %rax
               	shrq	$63, %rax
               	addq	%rcx, %rax
               	addq	$-2, %rax
               	sarq	%rax
               	cmpq	%rax, %r12
               	jne	0x423e40 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	(%r12,%r12), %rax
               	addq	$1, %rax
               	movq	%rax, %rcx
               	shlq	$4, %rcx
               	shlq	$4, %r12
               	movups	(%r14,%rcx), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%rax, %r12
               	cmpq	8(%rsp), %r12
               	jle	0x423edc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leaq	-1(%r12), %rax
               	shrq	$63, %rax
               	leaq	(%r12,%rax), %r13
               	addq	$-1, %r13
               	sarq	%r13
               	movq	%r13, %rbp
               	shlq	$4, %rbp
               	movq	(%r14,%rbp), %rdx
               	movq	%rdx, %rbx
               	movq	24(%rsp), %rax
               	subq	%rax, %rbx
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x423ea6 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1a6>
               	movq	8(%r14,%rbp), %rdi
               	movq	16(%rsp), %rsi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423ebc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1bc>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423edc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	cmovlel	%r15d, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	jns	0x423edc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	addq	%r14, %rbp
               	shlq	$4, %r12
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%r13, %r12
               	cmpq	8(%rsp), %r13
               	jg	0x423e60 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x160>
               	jmp	0x423edf <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1df>
               	movq	%r12, %r13
               	shlq	$4, %r13
               	movq	24(%rsp), %rax
               	movq	%rax, (%r14,%r13)
               	movq	16(%rsp), %rax
               	movq	%rax, 8(%r14,%r13)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	352(%rdi), %r14
               	testq	%r14, %r14
               	je	0x423f33 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)+0x23>
               	movq	%r14, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	addq	$8, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x423f60 <kotlin::mm::ThreadData::~ThreadData()>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadData::~ThreadData()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	movq	296(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x423f79 <kotlin::mm::ThreadData::~ThreadData()+0x19>
               	callq	0x4136d0 <free@plt>
               	leaq	288(%r15), %rdi
               	callq	0x427c10 <kotlin::gc::GC::ThreadData::~ThreadData()>
               	leaq	224(%r15), %rdi
               	callq	0x424110 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	leaq	256(%r15), %r14
               	movq	256(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x423fc0 <kotlin::mm::ThreadData::~ThreadData()+0x60>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430310 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x423fb0 <kotlin::mm::ThreadData::~ThreadData()+0x50>
               	leaq	232(%r15), %r14
               	movq	232(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x423ff0 <kotlin::mm::ThreadData::~ThreadData()+0x90>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430310 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x423fe0 <kotlin::mm::ThreadData::~ThreadData()+0x80>
               	leaq	168(%r15), %rdi
               	callq	0x4241d0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	200(%r15), %r14
               	movq	200(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424020 <kotlin::mm::ThreadData::~ThreadData()+0xc0>
               	nop
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424010 <kotlin::mm::ThreadData::~ThreadData()+0xb0>
               	leaq	176(%r15), %r14
               	movq	176(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424050 <kotlin::mm::ThreadData::~ThreadData()+0xf0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424040 <kotlin::mm::ThreadData::~ThreadData()+0xe0>
               	leaq	104(%r15), %r14
               	movq	104(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x424070 <kotlin::mm::ThreadData::~ThreadData()+0x110>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x424060 <kotlin::mm::ThreadData::~ThreadData()+0x100>
               	movq	88(%r15), %rdi
               	movq	96(%r15), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	88(%r15), %rdi
               	leaq	136(%r15), %rax
               	cmpq	%rdi, %rax
               	je	0x42409f <kotlin::mm::ThreadData::~ThreadData()+0x13f>
               	callq	0x4136d0 <free@plt>
               	movq	64(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x4240ad <kotlin::mm::ThreadData::~ThreadData()+0x14d>
               	callq	0x4136d0 <free@plt>
               	leaq	8(%r15), %rdi
               	callq	0x424290 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	40(%r15), %r14
               	movq	40(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4240e0 <kotlin::mm::ThreadData::~ThreadData()+0x180>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4240d0 <kotlin::mm::ThreadData::~ThreadData()+0x170>
               	movq	16(%r15), %rdi
               	addq	$16, %r15
               	cmpq	%r15, %rdi
               	je	0x424100 <kotlin::mm::ThreadData::~ThreadData()+0x1a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r15, %rbx
               	jne	0x4240f0 <kotlin::mm::ThreadData::~ThreadData()+0x190>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42413e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 48(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x424130 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424160 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x50>
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424150 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42418e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x4241b8 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4241fe <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4241f0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424220 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x50>
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424210 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42424e <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424278 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4242be <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4242b0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x4242e0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x50>
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x4242d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42430e <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424338 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movb	250168(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x424434 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	%rdi, %r14
               	movq	8(%rdi), %rax
               	movq	288(%rax), %rdi
               	addq	$72, %rdi
               	callq	0x424d40 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>
               	leaq	250090(%rip), %rax      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	movq	%rax, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 236576(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4243ae <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0x5e>
               	leaq	250063(%rip), %rdi      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42443f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xef>
               	movb	$1, 16(%rsp)
               	callq	0x435780 <konan::gettid()>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movb	16(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 16(%r14)
               	andb	$1, %bpl
               	movb	250055(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x424406 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xb6>
               	leaq	246120(%rip), %r15      # 0x460548 <(anonymous namespace)::gSuspensionCondVar>
               	leaq	8(%rsp), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cb70 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	250006(%rip), %eax      # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x4243f0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xa0>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	xchgb	%bpl, 16(%r14)
               	cmpb	$0, 16(%rsp)
               	je	0x424434 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424434 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	cmpq	$0, 236432(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42442f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xdf>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nop

<kotlin::mm::RequestThreadsSuspension()>:
               	pushq	%rbx
               	cmpq	$0, 236383(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42446b <kotlin::mm::RequestThreadsSuspension()+0x1b>
               	leaq	249870(%rip), %rdi      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424494 <kotlin::mm::RequestThreadsSuspension()+0x44>
               	movb	$1, %cl
               	xorl	%eax, %eax
               	lock
               	cmpxchgb	%cl, 249889(%rip)       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	sete	%bl
               	cmpq	$0, 236342(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424490 <kotlin::mm::RequestThreadsSuspension()+0x40>
               	leaq	249829(%rip), %rdi      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	168(%rdi), %rax
               	movq	8(%rsi), %rcx
               	cmpq	%rcx, %rax
               	je	0x424508 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)+0x58>
               	leaq	200(%rbx), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c574 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	216(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 216(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%r14), %r14
               	movq	192(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 192(%rbx)
               	movq	%r14, %rdi
               	callq	0x43c58c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::SuspendIfRequestedSlowPath()>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$328, %rdi              # imm = 0x148
               	popq	%rax
               	jmp	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<ExceptionObjHolder::Throw(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movl	$16, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	0x4245b0 <(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>
               	leaq	230106(%rip), %rsi      # 0x45c870 <typeinfo for (anonymous namespace)::ExceptionObjHolderImpl>
               	leaq	163(%rip), %rdx         # 0x424640 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	leaq	230098(%rip), %rax      # 0x45c898 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	176(%rbx), %r13
               	leaq	184(%rbx), %r15
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c574 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	200(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 200(%rbx)
               	movq	192(%rbx), %rax
               	leaq	16(%rax), %rcx
               	movq	%rax, 32(%rax)
               	movq	%rcx, 8(%r12)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	229961(%rip), %rax      # 0x45c898 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	leaq	176(%r14), %rax
               	movq	8(%rbx), %rbx
               	movq	8(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x4246b6 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()+0x76>
               	leaq	208(%r14), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rbx, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c574 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	224(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 224(%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%rbx), %rbx
               	movq	200(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 200(%r14)
               	movq	%rbx, %rdi
               	callq	0x43c58c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x424640 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>
               	nopw	%cs:(%rax,%rax)

<InitAndRegisterGlobal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	16(%rbx), %r13
               	leaq	24(%rbx), %r12
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r15, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x43c574 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	32(%rbx), %rax
               	movq	%rax, 32(%rax)
               	testq	%r14, %r14
               	je	0x424778 <InitAndRegisterGlobal+0x68>
               	movq	%r14, (%r15)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<AddTLSRecord>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, (%rsp)
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	104(%rdi), %rbp
               	movq	%rsi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x4247cf <AddTLSRecord+0x3f>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rbx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x4247e5 <AddTLSRecord+0x55>
               	jmp	0x424844 <AddTLSRecord+0xb4>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ebx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424844 <AddTLSRecord+0xb4>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x42483b <AddTLSRecord+0xab>
               	nop
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x424844 <AddTLSRecord+0xb4>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424820 <AddTLSRecord+0x90>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x42482b <AddTLSRecord+0x9b>
               	jmp	0x424844 <AddTLSRecord+0xb4>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x424844 <AddTLSRecord+0xb4>
               	cmpq	%rcx, %r13
               	jne	0x4247f0 <AddTLSRecord+0x60>
               	testq	%rdi, %rdi
               	jne	0x424ade <AddTLSRecord+0x34e>
               	jmp	0x424844 <AddTLSRecord+0xb4>
               	testq	%rsi, %rsi
               	jne	0x424ade <AddTLSRecord+0x34e>
               	movl	156(%r15), %r12d
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r13, 8(%rax)
               	movq	(%rsp), %rcx
               	shlq	$32, %rcx
               	orq	%rcx, %r12
               	movq	%r12, 16(%rax)
               	movq	%rax, %r12
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x4248d9 <AddTLSRecord+0x149>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x4249da <AddTLSRecord+0x24a>
               	nopw	(%rax,%rax)
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x4248d9 <AddTLSRecord+0x149>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x4248c0 <AddTLSRecord+0x130>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x4248cb <AddTLSRecord+0x13b>
               	jmp	0x4248d9 <AddTLSRecord+0x149>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x4248d9 <AddTLSRecord+0x149>
               	cmpq	%rcx, %r13
               	jne	0x424890 <AddTLSRecord+0x100>
               	testq	%rdi, %rdi
               	jne	0x4249e3 <AddTLSRecord+0x253>
               	leaq	128(%r15), %rdi
               	movq	120(%r15), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rsi
               	callq	0x43d0aa <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x42490c <AddTLSRecord+0x17c>
               	movq	96(%r15), %rbp
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424a55 <AddTLSRecord+0x2c5>
               	jmp	0x424a7a <AddTLSRecord+0x2ea>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	je	0x4249f0 <AddTLSRecord+0x260>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	je	0x424a17 <AddTLSRecord+0x287>
               	leaq	112(%r15), %rsi
               	xorl	%edi, %edi
               	jmp	0x42497d <AddTLSRecord+0x1ed>
               	nopl	(%rax,%rax)
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x424a17 <AddTLSRecord+0x287>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x4249b0 <AddTLSRecord+0x220>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424960 <AddTLSRecord+0x1d0>
               	jmp	0x4249bf <AddTLSRecord+0x22f>
               	nop
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424960 <AddTLSRecord+0x1d0>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x424971 <AddTLSRecord+0x1e1>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x424971 <AddTLSRecord+0x1e1>
               	testq	%rsi, %rsi
               	je	0x4248d9 <AddTLSRecord+0x149>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	jmp	0x424acc <AddTLSRecord+0x33c>
               	leaq	144(%r15), %rbp
               	movq	$0, 144(%r15)
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	jne	0x424950 <AddTLSRecord+0x1c0>
               	movq	96(%r15), %rdi
               	leaq	144(%r15), %rax
               	cmpq	%rax, %rdi
               	je	0x424a2c <AddTLSRecord+0x29c>
               	callq	0x4136d0 <free@plt>
               	movq	%r14, 104(%r15)
               	movq	%rbp, 96(%r15)
               	movq	%r13, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x424a66 <AddTLSRecord+0x2d6>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424a7a <AddTLSRecord+0x2ea>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rbx,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x424ac0 <AddTLSRecord+0x330>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424a55 <AddTLSRecord+0x2c5>
               	leaq	112(%r15), %rcx
               	movq	112(%r15), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 112(%r15)
               	movq	(%r12), %rax
               	testq	%rax, %rax
               	je	0x424abb <AddTLSRecord+0x32b>
               	movq	104(%r15), %rsi
               	movq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x424aae <AddTLSRecord+0x31e>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x424ab2 <AddTLSRecord+0x322>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	96(%r15), %rbp
               	movq	%rcx, (%rbp,%rbx,8)
               	movq	120(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 120(%r15)
               	movq	(%rsp), %rax
               	addl	156(%r15), %eax
               	movl	%eax, 156(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<LookupTLS>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r9
               	leaq	243437(%rip), %r8       # 0x460208 <__KonanTlsKey>
               	cmpq	%r8, 160(%r9)
               	je	0x424b55 <LookupTLS+0x55>
               	movq	104(%r9), %r11
               	movq	%r8, %rax
               	orq	%r11, %rax
               	shrq	$32, %rax
               	je	0x424b61 <LookupTLS+0x61>
               	leaq	243405(%rip), %rax      # 0x460208 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divq	%r11
               	movq	%rdx, %r10
               	movq	96(%r9), %rax
               	movq	(%rax,%r10,8), %rax
               	testq	%rax, %rax
               	jne	0x424b7d <LookupTLS+0x7d>
               	jmp	0x424bdd <LookupTLS+0xdd>
               	movq	168(%r9), %rax
               	jmp	0x424bf9 <LookupTLS+0xf9>
               	leaq	243360(%rip), %rax      # 0x460208 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divl	%r11d
               	movl	%edx, %r10d
               	movq	96(%r9), %rax
               	movq	(%rax,%r10,8), %rax
               	testq	%rax, %rax
               	je	0x424bdd <LookupTLS+0xdd>
               	movq	(%rax), %rcx
               	cmpq	%r8, 8(%rcx)
               	je	0x424bd8 <LookupTLS+0xd8>
               	nopw	(%rax,%rax)
               	movq	%rcx, %rdi
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x424bdd <LookupTLS+0xdd>
               	movq	8(%rcx), %rsi
               	movq	%rsi, %rax
               	orq	%r11, %rax
               	shrq	$32, %rax
               	je	0x424bc0 <LookupTLS+0xc0>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%r11
               	cmpq	%r10, %rdx
               	je	0x424bcc <LookupTLS+0xcc>
               	jmp	0x424bdd <LookupTLS+0xdd>
               	nopl	(%rax)
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%r11d
               	cmpq	%r10, %rdx
               	jne	0x424bdd <LookupTLS+0xdd>
               	cmpq	%r8, %rsi
               	jne	0x424b90 <LookupTLS+0x90>
               	testq	%rdi, %rdi
               	jne	0x424bdf <LookupTLS+0xdf>
               	jmp	0x424bdd <LookupTLS+0xdd>
               	testq	%rcx, %rcx
               	jne	0x424bdf <LookupTLS+0xdf>
               	xorl	%ecx, %ecx
               	movq	8(%rcx), %rax
               	movq	%rax, 160(%r9)
               	movq	16(%rcx), %rax
               	movq	%rax, 168(%r9)
               	movq	16(%rcx), %rax
               	movq	72(%r9), %rcx
               	cltq
               	leaq	(%rcx,%rax,8), %rax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_processObjectInMark>:
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %r8
               	movl	40(%r8), %r9d
               	testl	%r9d, %r9d
               	jle	0x424c6e <Kotlin_processObjectInMark+0x5e>
               	xorl	%edx, %edx
               	jmp	0x424c40 <Kotlin_processObjectInMark+0x30>
               	nop
               	movl	40(%r8), %r9d
               	addq	$1, %rdx
               	movslq	%r9d, %rax
               	cmpq	%rax, %rdx
               	jge	0x424c6e <Kotlin_processObjectInMark+0x5e>
               	movq	32(%r8), %rcx
               	movslq	(%rcx,%rdx,4), %rcx
               	movq	(%rcx,%rsi), %rcx
               	testq	%rcx, %rcx
               	je	0x424c34 <Kotlin_processObjectInMark+0x24>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424c34 <Kotlin_processObjectInMark+0x24>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424c30 <Kotlin_processObjectInMark+0x20>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	jmp	0x424c30 <Kotlin_processObjectInMark+0x20>
               	retq
               	nop

<Kotlin_processArrayInMark>:
               	movl	8(%rsi), %eax
               	testl	%eax, %eax
               	je	0x424d26 <Kotlin_processArrayInMark+0xb6>
               	leaq	16(%rsi), %rcx
               	movslq	%eax, %r8
               	leaq	-8(,%r8,8), %rdx
               	testb	$8, %dl
               	jne	0x424cb6 <Kotlin_processArrayInMark+0x46>
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x424cb2 <Kotlin_processArrayInMark+0x42>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424cb2 <Kotlin_processArrayInMark+0x42>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424cb2 <Kotlin_processArrayInMark+0x42>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	leaq	24(%rsi), %rcx
               	testq	%rdx, %rdx
               	je	0x424d26 <Kotlin_processArrayInMark+0xb6>
               	leaq	(%rsi,%r8,8), %r8
               	addq	$16, %r8
               	jmp	0x424cd9 <Kotlin_processArrayInMark+0x69>
               	nopl	(%rax)
               	addq	$16, %rcx
               	cmpq	%r8, %rcx
               	je	0x424d26 <Kotlin_processArrayInMark+0xb6>
               	movq	(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x424d00 <Kotlin_processArrayInMark+0x90>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x424d00 <Kotlin_processArrayInMark+0x90>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x424d00 <Kotlin_processArrayInMark+0x90>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movq	8(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x424cd0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x424cd0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x424cd0 <Kotlin_processArrayInMark+0x60>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	jmp	0x424cd0 <Kotlin_processArrayInMark+0x60>
               	retq
               	nopw	(%rax,%rax)

<Kotlin_processEmptyObjectInMark>:
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %r14
               	leaq	247676(%rip), %rax      # 0x4614d0 <(anonymous namespace)::markingMutex>
               	movq	%rax, (%rsp)
               	movb	$0, 8(%rsp)
               	cmpq	$0, 234067(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424d7b <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x3b>
               	leaq	247650(%rip), %rdi      # 0x4614d0 <(anonymous namespace)::markingMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424e97 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x157>
               	movb	$1, 8(%rsp)
               	movb	247666(%rip), %al       # 0x4614f8 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x424e68 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x128>
               	movb	24(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 24(%r14)
               	movq	8(%r14), %rbx
               	leaq	8(%rbx), %rdi
               	callq	0x424290 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	168(%rbx), %rdi
               	callq	0x4241d0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	224(%rbx), %rdi
               	callq	0x424110 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	288(%rbx), %rdi
               	addq	$112, %rdi
               	callq	0x425890 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movb	247589(%rip), %al       # 0x4614f8 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x424e06 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xc6>
               	leaq	247486(%rip), %r15      # 0x4614a0 <(anonymous namespace)::markingCondVar>
               	movq	%rsp, %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cb70 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	247542(%rip), %eax      # 0x4614f8 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	jne	0x424df0 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xb0>
               	andb	$1, %bpl
               	cmpb	$0, 8(%rsp)
               	je	0x424e9e <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x15e>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424e32 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xf2>
               	cmpq	$0, 233874(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424e2d <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xed>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	247503(%rip), %rbx      # 0x461508 <(anonymous namespace)::markingEpoch (.0)>
               	leaq	247488(%rip), %rax      # 0x461500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 16(%rsp)
               	movq	8(%r14), %rdx
               	leaq	16(%rsp), %r15
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425440 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425960 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	xchgb	%bpl, 24(%r14)
               	cmpb	$0, 8(%rsp)
               	je	0x424e8c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424e8c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	cmpq	$0, 233784(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424e87 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x147>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movl	$1, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	xchgb	%bpl, 24(%r14)
               	movq	%rax, %rbx
               	cmpb	$0, 8(%rsp)
               	je	0x424ed3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424ed3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	cmpq	$0, 233713(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424ece <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x18e>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	cmpq	$0, 233644(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424f22 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x32>
               	leaq	247227(%rip), %rdi      # 0x4614d0 <(anonymous namespace)::markingMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425411 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x521>
               	xorl	%eax, %eax
               	xchgb	%al, 247246(%rip)       # 0x4614f8 <(anonymous namespace)::markingRequested (.0.0)>
               	leaq	247247(%rip), %rax      # 0x461500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 336(%r15)
               	cmpq	$0, 233592(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424f56 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x66>
               	leaq	242967(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425418 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x528>
               	addq	$336, %r15              # imm = 0x150
               	movq	242924(%rip), %rbp      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	jmp	0x424f77 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x87>
               	nopl	(%rax)
               	movq	352(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x424fd0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xe0>
               	movq	296(%rbp), %rax
               	movzbl	96(%rax), %eax
               	testb	$1, %al
               	jne	0x424f70 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	leaq	8(%rbp), %rbx
               	leaq	16(%rbp), %rdi
               	callq	0x424290 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	176(%rbp), %rdi
               	callq	0x4241d0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	232(%rbp), %rdi
               	callq	0x424110 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	callq	0x425890 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x425440 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	jmp	0x424f70 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	cmpq	$0, 233440(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424fe6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xf6>
               	leaq	242815(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movb	$1, %al
               	xchgb	%al, 242957(%rip)       # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	je	0x425011 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x121>
               	nopl	(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 242931(%rip)       # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x425000 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x110>
               	leaq	8(%rsp), %r12
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	242872(%rip), %rbp      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	leaq	242865(%rip), %r13      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rbp
               	je	0x4250f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
               	movq	%rbp, %rsi
               	jmp	0x42507e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x18e>
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rbx
               	movq	242821(%rip), %rax      # 0x4604e0 <kotlin::mm::GlobalData::instance_+0xa8>
               	addq	$-1, %rax
               	movq	%rax, 242810(%rip)      # 0x4604e0 <kotlin::mm::GlobalData::instance_+0xa8>
               	movq	%rbx, %rdi
               	callq	0x43c58c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rsi
               	cmpq	%r13, %rbp
               	je	0x4250c6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1d6>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x425050 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x160>
               	cmpq	%rsi, %r12
               	je	0x425076 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	(%rsi), %rdx
               	cmpq	%r12, %rdx
               	je	0x425076 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	%r12, %rdi
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 24(%rsp)
               	movq	242751(%rip), %rax      # 0x4604f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	addq	$-1, %rax
               	movq	%rax, 242740(%rip)      # 0x4604f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	jmp	0x425076 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	242715(%rip), %rdi      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rdi
               	je	0x4250f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r13, %rbx
               	jne	0x4250e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1f0>
               	movq	8(%rsp), %rax
               	cmpq	%r12, %rax
               	je	0x425135 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x245>
               	movq	%rax, 242663(%rip)      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	16(%rsp), %rax
               	movq	%rax, 242659(%rip)      # 0x4604f0 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, (%rax)
               	movq	242641(%rip), %rax      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%r13, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x425145 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x255>
               	movq	%r13, 242612(%rip)      # 0x4604f0 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, 242597(%rip)      # 0x4604e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	xorl	%eax, %eax
               	movq	%rax, 242604(%rip)      # 0x4604f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 242605(%rip)        # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$1, %bl
               	movb	$1, %al
               	xchgb	%al, 242539(%rip)       # 0x4604c8 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	je	0x425181 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x291>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 242507(%rip)       # 0x4604c8 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	jne	0x425170 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x280>
               	xchgb	%bl, 242553(%rip)       # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%bl, %bl
               	je	0x4251a1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2b1>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 242531(%rip)       # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x425190 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2a0>
               	movq	242416(%rip), %rsi      # 0x460498 <kotlin::mm::GlobalData::instance_+0x60>
               	xorl	%eax, %eax
               	movq	242463(%rip), %rdx      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	242456(%rip), %r12      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	242393(%rip), %r13      # 0x460498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rsi, %rbx
               	movl	%eax, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %ecx
               	je	0x425202 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x312>
               	cmpl	$1, %ecx
               	je	0x4251e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2f0>
               	testl	%ecx, %ecx
               	jne	0x4251d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	jmp	0x4251f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x300>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x4251d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	jmp	0x4252e4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3f4>
               	nop
               	movl	$1, %eax
               	movq	%rdx, %rsi
               	cmpq	%r13, %rbx
               	je	0x4251bf <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2cf>
               	jmp	0x4252e6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3f6>
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 32(%rsp)
               	movb	$0, 242413(%rip)        # 0x460500 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$0, 242350(%rip)        # 0x4604c8 <kotlin::mm::GlobalData::instance_+0x90>
               	movb	$1, %al
               	xchgb	%al, 241678(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425241 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x351>
               	nopw	(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 241651(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425230 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x340>
               	cmpb	$0, 241656(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x42526a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37a>
               	cmpq	%r14, 241639(%rip)      # 0x460238 <(anonymous namespace)::current>
               	jne	0x42526a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37a>
               	leaq	241630(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	cmpb	$0, 128(%rax)
               	je	0x42528c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	movupd	112(%rax), %xmm0
               	jmp	0x4252a1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3b1>
               	cmpb	$0, 241871(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x4252ac <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3bc>
               	cmpq	%r14, 241854(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x4252ac <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3bc>
               	leaq	241845(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	cmpb	$0, 128(%rax)
               	jne	0x425263 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x373>
               	xorpd	%xmm0, %xmm0
               	movupd	%xmm0, 112(%rax)
               	movupd	%xmm0, 96(%rax)
               	movb	$1, 128(%rax)
               	paddq	32(%rsp), %xmm0
               	movdqu	%xmm0, 112(%rax)
               	movb	$0, 241533(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	leaq	246246(%rip), %rdi      # 0x4614a0 <(anonymous namespace)::markingCondVar>
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	cmpq	$0, 232689(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4252d5 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e5>
               	leaq	246272(%rip), %rdi      # 0x4614d0 <(anonymous namespace)::markingMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %ecx
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%ecx, %ecx
               	je	0x425380 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x490>
               	cmpl	$1, %ecx
               	jne	0x42541f <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x52f>
               	movq	16(%rbx), %rsi
               	movq	%r15, %rdi
               	callq	0x425840 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425334 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x444>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	movq	(%rbx), %rdx
               	movq	242066(%rip), %rax      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rdx, %rbx
               	movl	$1, %ecx
               	nopw	%cs:(%rax,%rax)
               	cmpl	$2, %ecx
               	je	0x42520c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x31c>
               	cmpl	$1, %ecx
               	je	0x425364 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x474>
               	testl	%ecx, %ecx
               	jne	0x425350 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x460>
               	jmp	0x425373 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x483>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x425350 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x460>
               	jmp	0x425407 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x517>
               	movq	%rax, %rdx
               	cmpq	%r13, %rbx
               	je	0x42533e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x44e>
               	jmp	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movq	16(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425840 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4253b1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c1>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	movq	(%rbx), %rsi
               	xorl	%ecx, %ecx
               	movq	241939(%rip), %rax      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rsi, %rbx
               	movl	%ecx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpl	$2, %edx
               	je	0x42520c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x31c>
               	cmpl	$1, %edx
               	je	0x4253e4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4f4>
               	testl	%edx, %edx
               	jne	0x4253d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e0>
               	jmp	0x4253f3 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x503>
               	movl	$2, %edx
               	cmpq	%r12, %rbx
               	je	0x4253d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e0>
               	jmp	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	$1, %ecx
               	movq	%rax, %rsi
               	cmpq	%r13, %rbx
               	je	0x4253bd <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4cd>
               	movl	%edx, %ecx
               	jmp	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	$1, %ecx
               	jmp	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	leaq	127096(%rip), %rdx      # 0x44449e <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435860 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nop

<void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r12
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	288(%r12), %rax
               	movq	$0, 40(%rax)
               	movq	$0, 56(%rax)
               	movq	(%rax), %rcx
               	movq	8(%rcx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%rax), %rcx
               	movl	(%rcx), %ecx
               	movslq	%ecx, %rcx
               	movq	%rcx, 64(%rax)
               	movq	280(%r12), %r13
               	movq	%r13, 8(%rsp)
               	testq	%r13, %r13
               	je	0x425534 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf4>
               	movslq	16(%r13), %rax
               	leaq	(,%rax,8), %rcx
               	addq	%r13, %rcx
               	leaq	(,%rax,8), %rdx
               	movslq	20(%r13), %rsi
               	leaq	(%rcx,%rsi,8), %rbx
               	addq	$24, %rbx
               	subq	%rdx, %rbx
               	addq	$-24, %rbx
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	movq	%rbp, 16(%rsp)
               	movq	%rbx, 24(%rsp)
               	testq	%r13, %r13
               	je	0x42555c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	cmpq	%rbx, %rbp
               	jb	0x42555c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	nop
               	movq	8(%r13), %r13
               	testq	%r13, %r13
               	je	0x425542 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x102>
               	movslq	16(%r13), %rax
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	shlq	$3, %rax
               	movq	%rbp, 16(%rsp)
               	movslq	20(%r13), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%rbp, %rbx
               	subq	%rax, %rbx
               	movq	%rbx, 24(%rsp)
               	cmpq	%rbx, %rbp
               	jae	0x4254f0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xb0>
               	movq	%r13, 8(%rsp)
               	jmp	0x42555c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 16(%rsp)
               	xorl	%ebx, %ebx
               	jmp	0x42555a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11a>
               	movq	$0, 8(%rsp)
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 16(%rsp)
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	xorl	%ebp, %ebp
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	xorl	%esi, %esi
               	movl	%esi, %eax
               	nopw	(%rax,%rax)
               	cmpl	$2, %eax
               	je	0x425768 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x328>
               	cmpl	$1, %eax
               	je	0x4255a0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x160>
               	testl	%eax, %eax
               	jne	0x425570 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x130>
               	testq	%r13, %r13
               	jne	0x4255aa <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
               	testq	%rbp, %rbp
               	jne	0x4255aa <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
               	movq	%rdx, 8(%rsp)
               	movl	$1, %esi
               	movq	%rdx, %r13
               	jmp	0x425568 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
               	nop
               	movl	$2, %esi
               	cmpq	%r13, %rcx
               	je	0x425568 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%eax, %eax
               	je	0x42565f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x21f>
               	cmpl	$1, %eax
               	jne	0x425823 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3e3>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425840 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4255fc <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1bc>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	addq	$8, %r13
               	movq	%r13, 8(%rsp)
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	movl	$1, %eax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x425785 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	cmpl	$1, %eax
               	je	0x425634 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1f4>
               	testl	%eax, %eax
               	jne	0x425620 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
               	jmp	0x425643 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x203>
               	movl	$2, %eax
               	cmpq	%rcx, %r13
               	je	0x425620 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
               	jmp	0x42575e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x31e>
               	testq	%r13, %r13
               	jne	0x4255b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	testq	%rbp, %rbp
               	jne	0x4255b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movq	%rdx, 8(%rsp)
               	movq	%rdx, %r13
               	jmp	0x42560f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1cf>
               	movq	16(%rsp), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425840 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425691 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x251>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	addq	$8, %rbp
               	movq	%rbp, 16(%rsp)
               	testq	%r13, %r13
               	je	0x42570e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	cmpq	%rbx, %rbp
               	jb	0x42570e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	nopl	(%rax)
               	movq	8(%r13), %r13
               	testq	%r13, %r13
               	je	0x4256f4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2b4>
               	movslq	16(%r13), %rax
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	shlq	$3, %rax
               	movq	%rbp, 16(%rsp)
               	movslq	20(%r13), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%rbp, %rbx
               	subq	%rax, %rbx
               	movq	%rbx, 24(%rsp)
               	cmpq	%rbx, %rbp
               	jae	0x4256b0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	movq	%r13, 8(%rsp)
               	jmp	0x42570e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	movq	$0, 8(%rsp)
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 16(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%ebp, %ebp
               	xorl	%ebx, %ebx
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	xorl	%esi, %esi
               	movl	%esi, %eax
               	nopl	(%rax)
               	cmpl	$2, %eax
               	je	0x425785 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	cmpl	$1, %eax
               	je	0x42574f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x30f>
               	testl	%eax, %eax
               	jne	0x425720 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2e0>
               	testq	%r13, %r13
               	jne	0x4255b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	testq	%rbp, %rbp
               	jne	0x4255b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movq	%rdx, 8(%rsp)
               	movl	$1, %esi
               	movq	%rdx, %r13
               	jmp	0x42571a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
               	movl	$2, %esi
               	cmpq	%r13, %rcx
               	je	0x42571a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
               	jmp	0x4255b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movl	$1, %eax
               	jmp	0x4255b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	jmp	0x425785 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	nopw	(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 240291(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425780 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x340>
               	cmpb	$0, 240296(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x4257c4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
               	cmpq	%r14, 240279(%rip)      # 0x460238 <(anonymous namespace)::current>
               	jne	0x4257c4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
               	leaq	240270(%rip), %rcx      # 0x460238 <(anonymous namespace)::current>
               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	je	0x4257f1 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3b1>
               	movupd	(%rax), %xmm1
               	jmp	0x425805 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3c5>
               	cmpb	$0, 240501(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x42580d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
               	cmpq	%r14, 240484(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x42580d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
               	leaq	240475(%rip), %rcx      # 0x460338 <(anonymous namespace)::last>
               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	jne	0x4257be <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x37e>
               	xorpd	%xmm1, %xmm1
               	movupd	%xmm1, 16(%rax)
               	movupd	%xmm1, (%rax)
               	movb	$1, 128(%rcx)
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, (%rax)
               	movb	$0, 240156(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	126068(%rip), %rdx      # 0x44449e <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435860 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>:
               	pushq	%rbx
               	cmpq	$2, %rsi
               	jae	0x42584d <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0xd>
               	xorl	%ebx, %ebx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	(%rsi), %rax
               	testb	$3, %al
               	je	0x425865 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x25>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movb	$1, %bl
               	callq	*104(%rax)
               	jmp	0x425849 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	movq	(%rdi), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	movb	$1, %bl
               	jne	0x425849 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	cmpq	$0, 24(%rdi)
               	je	0x425927 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x97>
               	movq	%rdi, %r15
               	movq	(%rdi), %rbx
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	je	0x4258be <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x2e>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	jne	0x4258b0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x20>
               	movq	(%r15), %rax
               	cmpq	$0, (%rax)
               	je	0x4258cb <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x3b>
               	movq	8(%rax), %rax
               	movq	24(%r15), %rcx
               	movq	$0, 24(%r15)
               	movq	(%rax), %r14
               	movq	%rcx, (%rax)
               	testq	%r14, %r14
               	je	0x4258f2 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x62>
               	movq	%r14, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430310 <mi_free>
               	movq	32(%r15), %rax
               	movq	(%r15), %rcx
               	movq	%rax, 8(%rcx)
               	movq	$0, 32(%r15)
               	movdqu	40(%r15), %xmm0
               	movdqu	16(%rcx), %xmm1
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, 16(%rcx)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 40(%r15)
               	movb	$0, 32(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x42594f <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()+0x1f>
               	movq	%rbx, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430310 <mi_free>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, 16(%rsp)
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	(%r15), %rax
               	leaq	244603(%rip), %r12      # 0x461500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	pxor	%xmm1, %xmm1
               	jmp	0x4259d3 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
               	movl	%eax, %ebx
               	addq	$15, %rbx
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*104(%rax)
               	andq	$-8, %rbx
               	addq	$15, %rbx
               	andq	$-8, %rbx
               	addq	%rbx, %r14
               	movq	%r14, %xmm0
               	addq	$2, %r13
               	movq	%r13, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	(%r15), %rax
               	cmpq	%r12, %rax
               	je	0x425ad8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x178>
               	movq	(%rax), %rcx
               	movq	%rcx, (%r15)
               	testq	%rax, %rax
               	je	0x425ad8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x178>
               	leaq	8(%rax), %rbx
               	movq	8(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	20(%rcx), %ecx
               	testl	%ecx, %ecx
               	movdqa	%xmm1, (%rsp)
               	js	0x425a10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
               	movl	%ecx, %ebp
               	addq	$15, %rbp
               	jmp	0x425a25 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc5>
               	nop
               	addq	$-8, %rax
               	movslq	%ecx, %rcx
               	movl	24(%rax), %ebp
               	negq	%rcx
               	imulq	%rcx, %rbp
               	addq	$31, %rbp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	*104(%rax)
               	andq	$-8, %rbp
               	addq	$15, %rbp
               	andq	$-8, %rbp
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %r14
               	addq	%rbp, %r14
               	movq	%r14, %xmm0
               	movq	%xmm1, %r13
               	leaq	1(%r13), %rax
               	movq	%rax, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	je	0x4259d0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	cmpq	%rax, (%rax)
               	je	0x4259d0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	16(%rax), %rsi
               	testb	$1, %sil
               	je	0x4259d0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	andq	$-2, %rsi
               	je	0x4259d0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	xorl	%eax, %eax
               	movl	$1, %ecx
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	jne	0x4259d0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	jns	0x42598b <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
               	cltq
               	movl	8(%rsi), %ebx
               	negq	%rax
               	imulq	%rax, %rbx
               	addq	$31, %rbx
               	jmp	0x425991 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x31>
               	movdqa	%xmm1, (%rsp)
               	movb	$1, %al
               	xchgb	%al, 239435(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425b01 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
               	nopl	(%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239411(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425af0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x190>
               	cmpb	$0, 239416(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	movq	16(%rsp), %rax
               	je	0x425b3a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	cmpq	%rax, 239394(%rip)      # 0x460238 <(anonymous namespace)::current>
               	jne	0x425b3a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	leaq	239385(%rip), %rcx      # 0x460238 <(anonymous namespace)::current>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	je	0x425b68 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x208>
               	movdqu	(%rax), %xmm0
               	jmp	0x425b77 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x217>
               	cmpb	$0, 239615(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x425b7f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	cmpq	%rax, 239598(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x425b7f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	leaq	239589(%rip), %rcx      # 0x460338 <(anonymous namespace)::last>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	jne	0x425b34 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1d4>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$1, 152(%rcx)
               	paddq	%xmm1, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$0, 239274(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::schedule()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	cmpq	$0, 230393(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425bcd <GCStateHolder::schedule()+0x1d>
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425c18 <GCStateHolder::schedule()+0x68>
               	movq	168(%rbx), %r14
               	movq	40(%rbx), %rax
               	cmpq	%rax, %r14
               	jg	0x425bfb <GCStateHolder::schedule()+0x4b>
               	addq	$1, %rax
               	movq	%rax, 168(%rbx)
               	leaq	184(%rbx), %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	movq	168(%rbx), %r14
               	cmpq	$0, 230325(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425c0d <GCStateHolder::schedule()+0x5d>
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	nop

<kotlin::ThreadStateGuard::~ThreadStateGuard()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x425c49 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	movl	8(%rax), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x425c49 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	cmpl	$1, %eax
               	jne	0x425c49 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	movb	243795(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x425c4a <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x2a>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425c77 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425c80 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425c7d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	224451(%rip), %rax      # 0x45c938 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>
               	jmp	0x425c7a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>:
               	pushq	%rbx
               	movq	(%rsi), %rbx
               	movq	(%rdi), %rdi
               	addq	$248, %rdi
               	movq	%rbx, %rsi
               	callq	0x427290 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 238978(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425cd1 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238947(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425cc0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x30>
               	cmpb	$0, 238952(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x425cec <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	cmpq	%rbx, 238935(%rip)      # 0x460238 <(anonymous namespace)::current>
               	jne	0x425cec <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	leaq	238926(%rip), %rbx      # 0x460238 <(anonymous namespace)::current>
               	jmp	0x425d05 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x75>
               	cmpb	$0, 239181(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x425d12 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	cmpq	%rbx, 239164(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x425d12 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	leaq	239155(%rip), %rbx      # 0x460338 <(anonymous namespace)::last>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 80(%rbx)
               	movb	$1, 88(%rbx)
               	movb	$0, 238871(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>:
               	jmp	0x427a10 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
               	nopw	%cs:(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425d47 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425d50 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425d4d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	224227(%rip), %rax      # 0x45c928 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>
               	jmp	0x425d4a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x425d8d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %rbx
               	leaq	16(%rbx), %rsi
               	leaq	184(%rbx), %rdi
               	movq	%rdi, 208(%rsp)
               	movq	%rsi, 216(%rsp)
               	callq	0x4271e0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	cmpb	$1, 312(%rbx)
               	jne	0x425dcb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b>
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	56(%rbx), %rcx
               	movq	%rcx, 200(%rsp)
               	leaq	336(%rbx), %rcx
               	movq	%rcx, 192(%rsp)
               	leaq	104(%rsp), %r13
               	leaq	120(%rbx), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	229818(%rip), %r12      # 0x45dfb8 <write+0x45dfb8>
               	movq	%rbx, 72(%rsp)
               	jmp	0x425e53 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf3>
               	nopl	(%rax,%rax)
               	movq	%r15, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r13, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	208(%rsp), %rdi
               	movq	216(%rsp), %rsi
               	callq	0x4271e0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	movq	72(%rsp), %rbx
               	cmpb	$1, 312(%rbx)
               	je	0x425db9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
               	movq	(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 238546(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425e81 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x121>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238515(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425e70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x110>
               	cmpb	$0, 238520(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x425f19 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1b9>
               	movl	$256, %edx              # imm = 0x100
               	leaq	238750(%rip), %rdi      # 0x460338 <(anonymous namespace)::last>
               	leaq	238487(%rip), %rsi      # 0x460238 <(anonymous namespace)::current>
               	callq	0x4136f0 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 238472(%rip)     # 0x460238 <(anonymous namespace)::current>
               	movups	%xmm0, 238481(%rip)     # 0x460248 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 238490(%rip)     # 0x460258 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 238499(%rip)     # 0x460268 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 238508(%rip)     # 0x460278 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 238517(%rip)     # 0x460288 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 238526(%rip)     # 0x460298 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 238535(%rip)     # 0x4602a8 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 238544(%rip)     # 0x4602b8 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 238553(%rip)     # 0x4602c8 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 238562(%rip)     # 0x4602d8 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 238571(%rip)     # 0x4602e8 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 238580(%rip)     # 0x4602f8 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 238589(%rip)     # 0x460308 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 238598(%rip)     # 0x460318 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 238607(%rip)     # 0x460328 <(anonymous namespace)::current+0xf0>
               	movq	%rbp, 238360(%rip)      # 0x460238 <(anonymous namespace)::current>
               	movb	$1, 238361(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 238357(%rip)      # 0x460248 <(anonymous namespace)::current+0x10>
               	movb	$1, 238358(%rip)        # 0x460250 <(anonymous namespace)::current+0x18>
               	movb	$0, 238319(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	cmpl	$0, 344(%rbx)
               	sete	%al
               	xchgb	%al, 243111(%rip)       # 0x4614f8 <(anonymous namespace)::markingRequested (.0.0)>
               	movq	%rbp, %rax
               	xchgq	%rax, 243117(%rip)      # 0x461508 <(anonymous namespace)::markingEpoch (.0)>
               	callq	0x424450 <kotlin::mm::RequestThreadsSuspension()>
               	movb	$1, %al
               	xchgb	%al, 238280(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425f81 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x221>
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238259(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425f70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x210>
               	cmpb	$0, 238264(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x425f9a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x23a>
               	leaq	238247(%rip), %rbx      # 0x460238 <(anonymous namespace)::current>
               	cmpq	%rbp, 238240(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x425fb3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x253>
               	cmpb	$0, 238495(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x425fc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	leaq	238478(%rip), %rbx      # 0x460338 <(anonymous namespace)::last>
               	cmpq	%rbp, 238471(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x425fc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 48(%rbx)
               	movb	$1, 56(%rbx)
               	movq	%rbp, (%rsp)
               	movb	$0, 238181(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	nopl	(%rax,%rax)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	leaq	8(%rax), %rbp
               	testq	%rax, %rax
               	cmoveq	%rax, %rbp
               	testq	%r12, %r12
               	je	0x42600a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2aa>
               	leaq	238691(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426edb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x117b>
               	movq	238655(%rip), %rax      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bl
               	jmp	0x426027 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c7>
               	nopl	(%rax,%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426060 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x300>
               	leaq	8(%rax), %rcx
               	cmpq	%rbp, %rcx
               	je	0x426020 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426020 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426020 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movq	296(%rax), %rcx
               	movzbl	96(%rcx), %ecx
               	testb	$1, %cl
               	jne	0x426020 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	xorl	%ebx, %ebx
               	nop
               	testq	%r12, %r12
               	je	0x426071 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x311>
               	leaq	238580(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testb	%bl, %bl
               	jne	0x426085 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x325>
               	callq	0x413720 <sched_yield@plt>
               	jmp	0x425fd0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x270>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237987(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426080 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x320>
               	cmpb	$0, 237992(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	movq	72(%rsp), %rbx
               	je	0x4260b3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x353>
               	leaq	237970(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237959(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x4260d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x370>
               	cmpb	$0, 238214(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x4260db <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	leaq	238197(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 238186(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x4260db <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	cmpb	$0, 56(%rax)
               	je	0x4260db <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movb	$0, 237902(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	8(%rbx), %r15
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*24(%rax)
               	movq	200(%rsp), %rdi
               	movq	(%rsp), %rbp
               	movq	%rbp, %rsi
               	callq	0x427290 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x424ef0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
               	movq	%rbp, %rdi
               	movq	192(%rsp), %rsi
               	callq	0x425960 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	nop
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	leaq	8(%rax), %rbx
               	testq	%rax, %rax
               	cmoveq	%rax, %rbx
               	testq	%r12, %r12
               	je	0x42614e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3ee>
               	leaq	238367(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426ee2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1182>
               	movq	238331(%rip), %rax      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bpl
               	jmp	0x426167 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x407>
               	nopl	(%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426190 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x430>
               	leaq	8(%rax), %rcx
               	cmpq	%rbx, %rcx
               	je	0x426160 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426160 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426160 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	xorl	%ebp, %ebp
               	nop
               	testq	%r12, %r12
               	je	0x4261a1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x441>
               	leaq	238276(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testb	%bpl, %bpl
               	jne	0x4261b5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x455>
               	callq	0x413720 <sched_yield@plt>
               	jmp	0x426120 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3c0>
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237683(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4261b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x450>
               	cmpb	$0, 237688(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	leaq	238417(%rip), %r14      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	je	0x4261e5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x485>
               	leaq	237664(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237653(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x426207 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4a7>
               	cmpb	$0, 237908(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x426220 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
               	leaq	237891(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	movl	$0, %esi
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237875(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x426222 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
               	cmpb	$0, 152(%rax)
               	je	0x426220 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
               	movq	144(%rax), %rsi
               	jmp	0x426222 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
               	xorl	%esi, %esi
               	movb	$0, 237575(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*32(%rax)
               	movb	$1, %al
               	xchgb	%al, 238333(%rip)       # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426251 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4f1>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238315(%rip)       # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426240 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4e0>
               	leaq	8(%rsp), %r15
               	movq	%r15, 16(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	238256(%rip), %rbp      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rbp
               	je	0x426320 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5c0>
               	movq	%rbp, %rsi
               	jmp	0x4262ae <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x54e>
               	nop
               	movq	40(%rax), %rbx
               	movq	238221(%rip), %rax      # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	addq	$-1, %rax
               	movq	%rax, 238210(%rip)      # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c58c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430310 <mi_free>
               	movq	%rbp, %rsi
               	cmpq	%r14, %rbp
               	je	0x426300 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5a0>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	32(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x426280 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x520>
               	cmpq	%rsi, %r15
               	je	0x4262a6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	movq	(%rsi), %rdx
               	cmpq	%r15, %rdx
               	je	0x4262a6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	movq	%r15, %rdi
               	callq	0x43c52e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 24(%rsp)
               	movq	238147(%rip), %rax      # 0x460530 <kotlin::mm::GlobalData::instance_+0xf8>
               	addq	$-1, %rax
               	movq	%rax, 238136(%rip)      # 0x460530 <kotlin::mm::GlobalData::instance_+0xf8>
               	jmp	0x4262a6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	nopl	(%rax)
               	movq	238105(%rip), %rdi      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rdi
               	je	0x426320 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5c0>
               	movq	(%rdi), %rbx
               	callq	0x430310 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x426310 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5b0>
               	movq	8(%rsp), %rax
               	cmpq	%r15, %rax
               	je	0x426370 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x610>
               	movq	%rax, 238059(%rip)      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	16(%rsp), %rax
               	movq	%rax, 238055(%rip)      # 0x460528 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, (%rax)
               	movq	238037(%rip), %rax      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%r14, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r15, 16(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x426380 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
               	nopl	(%rax)
               	movq	%r14, 238001(%rip)      # 0x460528 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, 237986(%rip)      # 0x460520 <kotlin::mm::GlobalData::instance_+0xe8>
               	xorl	%eax, %eax
               	movq	%rax, 237993(%rip)      # 0x460530 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 237994(%rip)        # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	237950(%rip), %rbx      # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 237198(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	movq	(%rsp), %r14
               	je	0x4263c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x661>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237171(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4263b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x650>
               	cmpb	$0, 237176(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x4263da <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x67a>
               	leaq	237159(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	cmpq	%r14, 237152(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x4263f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x693>
               	cmpb	$0, 237407(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x42641d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	leaq	237390(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	cmpq	%r14, 237383(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x42641d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 200(%rax)
               	movq	%rbx, 184(%rax)
               	movq	%rcx, 192(%rax)
               	jne	0x42641d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	movb	$1, 200(%rax)
               	movb	$0, 237068(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movb	$1, %al
               	xchgb	%al, 237836(%rip)       # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426441 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e1>
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237819(%rip)       # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426430 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	237760(%rip), %rbx      # 0x460508 <kotlin::mm::GlobalData::instance_+0xd0>
               	leaq	237753(%rip), %rdx      # 0x460508 <kotlin::mm::GlobalData::instance_+0xd0>
               	jmp	0x426463 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x703>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rbx
               	cmpq	%rdx, %rbx
               	je	0x426540 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7e0>
               	movl	32(%rbx), %eax
               	testb	$4, %al
               	jne	0x426460 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x426483 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x723>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%rax), %rcx
               	testb	$3, %cl
               	jne	0x426460 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	-8(%rax), %rax
               	testq	%rax, %rax
               	jne	0x426460 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4264f4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x794>
               	movq	40(%rbx), %rcx
               	testb	$1, %cl
               	je	0x4264ad <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x74d>
               	andq	$-2, %rcx
               	movq	8(%rcx), %rcx
               	movl	$1, %esi
               	movq	40(%rbx), %rax
               	movl	%eax, %edx
               	andl	$1, %edx
               	negq	%rdx
               	andq	%rax, %rdx
               	andq	$-2, %rdx
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	cmpl	$1, %eax
               	je	0x4264d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x770>
               	movq	$0, 8(%rdx)
               	movl	$1, %eax
               	xorl	%esi, %esi
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	xchgq	%rcx, 40(%rbx)
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x426504 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7a4>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	24(%rbx), %rcx
               	movq	%rcx, (%rax)
               	movq	(%rbx), %rbp
               	movq	237571(%rip), %rax      # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	addq	$-1, %rax
               	movq	%rax, 237560(%rip)      # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c58c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430310 <mi_free>
               	movq	%rbp, %rbx
               	jmp	0x426448 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e8>
               	nopl	(%rax,%rax)
               	movb	$0, 237553(%rip)        # 0x460538 <kotlin::mm::GlobalData::instance_+0x100>
               	movq	237514(%rip), %rbx      # 0x460518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 236762(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426571 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x811>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236739(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426560 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x800>
               	cmpb	$0, 236744(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x42658a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82a>
               	leaq	236727(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	cmpq	%r14, 236720(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x4265a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x843>
               	cmpb	$0, 236975(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x4265cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	leaq	236958(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	cmpq	%r14, 236951(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x4265cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 248(%rax)
               	movq	%rbx, 232(%rax)
               	movq	%rcx, 240(%rax)
               	jne	0x4265cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	movb	$1, 248(%rax)
               	movb	$0, 236636(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	72(%rsp), %rax
               	movq	(%rax), %rbx
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	je	0x4265fe <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x89e>
               	nopl	(%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	jne	0x4265f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x890>
               	testq	%r12, %r12
               	je	0x426640 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e0>
               	leaq	241250(%rip), %rdi      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426ee9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1189>
               	xorl	%eax, %eax
               	xchgb	%al, 241269(%rip)       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testq	%r12, %r12
               	je	0x426648 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e8>
               	leaq	241213(%rip), %rdi      # 0x461470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x426648 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e8>
               	nopl	(%rax)
               	xorl	%eax, %eax
               	xchgb	%al, 241232(%rip)       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	movq	%rbx, 128(%rsp)
               	leaq	237297(%rip), %rdi      # 0x460548 <(anonymous namespace)::gSuspensionCondVar>
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	movb	$1, %al
               	xchgb	%al, 236492(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426681 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x921>
               	nopl	(%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236467(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426670 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x910>
               	cmpb	$0, 236472(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x42669a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x93a>
               	leaq	236455(%rip), %rbx      # 0x460238 <(anonymous namespace)::current>
               	cmpq	%r14, 236448(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x4266b3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x953>
               	cmpb	$0, 236703(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x4266c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	leaq	236686(%rip), %rbx      # 0x460338 <(anonymous namespace)::last>
               	cmpq	%r14, 236679(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x4266c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 64(%rbx)
               	movb	$1, 72(%rbx)
               	movb	$0, 236393(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r13)
               	movq	$0, 16(%r13)
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	237149(%rip), %rax      # 0x460540 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 236349(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426711 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9b1>
               	nopl	(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236323(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426700 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9a0>
               	movq	128(%rsp), %rax
               	leaq	8(%rax), %r14
               	cmpb	$0, 236316(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x42673a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9da>
               	leaq	236299(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 236288(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x426757 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9f7>
               	cmpb	$0, 236543(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x42676e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
               	leaq	236526(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 236515(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x42676e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
               	cmpb	$0, 176(%rax)
               	movq	%rbx, 160(%rax)
               	movq	%rbp, 168(%rax)
               	je	0x426790 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa30>
               	movb	$0, 236219(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	jne	0x4267aa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa4a>
               	jmp	0x426950 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, 176(%rax)
               	movb	$0, 236178(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x426950 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	xorl	%r13d, %r13d
               	jmp	0x4267c7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	nop
               	movq	$0, 8(%rbx)
               	movq	%rbx, %r13
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x426950 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	movq	8(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x4267b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa50>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	je	0x4267df <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa7f>
               	cmpq	%rax, (%rax)
               	jne	0x426820 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	88(%rax), %eax
               	testb	$64, %al
               	jne	0x426820 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	js	0x426906 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba6>
               	movl	%eax, %ecx
               	addq	$15, %rcx
               	jmp	0x426916 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbb6>
               	nopw	%cs:(%rax,%rax)
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	js	0x42683a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xada>
               	movl	%eax, %ecx
               	addq	$15, %rcx
               	jmp	0x42684a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaea>
               	cltq
               	movl	24(%rbx), %ecx
               	negq	%rax
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427960 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %rbx
               	movq	8(%rsp), %rax
               	movq	$0, 8(%rsp)
               	movq	%rax, 144(%rsp)
               	cmpq	$0, 104(%rsp)
               	movq	144(%rsp), %r15
               	je	0x4268bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb5d>
               	movq	112(%rsp), %rax
               	movq	$0, 144(%rsp)
               	movq	(%rax), %rbp
               	movq	%r15, (%rax)
               	testq	%rbp, %rbp
               	je	0x4268ce <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb6e>
               	movq	%rbp, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x4268ce <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb6e>
               	movq	$0, 144(%rsp)
               	movq	%r15, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	movq	120(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 120(%rsp)
               	leaq	144(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	8(%rsp), %r15
               	movq	%r15, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x4267c7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	jmp	0x426950 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	cltq
               	movl	24(%rbx), %ecx
               	negq	%rax
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427960 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %rbx
               	movq	%r15, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x4267c7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	nopw	%cs:(%rax,%rax)
               	movq	236521(%rip), %rax      # 0x460540 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 235721(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426981 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc21>
               	nop
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 235699(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426970 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc10>
               	cmpb	$0, 235704(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	movq	(%rsp), %r14
               	je	0x42699e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc3e>
               	leaq	235683(%rip), %rax      # 0x460238 <(anonymous namespace)::current>
               	cmpq	%r14, 235676(%rip)      # 0x460238 <(anonymous namespace)::current>
               	je	0x4269b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc57>
               	cmpb	$0, 235931(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x4269d5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	leaq	235914(%rip), %rax      # 0x460338 <(anonymous namespace)::last>
               	cmpq	%r14, 235907(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x4269d5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	cmpb	$0, 224(%rax)
               	movq	%rbx, 208(%rax)
               	movq	%rbp, 216(%rax)
               	jne	0x4269d5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	movb	$1, 224(%rax)
               	movb	$0, 235604(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	184(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x427290 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 235580(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	leaq	104(%rsp), %r13
               	movq	72(%rsp), %rbx
               	je	0x426a21 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcc1>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423050 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 235539(%rip)       # 0x460230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426a10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcb0>
               	cmpb	$0, 235544(%rip)        # 0x460240 <(anonymous namespace)::current+0x8>
               	je	0x426ae0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
               	cmpq	%r14, 235523(%rip)      # 0x460238 <(anonymous namespace)::current>
               	jne	0x426ae0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 235537(%rip)      # 0x460258 <(anonymous namespace)::current+0x20>
               	movb	$1, 235538(%rip)        # 0x460260 <(anonymous namespace)::current+0x28>
               	movl	$256, %edx              # imm = 0x100
               	leaq	235742(%rip), %rdi      # 0x460338 <(anonymous namespace)::last>
               	leaq	235479(%rip), %rsi      # 0x460238 <(anonymous namespace)::current>
               	callq	0x4136f0 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 235464(%rip)     # 0x460238 <(anonymous namespace)::current>
               	movups	%xmm0, 235473(%rip)     # 0x460248 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 235482(%rip)     # 0x460258 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 235491(%rip)     # 0x460268 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 235500(%rip)     # 0x460278 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 235509(%rip)     # 0x460288 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 235518(%rip)     # 0x460298 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 235527(%rip)     # 0x4602a8 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 235536(%rip)     # 0x4602b8 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 235545(%rip)     # 0x4602c8 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 235554(%rip)     # 0x4602d8 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 235563(%rip)     # 0x4602e8 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 235572(%rip)     # 0x4602f8 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 235581(%rip)     # 0x460308 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 235590(%rip)     # 0x460318 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 235599(%rip)     # 0x460328 <(anonymous namespace)::current+0xf0>
               	jmp	0x426b05 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	nop
               	cmpb	$0, 235609(%rip)        # 0x460340 <(anonymous namespace)::last+0x8>
               	je	0x426b05 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	cmpq	%r14, 235592(%rip)      # 0x460338 <(anonymous namespace)::last>
               	jne	0x426b05 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	callq	0x43cf20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 235610(%rip)      # 0x460358 <(anonymous namespace)::last+0x20>
               	movb	$1, 235611(%rip)        # 0x460360 <(anonymous namespace)::last+0x28>
               	movb	$0, 235300(%rip)        # 0x460230 <(anonymous namespace)::lock>
               	movq	328(%rbx), %rbp
               	leaq	88(%rbp), %rdi
               	movq	%rdi, 80(%rsp)
               	movb	$0, 88(%rsp)
               	testq	%r12, %r12
               	je	0x426b33 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd3>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426ef0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1190>
               	movb	$1, 88(%rsp)
               	movq	120(%rsp), %rax
               	testq	%rax, %rax
               	leaq	80(%rsp), %rbx
               	jne	0x426b52 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdf2>
               	cmpq	$0, (%rbp)
               	je	0x426dd8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1078>
               	movq	%rax, 224(%rsp)
               	leaq	40(%rbp), %r14
               	cmpb	$0, 169(%rbp)
               	jne	0x426b84 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe24>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cb70 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpb	$0, 169(%rbp)
               	je	0x426b70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe10>
               	leaq	272(%rbp), %rbx
               	testq	%r12, %r12
               	je	0x426ba0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe40>
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426ef7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1197>
               	cmpq	$0, (%rbp)
               	je	0x426c00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xea0>
               	testq	%r12, %r12
               	je	0x426bb4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe54>
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	104(%rsp), %rax
               	testq	%rax, %rax
               	je	0x426d4e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfee>
               	cmpq	$0, 16(%rbp)
               	je	0x426d20 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfc0>
               	movq	24(%rbp), %rcx
               	movq	$0, 104(%rsp)
               	movq	(%rcx), %rbx
               	movq	%rax, (%rcx)
               	testq	%rbx, %rbx
               	je	0x426d2d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfcd>
               	movq	%rbx, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x426d2d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfcd>
               	nop
               	movq	%rbx, %r13
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 168(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 144(%rsp)
               	movq	$22, 160(%rsp)
               	movups	120963(%rip), %xmm0     # 0x4444bb <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movabsq	$8245936382198116210, %rcx # imm = 0x726F737365636F72
               	movq	%rcx, 14(%rax)
               	movq	$22, 152(%rsp)
               	movq	144(%rsp), %rbx
               	movb	$0, 22(%rbx)
               	movb	$1, 176(%rsp)
               	movq	$0, 136(%rsp)
               	movq	%rbp, 8(%rsp)
               	movb	$0, 48(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 16(%rsp)
               	movq	$22, 32(%rsp)
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rax)
               	movq	14(%rbx), %rcx
               	movq	%rcx, 14(%rax)
               	movq	$22, 24(%rsp)
               	movq	16(%rsp), %rbx
               	movb	$0, 22(%rbx)
               	movb	$1, 48(%rsp)
               	leaq	1576(%rip), %rax        # 0x4272f0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%rax, 56(%rsp)
               	movl	$64, %edi
               	callq	0x43bf19 <operator new(unsigned long)>
               	leaq	220186(%rip), %rcx      # 0x45c8f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	leaq	32(%rsp), %rdx
               	cmpq	%rdx, %rbx
               	je	0x426e00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a0>
               	movq	%rbx, 16(%rax)
               	movq	32(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x426e06 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a6>
               	nopl	(%rax)
               	movq	$0, 104(%rsp)
               	movq	%rax, 16(%rbp)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%rbp)
               	movq	224(%rsp), %rax
               	addq	32(%rbp), %rax
               	movq	%rax, 32(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%r13)
               	movq	(%rsp), %rax
               	movq	%rax, 160(%rbp)
               	movq	%r14, %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	cmpb	$0, 88(%rsp)
               	je	0x426d81 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1021>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426d81 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1021>
               	testq	%r12, %r12
               	je	0x426d7c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x101c>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	104(%rsp), %rbp
               	movq	$0, 104(%rsp)
               	movq	%rbp, 8(%rsp)
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rbp, %rbp
               	je	0x425e10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb0>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	8(%rsp), %rbx
               	movq	%rbp, 8(%rsp)
               	testq	%rbx, %rbx
               	je	0x426da0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
               	movq	%rbx, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x426da0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
               	movq	%r14, 8(%rsp)
               	cmpq	$0, 144(%rbp)
               	je	0x426f03 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11a3>
               	leaq	128(%rbp), %rdi
               	movq	%r15, %rsi
               	callq	*152(%rbp)
               	jmp	0x426d61 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1001>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rcx)
               	movq	%r13, %rbx
               	movq	24(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rdx, 16(%rsp)
               	movq	$0, 24(%rsp)
               	movb	$0, 32(%rsp)
               	movb	$1, 48(%rax)
               	leaq	1216(%rip), %rcx        # 0x4272f0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%rcx, 56(%rax)
               	movq	%rax, 64(%rsp)
               	leaq	136(%rsp), %rdi
               	leaq	64(%rsp), %rsi
               	movq	225651(%rip), %rdx      # 0x45dfc0 <write+0x45dfc0>
               	callq	0x43f14e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	64(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426e62 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1102>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 64(%rsp)
               	cmpb	$0, 48(%rsp)
               	leaq	104(%rsp), %r13
               	je	0x426e8b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
               	movq	16(%rsp), %rdi
               	leaq	32(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426e8b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, (%rbp)
               	jne	0x426efe <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x119e>
               	movq	136(%rsp), %rax
               	movq	%rax, (%rbp)
               	movq	$0, 136(%rsp)
               	cmpb	$0, 176(%rsp)
               	je	0x426ba7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426ba7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	callq	0x4136d0 <free@plt>
               	jmp	0x426ba7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	callq	0x43c2c3 <std::terminate()>
               	callq	0x43cf72 <std::__throw_bad_function_call()>
               	jmp	0x426f2c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11cc>
               	jmp	0x427056 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f6>
               	movq	%rax, %rbx
               	jmp	0x426f40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e0>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpb	$0, 88(%rsp)
               	je	0x426f40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e0>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	jne	0x426f48 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e8>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	cmpq	$0, 225384(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x426f57 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f7>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	64(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426f77 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1217>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 64(%rsp)
               	cmpb	$0, 48(%rsp)
               	je	0x426fa3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
               	movq	16(%rsp), %rbx
               	jmp	0x426f91 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1231>
               	movq	%rax, %r14
               	leaq	32(%rsp), %rax
               	cmpq	%rax, %rbx
               	je	0x426fa3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 176(%rsp)
               	je	0x426fc7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426fc7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, 225257(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427059 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f9>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	104(%rsp), %rbx
               	movq	$0, 104(%rsp)
               	movq	%rbx, 8(%rsp)
               	testq	%rbx, %rbx
               	je	0x42702e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12ce>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	8(%rsp), %rbp
               	movq	%rbx, 8(%rsp)
               	testq	%rbp, %rbp
               	je	0x426ffb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x129b>
               	movq	%rbp, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x426ffb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x129b>
               	leaq	8(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	%r14, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	%r14, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::~GCStateHolder()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	addq	$248, %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	leaq	184(%rbx), %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	leaq	120(%rbx), %rdi
               	callq	0x43cb6a <std::condition_variable::~condition_variable()>
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43cb6a <std::condition_variable::~condition_variable()>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	219133(%rip), %rax      # 0x45c8b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x4270d6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x4270d6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f0e0 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	219085(%rip), %rax      # 0x45c8b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427106 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427106 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x427183 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x42715f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427165 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x4271a5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4271a5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x4271c9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4271c9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	8(%rdi), %rdi
               	movq	%rdi, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 224689(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427212 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x32>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427285 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0xa5>
               	movb	$1, 16(%rsp)
               	movq	104(%rbx), %rax
               	cmpq	%rax, 168(%rbx)
               	jg	0x427258 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x78>
               	leaq	16(%r14), %r15
               	leaq	8(%rsp), %r12
               	nopl	(%rax)
               	cmpb	$0, 296(%rbx)
               	jne	0x427251 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x71>
               	movq	%r15, %rdi
               	movq	%r12, %rsi
               	callq	0x43cb70 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	104(%rbx), %rax
               	cmpq	%rax, 168(%rbx)
               	jle	0x427230 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
               	cmpb	$0, 16(%rsp)
               	je	0x427276 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427276 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
               	cmpq	$0, 224590(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427271 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x91>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	nopl	(%rax)

<GCStateHolder::ValueWithCondVar<long>::set(long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	movq	8(%rdi), %r14
               	cmpq	$0, 224529(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4272b5 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x25>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4272e6 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x56>
               	movq	%r15, (%rbx)
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	testq	%r14, %r14
               	je	0x4272e0 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	cmpq	$0, 224487(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4272e0 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413750 <pthread_mutex_unlock@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	nopl	(%rax)

<std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42731d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %r13
               	callq	0x4384b0 <Kotlin_initRuntimeIfNeeded>
               	leaq	176(%r13), %rax
               	movq	%rax, 32(%rsp)
               	cmpq	$0, 224383(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42734d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x5d>
               	movq	32(%rsp), %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427793 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$1, 264(%r13)
               	cmpq	$0, 224347(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427369 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x79>
               	movq	32(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	leaq	216(%r13), %rdi
               	movq	%rdi, 88(%rsp)
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	leaq	88(%r13), %r14
               	leaq	40(%r13), %r15
               	leaq	24(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	128(%r13), %rax
               	movq	%rax, 112(%rsp)
               	xorl	%ebp, %ebp
               	leaq	8(%rsp), %rbx
               	movq	%r14, 104(%rsp)
               	movq	%r15, 96(%rsp)
               	jmp	0x4273b5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	nopl	(%rax)
               	movb	$0, 16(%rsp)
               	movq	%r14, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 224241(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4273d9 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xe9>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427793 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$1, 16(%rsp)
               	movq	32(%r13), %rax
               	movb	$1, %cl
               	testq	%rax, %rax
               	jne	0x427423 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x133>
               	nopl	(%rax)
               	cmpq	%rbp, 160(%r13)
               	jne	0x42741d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12d>
               	cmpb	$0, 168(%r13)
               	jne	0x4276fd <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x40d>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cb70 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	32(%r13), %rax
               	testq	%rax, %rax
               	je	0x4273f0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x100>
               	jmp	0x42741f <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12f>
               	xorl	%eax, %eax
               	movb	16(%rsp), %cl
               	movq	16(%r13), %rdx
               	movq	$0, 16(%r13)
               	movq	%rdx, 64(%rsp)
               	movq	24(%r13), %rdx
               	movq	160(%r13), %rbx
               	movq	%rax, 80(%rsp)
               	movq	%rdx, 72(%rsp)
               	movq	120(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	testb	%cl, %cl
               	je	0x427784 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x494>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42747a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x18a>
               	cmpq	$0, 224074(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427475 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x185>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 80(%rsp)
               	je	0x427630 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movq	%rbx, 144(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rbx
               	xorl	%eax, %eax
               	movq	%rcx, 128(%rsp)
               	xchgl	%eax, 328(%rcx)
               	movl	%eax, 52(%rsp)
               	cmpl	$1, %eax
               	jne	0x4274d6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1e6>
               	movb	237518(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4274d6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1e6>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 136(%rsp)
               	movq	64(%rsp), %rbx
               	testq	%rbx, %rbx
               	jne	0x42752e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
               	jmp	0x4275e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	nopl	(%rax)
               	leaq	264(%r14), %rbp
               	movl	$24, %edi
               	callq	0x427f00 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%r12, 16(%rax)
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x43c574 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	280(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 280(%r14)
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x4275e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	leaq	16(%rbx), %rbp
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rsi
               	movl	88(%rsi), %eax
               	testb	$64, %al
               	je	0x42754c <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x25c>
               	movq	%rbp, %rdi
               	callq	0x437ca0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	je	0x427522 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x232>
               	cmpq	%rax, (%rax)
               	je	0x427522 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x232>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	cmpq	%rax, (%rax)
               	movl	$0, %r12d
               	cmovneq	%rax, %r12
               	movq	16(%r12), %rax
               	testb	$1, %al
               	je	0x427581 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x291>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%r12), %rcx
               	movq	%rcx, (%rax)
               	movq	%r15, %rax
               	movq	-64(%r15), %r14
               	leaq	232(%r14), %rax
               	movq	24(%r12), %rcx
               	addq	$-8, %r12
               	cmpq	%rcx, %rax
               	jne	0x4274f0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x200>
               	movq	40(%r12), %rbp
               	movq	256(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 256(%r14)
               	movq	%rbp, %rdi
               	callq	0x43c58c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbp, %rdi
               	callq	0x430310 <mi_free>
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x42752e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
               	nop
               	cmpq	$0, 128(%rsp)
               	movq	104(%rsp), %r14
               	movq	96(%rsp), %r15
               	movq	144(%rsp), %rbx
               	movq	136(%rsp), %rdi
               	je	0x427630 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movl	52(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x427630 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	cmpl	$1, %eax
               	jne	0x427630 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movb	237176(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427630 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)
               	movq	%rbx, 24(%rsp)
               	cmpq	$0, 144(%r13)
               	je	0x42778e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x49e>
               	movq	%rbx, %r12
               	movq	112(%rsp), %rdi
               	leaq	24(%rsp), %rsi
               	callq	*152(%r13)
               	movq	64(%rsp), %rbx
               	movq	$0, 64(%rsp)
               	movq	%rbx, 24(%rsp)
               	nopw	(%rax,%rax)
               	testq	%rbx, %rbx
               	je	0x4276b0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3c0>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	24(%rsp), %rbp
               	movq	%rbx, 24(%rsp)
               	testq	%rbp, %rbp
               	je	0x427670 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x380>
               	movq	%rbp, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x427670 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x380>
               	nop
               	leaq	24(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	64(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	leaq	8(%rsp), %rbx
               	movq	%r12, %rbp
               	je	0x4273b5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4273b5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	cmpq	$0, 223435(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4273b0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc0>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4273b0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc0>
               	movb	$0, 169(%r13)
               	cmpb	$0, 16(%rsp)
               	je	0x42772a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x43a>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42772a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x43a>
               	cmpq	$0, 223386(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427725 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x435>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 223366(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427760 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x470>
               	movq	32(%rsp), %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427793 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$0, 264(%r13)
               	cmpq	$0, 223334(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427768 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x478>
               	movq	32(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x427768 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x478>
               	movb	$0, 264(%r13)
               	movq	88(%rsp), %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	callq	0x43cf72 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	jmp	0x42779c <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4ac>
               	movq	%rax, %r14
               	movq	64(%rsp), %rbx
               	movq	$0, 64(%rsp)
               	movq	%rbx, 40(%rsp)
               	testq	%rbx, %rbx
               	je	0x4277e5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4f5>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	40(%rsp), %rbp
               	movq	%rbx, 40(%rsp)
               	testq	%rbp, %rbp
               	je	0x4277b2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4c2>
               	movq	%rbp, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x4277b2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4c2>
               	leaq	40(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	64(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	je	0x42781e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x52e>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42781e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x52e>
               	cmpq	$0, 223142(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427819 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x529>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	217277(%rip), %rax      # 0x45c8f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427856 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427856 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f0e0 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	217229(%rip), %rax      # 0x45c8f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427886 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427886 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x427903 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x4278df <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x4278e5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x427925 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427925 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x427949 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427949 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r12
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	movq	%rdx, %rbp
               	cmoveq	%rsi, %rbp
               	movq	(%rbp), %rcx
               	movq	$0, (%rbp)
               	movq	%rcx, (%rsp)
               	movq	(%rcx), %rax
               	movq	$0, (%rcx)
               	movq	(%rbp), %r13
               	movq	%rax, (%rbp)
               	testq	%r13, %r13
               	je	0x4279bc <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
               	movq	%r13, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r13, %rdi
               	callq	0x430310 <mi_free>
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	jne	0x4279c5 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x65>
               	movq	%r12, 8(%rbx)
               	movq	16(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rax
               	subq	%r14, %rax
               	movq	%rax, 24(%rbx)
               	movq	(%rbp), %rax
               	movq	(%rsp), %rcx
               	movq	$0, (%rsp)
               	movq	%rcx, (%r15)
               	movq	%rax, 8(%r15)
               	movq	%rsp, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	testq	%r15, %r15
               	je	0x427a40 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x30>
               	xchgl	%ebp, 328(%r15)
               	jmp	0x427a43 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x33>
               	xorl	%r15d, %r15d
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x425bb0 <GCStateHolder::schedule()>
               	testq	%r15, %r15
               	je	0x427a70 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427a70 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	cmpl	$1, %eax
               	jne	0x427a70 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movb	236076(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x427a7b <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x6b>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%r15, %r15
               	je	0x427ac7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427ac7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	cmpl	$1, %eax
               	jne	0x427ac7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movb	236004(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427ac7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	movl	$1, %edi
               	movl	$168, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movq	(%r12), %rax
               	leaq	56(%rax), %rcx
               	movq	%rcx, (%rsp)
               	movq	%rcx, (%rbx)
               	movaps	(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movups	8(%rbx), %xmm1
               	movaps	%xmm1, (%rsp)
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 16(%rsp)
               	leaq	166(%rip), %rcx         # 0x427bd0 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rcx, 24(%rbx)
               	movq	$0, 24(%rsp)
               	leaq	194(%rip), %rcx         # 0x427c00 <std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>
               	movq	%rcx, 32(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 40(%rbx)
               	movups	%xmm0, 56(%rbx)
               	movq	64(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movq	16(%rsp), %rax
               	testq	%rax, %rax
               	je	0x427b77 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)+0xa7>
               	movq	%rsp, %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rax
               	addq	$72, %rax
               	movq	(%r12), %rcx
               	leaq	160(%rcx), %rdx
               	movq	%rdx, 72(%rbx)
               	movq	%r15, 80(%rbx)
               	movq	%rbx, 88(%rbx)
               	addq	$16, %rcx
               	movq	%rcx, 112(%rbx)
               	movq	%rax, 128(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 136(%rbx)
               	movups	%xmm0, 152(%rbx)
               	movq	%rbx, (%r14)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x427be7 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x427bf0 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x427bed <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	216419(%rip), %rax      # 0x45c948 <typeinfo for kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>
               	jmp	0x427bea <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>:
               	movq	(%rdi), %rax
               	movq	64(%rax), %rdi
               	movq	(%rdi), %rax
               	movq	16(%rax), %rax
               	jmpq	*%rax

<kotlin::gc::GC::ThreadData::~ThreadData()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x427c53 <kotlin::gc::GC::ThreadData::~ThreadData()+0x43>
               	leaq	112(%rbx), %rdi
               	callq	0x425890 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	leaq	136(%rbx), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x427c4b <kotlin::gc::GC::ThreadData::~ThreadData()+0x3b>
               	leaq	8(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	addq	$15, %r15
               	andq	$-8, %r15
               	movq	16(%rdi), %rax
               	movq	16(%rax), %rbx
               	movq	40(%rbx), %rax
               	addq	%r15, %rax
               	movq	%rax, 40(%rbx)
               	cmpq	48(%rbx), %rax
               	jb	0x427ce0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x70>
               	cmpq	$0, 24(%rbx)
               	je	0x427e98 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x228>
               	leaq	8(%rbx), %rdi
               	movq	%rbx, %rsi
               	callq	*32(%rbx)
               	movq	$0, 40(%rbx)
               	movq	$0, 56(%rbx)
               	movq	(%rbx), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movb	235442(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427cef <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x7f>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x427f00 <kotlin::allocateInObjectPool(unsigned long)>
               	testq	%rax, %rax
               	jne	0x427e15 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1a5>
               	movq	16(%r14), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 36(%rsp)
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movl	%ecx, 32(%rsp)
               	movq	(%rbx), %rdi
               	addq	$16, %rdi
               	callq	0x425bb0 <GCStateHolder::schedule()>
               	movq	%rax, %r12
               	movq	(%rbx), %rbp
               	movq	128(%rbp), %rdi
               	movq	%rdi, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 221789(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427d6a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfa>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427eb3 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x243>
               	movb	$1, 16(%rsp)
               	cmpq	%r12, 120(%rbp)
               	jge	0x427db1 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x141>
               	leaq	136(%rbp), %rbx
               	leaq	8(%rsp), %r13
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpb	$0, 312(%rbp)
               	jne	0x427daa <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13a>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x43cb70 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpq	%r12, 120(%rbp)
               	jl	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
               	cmpb	$0, 16(%rsp)
               	je	0x427dcf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427dcf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
               	cmpq	$0, 221685(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427dca <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15a>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	24(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427e04 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movl	32(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x427e04 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	cmpl	$1, %eax
               	jne	0x427e04 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movb	235172(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427e04 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x427f00 <kotlin::allocateInObjectPool(unsigned long)>
               	testq	%rax, %rax
               	je	0x427e9d <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x22d>
               	movq	$0, (%rax)
               	movq	%rax, 8(%rsp)
               	movq	8(%rsp), %rbx
               	cmpq	$0, 24(%r14)
               	je	0x427e57 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1e7>
               	movq	32(%r14), %rax
               	movq	$0, 8(%rsp)
               	movq	(%rax), %r12
               	movq	%rbx, (%rax)
               	testq	%r12, %r12
               	je	0x427e64 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
               	movq	%r12, %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r12, %rdi
               	callq	0x430310 <mi_free>
               	jmp	0x427e64 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
               	movq	$0, 8(%rsp)
               	movq	%rbx, 24(%r14)
               	movq	%rbx, 32(%r14)
               	movq	40(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%r14)
               	addq	48(%r14), %r15
               	movq	%r15, 48(%r14)
               	leaq	8(%rsp), %rdi
               	callq	0x425930 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43cf72 <std::__throw_bad_function_call()>
               	leaq	116270(%rip), %rdi      # 0x4444d2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x4356b0 <konan::consoleErrorf(char const*, ...)>
               	callq	0x435990 <konan::abort()>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	24(%rsp), %rdi
               	callq	0x425c20 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nop

<void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>:
               	movq	$1, 229661(%rip)        # 0x460008 <options+0x78>
               	movl	$2, 229659(%rip)        # 0x460010 <options+0x80>
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::allocateInObjectPool(unsigned long)>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	js	0x427fee <kotlin::allocateInObjectPool(unsigned long)+0xee>
               	movq	%rdi, %rsi
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x427f84 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	leaq	7(%rsi), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x427f84 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	movl	%ebx, %ecx
               	andl	$7, %ecx
               	testq	%rcx, %rcx
               	jne	0x427f84 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	movl	16(%rax), %ecx
               	addl	$1, %ecx
               	movl	%ecx, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	cmpq	$9, %rsi
               	jb	0x427f6a <kotlin::allocateInObjectPool(unsigned long)+0x6a>
               	movb	7(%rax), %al
               	andb	$1, %al
               	je	0x427f6a <kotlin::allocateInObjectPool(unsigned long)+0x6a>
               	movq	$0, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rbx, %rdi
               	callq	0x435380 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413710 <memset@plt>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	leaq	-8(%rsi), %rax
               	cmpq	$131064, %rax           # imm = 0x1FFF8
               	ja	0x427fa0 <kotlin::allocateInObjectPool(unsigned long)+0xa0>
               	movl	%esi, %eax
               	andl	$7, %eax
               	testq	%rax, %rax
               	jne	0x427fa0 <kotlin::allocateInObjectPool(unsigned long)+0xa0>
               	popq	%rbx
               	jmp	0x435600 <_mi_heap_malloc_zero>
               	addq	$7, %rsi
               	callq	0x435600 <_mi_heap_malloc_zero>
               	testq	%rax, %rax
               	je	0x427fee <kotlin::allocateInObjectPool(unsigned long)+0xee>
               	movq	%rax, %rbx
               	andq	$-8, %rbx
               	addq	$8, %rbx
               	testb	$7, %al
               	cmoveq	%rax, %rbx
               	cmpq	%rax, %rbx
               	je	0x427ff5 <kotlin::allocateInObjectPool(unsigned long)+0xf5>
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movq	96(%rdx), %rcx
               	shrq	%cl, %rax
               	shlq	$6, %rax
               	movb	126(%rdx,%rax), %cl
               	orb	$2, %cl
               	movb	%cl, 126(%rdx,%rax)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<_mi_process_init>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 228268(%rip)        # 0x45fbb8 <_mi_heap_main+0xb28>
               	jne	0x428062 <_mi_process_init+0x62>
               	movq	%fs:0, %rax
               	movq	%rax, 228242(%rip)      # 0x45fbb0 <_mi_heap_main+0xb20>
               	leaq	225387(%rip), %rbx      # 0x45f090 <_mi_heap_main>
               	leaq	868(%rip), %rdi         # 0x428390 <mi_heap_main_init>
               	callq	0x428400 <_os_random_weak>
               	movq	%rax, 228224(%rip)      # 0x45fbb8 <_mi_heap_main+0xb28>
               	leaq	228241(%rip), %rdi      # 0x45fbd0 <_mi_heap_main+0xb40>
               	callq	0x428510 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 228205(%rip)      # 0x45fbc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 228198(%rip)      # 0x45fbc8 <_mi_heap_main+0xb38>
               	movb	$1, 235287(%rip)        # 0x461780 <os_preloading>
               	leaq	2752(%rip), %rdi        # 0x428b30 <mi_process_done>
               	callq	0x442d40 <atexit>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 235925(%rip)      # 0x461a18 <out_len>
               	cmpq	$32768, %rax            # imm = 0x8000
               	movl	$32768, %ebx            # imm = 0x8000
               	cmovbq	%rax, %rbx
               	leaq	235911(%rip), %r14      # 0x461a20 <out_buf>
               	movb	$0, (%rbx,%r14)
               	movq	220963(%rip), %rax      # 0x45dfc8 <write+0x45dfc8>
               	movq	(%rax), %rsi
               	movq	%r14, %rdi
               	callq	0x413790 <fputs@plt>
               	movb	$10, (%rbx,%r14)
               	leaq	34468(%rip), %rax       # 0x430760 <mi_out_buf_stderr>
               	movq	%rax, 235853(%rip)      # 0x461a10 <mi_out_default>
               	xorl	%edi, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229071(%rip), %rsi      # 0x45ffa0 <options+0x10>
               	movq	229048(%rip), %rdx      # 0x45ff90 <options>
               	leaq	117227(%rip), %rbx      # 0x444aca <typeinfo name for kotlin::gc::GCSchedulerData+0x1621>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$1, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229054(%rip), %rsi      # 0x45ffb8 <options+0x28>
               	movq	229031(%rip), %rdx      # 0x45ffa8 <options+0x18>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$2, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movl	$3, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229058(%rip), %rsi      # 0x45ffe8 <options+0x58>
               	movq	229035(%rip), %rdx      # 0x45ffd8 <options+0x48>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$4, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229048(%rip), %rsi      # 0x460000 <options+0x70>
               	movq	229025(%rip), %rdx      # 0x45fff0 <options+0x60>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$5, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229038(%rip), %rsi      # 0x460018 <options+0x88>
               	movq	229015(%rip), %rdx      # 0x460008 <options+0x78>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$6, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229028(%rip), %rsi      # 0x460030 <options+0xa0>
               	movq	229005(%rip), %rdx      # 0x460020 <options+0x90>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$7, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229018(%rip), %rsi      # 0x460048 <options+0xb8>
               	movq	228995(%rip), %rdx      # 0x460038 <options+0xa8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$8, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	229008(%rip), %rsi      # 0x460060 <options+0xd0>
               	movq	228985(%rip), %rdx      # 0x460050 <options+0xc0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$9, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228998(%rip), %rsi      # 0x460078 <options+0xe8>
               	movq	228975(%rip), %rdx      # 0x460068 <options+0xd8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228988(%rip), %rsi      # 0x460090 <options+0x100>
               	movq	228965(%rip), %rdx      # 0x460080 <options+0xf0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$11, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228978(%rip), %rsi      # 0x4600a8 <options+0x118>
               	movq	228955(%rip), %rdx      # 0x460098 <options+0x108>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$12, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228968(%rip), %rsi      # 0x4600c0 <options+0x130>
               	movq	228945(%rip), %rdx      # 0x4600b0 <options+0x120>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$13, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228958(%rip), %rsi      # 0x4600d8 <options+0x148>
               	movq	228935(%rip), %rdx      # 0x4600c8 <options+0x138>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$14, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228948(%rip), %rsi      # 0x4600f0 <options+0x160>
               	movq	228925(%rip), %rdx      # 0x4600e0 <options+0x150>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$15, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228938(%rip), %rsi      # 0x460108 <options+0x178>
               	movq	228915(%rip), %rdx      # 0x4600f8 <options+0x168>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$16, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228928(%rip), %rsi      # 0x460120 <options+0x190>
               	movq	228905(%rip), %rdx      # 0x460110 <options+0x180>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$17, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228918(%rip), %rsi      # 0x460138 <options+0x1a8>
               	movq	228895(%rip), %rdx      # 0x460128 <options+0x198>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228908(%rip), %rsi      # 0x460150 <options+0x1c0>
               	movq	228885(%rip), %rdx      # 0x460140 <options+0x1b0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$19, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	228898(%rip), %rsi      # 0x460168 <options+0x1d8>
               	movq	228875(%rip), %rdx      # 0x460158 <options+0x1c8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rax, 228872(%rip)      # 0x460170 <mi_max_error_count>
               	movl	$19, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rax, 228359(%rip)      # 0x45ff80 <mi_max_warning_count>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x429270 <mi_process_init>
               	nopw	%cs:(%rax,%rax)

<mi_heap_main_init>:
               	pushq	%rbx
               	cmpq	$0, 227359(%rip)        # 0x45fbb8 <_mi_heap_main+0xb28>
               	je	0x42839d <mi_heap_main_init+0xd>
               	popq	%rbx
               	retq
               	movq	%fs:0, %rax
               	movq	%rax, 227331(%rip)      # 0x45fbb0 <_mi_heap_main+0xb20>
               	leaq	224476(%rip), %rbx      # 0x45f090 <_mi_heap_main>
               	leaq	-43(%rip), %rdi         # 0x428390 <mi_heap_main_init>
               	callq	0x428400 <_os_random_weak>
               	movq	%rax, 227313(%rip)      # 0x45fbb8 <_mi_heap_main+0xb28>
               	leaq	227330(%rip), %rdi      # 0x45fbd0 <_mi_heap_main+0xb40>
               	callq	0x428510 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 227294(%rip)      # 0x45fbc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 227287(%rip)      # 0x45fbc8 <_mi_heap_main+0xb38>
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_os_random_weak>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movabsq	$-4658895280553007687, %r15 # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r14 # imm = 0x94D049BB133111EB
               	leaq	-36(%rip), %rbx         # 0x428400 <_os_random_weak>
               	xorq	%rdi, %rbx
               	movq	%rsp, %rsi
               	movl	$1, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	xorq	(%rsp), %rbx
               	xorq	8(%rsp), %rbx
               	movl	%ebx, %ecx
               	shrl	$17, %ecx
               	xorl	%ebx, %ecx
               	andl	$15, %ecx
               	leaq	1(%rcx), %rax
               	testq	%rcx, %rcx
               	je	0x4284cb <_os_random_weak+0xcb>
               	movl	%eax, %ecx
               	andl	$-2, %ecx
               	negq	%rcx
               	jmp	0x42848c <_os_random_weak+0x8c>
               	nopl	(%rax)
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdx
               	shrq	$27, %rdx
               	xorq	%rsi, %rdx
               	imulq	%r14, %rdx
               	movq	%rdx, %rbx
               	shrq	$31, %rbx
               	xorq	%rdx, %rbx
               	addq	$2, %rcx
               	je	0x4284cb <_os_random_weak+0xcb>
               	movl	$17, %edx
               	movl	$17, %esi
               	testq	%rbx, %rbx
               	je	0x42849e <_os_random_weak+0x9e>
               	movq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r14, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	je	0x428460 <_os_random_weak+0x60>
               	movq	%rdi, %rdx
               	jmp	0x428460 <_os_random_weak+0x60>
               	testb	$1, %al
               	je	0x428501 <_os_random_weak+0x101>
               	testq	%rbx, %rbx
               	movl	$17, %eax
               	cmovneq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r14, %rax
               	movq	%rax, %rbx
               	shrq	$31, %rbx
               	xorq	%rax, %rbx
               	movq	%rbx, %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<_mi_random_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdi, %r14
               	movq	%rsp, %rsi
               	movl	$318, %edi              # imm = 0x13E
               	movl	$32, %edx
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	cmpq	$32, %rax
               	jne	0x4285b7 <_mi_random_init+0xa7>
               	movb	(%rsp), %al
               	movb	1(%rsp), %r11b
               	movb	2(%rsp), %r10b
               	movb	3(%rsp), %r9b
               	movb	4(%rsp), %cl
               	movb	5(%rsp), %bpl
               	movb	6(%rsp), %r8b
               	movb	7(%rsp), %bl
               	movb	8(%rsp), %dl
               	movb	9(%rsp), %sil
               	movl	%esi, 36(%rsp)
               	movb	10(%rsp), %sil
               	movl	%esi, 48(%rsp)
               	movb	11(%rsp), %sil
               	movl	%esi, 52(%rsp)
               	movb	12(%rsp), %r12b
               	movb	13(%rsp), %sil
               	movl	%esi, 32(%rsp)
               	movb	14(%rsp), %sil
               	movl	%esi, 40(%rsp)
               	movb	15(%rsp), %sil
               	movl	%esi, 44(%rsp)
               	movb	16(%rsp), %r13b
               	movb	17(%rsp), %r15b
               	movb	18(%rsp), %dil
               	jmp	0x4288b4 <_mi_random_init+0x3a4>
               	movabsq	$-4658895280553007687, %rbx # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r15 # imm = 0x94D049BB133111EB
               	leaq	116437(%rip), %rdi      # 0x444ca7 <typeinfo name for kotlin::gc::GCSchedulerData+0x17fe>
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	leaq	56(%rsp), %rsi
               	movl	$1, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	leaq	-495(%rip), %rcx        # 0x428400 <_os_random_weak>
               	xorq	56(%rsp), %rcx
               	xorq	64(%rsp), %rcx
               	movl	%ecx, %edx
               	shrl	$17, %edx
               	xorl	%ecx, %edx
               	andl	$15, %edx
               	leaq	1(%rdx), %rax
               	testq	%rdx, %rdx
               	je	0x42868b <_mi_random_init+0x17b>
               	movl	%eax, %edx
               	andl	$-2, %edx
               	negq	%rdx
               	jmp	0x42864c <_mi_random_init+0x13c>
               	nopl	(%rax)
               	movq	%rsi, %rcx
               	shrq	$30, %rcx
               	xorq	%rsi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rsi
               	shrq	$27, %rsi
               	xorq	%rcx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	addq	$2, %rdx
               	je	0x42868b <_mi_random_init+0x17b>
               	movl	$17, %esi
               	movl	$17, %edi
               	testq	%rcx, %rcx
               	je	0x42865e <_mi_random_init+0x14e>
               	movq	%rcx, %rdi
               	movq	%rdi, %rcx
               	shrq	$30, %rcx
               	xorq	%rdi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rdi
               	shrq	$27, %rdi
               	xorq	%rcx, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rcx
               	shrq	$31, %rcx
               	xorq	%rdi, %rcx
               	je	0x428620 <_mi_random_init+0x110>
               	movq	%rcx, %rsi
               	jmp	0x428620 <_mi_random_init+0x110>
               	testb	$1, %al
               	je	0x4286c1 <_mi_random_init+0x1b1>
               	testq	%rcx, %rcx
               	movl	$17, %eax
               	cmovneq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	testq	%rcx, %rcx
               	movl	$17, %ebp
               	cmoveq	%rbp, %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$27, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$31, %rax
               	xorq	%rcx, %rax
               	movq	%rax, %rcx
               	cmoveq	%rbp, %rcx
               	movl	%eax, (%rsp)
               	movq	%rcx, %rdx
               	shrq	$30, %rdx
               	xorq	%rcx, %rdx
               	imulq	%rbx, %rdx
               	movq	%rdx, %rsi
               	shrq	$27, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	movl	%ecx, 4(%rsp)
               	movq	%rcx, %rdx
               	cmoveq	%rbp, %rdx
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rdx
               	shrq	$31, %rdx
               	xorq	%rdi, %rdx
               	movl	%edx, 8(%rsp)
               	movq	%rdx, %rsi
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %r12
               	shrq	$31, %r12
               	xorq	%rsi, %r12
               	movl	%r12d, 12(%rsp)
               	movq	%r12, %rsi
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %r13
               	shrq	$31, %r13
               	xorq	%rsi, %r13
               	movq	%r13, %rdi
               	cmoveq	%rbp, %rdi
               	movl	%r13d, 16(%rsp)
               	movq	%rdi, %rsi
               	shrq	$30, %rsi
               	xorq	%rdi, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$31, %rsi
               	xorq	%rdi, %rsi
               	movl	%esi, 20(%rsp)
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	movl	%edi, 24(%rsp)
               	cmoveq	%rbp, %rdi
               	movq	%rdi, %rsi
               	shrq	$30, %rsi
               	xorq	%rdi, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$31, %rsi
               	xorl	%edi, %esi
               	movl	%esi, 28(%rsp)
               	movl	%eax, %r11d
               	shrl	$8, %r11d
               	movl	%eax, %r10d
               	shrl	$16, %r10d
               	movl	%eax, %r9d
               	shrl	$24, %r9d
               	movl	%ecx, %ebp
               	shrl	$8, %ebp
               	movl	%ecx, %r8d
               	shrl	$16, %r8d
               	movl	%ecx, %ebx
               	shrl	$24, %ebx
               	movl	%edx, %esi
               	shrl	$8, %esi
               	movl	%esi, 36(%rsp)
               	movl	%edx, %esi
               	shrl	$16, %esi
               	movl	%esi, 48(%rsp)
               	movl	%edx, %esi
               	shrl	$24, %esi
               	movl	%esi, 52(%rsp)
               	movl	%r12d, %esi
               	shrl	$8, %esi
               	movl	%esi, 32(%rsp)
               	movl	%r12d, %esi
               	shrl	$16, %esi
               	movl	%esi, 40(%rsp)
               	movl	%r12d, %esi
               	shrl	$24, %esi
               	movl	%esi, 44(%rsp)
               	movl	%r13d, %r15d
               	shrl	$8, %r15d
               	movl	%r13d, %edi
               	shrl	$16, %edi
               	movzbl	%al, %eax
               	movzbl	%r11b, %esi
               	shll	$8, %esi
               	orl	%eax, %esi
               	movzbl	%r10b, %eax
               	shll	$16, %eax
               	orl	%esi, %eax
               	movzbl	%r9b, %esi
               	shll	$24, %esi
               	orl	%eax, %esi
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 108(%r14)
               	movdqu	%xmm0, 92(%r14)
               	movdqu	%xmm0, 76(%r14)
               	movdqu	%xmm0, 60(%r14)
               	movdqu	%xmm0, 44(%r14)
               	movq	$0, 124(%r14)
               	movaps	107837(%rip), %xmm1     # 0x442e40 <_IO_stdin_used+0x80>
               	movups	%xmm1, (%r14)
               	movl	%esi, 16(%r14)
               	movzbl	%cl, %eax
               	movzbl	%bpl, %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%r8b, %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	%bl, %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 20(%r14)
               	movzbl	%r13b, %eax
               	movzbl	20(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%dl, %eax
               	movzbl	%r12b, %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm1
               	pinsrw	$1, %ecx, %xmm1
               	movzbl	%r15b, %eax
               	movzbl	21(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	36(%rsp), %eax
               	movzbl	32(%rsp), %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm2
               	pinsrw	$1, %ecx, %xmm2
               	movzbl	%dil, %eax
               	movzbl	22(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	48(%rsp), %eax
               	movzbl	40(%rsp), %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm3
               	pinsrw	$1, %ecx, %xmm3
               	punpcklbw	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
               	pslld	$8, %xmm2
               	punpcklbw	%xmm0, %xmm3    # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3],xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
               	punpcklwd	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3]
               	por	%xmm1, %xmm0
               	movzbl	44(%rsp), %eax
               	movzbl	52(%rsp), %ecx
               	movd	%ecx, %xmm1
               	pinsrw	$2, %eax, %xmm1
               	por	%xmm2, %xmm0
               	movzbl	19(%rsp), %eax
               	pinsrw	$4, %eax, %xmm1
               	movzbl	23(%rsp), %eax
               	pinsrw	$6, %eax, %xmm1
               	pslld	$24, %xmm1
               	por	%xmm0, %xmm1
               	movdqu	%xmm1, 24(%r14)
               	movzbl	24(%rsp), %eax
               	movzbl	25(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	26(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	27(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 40(%r14)
               	movzbl	28(%rsp), %eax
               	movzbl	29(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	30(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	31(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 44(%r14)
               	movq	$0, 48(%r14)
               	movl	%r14d, 56(%r14)
               	movq	%r14, %rax
               	shrq	$32, %rax
               	movl	%eax, 60(%r14)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<_mi_heap_random_next>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	leaq	2880(%rdi), %r14
               	movl	3008(%rdi), %eax
               	testl	%eax, %eax
               	jg	0x428aa2 <_mi_heap_random_next+0x32>
               	movq	%r14, %rdi
               	callq	0x431890 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	movl	$16, %ebp
               	movl	$16, %ecx
               	subl	%eax, %ecx
               	movslq	%ecx, %rax
               	movl	2944(%rbx,%rax,4), %r15d
               	movl	$0, 2944(%rbx,%rax,4)
               	movl	3008(%rbx), %ecx
               	leal	-1(%rcx), %eax
               	movl	%eax, 3008(%rbx)
               	cmpl	$1, %ecx
               	jg	0x428aef <_mi_heap_random_next+0x7f>
               	movq	%r14, %rdi
               	callq	0x431890 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	shlq	$32, %r15
               	subl	%eax, %ebp
               	movslq	%ebp, %rcx
               	movl	2944(%rbx,%rcx,4), %eax
               	movl	$0, 2944(%rbx,%rcx,4)
               	movl	3008(%rbx), %ecx
               	addl	$-1, %ecx
               	movl	%ecx, 3008(%rbx)
               	orq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<mi_process_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$472, %rsp              # imm = 0x1D8
               	cmpb	$0, 231884(%rip)        # 0x461514 <_mi_process_is_initialized>
               	je	0x429250 <mi_process_done+0x720>
               	cmpb	$0, 331907(%rip)        # 0x479bd8 <mi_process_done.process_done>
               	jne	0x429250 <mi_process_done+0x720>
               	movb	$1, 331894(%rip)        # 0x479bd8 <mi_process_done.process_done>
               	movq	$-80, %rbx
               	movq	%fs:(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x42c470 <mi_heap_collect_ex>
               	movl	$1, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x428b99 <mi_process_done+0x69>
               	movl	$2, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429234 <mi_process_done+0x704>
               	callq	0x42a7c0 <mi_thread_init>
               	movq	%fs:(%rbx), %rax
               	movq	(%rax), %rdi
               	addq	$176, %rdi
               	callq	0x42bf80 <mi_stats_merge_from>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	107152(%rip), %xmm0     # 0x442e50 <_IO_stdin_used+0x90>
               	movups	%xmm0, 40(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	leaq	114544(%rip), %rdi      # 0x444b49 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a0>
               	leaq	114530(%rip), %rbp      # 0x444b42 <typeinfo name for kotlin::gc::GCSchedulerData+0x1699>
               	leaq	114513(%rip), %r10      # 0x444b38 <typeinfo name for kotlin::gc::GCSchedulerData+0x168f>
               	leaq	114498(%rip), %r11      # 0x444b30 <typeinfo name for kotlin::gc::GCSchedulerData+0x1687>
               	leaq	114428(%rip), %rdx      # 0x444af1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1648>
               	leaq	114458(%rip), %rcx      # 0x444b16 <typeinfo name for kotlin::gc::GCSchedulerData+0x166d>
               	leaq	114462(%rip), %r8       # 0x444b21 <typeinfo name for kotlin::gc::GCSchedulerData+0x1678>
               	leaq	114462(%rip), %r9       # 0x444b28 <typeinfo name for kotlin::gc::GCSchedulerData+0x167f>
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %rbx
               	movq	%rbx, %rsi
               	movl	$0, %eax
               	pushq	%rdi
               	pushq	%rbp
               	pushq	%r10
               	pushq	%r11
               	callq	0x430950 <_mi_fprintf>
               	addq	$32, %rsp
               	leaq	231760(%rip), %rdi      # 0x461580 <_mi_stats_main+0x40>
               	leaq	114458(%rip), %rsi      # 0x444b51 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a8>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231669(%rip), %rbp      # 0x461540 <_mi_stats_main>
               	leaq	231758(%rip), %rdi      # 0x4615a0 <_mi_stats_main+0x60>
               	leaq	114433(%rip), %rsi      # 0x444b5a <typeinfo name for kotlin::gc::GCSchedulerData+0x16b1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231763(%rip), %rdi      # 0x4615c0 <_mi_stats_main+0x80>
               	leaq	114416(%rip), %rsi      # 0x444b64 <typeinfo name for kotlin::gc::GCSchedulerData+0x16bb>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231768(%rip), %rdi      # 0x4615e0 <_mi_stats_main+0xa0>
               	leaq	114395(%rip), %rsi      # 0x444b6a <typeinfo name for kotlin::gc::GCSchedulerData+0x16c1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	114383(%rip), %rsi      # 0x444b72 <typeinfo name for kotlin::gc::GCSchedulerData+0x16c9>
               	movq	%rbp, %rdi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231748(%rip), %rdi      # 0x461600 <_mi_stats_main+0xc0>
               	leaq	114360(%rip), %rbp      # 0x444b7b <typeinfo name for kotlin::gc::GCSchedulerData+0x16d2>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231940(%rip), %rdi      # 0x4616e0 <_mi_stats_main+0x1a0>
               	leaq	114339(%rip), %rsi      # 0x444b86 <typeinfo name for kotlin::gc::GCSchedulerData+0x16dd>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231527(%rip), %rdi      # 0x461560 <_mi_stats_main+0x20>
               	leaq	114318(%rip), %rsi      # 0x444b8e <typeinfo name for kotlin::gc::GCSchedulerData+0x16e5>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231690(%rip), %rdi      # 0x461620 <_mi_stats_main+0xe0>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	leaq	231889(%rip), %rdi      # 0x461700 <_mi_stats_main+0x1c0>
               	leaq	114270(%rip), %rsi      # 0x444b94 <typeinfo name for kotlin::gc::GCSchedulerData+0x16eb>
               	movq	%rbx, %rdx
               	callq	0x431740 <mi_stat_counter_print>
               	leaq	231915(%rip), %rdi      # 0x461730 <_mi_stats_main+0x1f0>
               	leaq	114258(%rip), %rsi      # 0x444b9e <typeinfo name for kotlin::gc::GCSchedulerData+0x16f5>
               	movq	%rbx, %rdx
               	callq	0x431740 <mi_stat_counter_print>
               	leaq	231861(%rip), %rdi      # 0x461710 <_mi_stats_main+0x1d0>
               	leaq	114246(%rip), %rsi      # 0x444ba8 <typeinfo name for kotlin::gc::GCSchedulerData+0x16ff>
               	movq	%rbx, %rdx
               	callq	0x431740 <mi_stat_counter_print>
               	leaq	231855(%rip), %rdi      # 0x461720 <_mi_stats_main+0x1e0>
               	leaq	114230(%rip), %rsi      # 0x444bae <typeinfo name for kotlin::gc::GCSchedulerData+0x1705>
               	movq	%rbx, %rdx
               	callq	0x431740 <mi_stat_counter_print>
               	leaq	231609(%rip), %rdi      # 0x461640 <_mi_stats_main+0x100>
               	leaq	114216(%rip), %rsi      # 0x444bb6 <typeinfo name for kotlin::gc::GCSchedulerData+0x170d>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430a70 <mi_stat_print>
               	movq	231844(%rip), %rcx      # 0x461748 <_mi_stats_main+0x208>
               	testq	%rcx, %rcx
               	je	0x428dd4 <mi_process_done+0x2a4>
               	movq	231824(%rip), %rax      # 0x461740 <_mi_stats_main+0x200>
               	addq	%rax, %rax
               	leaq	(%rax,%rax,4), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x428dcd <mi_process_done+0x29d>
               	cqto
               	idivq	%rcx
               	movq	%rax, %r14
               	jmp	0x428dd4 <mi_process_done+0x2a4>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %r14d
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%r14, %rax
               	imulq	%rcx
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %r8
               	addq	%rax, %r8
               	leaq	(%r8,%r8), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %r14
               	leaq	114103(%rip), %rdx      # 0x444bbe <typeinfo name for kotlin::gc::GCSchedulerData+0x1715>
               	leaq	114116(%rip), %rcx      # 0x444bd2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1729>
               	leaq	16(%rsp), %rsi
               	movq	%r14, %r9
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	265268(%rip), %r8       # 0x469a58 <_mi_numa_node_count>
               	testq	%r8, %r8
               	je	0x429262 <mi_process_done+0x732>
               	leaq	114087(%rip), %rdx      # 0x444bdb <typeinfo name for kotlin::gc::GCSchedulerData+0x1732>
               	leaq	114091(%rip), %rcx      # 0x444be6 <typeinfo name for kotlin::gc::GCSchedulerData+0x173d>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	265279(%rip), %rbx      # 0x469a90 <mi_process_start>
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movq	72(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	addq	265205(%rip), %rbx      # 0x469a88 <mi_clock_diff>
               	subq	%rbx, %rbp
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137c0 <getrusage@plt>
               	movq	72(%rsp), %rax
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$2361183241434822607, %r14 # imm = 0x20C49BA5E353F7CF
               	imulq	%r14
               	movq	%rdx, %r13
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r13
               	addq	%rax, %r13
               	addq	%rcx, %r13
               	movq	88(%rsp), %rax
               	imulq	$1000, 80(%rsp), %rcx   # imm = 0x3E8
               	imulq	%r14
               	movq	%rdx, %rbx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rbx
               	addq	%rax, %rbx
               	addq	%rcx, %rbx
               	movq	136(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	231078(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	movq	%rax, 8(%rsp)
               	movq	231074(%rip), %rax      # 0x4615b8 <_mi_stats_main+0x78>
               	movq	96(%rsp), %r12
               	shlq	$10, %r12
               	movq	%rbp, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %rbp
               	leaq	113834(%rip), %rdx      # 0x444bf1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1748>
               	leaq	113847(%rip), %rcx      # 0x444c05 <typeinfo name for kotlin::gc::GCSchedulerData+0x175c>
               	movq	%r15, %rsi
               	movq	%rbp, %r9
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	%r13, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %r13
               	movq	%rbx, %rax
               	imulq	%r14
               	movq	%rdx, %rdi
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rdi
               	addq	%rax, %rdi
               	imulq	$1000, %rdi, %rax       # imm = 0x3E8
               	subq	%rax, %rbx
               	subq	$8, %rsp
               	leaq	113765(%rip), %rdx      # 0x444c0d <typeinfo name for kotlin::gc::GCSchedulerData+0x1764>
               	leaq	113823(%rip), %rcx      # 0x444c4e <typeinfo name for kotlin::gc::GCSchedulerData+0x17a5>
               	movq	%r15, %rsi
               	movq	%r13, %r9
               	movl	$0, %eax
               	pushq	64(%rsp)
               	pushq	%rbx
               	pushq	%rdi
               	callq	0x430950 <_mi_fprintf>
               	addq	$32, %rsp
               	movq	%r12, %rax
               	negq	%rax
               	cmovlq	%r12, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x429007 <mi_process_done+0x4d7>
               	leaq	113780(%rip), %rdx      # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	113780(%rip), %r8       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	8(%rsp), %rbx
               	jmp	0x4290d5 <mi_process_done+0x5a5>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	113739(%rip), %rcx      # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	113734(%rip), %rdx      # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	113701(%rip), %r9       # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%r12, %rax
               	shrq	$32, %rax
               	je	0x429069 <mi_process_done+0x539>
               	movq	%r12, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x429072 <mi_process_done+0x542>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	8(%rsp), %rbx
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	113573(%rip), %rbp      # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	113574(%rip), %rdx      # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x4137d0 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	113888(%rip), %rdx      # 0x444dbc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	testq	%rbx, %rbx
               	je	0x429221 <mi_process_done+0x6f1>
               	leaq	113525(%rip), %rdx      # 0x444c72 <typeinfo name for kotlin::gc::GCSchedulerData+0x17c9>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	%rbx, %rax
               	negq	%rax
               	cmovlq	%rbx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x429141 <mi_process_done+0x611>
               	leaq	113460(%rip), %rdx      # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	113460(%rip), %r8       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%ebx, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x429209 <mi_process_done+0x6d9>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	113425(%rip), %rcx      # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	113420(%rip), %rdx      # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	113387(%rip), %r9       # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x4291a3 <mi_process_done+0x673>
               	movq	%rbx, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4291ab <mi_process_done+0x67b>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	113265(%rip), %rbp      # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	113266(%rip), %rdx      # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x4137d0 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	113580(%rip), %rdx      # 0x444dbc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	113717(%rip), %rdx      # 0x444e5d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	223605(%rip), %rsi      # 0x45fbb0 <_mi_heap_main+0xb20>
               	leaq	112794(%rip), %rdi      # 0x444adc <typeinfo name for kotlin::gc::GCSchedulerData+0x1633>
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movb	$0, 230704(%rip)        # 0x461780 <os_preloading>
               	addq	$472, %rsp              # imm = 0x1D8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42bd70 <_mi_os_numa_node_count_get>
               	movq	%rax, %r8
               	jmp	0x428e2d <mi_process_done+0x2fd>
               	nop

<mi_process_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	cmpb	$0, 230031(%rip)        # 0x461514 <_mi_process_is_initialized>
               	je	0x429296 <mi_process_init+0x26>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	$1, 230007(%rip)        # 0x461514 <_mi_process_is_initialized>
               	cmpb	$0, 230621(%rip)        # 0x461781 <mi_process_setup_auto_thread_done.tls_initialized>
               	jne	0x4292e9 <mi_process_init+0x79>
               	movb	$1, 230612(%rip)        # 0x461781 <mi_process_setup_auto_thread_done.tls_initialized>
               	leaq	224444(%rip), %rdi      # 0x45ff70 <_mi_heap_default_key>
               	leaq	3525(%rip), %rsi        # 0x42a080 <mi_pthread_done>
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	220617(%rip), %rax      # 0x45f090 <_mi_heap_main>
               	movq	$-80, %rcx
               	movq	%rax, %fs:(%rcx)
               	movl	224408(%rip), %edi      # 0x45ff70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x4292e9 <mi_process_init+0x79>
               	leaq	220588(%rip), %rsi      # 0x45f090 <_mi_heap_main>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	%fs:0, %rsi
               	leaq	111120(%rip), %rdi      # 0x444509 <typeinfo name for kotlin::gc::GCSchedulerData+0x1060>
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movl	$30, %edi
               	callq	0x413800 <sysconf@plt>
               	testq	%rax, %rax
               	jle	0x429316 <mi_process_init+0xa6>
               	movq	%rax, 224354(%rip)      # 0x45ff78 <os_page_size>
               	movb	$1, 263947(%rip)        # 0x469a28 <large_os_page_size>
               	cmpq	$0, 223379(%rip)        # 0x45fbb8 <_mi_heap_main+0xb28>
               	jne	0x42937b <mi_process_init+0x10b>
               	movq	%fs:0, %rax
               	movq	%rax, 223353(%rip)      # 0x45fbb0 <_mi_heap_main+0xb20>
               	leaq	220498(%rip), %rbx      # 0x45f090 <_mi_heap_main>
               	leaq	-4021(%rip), %rdi       # 0x428390 <mi_heap_main_init>
               	callq	0x428400 <_os_random_weak>
               	movq	%rax, 223335(%rip)      # 0x45fbb8 <_mi_heap_main+0xb28>
               	leaq	223352(%rip), %rdi      # 0x45fbd0 <_mi_heap_main+0xb40>
               	callq	0x428510 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 223316(%rip)      # 0x45fbc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 223309(%rip)      # 0x45fbc8 <_mi_heap_main+0xb38>
               	leaq	111004(%rip), %rdi      # 0x44451e <typeinfo name for kotlin::gc::GCSchedulerData+0x1075>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	callq	0x42a7c0 <mi_thread_init>
               	callq	0x42a7c0 <mi_thread_init>
               	movq	$-80, %r14
               	movq	%fs:(%r14), %rax
               	movq	(%rax), %rdi
               	addq	$176, %rdi
               	leaq	229775(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x4293c2 <mi_process_init+0x152>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	229751(%rip), %rdi      # 0x461540 <_mi_stats_main>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	cmpq	$0, 263859(%rip)        # 0x469a90 <mi_process_start>
               	jne	0x4294a8 <mi_process_init+0x238>
               	cmpq	$0, 263837(%rip)        # 0x469a88 <mi_clock_diff>
               	jne	0x429469 <mi_process_init+0x1f9>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
               	imulq	%rcx
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 263711(%rip)      # 0x469a88 <mi_clock_diff>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rcx, %rdx
               	movq	%rdx, 263656(%rip)      # 0x469a90 <mi_process_start>
               	movl	$7, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429e5b <mi_process_init+0xbeb>
               	movl	$7, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429e5b <mi_process_init+0xbeb>
               	movq	%rax, %rbx
               	movq	263552(%rip), %rax      # 0x469a58 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x42a074 <mi_process_init+0xe04>
               	imulq	$500, %rbx, %rcx        # imm = 0x1F4
               	testq	%rax, %rax
               	movl	$1, %esi
               	cmovneq	%rax, %rsi
               	movq	%rbx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42952d <mi_process_init+0x2bd>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	je	0x429542 <mi_process_init+0x2d2>
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429546 <mi_process_init+0x2d6>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42954c <mi_process_init+0x2dc>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	jne	0x429517 <mi_process_init+0x2a7>
               	xorl	%eax, %eax
               	jmp	0x429550 <mi_process_init+0x2e0>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	addq	$50, %rax
               	leaq	(%rax,%rax), %rcx
               	movq	%rcx, 88(%rsp)
               	movq	%rax, 32(%rsp)
               	addq	$1, %rax
               	movq	%rax, 80(%rsp)
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	xorl	%ecx, %ecx
               	movq	%rsi, 40(%rsp)
               	nopl	(%rax,%rax)
               	xorl	%r12d, %r12d
               	cmpq	56(%rsp), %rcx
               	setb	%r12b
               	addq	48(%rsp), %r12
               	je	0x429cfb <mi_process_init+0xa8b>
               	testl	%ecx, %ecx
               	movq	%rbx, 72(%rsp)
               	movq	%rcx, 64(%rsp)
               	js	0x4295d0 <mi_process_init+0x360>
               	movl	%ecx, %ebp
               	movq	263338(%rip), %rcx      # 0x469a58 <_mi_numa_node_count>
               	testq	%rcx, %rcx
               	je	0x429d47 <mi_process_init+0xad7>
               	cmpq	%rcx, %rbp
               	jb	0x4295c4 <mi_process_init+0x354>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %ebp
               	movq	%rbp, 24(%rsp)
               	jmp	0x4295da <mi_process_init+0x36a>
               	nop
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movq	%rax, 24(%rsp)
               	movq	%r12, %rbp
               	shlq	$30, %rbp
               	movq	263320(%rip), %rbx      # 0x469a80 <mi_huge_start>
               	jmp	0x429605 <mi_process_init+0x395>
               	nopl	(%rax)
               	leaq	(%r15,%rbp), %rcx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rcx, 263296(%rip)      # 0x469a80 <mi_huge_start>
               	movq	%rax, %rbx
               	je	0x429630 <mi_process_init+0x3c0>
               	movq	%rbx, %r15
               	testq	%rbx, %rbx
               	jne	0x4295f0 <mi_process_init+0x380>
               	movq	%fs:(%r14), %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, %r15
               	andl	$536739840, %r15d       # imm = 0x1FFE0000
               	shlq	$13, %r15
               	orq	%r13, %r15
               	jmp	0x4295f0 <mi_process_init+0x380>
               	cmpq	$0, 263248(%rip)        # 0x469a88 <mi_clock_diff>
               	jne	0x4296b7 <mi_process_init+0x447>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
               	imulq	%rcx
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	xorl	%edi, %edi
               	movq	%r14, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	subq	%rbp, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rcx, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 263121(%rip)      # 0x469a88 <mi_clock_diff>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	movl	$1, %eax
               	movq	24(%rsp), %rcx
               	shlq	%cl, %rax
               	movq	%rax, 96(%rsp)
               	xorl	%r13d, %r13d
               	cmpl	$64, %ecx
               	jb	0x42973c <mi_process_init+0x4cc>
               	jmp	0x429962 <mi_process_init+0x6f2>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429d22 <mi_process_init+0xab2>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429c10 <mi_process_init+0x9a0>
               	movq	%r13, %r14
               	shlq	$30, %r14
               	addq	%r15, %r14
               	movq	262907(%rip), %rax      # 0x469a48 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 262908(%rip)        # 0x469a50 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x4297d7 <mi_process_init+0x567>
               	movb	$1, 262848(%rip)        # 0x469a50 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	110215(%rip), %rdi      # 0x444625 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jb	0x429833 <mi_process_init+0x5c3>
               	movq	%rax, %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movl	$0, (%rsp)
               	movl	$237, %edi
               	movl	$1073741824, %edx       # imm = 0x40000000
               	movl	$1, %ecx
               	movl	$64, %r9d
               	movq	%rbx, %rsi
               	leaq	8(%rsp), %r8
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	testq	%rax, %rax
               	je	0x429833 <mi_process_init+0x5c3>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	110269(%rip), %rdi      # 0x4446e1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1238>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	cmpq	%r14, %rbx
               	jne	0x429b20 <mi_process_init+0x8b0>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228718(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228696(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x429870 <mi_process_init+0x600>
               	lock
               	cmpxchgq	%rcx, 228674(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x429860 <mi_process_init+0x5f0>
               	lock
               	addq	$1073741824, 228644(%rip) # imm = 0x40000000
                                                # 0x4615a0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228622(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228600(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x4298b0 <mi_process_init+0x640>
               	lock
               	cmpxchgq	%rcx, 228578(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x4298a0 <mi_process_init+0x630>
               	lock
               	addq	$1073741824, 228548(%rip) # imm = 0x40000000
                                                # 0x461580 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x42972f <mi_process_init+0x4bf>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	262529(%rip), %rax      # 0x469a88 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x429726 <mi_process_init+0x4b6>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429711 <mi_process_init+0x4a1>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429717 <mi_process_init+0x4a7>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429d22 <mi_process_init+0xab2>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429c10 <mi_process_init+0x9a0>
               	movq	%r13, %r14
               	shlq	$30, %r14
               	addq	%r15, %r14
               	movq	262357(%rip), %rax      # 0x469a48 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 262358(%rip)        # 0x469a50 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x4299fe <mi_process_init+0x78e>
               	movb	$1, 262298(%rip)        # 0x469a50 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	109665(%rip), %rdi      # 0x444625 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jae	0x429b10 <mi_process_init+0x8a0>
               	cmpq	%r14, %rbx
               	jne	0x429b20 <mi_process_init+0x8b0>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228259(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228237(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429a40 <mi_process_init+0x7d0>
               	lock
               	cmpxchgq	%rcx, 228210(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x429a30 <mi_process_init+0x7c0>
               	lock
               	addq	$1073741824, 228180(%rip) # imm = 0x40000000
                                                # 0x4615a0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228158(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228136(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429a80 <mi_process_init+0x810>
               	lock
               	cmpxchgq	%rcx, 228114(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x429a70 <mi_process_init+0x800>
               	lock
               	addq	$1073741824, 228084(%rip) # imm = 0x40000000
                                                # 0x461580 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x429955 <mi_process_init+0x6e5>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	262065(%rip), %rax      # 0x469a88 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x42994c <mi_process_init+0x6dc>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429937 <mi_process_init+0x6c7>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42993d <mi_process_init+0x6cd>
               	nopw	(%rax,%rax)
               	movq	%rax, %rbx
               	cmpq	%r14, %rbx
               	je	0x429a07 <mi_process_init+0x797>
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	movq	24(%rsp), %rbp
               	je	0x429c18 <mi_process_init+0x9a8>
               	leaq	109537(%rip), %rdi      # 0x444716 <typeinfo name for kotlin::gc::GCSchedulerData+0x126d>
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%rbx, %rdi
               	callq	0x413840 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227929(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227905(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rdx, %rax
               	jge	0x429b80 <mi_process_init+0x910>
               	lock
               	cmpxchgq	%rdx, 227890(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x429b70 <mi_process_init+0x900>
               	lock
               	addq	$1073741824, 227868(%rip) # imm = 0x40000000
                                                # 0x4615a8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227836(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227814(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429bc0 <mi_process_init+0x950>
               	lock
               	cmpxchgq	%rdx, 227794(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x429bb0 <mi_process_init+0x940>
               	lock
               	addq	$1073741824, 227772(%rip) # imm = 0x40000000
                                                # 0x461588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429c18 <mi_process_init+0x9a8>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	leaq	108946(%rip), %rdi      # 0x44457f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	jne	0x429c28 <mi_process_init+0x9b8>
               	jmp	0x429d5d <mi_process_init+0xaed>
               	nop
               	movq	%r12, %r13
               	movq	24(%rsp), %rbp
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	je	0x429d5d <mi_process_init+0xaed>
               	testq	%r13, %r13
               	je	0x429d5d <mi_process_init+0xaed>
               	leaq	109157(%rip), %rdi      # 0x44469d <typeinfo name for kotlin::gc::GCSchedulerData+0x11f4>
               	movl	%ebp, %esi
               	movq	%r13, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	movabsq	$1099511627712, %rax    # imm = 0xFFFFFFFFC0
               	andq	%rax, %rbx
               	movq	%rbx, %rdi
               	shrq	$2, %rdi
               	addq	$64, %rdi
               	callq	0x42b620 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x429d73 <mi_process_init+0xb03>
               	movq	%rbx, 8(%rax)
               	shrq	$6, %rbx
               	movq	%rbx, 16(%rax)
               	xchgq	%r15, (%rax)
               	movl	%ebp, 24(%rax)
               	movb	$1, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	movl	$0, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	56(%rax,%rbx,8), %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 228104(%rip)      # 0x4617c0 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x429cd0 <mi_process_init+0xa60>
               	lock
               	subq	$1, 228085(%rip)        # 0x4617c0 <mi_arena_count>
               	jmp	0x429cdb <mi_process_init+0xa6b>
               	leaq	228137(%rip), %rdx      # 0x461800 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	movq	$-80, %r14
               	movq	72(%rsp), %rbx
               	movq	40(%rsp), %rsi
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	movq	64(%rsp), %rcx
               	movq	%rbx, %rax
               	movl	$0, %ebx
               	subq	%r12, %rax
               	cmovaeq	%rax, %rbx
               	jbe	0x429e5b <mi_process_init+0xbeb>
               	addq	$1, %rcx
               	cmpq	%rsi, %rcx
               	jb	0x429580 <mi_process_init+0x310>
               	jmp	0x429e5b <mi_process_init+0xbeb>
               	movq	24(%rsp), %rbp
               	leaq	109083(%rip), %rdi      # 0x444749 <typeinfo name for kotlin::gc::GCSchedulerData+0x12a0>
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	jne	0x429c28 <mi_process_init+0x9b8>
               	jmp	0x429d5d <mi_process_init+0xaed>
               	callq	0x42bd70 <_mi_os_numa_node_count_get>
               	movq	%rax, %rcx
               	cmpq	%rcx, %rbp
               	jae	0x4295bc <mi_process_init+0x34c>
               	jmp	0x4295c4 <mi_process_init+0x354>
               	leaq	108820(%rip), %rdi      # 0x444678 <typeinfo name for kotlin::gc::GCSchedulerData+0x11cf>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	jmp	0x429e5b <mi_process_init+0xbeb>
               	shlq	$30, %r13
               	je	0x429e5b <mi_process_init+0xbeb>
               	leaq	108539(%rip), %rbx      # 0x44457f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	jmp	0x429d9d <mi_process_init+0xb2d>
               	nopl	(%rax)
               	addq	$-1073741824, %r13      # imm = 0xC0000000
               	je	0x429e5b <mi_process_init+0xbeb>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	callq	0x413840 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227326(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227302(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429de0 <mi_process_init+0xb70>
               	lock
               	cmpxchgq	%rdx, 227282(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x429dd0 <mi_process_init+0xb60>
               	lock
               	addq	$1073741824, 227260(%rip) # imm = 0x40000000
                                                # 0x4615a8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227228(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227206(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429e20 <mi_process_init+0xbb0>
               	lock
               	cmpxchgq	%rdx, 227186(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x429e10 <mi_process_init+0xba0>
               	lock
               	addq	$1073741824, 227164(%rip) # imm = 0x40000000
                                                # 0x461588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429d90 <mi_process_init+0xb20>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	jmp	0x429d90 <mi_process_init+0xb20>
               	movl	$8, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429287 <mi_process_init+0x17>
               	movl	$8, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	jle	0x429287 <mi_process_init+0x17>
               	movq	%rax, %rbx
               	shlq	$10, %rbx
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x429e9a <mi_process_init+0xc2a>
               	movq	221408(%rip), %rcx      # 0x45ff78 <os_page_size>
               	jmp	0x429ecb <mi_process_init+0xc5b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x429ecb <mi_process_init+0xc5b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x429ecb <mi_process_init+0xc5b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rax, %rbx
               	jae	0x429f0d <mi_process_init+0xc9d>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x429eee <mi_process_init+0xc7e>
               	negq	%rcx
               	andq	%rcx, %rbx
               	jmp	0x429f0d <mi_process_init+0xc9d>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x429f04 <mi_process_init+0xc94>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x429f0a <mi_process_init+0xc9a>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	movb	$1, 8(%rsp)
               	leaq	8(%rsp), %rdx
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42add0 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x429287 <mi_process_init+0x17>
               	movq	%rax, %r13
               	movb	8(%rsp), %al
               	movb	%al, 32(%rsp)
               	leaq	16777215(%rbx), %r12
               	movq	%r12, %r15
               	shrq	$24, %r15
               	leaq	63(%r15), %r14
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	movq	%rbp, %rdi
               	shlq	$4, %rdi
               	addq	$64, %rdi
               	callq	0x42b620 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x42a000 <mi_process_init+0xd90>
               	movq	%r15, 8(%rax)
               	movq	%rbp, 16(%rax)
               	xchgq	%r13, (%rax)
               	movl	$4294967295, 24(%rax)   # imm = 0xFFFFFFFF
               	movb	32(%rsp), %cl
               	movb	%cl, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	(%rax,%rbp,8), %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	andq	$-64, %r14
               	subq	%r15, %r14
               	jle	0x429fe1 <mi_process_init+0xd71>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	shrq	$30, %r12
               	movq	$-1, %rsi
               	movq	$-1, %rdi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%r15d, %ecx
               	shlq	%cl, %rdi
               	cmpq	$63, %r14
               	cmovaq	%rsi, %rdi
               	lock
               	orq	%rdi, (%rdx,%r12,8)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 227281(%rip)      # 0x4617c0 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x42a031 <mi_process_init+0xdc1>
               	lock
               	subq	$1, 227266(%rip)        # 0x4617c0 <mi_arena_count>
               	jmp	0x42a03c <mi_process_init+0xdcc>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42b7f0 <_mi_os_free_ex>
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	leaq	107790(%rip), %rdi      # 0x444530 <typeinfo name for kotlin::gc::GCSchedulerData+0x1087>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	jmp	0x429287 <mi_process_init+0x17>
               	leaq	227272(%rip), %rdx      # 0x461800 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	cmpb	$0, 8(%rsp)
               	leaq	109928(%rip), %rax      # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	leaq	107766(%rip), %rdx      # 0x444550 <typeinfo name for kotlin::gc::GCSchedulerData+0x10a7>
               	cmoveq	%rax, %rdx
               	leaq	107776(%rip), %rdi      # 0x444565 <typeinfo name for kotlin::gc::GCSchedulerData+0x10bc>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	jmp	0x429287 <mi_process_init+0x17>
               	callq	0x42bd70 <_mi_os_numa_node_count_get>
               	jmp	0x4294e1 <mi_process_init+0x271>
               	nop

<mi_pthread_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	testq	%rdi, %rdi
               	je	0x42a158 <mi_pthread_done+0xd8>
               	movq	%rdi, %rbx
               	movq	$-1, %rcx
               	lock
               	xaddq	%rcx, 226734(%rip)      # 0x461658 <_mi_stats_main+0x118>
               	addq	$-1, %rcx
               	movq	226715(%rip), %rax      # 0x461650 <_mi_stats_main+0x110>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42a0d0 <mi_pthread_done+0x50>
               	lock
               	cmpxchgq	%rcx, 226690(%rip)      # 0x461650 <_mi_stats_main+0x110>
               	jne	0x42a0c0 <mi_pthread_done+0x40>
               	lock
               	addq	$1, 226671(%rip)        # 0x461648 <_mi_stats_main+0x108>
               	movq	2848(%rbx), %rax
               	movq	%fs:0, %rcx
               	leaq	206992(%rip), %r13      # 0x45c980 <_mi_heap_empty>
               	cmpq	%r13, %rbx
               	je	0x42a158 <mi_pthread_done+0xd8>
               	cmpq	%rcx, %rax
               	jne	0x42a158 <mi_pthread_done+0xd8>
               	leaq	216975(%rip), %rdx      # 0x45f090 <_mi_heap_main>
               	movq	219816(%rip), %rcx      # 0x45fbb0 <_mi_heap_main+0xb20>
               	cmpq	%rax, %rcx
               	movq	%r13, %rsi
               	cmoveq	%rdx, %rsi
               	testq	%rcx, %rcx
               	cmoveq	%rdx, %rsi
               	movq	$-80, %r12
               	movq	%rsi, %fs:(%r12)
               	movl	220741(%rip), %edi      # 0x45ff70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a135 <mi_pthread_done+0xb5>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	(%rbx), %rax
               	movq	16(%rax), %r15
               	cmpq	%r13, %r15
               	je	0x42a158 <mi_pthread_done+0xd8>
               	movq	(%r15), %rax
               	movq	24(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x42a62d <mi_pthread_done+0x5ad>
               	movq	%r15, 8(%rsp)
               	jmp	0x42a179 <mi_pthread_done+0xf9>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r14, %rdi
               	callq	0x430310 <mi_free>
               	nop
               	testq	%rbx, %rbx
               	je	0x42a62d <mi_pthread_done+0x5ad>
               	movq	%rbx, %r14
               	movq	3040(%rbx), %rbx
               	cmpq	%r15, %r14
               	je	0x42a170 <mi_pthread_done+0xf0>
               	testq	%r14, %r14
               	je	0x42a170 <mi_pthread_done+0xf0>
               	cmpq	%r13, %r14
               	je	0x42a170 <mi_pthread_done+0xf0>
               	movq	%rbx, 32(%rsp)
               	movq	(%r14), %rax
               	movq	16(%rax), %rbp
               	cmpq	%r14, %rbp
               	je	0x42a59e <mi_pthread_done+0x51e>
               	cmpq	$0, 3016(%r14)
               	je	0x42a5ab <mi_pthread_done+0x52b>
               	movq	2840(%r14), %rax
               	testq	%rax, %rax
               	je	0x42a1f0 <mi_pthread_done+0x170>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a1c0 <mi_pthread_done+0x140>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f360 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a1e0 <mi_pthread_done+0x160>
               	leaq	1040(%rbp), %r10
               	leaq	1016(%rbp), %r12
               	leaq	120(%rbp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	24(%rbp), %rax
               	movq	%rax, 24(%rsp)
               	xorl	%edi, %edi
               	jmp	0x42a256 <mi_pthread_done+0x1d6>
               	nopw	(%rax,%rax)
               	xorl	%edx, %edx
               	movq	3016(%rbp), %rax
               	addq	%rdx, %rax
               	movq	%rax, 3016(%rbp)
               	movq	3016(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 3016(%r14)
               	addq	$1, %rdi
               	addq	$24, %r12
               	cmpq	$75, %rdi
               	je	0x42a513 <mi_pthread_done+0x493>
               	leaq	(,%rdi,8), %rax
               	leaq	(%rax,%rax,2), %rcx
               	movq	1040(%r14,%rcx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a220 <mi_pthread_done+0x1a0>
               	leaq	(%rcx,%rbp), %r8
               	addq	$1040, %r8              # imm = 0x410
               	leaq	(%r14,%rcx), %r9
               	addq	$1040, %r9              # imm = 0x410
               	xorl	%edx, %edx
               	jmp	0x42a29d <mi_pthread_done+0x21d>
               	addq	$1, %rdx
               	movq	48(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a2d0 <mi_pthread_done+0x250>
               	movq	%rbp, 40(%rbx)
               	movq	32(%rbx), %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	je	0x42a290 <mi_pthread_done+0x210>
               	cmpl	$3, %esi
               	je	0x42a290 <mi_pthread_done+0x210>
               	cmpl	$1, %esi
               	je	0x42a2c7 <mi_pthread_done+0x247>
               	movq	%rax, %rsi
               	andq	$-4, %rsi
               	lock
               	cmpxchgq	%rsi, 32(%rbx)
               	jne	0x42a2a1 <mi_pthread_done+0x221>
               	jmp	0x42a290 <mi_pthread_done+0x210>
               	pause
               	jmp	0x42a2a1 <mi_pthread_done+0x221>
               	nop
               	leaq	(%rdi,%rdi,2), %rbx
               	leaq	1048(,%rbx,8), %rax
               	addq	%rbp, %rax
               	movq	1048(%rbp,%rbx,8), %rsi
               	movq	(%r9), %r15
               	testq	%rsi, %rsi
               	je	0x42a310 <mi_pthread_done+0x290>
               	movq	%r15, 48(%rsi)
               	movq	%rsi, 56(%r15)
               	movq	1048(%r14,%rbx,8), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x42a222 <mi_pthread_done+0x1a2>
               	nopl	(%rax,%rax)
               	movq	%r15, (%r8)
               	movq	1048(%r14,%rcx), %rsi
               	movq	%rsi, (%rax)
               	movq	1056(%rbp,%rcx), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42a222 <mi_pthread_done+0x1a2>
               	testq	%r15, %r15
               	leaq	111620(%rip), %rcx      # 0x445740 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r15, 8(%rbp,%r11,8)
               	je	0x42a222 <mi_pthread_done+0x1a2>
               	cmpq	$9, %rax
               	jae	0x42a360 <mi_pthread_done+0x2e0>
               	xorl	%ecx, %ecx
               	jmp	0x42a412 <mi_pthread_done+0x392>
               	cmpq	$64, %rax
               	ja	0x42a370 <mi_pthread_done+0x2f0>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42a38b <mi_pthread_done+0x30b>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	movq	%r12, %rsi
               	nop
               	movq	16(%rsi), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42a3f0 <mi_pthread_done+0x370>
               	cmpq	$71, %rax
               	ja	0x42a3c0 <mi_pthread_done+0x340>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42a3f0 <mi_pthread_done+0x370>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42a3f0 <mi_pthread_done+0x370>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r9
               	movl	%r9d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r9,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%r10, %rsi
               	jbe	0x42a3fe <mi_pthread_done+0x37e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r8b
               	je	0x42a390 <mi_pthread_done+0x310>
               	leaq	1(%rbx), %rcx
               	cmpq	%r11, %rbx
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42a222 <mi_pthread_done+0x1a2>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42a500 <mi_pthread_done+0x480>
               	movq	%r8, %r9
               	andq	$-4, %r9
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r9), %rbx
               	movq	%rbx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	cmpq	$12, %rbx
               	jae	0x42a455 <mi_pthread_done+0x3d5>
               	xorl	%ebx, %ebx
               	jmp	0x42a4b2 <mi_pthread_done+0x432>
               	movq	16(%rsp), %rbx
               	leaq	(%rbx,%rcx,8), %r13
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbx,8)
               	movdqu	%xmm0, -96(%r13,%rbx,8)
               	movdqu	%xmm0, -80(%r13,%rbx,8)
               	movdqu	%xmm0, -64(%r13,%rbx,8)
               	movdqu	%xmm0, -48(%r13,%rbx,8)
               	movdqu	%xmm0, -32(%r13,%rbx,8)
               	movdqu	%xmm0, -16(%r13,%rbx,8)
               	movdqu	%xmm0, (%r13,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42a470 <mi_pthread_done+0x3f0>
               	testq	%rsi, %rsi
               	je	0x42a4e2 <mi_pthread_done+0x462>
               	addq	%rcx, %rbx
               	movq	24(%rsp), %rax
               	leaq	(%rax,%rbx,8), %rax
               	negq	%rsi
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x42a4d0 <mi_pthread_done+0x450>
               	cmpq	%r9, %r8
               	leaq	205972(%rip), %r13      # 0x45c980 <_mi_heap_empty>
               	je	0x42a222 <mi_pthread_done+0x1a2>
               	addq	%r9, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, 8(%rbp,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42a500 <mi_pthread_done+0x480>
               	jmp	0x42a222 <mi_pthread_done+0x1a2>
               	movq	2840(%r14), %rax
               	movq	8(%rsp), %r15
               	movq	$-80, %r12
               	nopw	%cs:(%rax,%rax)
               	testq	%rax, %rax
               	je	0x42a560 <mi_pthread_done+0x4e0>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a530 <mi_pthread_done+0x4b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f360 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a550 <mi_pthread_done+0x4d0>
               	leaq	8(%r14), %rdi
               	movl	$1032, %edx             # imm = 0x408
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	1040(%r14), %rdi
               	movl	$1800, %edx             # imm = 0x708
               	leaq	206861(%rip), %rsi      # 0x45cd90 <_mi_heap_empty+0x410>
               	callq	0x4136f0 <memcpy@plt>
               	xorl	%eax, %eax
               	xchgq	%rax, 2840(%r14)
               	movq	$0, 3016(%r14)
               	jmp	0x42a5ab <mi_pthread_done+0x52b>
               	movq	%r14, %rdi
               	movl	$2, %esi
               	callq	0x42c470 <mi_heap_collect_ex>
               	movq	(%r14), %rax
               	movq	16(%rax), %rsi
               	cmpq	%r14, %rsi
               	movq	32(%rsp), %rbx
               	je	0x42a170 <mi_pthread_done+0xf0>
               	cmpq	%r14, %fs:(%r12)
               	jne	0x42a5df <mi_pthread_done+0x55f>
               	movq	%rsi, %fs:(%r12)
               	movl	219550(%rip), %edi      # 0x45ff70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a5dc <mi_pthread_done+0x55c>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	(%r14), %rax
               	addq	$24, %rax
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	nopl	(%rax,%rax)
               	movq	%rdx, %rcx
               	movq	(%rsi), %rdx
               	cmpq	%r14, %rdx
               	je	0x42a607 <mi_pthread_done+0x587>
               	leaq	3040(%rdx), %rsi
               	testq	%rdx, %rdx
               	jne	0x42a5f0 <mi_pthread_done+0x570>
               	cmpq	%r14, %rdx
               	jne	0x42a167 <mi_pthread_done+0xe7>
               	leaq	3040(%rcx), %rdx
               	testq	%rcx, %rcx
               	movq	3040(%r14), %rcx
               	cmoveq	%rax, %rdx
               	movq	%rcx, (%rdx)
               	jmp	0x42a167 <mi_pthread_done+0xe7>
               	leaq	215644(%rip), %rax      # 0x45f090 <_mi_heap_main>
               	cmpq	%rax, %r15
               	je	0x42a675 <mi_pthread_done+0x5f5>
               	movq	%r15, %rdi
               	movl	$2, %esi
               	callq	0x42c470 <mi_heap_collect_ex>
               	movq	(%r15), %rdi
               	addq	$176, %rdi
               	callq	0x42bf80 <mi_stats_merge_from>
               	movl	$3808, %esi             # imm = 0xEE0
               	movq	%r15, %rdi
               	movl	$1, %edx
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42b7f0 <_mi_os_free_ex>
               	movq	(%r15), %rdi
               	addq	$176, %rdi
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42bf80 <mi_stats_merge_from>
               	nopw	%cs:(%rax,%rax)

<_mi_verbose_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42a6ec <_mi_verbose_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	movl	$2, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a7aa <_mi_verbose_message+0x10a>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42a7aa <_mi_verbose_message+0x10a>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42a7aa <_mi_verbose_message+0x10a>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	225932(%rip), %r12      # 0x461a08 <mi_out_arg>
               	movq	225933(%rip), %rax      # 0x461a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	5075(%rip), %rbx        # 0x42bb60 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	106965(%rip), %rdi      # 0x44496d <typeinfo name for kotlin::gc::GCSchedulerData+0x14c4>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<mi_thread_init>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	callq	0x429270 <mi_process_init>
               	movq	$-80, %r14
               	leaq	205224(%rip), %rax      # 0x45c980 <_mi_heap_empty>
               	cmpq	%rax, %fs:(%r14)
               	je	0x42a7e4 <mi_thread_init+0x24>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	218053(%rip), %rax      # 0x45fbb0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42a802 <mi_thread_init+0x42>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42a886 <mi_thread_init+0xc6>
               	cmpq	$0, 218030(%rip)        # 0x45fbb8 <_mi_heap_main+0xb28>
               	jne	0x42a860 <mi_thread_init+0xa0>
               	movq	%fs:0, %rax
               	movq	%rax, 218004(%rip)      # 0x45fbb0 <_mi_heap_main+0xb20>
               	leaq	215149(%rip), %rbx      # 0x45f090 <_mi_heap_main>
               	leaq	-9370(%rip), %rdi       # 0x428390 <mi_heap_main_init>
               	callq	0x428400 <_os_random_weak>
               	movq	%rax, 217986(%rip)      # 0x45fbb8 <_mi_heap_main+0xb28>
               	leaq	218003(%rip), %rdi      # 0x45fbd0 <_mi_heap_main+0xb40>
               	callq	0x428510 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 217967(%rip)      # 0x45fbc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 217960(%rip)      # 0x45fbc8 <_mi_heap_main+0xb38>
               	leaq	215081(%rip), %rax      # 0x45f090 <_mi_heap_main>
               	movq	%rax, %fs:(%r14)
               	movl	218879(%rip), %edi      # 0x45ff70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a961 <mi_thread_init+0x1a1>
               	leaq	215055(%rip), %rsi      # 0x45f090 <_mi_heap_main>
               	jmp	0x42a95c <mi_thread_init+0x19c>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b620 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42a8ae <mi_thread_init+0xee>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b620 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x42a99f <mi_thread_init+0x1df>
               	leaq	3056(%rbx), %r15
               	leaq	204996(%rip), %rsi      # 0x45c980 <_mi_heap_empty>
               	movl	$3056, %edx             # imm = 0xBF0
               	movq	%rbx, %rdi
               	callq	0x4136f0 <memcpy@plt>
               	movq	%fs:0, %rax
               	movq	%rax, 2848(%rbx)
               	leaq	2880(%rbx), %rdi
               	callq	0x428510 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	orq	$1, %rax
               	movq	%rax, 2856(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 2864(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	movq	%rax, 2872(%rbx)
               	movq	%r15, (%rbx)
               	movq	%rbx, 3072(%rbx)
               	movq	%rbx, 3080(%rbx)
               	leaq	3232(%rbx), %rax
               	movq	%rax, 3200(%rbx)
               	leaq	3216(%rbx), %rcx
               	movq	%rcx, 3208(%rbx)
               	movq	%rax, 3224(%rbx)
               	movq	%rbx, %fs:(%r14)
               	movl	218652(%rip), %edi      # 0x45ff70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a961 <mi_thread_init+0x1a1>
               	movq	%rbx, %rsi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 224489(%rip)      # 0x461658 <_mi_stats_main+0x118>
               	leaq	1(%rcx), %rdx
               	movq	224470(%rip), %rax      # 0x461650 <_mi_stats_main+0x110>
               	nopw	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jg	0x42a990 <mi_thread_init+0x1d0>
               	lock
               	cmpxchgq	%rdx, 224450(%rip)      # 0x461650 <_mi_stats_main+0x110>
               	jne	0x42a980 <mi_thread_init+0x1c0>
               	lock
               	addq	$1, 224423(%rip)        # 0x461640 <_mi_stats_main+0x100>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	106362(%rip), %rsi      # 0x444920 <typeinfo name for kotlin::gc::GCSchedulerData+0x1477>
               	movl	$3808, %edx             # imm = 0xEE0
               	movl	$12, %edi
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	jmp	0x42a961 <mi_thread_init+0x1a1>
               	nopl	(%rax)

<mi_option_get>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%edi, %eax
               	leaq	(%rax,%rax,2), %rbx
               	leaq	218546(%rip), %r13      # 0x45ff90 <options>
               	leaq	(,%rbx,8), %r12
               	addq	%r13, %r12
               	cmpl	$0, 8(%r13,%rbx,8)
               	je	0x42aa07 <mi_option_get+0x47>
               	movq	(%r12), %rax
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	8(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 80(%rsp)
               	leaq	105854(%rip), %rsi      # 0x4447a1 <typeinfo name for kotlin::gc::GCSchedulerData+0x12f8>
               	leaq	80(%rsp), %r14
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 144(%rsp)
               	movq	16(%r13,%rbx,8), %rsi
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413870 <strncat@plt>
               	movb	$0, 144(%rsp)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, %rcx
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x42ac20 <mi_option_get+0x260>
               	movq	210265(%rip), %rax      # 0x45dfd0 <write+0x45dfd0>
               	movq	(%rax), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	je	0x42ac20 <mi_option_get+0x260>
               	movb	80(%rsp), %al
               	movb	%al, 15(%rsp)
               	testb	%al, %al
               	je	0x42ab60 <mi_option_get+0x1a0>
               	xorl	%ecx, %ecx
               	jmp	0x42aac1 <mi_option_get+0x101>
               	movq	32(%rsp), %rax
               	cmpb	$61, (%rdx,%rax)
               	je	0x42abb5 <mi_option_get+0x1f5>
               	movq	56(%rsp), %rcx
               	addq	$1, %rcx
               	cmpq	$256, %rcx              # imm = 0x100
               	je	0x42ac20 <mi_option_get+0x260>
               	movq	40(%rsp), %rax
               	movq	(%rax,%rcx,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ac20 <mi_option_get+0x260>
               	movq	%rcx, 56(%rsp)
               	xorl	%r14d, %r14d
               	movb	15(%rsp), %al
               	movl	%eax, %esi
               	movq	32(%rsp), %r15
               	movq	%rdx, 64(%rsp)
               	testq	%r15, %r15
               	je	0x42ab43 <mi_option_get+0x183>
               	movzbl	(%rdx,%r14), %ebp
               	testb	%bpl, %bpl
               	je	0x42ab43 <mi_option_get+0x183>
               	movsbq	%bpl, %rax
               	movq	%rax, 72(%rsp)
               	movl	%esi, 52(%rsp)
               	callq	0x413880 <__ctype_toupper_loc@plt>
               	movl	52(%rsp), %esi
               	movq	(%rax), %rax
               	movsbq	%sil, %rcx
               	movq	72(%rsp), %rdx
               	movl	(%rax,%rdx,4), %edx
               	cmpl	%edx, (%rax,%rcx,4)
               	movq	64(%rsp), %rdx
               	jne	0x42ab52 <mi_option_get+0x192>
               	addq	$-1, %r15
               	movzbl	81(%rsp,%r14), %esi
               	addq	$1, %r14
               	testb	%sil, %sil
               	jne	0x42aaeb <mi_option_get+0x12b>
               	addq	%rdx, %r14
               	xorl	%esi, %esi
               	jmp	0x42ab46 <mi_option_get+0x186>
               	addq	%rdx, %r14
               	testq	%r15, %r15
               	je	0x42aa9c <mi_option_get+0xdc>
               	movb	(%r14), %bpl
               	cmpb	%bpl, %sil
               	je	0x42aa9c <mi_option_get+0xdc>
               	jmp	0x42aaab <mi_option_get+0xeb>
               	xorl	%eax, %eax
               	jmp	0x42ab74 <mi_option_get+0x1b4>
               	addq	$2, %rax
               	cmpq	$256, %rax              # imm = 0x100
               	je	0x42ac20 <mi_option_get+0x260>
               	movq	40(%rsp), %rcx
               	movq	(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ac20 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42ab96 <mi_option_get+0x1d6>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	je	0x42abb5 <mi_option_get+0x1f5>
               	movq	40(%rsp), %rcx
               	movq	8(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ac20 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42ab64 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	jne	0x42ab64 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rax
               	leaq	(%rdx,%rax), %rsi
               	addq	$1, %rsi
               	movb	$0, 160(%rsp)
               	leaq	160(%rsp), %r14
               	movl	$64, %r15d
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 224(%rsp)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	cmpq	$64, %rax
               	cmovbq	%rax, %r15
               	testq	%r15, %r15
               	je	0x42accb <mi_option_get+0x30b>
               	callq	0x413880 <__ctype_toupper_loc@plt>
               	leaq	-1(%r15), %rdx
               	movl	%r15d, %r8d
               	andl	$3, %r8d
               	cmpq	$3, %rdx
               	jae	0x42ac3d <mi_option_get+0x27d>
               	xorl	%edx, %edx
               	jmp	0x42ac9a <mi_option_get+0x2da>
               	cmpb	$1, 224089(%rip)        # 0x461780 <os_preloading>
               	jne	0x42a9f1 <mi_option_get+0x31>
               	movq	24(%rsp), %rax
               	movl	$1, (%rax)
               	jmp	0x42a9f1 <mi_option_get+0x31>
               	movl	%r15d, %esi
               	andl	$124, %esi
               	xorl	%edx, %edx
               	movq	(%rax), %rcx
               	movsbq	160(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 80(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	161(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 81(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	162(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 82(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	163(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 83(%rsp,%rdx)
               	addq	$4, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x42ac45 <mi_option_get+0x285>
               	testq	%r8, %r8
               	je	0x42accb <mi_option_get+0x30b>
               	leaq	(%rsp,%rdx), %rsi
               	addq	$80, %rsi
               	addq	%rsp, %rdx
               	addq	$160, %rdx
               	xorl	%edi, %edi
               	movq	(%rax), %rbp
               	movsbq	(%rdx,%rdi), %rcx
               	movl	(%rbp,%rcx,4), %ecx
               	movb	%cl, (%rsi,%rdi)
               	addq	$1, %rdi
               	cmpq	%rdi, %r8
               	jne	0x42acb3 <mi_option_get+0x2f3>
               	movb	$0, 80(%rsp,%r15)
               	cmpb	$0, 80(%rsp)
               	je	0x42acee <mi_option_get+0x32e>
               	leaq	105164(%rip), %rdi      # 0x4447ab <typeinfo name for kotlin::gc::GCSchedulerData+0x1302>
               	leaq	80(%rsp), %rsi
               	callq	0x413890 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42ad06 <mi_option_get+0x346>
               	movq	$1, (%r12)
               	movq	24(%rsp), %rax
               	movl	$2, (%rax)
               	jmp	0x42a9f1 <mi_option_get+0x31>
               	leaq	105132(%rip), %rdi      # 0x4447b9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1310>
               	leaq	80(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x413890 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42ad29 <mi_option_get+0x369>
               	movq	$0, (%r12)
               	jmp	0x42acf6 <mi_option_get+0x336>
               	movq	%r14, 16(%rsp)
               	leaq	16(%rsp), %rsi
               	movq	%r14, %rdi
               	movl	$10, %edx
               	callq	0x4138a0 <strtol@plt>
               	cmpl	$8, 12(%r13,%rbx,8)
               	movq	16(%rsp), %rcx
               	jne	0x42ad8d <mi_option_get+0x3cd>
               	movb	(%rcx), %dl
               	cmpb	$71, %dl
               	je	0x42ad6a <mi_option_get+0x3aa>
               	cmpb	$77, %dl
               	je	0x42ad70 <mi_option_get+0x3b0>
               	cmpb	$75, %dl
               	je	0x42ad74 <mi_option_get+0x3b4>
               	addq	$1023, %rax             # imm = 0x3FF
               	shrq	$10, %rax
               	jmp	0x42ad7f <mi_option_get+0x3bf>
               	shlq	$20, %rax
               	jmp	0x42ad74 <mi_option_get+0x3b4>
               	shlq	$10, %rax
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	movb	(%rcx), %dl
               	cmpb	$66, %dl
               	jne	0x42ad8d <mi_option_get+0x3cd>
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	cmpb	$0, (%rcx)
               	je	0x42adba <mi_option_get+0x3fa>
               	leaq	16(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	(%rax), %rsi
               	leaq	104993(%rip), %rdi      # 0x4447c8 <typeinfo name for kotlin::gc::GCSchedulerData+0x131f>
               	leaq	80(%rsp), %rdx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movl	$1, %eax
               	jmp	0x42adc3 <mi_option_get+0x403>
               	movq	%rax, (%r12)
               	movl	$2, %eax
               	movq	24(%rsp), %rcx
               	movl	%eax, (%rcx)
               	jmp	0x42a9f1 <mi_option_get+0x31>
               	nop

<_mi_os_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42b2f6 <_mi_os_alloc_aligned+0x526>
               	movq	%rdx, %r15
               	movl	%esi, %r14d
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42adfc <_mi_os_alloc_aligned+0x2c>
               	movq	217470(%rip), %rcx      # 0x45ff78 <os_page_size>
               	jmp	0x42ae2d <_mi_os_alloc_aligned+0x5d>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rdi          # imm = 0x200000
               	jb	0x42ae2d <_mi_os_alloc_aligned+0x5d>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x42ae2d <_mi_os_alloc_aligned+0x5d>
               	cmpq	$33554432, %rdi         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rdi, %rax
               	jbe	0x42ae6f <_mi_os_alloc_aligned+0x9f>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rdi
               	addq	$-1, %rdi
               	testq	%rax, %rcx
               	jne	0x42ae50 <_mi_os_alloc_aligned+0x80>
               	negq	%rcx
               	andq	%rcx, %rdi
               	jmp	0x42ae6f <_mi_os_alloc_aligned+0x9f>
               	movq	%rdi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42ae66 <_mi_os_alloc_aligned+0x96>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42ae6c <_mi_os_alloc_aligned+0x9c>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rdi
               	movq	217346(%rip), %rcx      # 0x45ff78 <os_page_size>
               	movq	%rcx, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %r8 # imm = 0x5555555555555555
               	andq	%r8, %rax
               	movq	%rcx, %rdx
               	subq	%rax, %rdx
               	movabsq	$3689348814741910323, %rbp # imm = 0x3333333333333333
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rsi
               	shrq	$4, %rsi
               	addq	%rdx, %rsi
               	movabsq	$1085102592571150095, %r9 # imm = 0xF0F0F0F0F0F0F0F
               	andq	%r9, %rsi
               	movabsq	$72340172838076673, %r10 # imm = 0x101010101010101
               	imulq	%r10, %rsi
               	shrq	$56, %rsi
               	leaq	4194303(%rcx), %r13
               	cmpq	$1, %rsi
               	ja	0x42aeff <_mi_os_alloc_aligned+0x12f>
               	movq	%rcx, %rax
               	negq	%rax
               	andq	%rax, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	je	0x42af36 <_mi_os_alloc_aligned+0x166>
               	movb	(%r15), %al
               	movb	%al, 3(%rsp)
               	movb	$0, (%r15)
               	jmp	0x42af3d <_mi_os_alloc_aligned+0x16d>
               	movq	%r13, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42af22 <_mi_os_alloc_aligned+0x152>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42aef2 <_mi_os_alloc_aligned+0x122>
               	jmp	0x42af36 <_mi_os_alloc_aligned+0x166>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42aef2 <_mi_os_alloc_aligned+0x122>
               	leaq	3(%rsp), %r15
               	xorl	%eax, %eax
               	testb	%al, %al
               	setne	%r12b
               	xorl	%ebx, %ebx
               	cmpq	%r13, %rcx
               	ja	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	movq	%r13, %rax
               	shrq	%rax
               	andq	%r8, %rax
               	movq	%r13, %rdx
               	subq	%rax, %rdx
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rax
               	shrq	$4, %rax
               	addq	%rdx, %rax
               	andq	%r9, %rax
               	imulq	%r10, %rax
               	shrq	$56, %rax
               	cmpl	$1, %eax
               	ja	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	leaq	-1(%rcx), %rbp
               	addq	%rdi, %rbp
               	cmpl	$1, %esi
               	ja	0x42afa7 <_mi_os_alloc_aligned+0x1d7>
               	negq	%rcx
               	andq	%rcx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42afda <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b2f6 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42afc8 <_mi_os_alloc_aligned+0x1f8>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42afda <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b2f6 <_mi_os_alloc_aligned+0x526>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	je	0x42b2f6 <_mi_os_alloc_aligned+0x526>
               	andb	%r14b, %r12b
               	movzbl	%r14b, %eax
               	leal	(%rax,%rax,2), %ebx
               	cmpb	$1, 256573(%rip)        # 0x469a28 <large_os_page_size>
               	movl	%ebx, 4(%rsp)
               	jne	0x42b030 <_mi_os_alloc_aligned+0x260>
               	movl	$6, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b030 <_mi_os_alloc_aligned+0x260>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b030 <_mi_os_alloc_aligned+0x260>
               	movl	%r12d, %eax
               	xorb	$1, %al
               	jne	0x42b030 <_mi_os_alloc_aligned+0x260>
               	movq	256558(%rip), %rax      # 0x469a48 <mi_unix_mmap.large_page_try_ok>
               	testq	%rax, %rax
               	je	0x42b320 <_mi_os_alloc_aligned+0x550>
               	leaq	-1(%rax), %rcx
               	lock
               	cmpxchgq	%rcx, 256536(%rip)      # 0x469a48 <mi_unix_mmap.large_page_try_ok>
               	movb	$0, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42bc50 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testb	%r12b, %r12b
               	je	0x42b08a <_mi_os_alloc_aligned+0x2ba>
               	cmpb	$1, 256467(%rip)        # 0x469a28 <large_os_page_size>
               	jne	0x42b08a <_mi_os_alloc_aligned+0x2ba>
               	movl	$6, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b08a <_mi_os_alloc_aligned+0x2ba>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b08a <_mi_os_alloc_aligned+0x2ba>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	$14, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42b08a <_mi_os_alloc_aligned+0x2ba>
               	movb	$1, (%r15)
               	testq	%rbx, %rbx
               	je	0x42b0f8 <_mi_os_alloc_aligned+0x328>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 222461(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	%rbp, %rcx
               	movq	222443(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b0c0 <_mi_os_alloc_aligned+0x2f0>
               	lock
               	cmpxchgq	%rcx, 222418(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b0b0 <_mi_os_alloc_aligned+0x2e0>
               	testq	%rbp, %rbp
               	jle	0x42b120 <_mi_os_alloc_aligned+0x350>
               	lock
               	addq	%rbp, 222387(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	testb	%r14b, %r14b
               	jne	0x42b133 <_mi_os_alloc_aligned+0x363>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	je	0x42b17d <_mi_os_alloc_aligned+0x3ad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r13
               	testq	%rdx, %rdx
               	jne	0x42b18d <_mi_os_alloc_aligned+0x3bd>
               	jmp	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	movzbl	%r12b, %r9d
               	leaq	103603(%rip), %rdi      # 0x4445bd <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%rbp, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	jmp	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 222298(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b0d2 <_mi_os_alloc_aligned+0x302>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 222329(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	addq	%rbp, %rcx
               	movq	222311(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b160 <_mi_os_alloc_aligned+0x390>
               	lock
               	cmpxchgq	%rcx, 222290(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b150 <_mi_os_alloc_aligned+0x380>
               	testq	%rbp, %rbp
               	jle	0x42b1df <_mi_os_alloc_aligned+0x40f>
               	lock
               	addq	%rbp, 222259(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b0e2 <_mi_os_alloc_aligned+0x312>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r13d
               	testq	%rdx, %rdx
               	je	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbp, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b20a <_mi_os_alloc_aligned+0x43a>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 222211(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	subq	%rbp, %rsi
               	movq	222193(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42b1d0 <_mi_os_alloc_aligned+0x400>
               	lock
               	cmpxchgq	%rsi, 222178(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b1c0 <_mi_os_alloc_aligned+0x3f0>
               	testq	%rbp, %rbp
               	js	0x42b202 <_mi_os_alloc_aligned+0x432>
               	lock
               	addq	%rbp, 222155(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	jmp	0x42b20a <_mi_os_alloc_aligned+0x43a>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 222139(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b0e2 <_mi_os_alloc_aligned+0x312>
               	jmp	0x42b17d <_mi_os_alloc_aligned+0x3ad>
               	lock
               	addq	%rdx, 222102(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 222082(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	subq	%rbp, %rsi
               	movq	222064(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b230 <_mi_os_alloc_aligned+0x460>
               	lock
               	cmpxchgq	%rsi, 222050(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b220 <_mi_os_alloc_aligned+0x450>
               	testq	%rbp, %rbp
               	js	0x42b30a <_mi_os_alloc_aligned+0x53a>
               	lock
               	addq	%rbp, 222023(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42b269 <_mi_os_alloc_aligned+0x499>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	103206(%rip), %rdi      # 0x44457f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	movq	%rbp, %rcx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movq	%r13, %rax
               	notq	%rax
               	cmpq	%rax, %rbp
               	jae	0x42b2f6 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %r12
               	addq	%r13, %r12
               	je	0x42b2f6 <_mi_os_alloc_aligned+0x526>
               	cmpb	$1, 255905(%rip)        # 0x469a28 <large_os_page_size>
               	jne	0x42b293 <_mi_os_alloc_aligned+0x4c3>
               	movl	$6, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movb	$0, (%r15)
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42bc50 <mi_unix_mmapx>
               	testq	%rax, %rax
               	je	0x42b3a8 <_mi_os_alloc_aligned+0x5d8>
               	movq	%rax, %r15
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 221909(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	%r12, %rcx
               	movq	221891(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b2e0 <_mi_os_alloc_aligned+0x510>
               	lock
               	cmpxchgq	%rcx, 221874(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b2d0 <_mi_os_alloc_aligned+0x500>
               	testq	%r12, %r12
               	jle	0x42b3c8 <_mi_os_alloc_aligned+0x5f8>
               	lock
               	addq	%r12, 221839(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	jmp	0x42b3d6 <_mi_os_alloc_aligned+0x606>
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 221806(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b269 <_mi_os_alloc_aligned+0x499>
               	jmp	0x42b246 <_mi_os_alloc_aligned+0x476>
               	testl	$1073741823, %ebp       # imm = 0x3FFFFFFF
               	jne	0x42b336 <_mi_os_alloc_aligned+0x566>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	cmpb	$1, 255772(%rip)        # 0x469a50 <mi_unix_mmap.mi_huge_pages_available>
               	jne	0x42b33b <_mi_os_alloc_aligned+0x56b>
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movb	$1, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	callq	0x42bc50 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b08f <_mi_os_alloc_aligned+0x2bf>
               	movb	$1, 255729(%rip)        # 0x469a50 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	103096(%rip), %rdi      # 0x444625 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	callq	0x42bc50 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b08f <_mi_os_alloc_aligned+0x2bf>
               	movq	$10, 255657(%rip)       # 0x469a48 <mi_unix_mmap.large_page_try_ok>
               	movl	4(%rsp), %ebx
               	jmp	0x42b030 <_mi_os_alloc_aligned+0x260>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	102919(%rip), %rdi      # 0x4445bd <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%r12, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	jmp	0x42b114 <_mi_os_alloc_aligned+0x344>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 221618(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b41e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 221649(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	addq	%r12, %rcx
               	movq	221631(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x42b401 <_mi_os_alloc_aligned+0x631>
               	lock
               	cmpxchgq	%rcx, 221617(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b3f1 <_mi_os_alloc_aligned+0x621>
               	testq	%r12, %r12
               	jle	0x42b410 <_mi_os_alloc_aligned+0x640>
               	lock
               	addq	%r12, 221586(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	jmp	0x42b41e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 221578(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	leaq	(%r15,%r13), %rax
               	addq	$-1, %rax
               	negq	%r13
               	andq	%rax, %r13
               	movq	%r13, %rbx
               	subq	%r15, %rbx
               	movq	215871(%rip), %rcx      # 0x45ff78 <os_page_size>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x42b451 <_mi_os_alloc_aligned+0x681>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x42b470 <_mi_os_alloc_aligned+0x6a0>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b467 <_mi_os_alloc_aligned+0x697>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b46d <_mi_os_alloc_aligned+0x69d>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	subq	%rbx, %r12
               	subq	%rbp, %r12
               	testq	%rbx, %rbx
               	je	0x42b539 <_mi_os_alloc_aligned+0x769>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b4d4 <_mi_os_alloc_aligned+0x704>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221461(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	221443(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b4bd <_mi_os_alloc_aligned+0x6ed>
               	lock
               	cmpxchgq	%rsi, 221429(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b4ad <_mi_os_alloc_aligned+0x6dd>
               	testq	%rbx, %rbx
               	js	0x42b4cc <_mi_os_alloc_aligned+0x6fc>
               	lock
               	addq	%rbx, 221406(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	jmp	0x42b4d4 <_mi_os_alloc_aligned+0x704>
               	lock
               	addq	%rdx, 221388(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221368(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	221350(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b4fa <_mi_os_alloc_aligned+0x72a>
               	lock
               	cmpxchgq	%rsi, 221336(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b4ea <_mi_os_alloc_aligned+0x71a>
               	testq	%rbx, %rbx
               	js	0x42b509 <_mi_os_alloc_aligned+0x739>
               	lock
               	addq	%rbx, 221313(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	jmp	0x42b511 <_mi_os_alloc_aligned+0x741>
               	lock
               	addq	%rdx, 221295(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b539 <_mi_os_alloc_aligned+0x769>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	102486(%rip), %rdi      # 0x44457f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	testq	%r12, %r12
               	je	0x42b60f <_mi_os_alloc_aligned+0x83f>
               	testq	%r13, %r13
               	je	0x42b60f <_mi_os_alloc_aligned+0x83f>
               	addq	%r13, %rbp
               	movq	%rbp, %rdi
               	movq	%r12, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%r12, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b5a3 <_mi_os_alloc_aligned+0x7d3>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221254(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	subq	%r12, %rsi
               	movq	221236(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b58c <_mi_os_alloc_aligned+0x7bc>
               	lock
               	cmpxchgq	%rsi, 221222(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b57c <_mi_os_alloc_aligned+0x7ac>
               	testq	%r12, %r12
               	js	0x42b59b <_mi_os_alloc_aligned+0x7cb>
               	lock
               	addq	%r12, 221199(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	jmp	0x42b5a3 <_mi_os_alloc_aligned+0x7d3>
               	lock
               	addq	%rdx, 221181(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221161(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	subq	%r12, %rsi
               	movq	221143(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b5c9 <_mi_os_alloc_aligned+0x7f9>
               	lock
               	cmpxchgq	%rsi, 221129(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b5b9 <_mi_os_alloc_aligned+0x7e9>
               	testq	%r12, %r12
               	js	0x42b5d8 <_mi_os_alloc_aligned+0x808>
               	lock
               	addq	%r12, 221106(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	jmp	0x42b5e0 <_mi_os_alloc_aligned+0x810>
               	lock
               	addq	%rdx, 221088(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	movq	%r13, %rbx
               	cmpl	$-1, %ecx
               	jne	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	102272(%rip), %rdi      # 0x44457f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movq	%r13, %rbx
               	jmp	0x42b2f8 <_mi_os_alloc_aligned+0x528>
               	nopw	(%rax,%rax)

<_mi_os_alloc>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42b63a <_mi_os_alloc+0x1a>
               	movq	215360(%rip), %rcx      # 0x45ff78 <os_page_size>
               	jmp	0x42b66b <_mi_os_alloc+0x4b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b66b <_mi_os_alloc+0x4b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b66b <_mi_os_alloc+0x4b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42b699 <_mi_os_alloc+0x79>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b71f <_mi_os_alloc+0xff>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	je	0x42b778 <_mi_os_alloc+0x158>
               	cmpb	$1, 254856(%rip)        # 0x469a28 <large_os_page_size>
               	jne	0x42b6ac <_mi_os_alloc+0x8c>
               	movl	$6, %edi
               	callq	0x42a9c0 <mi_option_get>
               	xorl	%r15d, %r15d
               	movl	$0, %edi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %r14
               	cmpq	$-1, %rax
               	cmoveq	%r15, %r14
               	testq	%r14, %r14
               	je	0x42b741 <_mi_os_alloc+0x121>
               	testq	%rbx, %rbx
               	je	0x42b7da <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 220836(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	addq	%rbx, %rcx
               	movq	220818(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b710 <_mi_os_alloc+0xf0>
               	lock
               	cmpxchgq	%rcx, 220802(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b700 <_mi_os_alloc+0xe0>
               	testq	%rbx, %rbx
               	jle	0x42b77d <_mi_os_alloc+0x15d>
               	lock
               	addq	%rbx, 220771(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	jmp	0x42b78b <_mi_os_alloc+0x16b>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b766 <_mi_os_alloc+0x146>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b699 <_mi_os_alloc+0x79>
               	jmp	0x42b778 <_mi_os_alloc+0x158>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	101998(%rip), %rdi      # 0x4445bd <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%r14d, %r14d
               	movq	%rbx, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	jmp	0x42b7da <_mi_os_alloc+0x1ba>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b699 <_mi_os_alloc+0x79>
               	xorl	%r14d, %r14d
               	jmp	0x42b7da <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rax
               	negq	%rax
               	lock
               	addq	%rax, 220669(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 220705(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	addq	%rbx, %rcx
               	movq	220687(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b7c0 <_mi_os_alloc+0x1a0>
               	lock
               	cmpxchgq	%rcx, 220658(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b7b0 <_mi_os_alloc+0x190>
               	testq	%rbx, %rbx
               	jle	0x42b7cf <_mi_os_alloc+0x1af>
               	lock
               	addq	%rbx, 220627(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	jmp	0x42b7da <_mi_os_alloc+0x1ba>
               	negq	%rbx
               	lock
               	addq	%rbx, 220622(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	movq	%r14, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_os_free_ex>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42b952 <_mi_os_free_ex+0x162>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x42b952 <_mi_os_free_ex+0x162>
               	movl	%edx, %ebp
               	movq	%rdi, %r14
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42b820 <_mi_os_free_ex+0x30>
               	movq	214874(%rip), %rcx      # 0x45ff78 <os_page_size>
               	jmp	0x42b851 <_mi_os_free_ex+0x61>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b851 <_mi_os_free_ex+0x61>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b851 <_mi_os_free_ex+0x61>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42b8af <_mi_os_free_ex+0xbf>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b87c <_mi_os_free_ex+0x8c>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b8af <_mi_os_free_ex+0xbf>
               	jmp	0x42b952 <_mi_os_free_ex+0x162>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b89d <_mi_os_free_ex+0xad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b8af <_mi_os_free_ex+0xbf>
               	jmp	0x42b952 <_mi_os_free_ex+0x162>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	je	0x42b952 <_mi_os_free_ex+0x162>
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%bpl, %bpl
               	je	0x42b90c <_mi_os_free_ex+0x11c>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 220389(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	220371(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42b8f0 <_mi_os_free_ex+0x100>
               	lock
               	cmpxchgq	%rsi, 220354(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42b8e0 <_mi_os_free_ex+0xf0>
               	testq	%rbx, %rbx
               	js	0x42b904 <_mi_os_free_ex+0x114>
               	lock
               	addq	%rbx, 220331(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	testq	%rbx, %rbx
               	jne	0x42b90c <_mi_os_free_ex+0x11c>
               	jmp	0x42b94d <_mi_os_free_ex+0x15d>
               	lock
               	addq	%rdx, 220308(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 220288(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	220270(%rip), %rax      # 0x461590 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42b940 <_mi_os_free_ex+0x150>
               	lock
               	cmpxchgq	%rsi, 220242(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	jne	0x42b930 <_mi_os_free_ex+0x140>
               	testq	%rbx, %rbx
               	js	0x42b957 <_mi_os_free_ex+0x167>
               	lock
               	addq	%rbx, 220219(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	je	0x42b964 <_mi_os_free_ex+0x174>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 220193(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b952 <_mi_os_free_ex+0x162>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	101384(%rip), %rdi      # 0x44457f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmp	0x42ba20 <_mi_warning_message>
               	nopl	(%rax,%rax)

<_mi_stat_decrease>:
               	testq	%rsi, %rsi
               	je	0x42ba0a <_mi_stat_decrease+0x7a>
               	leaq	220064(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42b9e8 <_mi_stat_decrease+0x58>
               	leaq	220624(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42b9e8 <_mi_stat_decrease+0x58>
               	movq	%rsi, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 24(%rdi)
               	subq	%rsi, %rdx
               	movq	16(%rdi), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42b9dd <_mi_stat_decrease+0x4d>
               	lock
               	cmpxchgq	%rdx, 16(%rdi)
               	jne	0x42b9d0 <_mi_stat_decrease+0x40>
               	testq	%rsi, %rsi
               	js	0x42ba0b <_mi_stat_decrease+0x7b>
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	24(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42b9fd <_mi_stat_decrease+0x6d>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	js	0x42ba10 <_mi_stat_decrease+0x80>
               	addq	8(%rdi), %rsi
               	movq	%rsi, 8(%rdi)
               	retq
               	lock
               	addq	%rcx, (%rdi)
               	retq
               	movq	(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, (%rdi)
               	retq
               	nopw	(%rax,%rax)

<_mi_warning_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42ba6c <_mi_warning_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42baa4 <_mi_warning_message+0x84>
               	movl	$2, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42bb51 <_mi_warning_message+0x131>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 221006(%rip)      # 0x461a00 <warning_count>
               	cmpq	214215(%rip), %rax      # 0x45ff80 <mi_max_warning_count>
               	ja	0x42bb51 <_mi_warning_message+0x131>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42bb51 <_mi_warning_message+0x131>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42bb51 <_mi_warning_message+0x131>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	220901(%rip), %r12      # 0x461a08 <mi_out_arg>
               	movq	220902(%rip), %rax      # 0x461a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	44(%rip), %rbx          # 0x42bb60 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	100970(%rip), %rdi      # 0x4445a9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1100>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq

<mi_out_buf>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42bb97 <mi_out_buf+0x37>
               	movq	220843(%rip), %rax      # 0x461a18 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x42bb97 <mi_out_buf+0x37>
               	movq	%rdi, %rbx
               	callq	0x4136e0 <strlen@plt>
               	testq	%rax, %rax
               	je	0x42bb97 <mi_out_buf+0x37>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 220810(%rip)      # 0x461a18 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x42bb99 <mi_out_buf+0x39>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	220777(%rip), %rdi      # 0x461a20 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x4136f0 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<_mi_stat_increase>:
               	testq	%rsi, %rsi
               	je	0x42bc4c <_mi_stat_increase+0x7c>
               	leaq	219492(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42bc17 <_mi_stat_increase+0x47>
               	leaq	220056(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42bc17 <_mi_stat_increase+0x47>
               	movq	%rsi, %rcx
               	lock
               	xaddq	%rcx, 24(%rdi)
               	addq	%rsi, %rcx
               	movq	16(%rdi), %rax
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42bc0d <_mi_stat_increase+0x3d>
               	lock
               	cmpxchgq	%rcx, 16(%rdi)
               	jne	0x42bc00 <_mi_stat_increase+0x30>
               	testq	%rsi, %rsi
               	jle	0x42bc38 <_mi_stat_increase+0x68>
               	lock
               	addq	%rsi, (%rdi)
               	retq
               	movq	24(%rdi), %rax
               	addq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42bc2c <_mi_stat_increase+0x5c>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	jle	0x42bc41 <_mi_stat_increase+0x71>
               	addq	(%rdi), %rsi
               	movq	%rsi, (%rdi)
               	retq
               	negq	%rsi
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 8(%rdi)
               	retq
               	nopl	(%rax)

<mi_unix_mmapx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%ecx, %r14d
               	movl	%edx, %r15d
               	movq	%rdi, %rbp
               	cmpq	$1073741824, %rdi       # imm = 0x40000000
               	ja	0x42bd43 <mi_unix_mmapx+0xf3>
               	movl	%ebp, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	testq	%rax, %rax
               	jne	0x42bd43 <mi_unix_mmapx+0xf3>
               	movq	%rsi, %r12
               	leaq	-1(%rsi), %rax
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42bd43 <mi_unix_mmapx+0xf3>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 253347(%rip)      # 0x469a40 <aligned_base>
               	leaq	-1(%rbx), %rax
               	shrq	$41, %rax
               	cmpl	$15, %eax
               	jb	0x42bcf3 <mi_unix_mmapx+0xa3>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	callq	0x428a70 <_mi_heap_random_next>
               	shlq	$5, %rax
               	movabsq	$4398042316800, %rcx    # imm = 0x3FFFFC00000
               	andq	%rax, %rcx
               	movabsq	$2199023255552, %rdx    # imm = 0x20000000000
               	addq	%rcx, %rdx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rdx, 253273(%rip)      # 0x469a40 <aligned_base>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 253261(%rip)      # 0x469a40 <aligned_base>
               	movq	%rbx, %rax
               	orq	%r12, %rax
               	shrq	$32, %rax
               	je	0x42bd0e <mi_unix_mmapx+0xbe>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r12
               	testq	%rbx, %rbx
               	jne	0x42bd1a <mi_unix_mmapx+0xca>
               	jmp	0x42bd43 <mi_unix_mmapx+0xf3>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r12d
               	testq	%rbx, %rbx
               	je	0x42bd43 <mi_unix_mmapx+0xf3>
               	testq	%rdx, %rdx
               	jne	0x42bd43 <mi_unix_mmapx+0xf3>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	cmpq	$1, %rcx
               	ja	0x42bd66 <mi_unix_mmapx+0x116>
               	xorl	%ebx, %ebx
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	$-1, %rax
               	cmoveq	%rbx, %rax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<_mi_os_numa_node_count_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$128, %rsp
               	movq	253141(%rip), %rbx      # 0x469a58 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x42be03 <_mi_os_numa_node_count_get+0x93>
               	movl	$15, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x42bdeb <_mi_os_numa_node_count_get+0x7b>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	100799(%rip), %r14      # 0x444769 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	movq	%rsp, %r15
               	nopl	(%rax)
               	cmpl	$255, %ebx
               	je	0x42bde3 <_mi_os_numa_node_count_get+0x73>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x4138c0 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x42bdb0 <_mi_os_numa_node_count_get+0x40>
               	jmp	0x42bde8 <_mi_os_numa_node_count_get+0x78>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 253030(%rip)      # 0x469a58 <_mi_numa_node_count>
               	leaq	100752(%rip), %rdi      # 0x444789 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	movq	%rbx, %rax
               	addq	$128, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_error_message>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$720, %rsp              # imm = 0x2D0
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	testb	%al, %al
               	je	0x42be6f <_mi_error_message+0x4f>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430224, %rax     # imm = 0x3000000010
               	movq	%rax, (%rsp)
               	xorl	%edi, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42bec7 <_mi_error_message+0xa7>
               	movl	$2, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42bf4b <_mi_error_message+0x12b>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 252867(%rip)      # 0x469a98 <error_count>
               	cmpq	213652(%rip), %rax      # 0x460170 <mi_max_error_count>
               	ja	0x42bf4b <_mi_error_message+0x12b>
               	testq	%rbx, %rbx
               	je	0x42bf4b <_mi_error_message+0x12b>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42bf4b <_mi_error_message+0x12b>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	219883(%rip), %r12      # 0x461a08 <mi_out_arg>
               	movq	219884(%rip), %rax      # 0x461a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-974(%rip), %rbx        # 0x42bb60 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	100898(%rip), %rdi      # 0x44495b <typeinfo name for kotlin::gc::GCSchedulerData+0x14b2>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	movq	252750(%rip), %rax      # 0x469aa0 <mi_error_handler>
               	testq	%rax, %rax
               	je	0x42bf69 <_mi_error_message+0x149>
               	movq	252738(%rip), %rax      # 0x469aa0 <mi_error_handler>
               	movq	252739(%rip), %rsi      # 0x469aa8 <mi_error_arg>
               	movl	%ebp, %edi
               	callq	*%rax
               	addq	$720, %rsp              # imm = 0x2D0
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<mi_stats_merge_from>:
               	leaq	218553(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x42c469 <mi_stats_merge_from+0x4e9>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42bf9f <mi_stats_merge_from+0x1f>
               	cmpq	$0, 8(%rdi)
               	je	0x42bfcb <mi_stats_merge_from+0x4b>
               	lock
               	addq	%rax, 218521(%rip)      # 0x461540 <_mi_stats_main>
               	movq	24(%rdi), %rax
               	lock
               	addq	%rax, 218533(%rip)      # 0x461558 <_mi_stats_main+0x18>
               	movq	8(%rdi), %rax
               	lock
               	addq	%rax, 218505(%rip)      # 0x461548 <_mi_stats_main+0x8>
               	movq	16(%rdi), %rax
               	lock
               	addq	%rax, 218501(%rip)      # 0x461550 <_mi_stats_main+0x10>
               	movq	32(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42bfdb <mi_stats_merge_from+0x5b>
               	cmpq	$0, 40(%rdi)
               	je	0x42c007 <mi_stats_merge_from+0x87>
               	lock
               	addq	%rax, 218493(%rip)      # 0x461560 <_mi_stats_main+0x20>
               	movq	56(%rdi), %rax
               	lock
               	addq	%rax, 218505(%rip)      # 0x461578 <_mi_stats_main+0x38>
               	movq	40(%rdi), %rax
               	lock
               	addq	%rax, 218477(%rip)      # 0x461568 <_mi_stats_main+0x28>
               	movq	48(%rdi), %rax
               	lock
               	addq	%rax, 218473(%rip)      # 0x461570 <_mi_stats_main+0x30>
               	movq	64(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c017 <mi_stats_merge_from+0x97>
               	cmpq	$0, 72(%rdi)
               	je	0x42c043 <mi_stats_merge_from+0xc3>
               	lock
               	addq	%rax, 218465(%rip)      # 0x461580 <_mi_stats_main+0x40>
               	movq	88(%rdi), %rax
               	lock
               	addq	%rax, 218477(%rip)      # 0x461598 <_mi_stats_main+0x58>
               	movq	72(%rdi), %rax
               	lock
               	addq	%rax, 218449(%rip)      # 0x461588 <_mi_stats_main+0x48>
               	movq	80(%rdi), %rax
               	lock
               	addq	%rax, 218445(%rip)      # 0x461590 <_mi_stats_main+0x50>
               	movq	96(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c053 <mi_stats_merge_from+0xd3>
               	cmpq	$0, 104(%rdi)
               	je	0x42c07f <mi_stats_merge_from+0xff>
               	lock
               	addq	%rax, 218437(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	120(%rdi), %rax
               	lock
               	addq	%rax, 218449(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	movq	104(%rdi), %rax
               	lock
               	addq	%rax, 218421(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	movq	112(%rdi), %rax
               	lock
               	addq	%rax, 218417(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	movq	128(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c095 <mi_stats_merge_from+0x115>
               	cmpq	$0, 136(%rdi)
               	je	0x42c0ca <mi_stats_merge_from+0x14a>
               	lock
               	addq	%rax, 218403(%rip)      # 0x4615c0 <_mi_stats_main+0x80>
               	movq	152(%rdi), %rax
               	lock
               	addq	%rax, 218412(%rip)      # 0x4615d8 <_mi_stats_main+0x98>
               	movq	136(%rdi), %rax
               	lock
               	addq	%rax, 218381(%rip)      # 0x4615c8 <_mi_stats_main+0x88>
               	movq	144(%rdi), %rax
               	lock
               	addq	%rax, 218374(%rip)      # 0x4615d0 <_mi_stats_main+0x90>
               	movq	160(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c0e0 <mi_stats_merge_from+0x160>
               	cmpq	$0, 168(%rdi)
               	je	0x42c115 <mi_stats_merge_from+0x195>
               	lock
               	addq	%rax, 218360(%rip)      # 0x4615e0 <_mi_stats_main+0xa0>
               	movq	184(%rdi), %rax
               	lock
               	addq	%rax, 218369(%rip)      # 0x4615f8 <_mi_stats_main+0xb8>
               	movq	168(%rdi), %rax
               	lock
               	addq	%rax, 218338(%rip)      # 0x4615e8 <_mi_stats_main+0xa8>
               	movq	176(%rdi), %rax
               	lock
               	addq	%rax, 218331(%rip)      # 0x4615f0 <_mi_stats_main+0xb0>
               	movq	224(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c12b <mi_stats_merge_from+0x1ab>
               	cmpq	$0, 232(%rdi)
               	je	0x42c160 <mi_stats_merge_from+0x1e0>
               	lock
               	addq	%rax, 218349(%rip)      # 0x461620 <_mi_stats_main+0xe0>
               	movq	248(%rdi), %rax
               	lock
               	addq	%rax, 218358(%rip)      # 0x461638 <_mi_stats_main+0xf8>
               	movq	232(%rdi), %rax
               	lock
               	addq	%rax, 218327(%rip)      # 0x461628 <_mi_stats_main+0xe8>
               	movq	240(%rdi), %rax
               	lock
               	addq	%rax, 218320(%rip)      # 0x461630 <_mi_stats_main+0xf0>
               	movq	192(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c176 <mi_stats_merge_from+0x1f6>
               	cmpq	$0, 200(%rdi)
               	je	0x42c1ab <mi_stats_merge_from+0x22b>
               	lock
               	addq	%rax, 218242(%rip)      # 0x461600 <_mi_stats_main+0xc0>
               	movq	216(%rdi), %rax
               	lock
               	addq	%rax, 218251(%rip)      # 0x461618 <_mi_stats_main+0xd8>
               	movq	200(%rdi), %rax
               	lock
               	addq	%rax, 218220(%rip)      # 0x461608 <_mi_stats_main+0xc8>
               	movq	208(%rdi), %rax
               	lock
               	addq	%rax, 218213(%rip)      # 0x461610 <_mi_stats_main+0xd0>
               	movq	256(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c1c1 <mi_stats_merge_from+0x241>
               	cmpq	$0, 264(%rdi)
               	je	0x42c1f6 <mi_stats_merge_from+0x276>
               	lock
               	addq	%rax, 218231(%rip)      # 0x461640 <_mi_stats_main+0x100>
               	movq	280(%rdi), %rax
               	lock
               	addq	%rax, 218240(%rip)      # 0x461658 <_mi_stats_main+0x118>
               	movq	264(%rdi), %rax
               	lock
               	addq	%rax, 218209(%rip)      # 0x461648 <_mi_stats_main+0x108>
               	movq	272(%rdi), %rax
               	lock
               	addq	%rax, 218202(%rip)      # 0x461650 <_mi_stats_main+0x110>
               	movq	384(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c20c <mi_stats_merge_from+0x28c>
               	cmpq	$0, 392(%rdi)
               	je	0x42c241 <mi_stats_merge_from+0x2c1>
               	lock
               	addq	%rax, 218284(%rip)      # 0x4616c0 <_mi_stats_main+0x180>
               	movq	408(%rdi), %rax
               	lock
               	addq	%rax, 218293(%rip)      # 0x4616d8 <_mi_stats_main+0x198>
               	movq	392(%rdi), %rax
               	lock
               	addq	%rax, 218262(%rip)      # 0x4616c8 <_mi_stats_main+0x188>
               	movq	400(%rdi), %rax
               	lock
               	addq	%rax, 218255(%rip)      # 0x4616d0 <_mi_stats_main+0x190>
               	movq	416(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c257 <mi_stats_merge_from+0x2d7>
               	cmpq	$0, 424(%rdi)
               	je	0x42c28c <mi_stats_merge_from+0x30c>
               	lock
               	addq	%rax, 218241(%rip)      # 0x4616e0 <_mi_stats_main+0x1a0>
               	movq	440(%rdi), %rax
               	lock
               	addq	%rax, 218250(%rip)      # 0x4616f8 <_mi_stats_main+0x1b8>
               	movq	424(%rdi), %rax
               	lock
               	addq	%rax, 218219(%rip)      # 0x4616e8 <_mi_stats_main+0x1a8>
               	movq	432(%rdi), %rax
               	lock
               	addq	%rax, 218212(%rip)      # 0x4616f0 <_mi_stats_main+0x1b0>
               	movq	288(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c2a2 <mi_stats_merge_from+0x322>
               	cmpq	$0, 296(%rdi)
               	je	0x42c2d7 <mi_stats_merge_from+0x357>
               	lock
               	addq	%rax, 218038(%rip)      # 0x461660 <_mi_stats_main+0x120>
               	movq	312(%rdi), %rax
               	lock
               	addq	%rax, 218047(%rip)      # 0x461678 <_mi_stats_main+0x138>
               	movq	296(%rdi), %rax
               	lock
               	addq	%rax, 218016(%rip)      # 0x461668 <_mi_stats_main+0x128>
               	movq	304(%rdi), %rax
               	lock
               	addq	%rax, 218009(%rip)      # 0x461670 <_mi_stats_main+0x130>
               	movq	320(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c2ed <mi_stats_merge_from+0x36d>
               	cmpq	$0, 328(%rdi)
               	je	0x42c322 <mi_stats_merge_from+0x3a2>
               	lock
               	addq	%rax, 217995(%rip)      # 0x461680 <_mi_stats_main+0x140>
               	movq	344(%rdi), %rax
               	lock
               	addq	%rax, 218004(%rip)      # 0x461698 <_mi_stats_main+0x158>
               	movq	328(%rdi), %rax
               	lock
               	addq	%rax, 217973(%rip)      # 0x461688 <_mi_stats_main+0x148>
               	movq	336(%rdi), %rax
               	lock
               	addq	%rax, 217966(%rip)      # 0x461690 <_mi_stats_main+0x150>
               	movq	352(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c338 <mi_stats_merge_from+0x3b8>
               	cmpq	$0, 360(%rdi)
               	je	0x42c36d <mi_stats_merge_from+0x3ed>
               	lock
               	addq	%rax, 217952(%rip)      # 0x4616a0 <_mi_stats_main+0x160>
               	movq	376(%rdi), %rax
               	lock
               	addq	%rax, 217961(%rip)      # 0x4616b8 <_mi_stats_main+0x178>
               	movq	360(%rdi), %rax
               	lock
               	addq	%rax, 217930(%rip)      # 0x4616a8 <_mi_stats_main+0x168>
               	movq	368(%rdi), %rax
               	lock
               	addq	%rax, 217923(%rip)      # 0x4616b0 <_mi_stats_main+0x170>
               	movq	448(%rdi), %rax
               	lock
               	addq	%rax, 217988(%rip)      # 0x461700 <_mi_stats_main+0x1c0>
               	movq	456(%rdi), %rax
               	lock
               	addq	%rax, 217981(%rip)      # 0x461708 <_mi_stats_main+0x1c8>
               	movq	464(%rdi), %rax
               	lock
               	addq	%rax, 217974(%rip)      # 0x461710 <_mi_stats_main+0x1d0>
               	movq	472(%rdi), %rax
               	lock
               	addq	%rax, 217967(%rip)      # 0x461718 <_mi_stats_main+0x1d8>
               	movq	480(%rdi), %rax
               	lock
               	addq	%rax, 217960(%rip)      # 0x461720 <_mi_stats_main+0x1e0>
               	movq	488(%rdi), %rax
               	lock
               	addq	%rax, 217953(%rip)      # 0x461728 <_mi_stats_main+0x1e8>
               	movq	496(%rdi), %rax
               	lock
               	addq	%rax, 217946(%rip)      # 0x461730 <_mi_stats_main+0x1f0>
               	movq	504(%rdi), %rax
               	lock
               	addq	%rax, 217939(%rip)      # 0x461738 <_mi_stats_main+0x1f8>
               	movq	512(%rdi), %rax
               	lock
               	addq	%rax, 217932(%rip)      # 0x461740 <_mi_stats_main+0x200>
               	movq	520(%rdi), %rax
               	lock
               	addq	%rax, 217925(%rip)      # 0x461748 <_mi_stats_main+0x208>
               	movq	528(%rdi), %rax
               	lock
               	addq	%rax, 217918(%rip)      # 0x461750 <_mi_stats_main+0x210>
               	movq	536(%rdi), %rax
               	lock
               	addq	%rax, 217911(%rip)      # 0x461758 <_mi_stats_main+0x218>
               	movq	544(%rdi), %rax
               	lock
               	addq	%rax, 217904(%rip)      # 0x461760 <_mi_stats_main+0x220>
               	movq	552(%rdi), %rax
               	lock
               	addq	%rax, 217897(%rip)      # 0x461768 <_mi_stats_main+0x228>
               	movq	560(%rdi), %rax
               	lock
               	addq	%rax, 217890(%rip)      # 0x461770 <_mi_stats_main+0x230>
               	movq	568(%rdi), %rax
               	lock
               	addq	%rax, 217883(%rip)      # 0x461778 <_mi_stats_main+0x238>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	jmp	0x413710 <memset@plt>
               	retq
               	nopw	(%rax,%rax)

<mi_heap_collect_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	testq	%rdi, %rdi
               	je	0x42cf72 <mi_heap_collect_ex+0xb02>
               	movq	%rdi, %r15
               	leaq	197871(%rip), %rax      # 0x45c980 <_mi_heap_empty>
               	cmpq	%rax, %rdi
               	je	0x42cf72 <mi_heap_collect_ex+0xb02>
               	movl	%esi, %ebp
               	movq	(%r15), %rbx
               	movq	(%rbx), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rbx)
               	movq	317208(%rip), %rax      # 0x479bc8 <deferred_free>
               	testq	%rax, %rax
               	je	0x42c4bf <mi_heap_collect_ex+0x4f>
               	cmpb	$0, 8(%rbx)
               	je	0x42c659 <mi_heap_collect_ex+0x1e9>
               	cmpl	$2, %ebp
               	je	0x42c682 <mi_heap_collect_ex+0x212>
               	cmpl	$1, %ebp
               	jne	0x42c6fd <mi_heap_collect_ex+0x28d>
               	movq	210648(%rip), %rax      # 0x45fbb0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42c4ef <mi_heap_collect_ex+0x7f>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42c6fd <mi_heap_collect_ex+0x28d>
               	cmpq	%r15, 16(%rbx)
               	jne	0x42c6fd <mi_heap_collect_ex+0x28d>
               	cmpb	$0, 3048(%r15)
               	jne	0x42c6fd <mi_heap_collect_ex+0x28d>
               	addq	$32, %rbx
               	movq	316910(%rip), %rax      # 0x479b00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c5dc <mi_heap_collect_ex+0x16c>
               	movq	317019(%rip), %rax      # 0x479b80 <abandoned_visited>
               	xorl	%r14d, %r14d
               	testq	%rax, %rax
               	je	0x42c700 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 316998(%rip)      # 0x479b80 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x42c700 <mi_heap_collect_ex+0x290>
               	movq	316854(%rip), %rax      # 0x479b00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c570 <mi_heap_collect_ex+0x100>
               	movq	317031(%rip), %rdx      # 0x479bc0 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 316818(%rip)      # 0x479b00 <abandoned>
               	je	0x42c5cc <mi_heap_collect_ex+0x15c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x42c580 <mi_heap_collect_ex+0x110>
               	movq	316777(%rip), %rax      # 0x479b00 <abandoned>
               	nopw	(%rax,%rax)
               	movq	316953(%rip), %rdx      # 0x479bc0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 316726(%rip)      # 0x479b00 <abandoned>
               	jne	0x42c5a0 <mi_heap_collect_ex+0x130>
               	lock
               	addq	%rdx, 316780(%rip)      # 0x479b40 <abandoned_count>
               	lock
               	subq	%rdx, 316900(%rip)      # 0x479bc0 <abandoned_visited_count>
               	lock
               	addq	$1, 316635(%rip)        # 0x479ac0 <abandoned_readers>
               	movq	316692(%rip), %rax      # 0x479b00 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x42c6f4 <mi_heap_collect_ex+0x284>
               	movq	16(%rdi), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 316647(%rip)      # 0x479b00 <abandoned>
               	jne	0x42c5f0 <mi_heap_collect_ex+0x180>
               	lock
               	subq	$1, 316572(%rip)        # 0x479ac0 <abandoned_readers>
               	movq	$0, 16(%rdi)
               	lock
               	subq	$1, 316683(%rip)        # 0x479b40 <abandoned_count>
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fa40 <mi_segment_reclaim>
               	movq	316597(%rip), %rax      # 0x479b00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	jbe	0x42c51e <mi_heap_collect_ex+0xae>
               	jmp	0x42c5dc <mi_heap_collect_ex+0x16c>
               	movb	$1, 8(%rbx)
               	movq	316772(%rip), %rax      # 0x479bc8 <deferred_free>
               	movq	316773(%rip), %rdx      # 0x479bd0 <deferred_arg>
               	movl	$1, %edi
               	callq	*%rax
               	movq	(%r15), %rbx
               	movb	$0, 8(%rbx)
               	cmpl	$2, %ebp
               	jne	0x42c4c8 <mi_heap_collect_ex+0x58>
               	movb	$1, %r14b
               	cmpq	$0, 3016(%r15)
               	je	0x42c700 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	jmp	0x42c6aa <mi_heap_collect_ex+0x23a>
               	nopw	(%rax,%rax)
               	addq	$1, %rcx
               	cmpq	$75, %rcx
               	je	0x42c700 <mi_heap_collect_ex+0x290>
               	leaq	(%rcx,%rcx,2), %rax
               	movq	1040(%r15,%rax,8), %rdx
               	nopw	%cs:(%rax,%rax)
               	testq	%rdx, %rdx
               	je	0x42c6a0 <mi_heap_collect_ex+0x230>
               	movq	%rdx, %rsi
               	movq	48(%rdx), %rdx
               	movq	32(%rsi), %rax
               	movl	%eax, %edi
               	andl	$3, %edi
               	cmpl	$3, %edi
               	je	0x42c6c0 <mi_heap_collect_ex+0x250>
               	cmpl	$1, %edi
               	je	0x42c6f0 <mi_heap_collect_ex+0x280>
               	movq	%rax, %rdi
               	orq	$3, %rdi
               	lock
               	cmpxchgq	%rdi, 32(%rsi)
               	jne	0x42c6cc <mi_heap_collect_ex+0x25c>
               	jmp	0x42c6c0 <mi_heap_collect_ex+0x250>
               	pause
               	jmp	0x42c6cc <mi_heap_collect_ex+0x25c>
               	lock
               	subq	$1, 316355(%rip)        # 0x479ac0 <abandoned_readers>
               	xorl	%r14d, %r14d
               	movq	2840(%r15), %rax
               	xorl	%ecx, %ecx
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x42c740 <mi_heap_collect_ex+0x2d0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%rcx, 2840(%r15)
               	jne	0x42c710 <mi_heap_collect_ex+0x2a0>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f360 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42c730 <mi_heap_collect_ex+0x2c0>
               	movq	3024(%r15), %rbp
               	cmpq	3032(%r15), %rbp
               	jbe	0x42cb6b <mi_heap_collect_ex+0x6fb>
               	movq	$74, 3024(%r15)
               	movq	$0, 3032(%r15)
               	cmpq	$0, 3016(%r15)
               	movq	%r15, (%rsp)
               	je	0x42cc41 <mi_heap_collect_ex+0x7d1>
               	testb	%r14b, %r14b
               	je	0x42cbd4 <mi_heap_collect_ex+0x764>
               	leaq	1016(%r15), %rax
               	movq	%rax, 8(%rsp)
               	xorl	%eax, %eax
               	leaq	216486(%rip), %r13      # 0x461540 <_mi_stats_main>
               	jmp	0x42c7bd <mi_heap_collect_ex+0x34d>
               	nop
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	addq	$24, 8(%rsp)
               	cmpq	$75, %rax
               	movq	(%rsp), %r15
               	je	0x42cc41 <mi_heap_collect_ex+0x7d1>
               	movq	%rax, 16(%rsp)
               	leaq	(%rax,%rax,2), %rax
               	movq	1040(%r15,%rax,8), %r14
               	testq	%r14, %r14
               	je	0x42c7a0 <mi_heap_collect_ex+0x330>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42c805 <mi_heap_collect_ex+0x395>
               	nopl	(%rax,%rax)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d130 <_mi_page_free>
               	testq	%r14, %r14
               	je	0x42c7a0 <mi_heap_collect_ex+0x330>
               	movq	%r14, %rbx
               	movq	48(%r14), %r14
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42d060 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbx)
               	je	0x42c7f0 <mi_heap_collect_ex+0x380>
               	leaq	48(%rbx), %r10
               	movq	40(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	40(%rbx), %r12
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42c83e <mi_heap_collect_ex+0x3ce>
               	movq	(%r10), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%r10), %r9
               	testq	%r9, %r9
               	je	0x42c84a <mi_heap_collect_ex+0x3da>
               	movq	%rax, 56(%r9)
               	cmpq	%rbx, 8(%r15)
               	je	0x42c860 <mi_heap_collect_ex+0x3f0>
               	cmpq	%rbx, (%r15)
               	jne	0x42ca70 <mi_heap_collect_ex+0x600>
               	jmp	0x42c871 <mi_heap_collect_ex+0x401>
               	nop
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r15)
               	cmpq	%rbx, (%r15)
               	jne	0x42ca70 <mi_heap_collect_ex+0x600>
               	movq	%r9, (%r15)
               	movq	16(%r15), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42ca70 <mi_heap_collect_ex+0x600>
               	testq	%r9, %r9
               	leaq	102066(%rip), %rcx      # 0x445740 <_mi_page_empty>
               	cmoveq	%rcx, %r9
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r9, 8(%r12,%r11,8)
               	je	0x42ca70 <mi_heap_collect_ex+0x600>
               	cmpq	$9, %rax
               	jae	0x42c8b2 <mi_heap_collect_ex+0x442>
               	xorl	%ecx, %ecx
               	jmp	0x42c972 <mi_heap_collect_ex+0x502>
               	cmpq	$64, %rax
               	ja	0x42c8c2 <mi_heap_collect_ex+0x452>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42c8dd <mi_heap_collect_ex+0x46d>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r12), %rbp
               	movq	8(%rsp), %rdx
               	nopw	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42c950 <mi_heap_collect_ex+0x4e0>
               	cmpq	$71, %rax
               	ja	0x42c920 <mi_heap_collect_ex+0x4b0>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x42c950 <mi_heap_collect_ex+0x4e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42c950 <mi_heap_collect_ex+0x4e0>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r13
               	movl	%r13d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r13,4), %ecx
               	leaq	216051(%rip), %r13      # 0x461540 <_mi_stats_main>
               	addb	$-3, %cl
               	cmpq	%rbp, %rdx
               	jbe	0x42c95e <mi_heap_collect_ex+0x4ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r8b
               	je	0x42c8f0 <mi_heap_collect_ex+0x480>
               	leaq	1(%rdi), %rcx
               	cmpq	%r11, %rdi
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42ca70 <mi_heap_collect_ex+0x600>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42ca60 <mi_heap_collect_ex+0x5f0>
               	movq	%r8, %rdi
               	andq	$-4, %rdi
               	movq	%r9, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%rdi), %rbp
               	movq	%rbp, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rbp
               	jae	0x42c9b5 <mi_heap_collect_ex+0x545>
               	xorl	%ebp, %ebp
               	jmp	0x42ca12 <mi_heap_collect_ex+0x5a2>
               	leaq	(%r12,%rcx,8), %r13
               	addq	$120, %r13
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbp,8)
               	movdqu	%xmm0, -96(%r13,%rbp,8)
               	movdqu	%xmm0, -80(%r13,%rbp,8)
               	movdqu	%xmm0, -64(%r13,%rbp,8)
               	movdqu	%xmm0, -48(%r13,%rbp,8)
               	movdqu	%xmm0, -32(%r13,%rbp,8)
               	movdqu	%xmm0, -16(%r13,%rbp,8)
               	movdqu	%xmm0, (%r13,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdx
               	jne	0x42c9d0 <mi_heap_collect_ex+0x560>
               	testq	%rax, %rax
               	je	0x42ca42 <mi_heap_collect_ex+0x5d2>
               	addq	%rcx, %rbp
               	leaq	(%r12,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	nopl	(%rax)
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42ca30 <mi_heap_collect_ex+0x5c0>
               	cmpq	%rdi, %r8
               	leaq	215796(%rip), %r13      # 0x461540 <_mi_stats_main>
               	je	0x42ca70 <mi_heap_collect_ex+0x600>
               	addq	%rdi, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r9, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42ca60 <mi_heap_collect_ex+0x5f0>
               	nop
               	movq	3016(%r12), %rax
               	addq	$-1, %rax
               	movq	%rax, 3016(%r12)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r10)
               	movb	6(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 6(%rbx)
               	movq	$0, 40(%rbx)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	144(%rsi), %rdx
               	leaq	224(%rdx), %rcx
               	cmpq	%r13, %rcx
               	jb	0x42cb20 <mi_heap_collect_ex+0x6b0>
               	leaq	216242(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42cb20 <mi_heap_collect_ex+0x6b0>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 248(%rdx)
               	leaq	1(%rdi), %rbp
               	movq	240(%rdx), %rax
               	cmpq	%rdi, %rax
               	jg	0x42cb00 <mi_heap_collect_ex+0x690>
               	lock
               	cmpxchgq	%rbp, 240(%rdx)
               	jne	0x42caf0 <mi_heap_collect_ex+0x680>
               	lock
               	addq	$1, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42c800 <mi_heap_collect_ex+0x390>
               	jmp	0x42cb5a <mi_heap_collect_ex+0x6ea>
               	nopl	(%rax,%rax)
               	movq	248(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 248(%rdx)
               	cmpq	240(%rdx), %rdi
               	jl	0x42cb42 <mi_heap_collect_ex+0x6d2>
               	movq	%rax, 240(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42c800 <mi_heap_collect_ex+0x390>
               	addq	$32, %rsi
               	movq	%rbx, %rdi
               	callq	0x42ede0 <mi_segment_abandon>
               	jmp	0x42c800 <mi_heap_collect_ex+0x390>
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	leaq	(%r15,%rax,8), %rbx
               	addq	$1040, %rbx             # imm = 0x410
               	jmp	0x42cba5 <mi_heap_collect_ex+0x735>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopl	(%rax)
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r15), %rbp
               	ja	0x42c754 <mi_heap_collect_ex+0x2e4>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42cb90 <mi_heap_collect_ex+0x720>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x42cb90 <mi_heap_collect_ex+0x720>
               	cmpl	$0, 16(%rax)
               	jne	0x42cb83 <mi_heap_collect_ex+0x713>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42d130 <_mi_page_free>
               	jmp	0x42cb90 <mi_heap_collect_ex+0x720>
               	xorl	%r14d, %r14d
               	jmp	0x42cbee <mi_heap_collect_ex+0x77e>
               	nopl	(%rax)
               	addq	$1, %r14
               	cmpq	$75, %r14
               	movq	(%rsp), %r15
               	je	0x42cc41 <mi_heap_collect_ex+0x7d1>
               	leaq	(%r14,%r14,2), %rax
               	movq	1040(%r15,%rax,8), %rbp
               	testq	%rbp, %rbp
               	je	0x42cbe0 <mi_heap_collect_ex+0x770>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42cc18 <mi_heap_collect_ex+0x7a8>
               	movq	%rbx, %rbp
               	testq	%rbx, %rbx
               	je	0x42cbe0 <mi_heap_collect_ex+0x770>
               	movq	48(%rbp), %rbx
               	movq	%rbp, %rdi
               	movl	$1, %esi
               	callq	0x42d060 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbp)
               	jne	0x42cc10 <mi_heap_collect_ex+0x7a0>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d130 <_mi_page_free>
               	jmp	0x42cc10 <mi_heap_collect_ex+0x7a0>
               	movq	(%r15), %r15
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42cf4b <mi_heap_collect_ex+0xadb>
               	leaq	215269(%rip), %rbx      # 0x461540 <_mi_stats_main>
               	movl	$1, %r13d
               	jmp	0x42cc9c <mi_heap_collect_ex+0x82c>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	movq	(%r14), %rdx
               	andb	$1, %r12b
               	movzbl	%al, %r8d
               	movzbl	%r12b, %ecx
               	movq	%r14, %rdi
               	callq	0x42db70 <_mi_mem_free>
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42cf4b <mi_heap_collect_ex+0xadb>
               	movq	120(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 120(%r15)
               	movq	24(%r14), %rax
               	movq	%rax, 136(%r15)
               	movq	$0, 24(%r14)
               	movq	144(%r15), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rbx, %rax
               	jb	0x42cd20 <mi_heap_collect_ex+0x8b0>
               	leaq	215719(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42cd20 <mi_heap_collect_ex+0x8b0>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42cd10 <mi_heap_collect_ex+0x8a0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42cd00 <mi_heap_collect_ex+0x890>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42cd54 <mi_heap_collect_ex+0x8e4>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42cd42 <mi_heap_collect_ex+0x8d2>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	72(%r14), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r14)
               	movq	144(%r15), %rcx
               	cmpq	%rbx, %rcx
               	setae	%dl
               	leaq	215566(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42cdc0 <mi_heap_collect_ex+0x950>
               	testb	%al, %al
               	je	0x42ce00 <mi_heap_collect_ex+0x990>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jge	0x42cdad <mi_heap_collect_ex+0x93d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42cda0 <mi_heap_collect_ex+0x930>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42ce22 <mi_heap_collect_ex+0x9b2>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42cf0f <mi_heap_collect_ex+0xa9f>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42cded <mi_heap_collect_ex+0x97d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42cde0 <mi_heap_collect_ex+0x970>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42cf2f <mi_heap_collect_ex+0xabf>
               	nopw	(%rax,%rax)
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42ce16 <mi_heap_collect_ex+0x9a6>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	jbe	0x42ce3b <mi_heap_collect_ex+0x9cb>
               	movq	%rax, 96(%r15)
               	movq	104(%r15), %rax
               	subq	%rsi, %rax
               	movq	%rax, 104(%r15)
               	cmpq	112(%r15), %rax
               	jbe	0x42ce50 <mi_heap_collect_ex+0x9e0>
               	movq	%rax, 112(%r15)
               	movq	64(%r14), %r10
               	testq	%r10, %r10
               	je	0x42cc70 <mi_heap_collect_ex+0x800>
               	cmpq	$1, %r10
               	jne	0x42ce70 <mi_heap_collect_ex+0xa00>
               	movb	$1, %r12b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42cec4 <mi_heap_collect_ex+0xa54>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r14), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r12b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42ce90 <mi_heap_collect_ex+0xa20>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42cee0 <mi_heap_collect_ex+0xa70>
               	shlq	$6, %r8
               	movb	121(%r14,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r12b
               	testb	$1, %al
               	je	0x42cc73 <mi_heap_collect_ex+0x803>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r12b, %r12d
               	movl	$0, %eax
               	cmovnel	%eax, %r12d
               	movb	$1, %al
               	jmp	0x42cc75 <mi_heap_collect_ex+0x805>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42cf25 <mi_heap_collect_ex+0xab5>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	ja	0x42ce37 <mi_heap_collect_ex+0x9c7>
               	jmp	0x42ce3b <mi_heap_collect_ex+0x9cb>
               	movq	207966(%rip), %rax      # 0x45fbb0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	movq	(%rsp), %rdx
               	je	0x42cf69 <mi_heap_collect_ex+0xaf9>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42cf72 <mi_heap_collect_ex+0xb02>
               	movq	(%rdx), %rax
               	cmpq	%rdx, 16(%rax)
               	je	0x42cf81 <mi_heap_collect_ex+0xb11>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	248616(%rip), %r14      # 0x469ab0 <regions_count>
               	testq	%r14, %r14
               	je	0x42cf72 <mi_heap_collect_ex+0xb02>
               	xorl	%ebp, %ebp
               	leaq	248618(%rip), %r15      # 0x469ac0 <regions>
               	movq	$-1, %rbx
               	jmp	0x42cfc9 <mi_heap_collect_ex+0xb59>
               	xorl	%ecx, %ecx
               	cmpq	$-1, %rax
               	sete	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	callq	0x42d3b0 <_mi_arena_free>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	addq	$1, %rbp
               	cmpq	%r14, %rbp
               	je	0x42cf72 <mi_heap_collect_ex+0xb02>
               	movq	%rbp, %rcx
               	shlq	$6, %rcx
               	movq	(%rcx,%r15), %rax
               	testq	%rax, %rax
               	je	0x42cfc0 <mi_heap_collect_ex+0xb50>
               	leaq	(%r15,%rcx), %rsi
               	leaq	(%rcx,%r15), %rdx
               	addq	$16, %rdx
               	movq	16(%rcx,%r15), %rax
               	nop
               	testq	%rax, %rax
               	jne	0x42cfc0 <mi_heap_collect_ex+0xb50>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, (%rdx)
               	jne	0x42cff0 <mi_heap_collect_ex+0xb80>
               	movq	8(%rcx,%r15), %rdi
               	movq	48(%rcx,%r15), %rdx
               	movq	32(%rcx,%r15), %rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 48(%rsi)
               	movdqa	%xmm0, 32(%rsi)
               	movdqa	%xmm0, 16(%rsi)
               	movdqa	%xmm0, (%rsi)
               	movq	$0, (%rsi)
               	testq	%rdi, %rdi
               	je	0x42cfc0 <mi_heap_collect_ex+0xb50>
               	movq	313993(%rip), %rcx      # 0x479ac0 <abandoned_readers>
               	testq	%rcx, %rcx
               	je	0x42cf9f <mi_heap_collect_ex+0xb2f>
               	pause
               	movq	313975(%rip), %rcx      # 0x479ac0 <abandoned_readers>
               	testq	%rcx, %rcx
               	jne	0x42d040 <mi_heap_collect_ex+0xbd0>
               	jmp	0x42cf9f <mi_heap_collect_ex+0xb2f>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free_collect>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	testl	%esi, %esi
               	jne	0x42d076 <_mi_page_free_collect+0x16>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x42d0c9 <_mi_page_free_collect+0x69>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x42d080 <_mi_page_free_collect+0x20>
               	andq	$-4, %rcx
               	je	0x42d0c9 <_mi_page_free_collect+0x69>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x42d0b2 <_mi_page_free_collect+0x52>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x42d0a0 <_mi_page_free_collect+0x40>
               	cmpl	%edx, %eax
               	jbe	0x42d0f6 <_mi_page_free_collect+0x96>
               	leaq	96753(%rip), %rsi       # 0x444aae <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42d0ef <_mi_page_free_collect+0x8f>
               	movq	8(%rbx), %rcx
               	testq	%rcx, %rcx
               	jne	0x42d114 <_mi_page_free_collect+0xb4>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x42d0d2 <_mi_page_free_collect+0x72>
               	jmp	0x42d0ef <_mi_page_free_collect+0x8f>
               	testb	%bpl, %bpl
               	je	0x42d0ef <_mi_page_free_collect+0x8f>
               	movq	%rax, %rsi
               	movq	%rsi, %rdx
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	jne	0x42d11c <_mi_page_free_collect+0xbc>
               	movq	%rcx, (%rdx)
               	jmp	0x42d0db <_mi_page_free_collect+0x7b>
               	nopl	(%rax)

<_mi_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %rax
               	movq	(%rax), %r8
               	movq	40(%rdi), %r14
               	movq	56(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x42d15c <_mi_page_free+0x2c>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rcx)
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42d169 <_mi_page_free+0x39>
               	movq	%rcx, 56(%rax)
               	cmpq	%rdi, 8(%rsi)
               	je	0x42d17e <_mi_page_free+0x4e>
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d36e <_mi_page_free+0x23e>
               	jmp	0x42d193 <_mi_page_free+0x63>
               	movq	56(%rdi), %rcx
               	movq	%rcx, 8(%rsi)
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d36e <_mi_page_free+0x23e>
               	movq	%rax, (%rsi)
               	movq	16(%rsi), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42d36e <_mi_page_free+0x23e>
               	testq	%rax, %rax
               	leaq	99727(%rip), %r10       # 0x445740 <_mi_page_empty>
               	cmovneq	%rax, %r10
               	leaq	7(%rcx), %r11
               	shrq	$3, %r11
               	cmpq	%r10, 8(%r14,%r11,8)
               	je	0x42d36e <_mi_page_free+0x23e>
               	cmpq	$9, %rcx
               	jae	0x42d1d5 <_mi_page_free+0xa5>
               	xorl	%ecx, %ecx
               	jmp	0x42d292 <_mi_page_free+0x162>
               	cmpq	$64, %rcx
               	ja	0x42d1e5 <_mi_page_free+0xb5>
               	leal	1(%r11), %r15d
               	andb	$-2, %r15b
               	jmp	0x42d200 <_mi_page_free+0xd0>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rbx,4), %r15d
               	addb	$-3, %r15b
               	leaq	1040(%r14), %rax
               	addq	$-24, %rsi
               	nopl	(%rax,%rax)
               	movq	16(%rsi), %rbx
               	addq	$7, %rbx
               	movq	%rbx, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rbx
               	jb	0x42d270 <_mi_page_free+0x140>
               	cmpq	$71, %rbx
               	ja	0x42d240 <_mi_page_free+0x110>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x42d270 <_mi_page_free+0x140>
               	movb	$73, %cl
               	cmpq	$2097159, %rbx          # imm = 0x200007
               	ja	0x42d270 <_mi_page_free+0x140>
               	leaq	-1(%rbp), %rbx
               	bsrq	%rbx, %r12
               	movl	%r12d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rbx
               	andl	$3, %ebx
               	leal	(%rbx,%r12,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rsi
               	jbe	0x42d27e <_mi_page_free+0x14e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r15b
               	je	0x42d210 <_mi_page_free+0xe0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r11, %rbp
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42d36e <_mi_page_free+0x23e>
               	addq	$1, %r11
               	movq	%r11, %r12
               	subq	%rcx, %r12
               	cmpq	$4, %r12
               	jb	0x42d360 <_mi_page_free+0x230>
               	movq	%r12, %r15
               	andq	$-4, %r15
               	movq	%r10, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r15), %rsi
               	movq	%rsi, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x42d2d5 <_mi_page_free+0x1a5>
               	xorl	%ebx, %ebx
               	jmp	0x42d329 <_mi_page_free+0x1f9>
               	leaq	(%r14,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42d2f0 <_mi_page_free+0x1c0>
               	testq	%rbp, %rbp
               	je	0x42d352 <_mi_page_free+0x222>
               	addq	%rcx, %rbx
               	leaq	(%r14,%rbx,8), %rax
               	addq	$24, %rax
               	negq	%rbp
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbp
               	jne	0x42d340 <_mi_page_free+0x210>
               	cmpq	%r15, %r12
               	je	0x42d36e <_mi_page_free+0x23e>
               	addq	%r15, %rcx
               	nop
               	movq	%r10, 8(%r14,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42d360 <_mi_page_free+0x230>
               	addq	$32, %r8
               	movq	3016(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 3016(%r14)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r9)
               	movb	6(%rdi), %al
               	andb	$-2, %al
               	movb	%al, 6(%rdi)
               	movq	$0, 40(%rdi)
               	movzbl	%dl, %esi
               	movq	%r8, %rdx
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42dfb0 <_mi_segment_page_free>

<_mi_arena_free>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x42d466 <_mi_arena_free+0xb6>
               	movq	%rsi, %r14
               	testq	%rsi, %rsi
               	je	0x42d466 <_mi_arena_free+0xb6>
               	movq	%rdx, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	je	0x42d474 <_mi_arena_free+0xc4>
               	movzbl	%bl, %eax
               	leaq	214037(%rip), %rcx      # 0x461800 <mi_arenas>
               	movq	-8(%rcx,%rax,8), %r12
               	testq	%r12, %r12
               	je	0x42d48f <_mi_arena_free+0xdf>
               	movq	%rbx, %rax
               	shrq	$14, %rax
               	cmpq	%rax, 16(%r12)
               	jbe	0x42d498 <_mi_arena_free+0xe8>
               	shrq	$8, %rbx
               	leaq	16777215(%r14), %rsi
               	movq	%rsi, %r13
               	shrq	$24, %r13
               	cmpb	$0, 29(%r12)
               	jne	0x42d450 <_mi_arena_free+0xa0>
               	andq	$-16777216, %rsi        # imm = 0xFF000000
               	leaq	15(%rsp), %r8
               	movq	%r15, %rdi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42d860 <mi_os_commitx>
               	movq	48(%r12), %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d4f0 <_mi_bitmap_unclaim_across>
               	addq	$56, %r12
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d4f0 <_mi_bitmap_unclaim_across>
               	testb	%al, %al
               	je	0x42d4c1 <_mi_arena_free+0x111>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movzbl	%cl, %edx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42b7f0 <_mi_os_free_ex>
               	leaq	95458(%rip), %rsi       # 0x444978 <typeinfo name for kotlin::gc::GCSchedulerData+0x14cf>
               	jmp	0x42d49f <_mi_arena_free+0xef>
               	leaq	95517(%rip), %rsi       # 0x4449bc <typeinfo name for kotlin::gc::GCSchedulerData+0x1513>
               	movl	$22, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	movq	%rbx, %r8
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42be20 <_mi_error_message>
               	leaq	95550(%rip), %rsi       # 0x444a06 <typeinfo name for kotlin::gc::GCSchedulerData+0x155d>
               	movl	$11, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42be20 <_mi_error_message>
               	nopw	(%rax,%rax)

<_mi_bitmap_unclaim_across>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x42d7f3 <_mi_bitmap_unclaim_across+0x303>
               	cmpq	$63, %rsi
               	jbe	0x42d51b <_mi_bitmap_unclaim_across+0x2b>
               	movq	$-1, %rbp
               	jmp	0x42d538 <_mi_bitmap_unclaim_across+0x48>
               	testq	%rsi, %rsi
               	je	0x42d7e9 <_mi_bitmap_unclaim_across+0x2f9>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r9d, %r9d
               	xorl	%r8d, %r8d
               	xorl	%ebx, %ebx
               	leaq	(%rdi,%rax,8), %r11
               	movq	%rbp, %rcx
               	notq	%rcx
               	movq	(%rdi,%rax,8), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d550 <_mi_bitmap_unclaim_across+0x60>
               	andq	%rbp, %rax
               	cmpq	%rbp, %rax
               	sete	%r10b
               	addq	$8, %r11
               	testq	%rbx, %rbx
               	je	0x42d7af <_mi_bitmap_unclaim_across+0x2bf>
               	movq	%r9, %rcx
               	notq	%rcx
               	leaq	-1(%rbx), %rdx
               	movq	%rbx, %rsi
               	andq	$3, %rsi
               	je	0x42d5c9 <_mi_bitmap_unclaim_across+0xd9>
               	xorl	%edi, %edi
               	nopl	(%rax)
               	movq	(%r11), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rbp
               	andq	%rcx, %rbp
               	lock
               	cmpxchgq	%rbp, (%r11)
               	jne	0x42d5a0 <_mi_bitmap_unclaim_across+0xb0>
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edi, %r10d
               	addq	$8, %r11
               	addq	$-1, %rsi
               	jne	0x42d590 <_mi_bitmap_unclaim_across+0xa0>
               	andq	$-4, %rbx
               	cmpq	$3, %rdx
               	jb	0x42d7af <_mi_bitmap_unclaim_across+0x2bf>
               	leaq	-4(%rbx), %rdi
               	testb	$4, %dil
               	jne	0x42d678 <_mi_bitmap_unclaim_across+0x188>
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d5f0 <_mi_bitmap_unclaim_across+0x100>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rbx
               	andq	%rcx, %rbx
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rbx, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d610 <_mi_bitmap_unclaim_across+0x120>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rbx
               	andq	%rcx, %rbx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rbx, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d630 <_mi_bitmap_unclaim_across+0x140>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 24(%r11)
               	jne	0x42d650 <_mi_bitmap_unclaim_across+0x160>
               	andq	%rsi, %rax
               	andq	%r9, %rax
               	xorl	%edx, %edx
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edx, %r10d
               	addq	$32, %r11
               	movq	%rdi, %rbx
               	cmpq	$4, %rdi
               	jb	0x42d7af <_mi_bitmap_unclaim_across+0x2bf>
               	xorl	%r14d, %r14d
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d6a0 <_mi_bitmap_unclaim_across+0x1b0>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d6c0 <_mi_bitmap_unclaim_across+0x1d0>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d6e0 <_mi_bitmap_unclaim_across+0x1f0>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rdx
               	nop
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 24(%r11)
               	movq	%rax, %rdx
               	jne	0x42d700 <_mi_bitmap_unclaim_across+0x210>
               	andq	%rsi, %rdx
               	movq	32(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 32(%r11)
               	movq	%rax, %rsi
               	jne	0x42d720 <_mi_bitmap_unclaim_across+0x230>
               	movq	40(%r11), %rbp
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	andq	%rcx, %rdi
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdi, 40(%r11)
               	movq	%rax, %rbp
               	jne	0x42d740 <_mi_bitmap_unclaim_across+0x250>
               	andq	%rsi, %rbp
               	movq	48(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 48(%r11)
               	movq	%rax, %rsi
               	jne	0x42d760 <_mi_bitmap_unclaim_across+0x270>
               	andq	%rbp, %rsi
               	addq	$-8, %rbx
               	movq	56(%r11), %rax
               	nop
               	movq	%rax, %rdi
               	andq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 56(%r11)
               	jne	0x42d780 <_mi_bitmap_unclaim_across+0x290>
               	andq	%rsi, %rax
               	andq	%rdx, %rax
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%r14d, %r10d
               	addq	$64, %r11
               	testq	%rbx, %rbx
               	jne	0x42d690 <_mi_bitmap_unclaim_across+0x1a0>
               	testq	%r8, %r8
               	je	0x42d7dd <_mi_bitmap_unclaim_across+0x2ed>
               	movq	%r8, %rcx
               	notq	%rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d7c0 <_mi_bitmap_unclaim_across+0x2d0>
               	andq	%r8, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%ecx, %r10d
               	andb	$1, %r10b
               	movl	%r10d, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	xorl	%r9d, %r9d
               	xorl	%ebp, %ebp
               	jmp	0x42d53b <_mi_bitmap_unclaim_across+0x4b>
               	movl	$64, %r10d
               	subq	%rdx, %r10
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r9
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r8d, %r8d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r10, %rsi
               	movq	%rsi, %rbx
               	shrq	$6, %rbx
               	andq	$63, %rsi
               	je	0x42d540 <_mi_bitmap_unclaim_across+0x50>
               	movq	$-1, %r9
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x42d540 <_mi_bitmap_unclaim_across+0x50>
               	nopl	(%rax)

<mi_os_commitx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%edx, %r14d
               	testq	%r8, %r8
               	je	0x42d874 <mi_os_commitx+0x14>
               	movb	$0, (%r8)
               	movb	$1, %r15b
               	testq	%rdi, %rdi
               	je	0x42db58 <mi_os_commitx+0x2f8>
               	testq	%rsi, %rsi
               	je	0x42db58 <mi_os_commitx+0x2f8>
               	movq	206568(%rip), %rbp      # 0x45ff78 <os_page_size>
               	movq	%rbp, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %rdx # imm = 0x5555555555555555
               	andq	%rax, %rdx
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	movabsq	$3689348814741910323, %rdx # imm = 0x3333333333333333
               	movq	%rax, %rbx
               	andq	%rdx, %rbx
               	shrq	$2, %rax
               	andq	%rdx, %rax
               	addq	%rbx, %rax
               	movq	%rax, %rdx
               	shrq	$4, %rdx
               	addq	%rax, %rdx
               	movabsq	$1085102592571150095, %rbx # imm = 0xF0F0F0F0F0F0F0F
               	andq	%rdx, %rbx
               	movabsq	$72340172838076673, %rax # imm = 0x101010101010101
               	imulq	%rbx, %rax
               	shrq	$56, %rax
               	testb	%cl, %cl
               	je	0x42d91d <mi_os_commitx+0xbd>
               	leaq	(%rdi,%rbp), %r12
               	addq	$-1, %r12
               	cmpl	$2, %eax
               	jae	0x42d94d <mi_os_commitx+0xed>
               	negq	%rbp
               	andq	%rbp, %r12
               	addq	%rsi, %rdi
               	andq	%rbp, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42d9fd <mi_os_commitx+0x19d>
               	jmp	0x42db58 <mi_os_commitx+0x2f8>
               	cmpl	$2, %eax
               	jae	0x42d963 <mi_os_commitx+0x103>
               	movq	%rbp, %rax
               	negq	%rax
               	movq	%rax, %r12
               	andq	%rdi, %r12
               	addq	%rsi, %rdi
               	leaq	(%rdi,%rbp), %rbx
               	addq	$-1, %rbx
               	andq	%rax, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42d9fd <mi_os_commitx+0x19d>
               	jmp	0x42db58 <mi_os_commitx+0x2f8>
               	movq	%r12, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42d97c <mi_os_commitx+0x11c>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42d983 <mi_os_commitx+0x123>
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42d99f <mi_os_commitx+0x13f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rcx
               	jmp	0x42d9a7 <mi_os_commitx+0x147>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %r12
               	addq	%rsi, %rdi
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42d9c9 <mi_os_commitx+0x169>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42d9cf <mi_os_commitx+0x16f>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ecx
               	leaq	(%rdi,%rsi), %rax
               	leaq	(%rax,%rbp), %rbx
               	addq	$-1, %rbx
               	movq	%rbx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42d9e2 <mi_os_commitx+0x182>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42d9e8 <mi_os_commitx+0x188>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42d9fd <mi_os_commitx+0x19d>
               	jmp	0x42db58 <mi_os_commitx+0x2f8>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rcx, %rdi
               	subq	%rdx, %rbx
               	movq	%rdi, %r12
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jle	0x42db58 <mi_os_commitx+0x2f8>
               	movq	%rsi, %rcx
               	testb	%r14b, %r14b
               	je	0x42da64 <mi_os_commitx+0x204>
               	lock
               	xaddq	%rcx, 211878(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	addq	%rsi, %rcx
               	movq	211860(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42da30 <mi_os_commitx+0x1d0>
               	lock
               	cmpxchgq	%rcx, 211842(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42da20 <mi_os_commitx+0x1c0>
               	testq	%rsi, %rsi
               	jle	0x42da9f <mi_os_commitx+0x23f>
               	lock
               	addq	%rsi, 211811(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	leaq	211708(%rip), %rax      # 0x461540 <_mi_stats_main>
               	leaq	212181(%rip), %rcx      # 0x461720 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jb	0x42dabd <mi_os_commitx+0x25d>
               	lock
               	addq	$1, 212175(%rip)        # 0x461728 <_mi_stats_main+0x1e8>
               	lock
               	addq	$1, 212158(%rip)        # 0x461720 <_mi_stats_main+0x1e0>
               	jmp	0x42dae1 <mi_os_commitx+0x281>
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 211781(%rip)      # 0x4615b8 <_mi_stats_main+0x78>
               	subq	%rsi, %rdx
               	movq	211763(%rip), %rax      # 0x4615b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42da90 <mi_os_commitx+0x230>
               	lock
               	cmpxchgq	%rdx, 211746(%rip)      # 0x4615b0 <_mi_stats_main+0x70>
               	jne	0x42da80 <mi_os_commitx+0x220>
               	testq	%rsi, %rsi
               	js	0x42daf7 <mi_os_commitx+0x297>
               	lock
               	addq	%rsi, 211723(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	jmp	0x42daff <mi_os_commitx+0x29f>
               	negq	%rsi
               	lock
               	addq	%rsi, 211710(%rip)      # 0x4615a8 <_mi_stats_main+0x68>
               	leaq	211599(%rip), %rax      # 0x461540 <_mi_stats_main>
               	leaq	212072(%rip), %rcx      # 0x461720 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jae	0x42da50 <mi_os_commitx+0x1f0>
               	movq	212068(%rip), %rax      # 0x461728 <_mi_stats_main+0x1e8>
               	addq	$1, %rax
               	movq	%rax, 212057(%rip)      # 0x461728 <_mi_stats_main+0x1e8>
               	movq	212042(%rip), %rax      # 0x461720 <_mi_stats_main+0x1e0>
               	addq	$1, %rax
               	movq	%rax, 212031(%rip)      # 0x461720 <_mi_stats_main+0x1e0>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	0x4138d0 <mprotect@plt>
               	testl	%eax, %eax
               	jne	0x42db1f <mi_os_commitx+0x2bf>
               	jmp	0x42db58 <mi_os_commitx+0x2f8>
               	lock
               	addq	%rcx, 211617(%rip)      # 0x4615a0 <_mi_stats_main+0x60>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	$16434, %ecx            # imm = 0x4032
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	%r12, %rax
               	je	0x42db58 <mi_os_commitx+0x2f8>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %r8d
               	testl	%r8d, %r8d
               	je	0x42db58 <mi_os_commitx+0x2f8>
               	leaq	93960(%rip), %rax       # 0x444a3b <typeinfo name for kotlin::gc::GCSchedulerData+0x1592>
               	leaq	93960(%rip), %rsi       # 0x444a42 <typeinfo name for kotlin::gc::GCSchedulerData+0x1599>
               	testb	%r14b, %r14b
               	cmovneq	%rax, %rsi
               	leaq	93955(%rip), %rdi       # 0x444a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x15a2>
               	xorl	%r15d, %r15d
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movl	%r15d, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_mem_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42dce7 <_mi_mem_free+0x177>
               	testq	%rsi, %rsi
               	je	0x42dce7 <_mi_mem_free+0x177>
               	movq	%rdx, %rbx
               	movq	%rdi, %r14
               	movq	205790(%rip), %rdi      # 0x45ff78 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%rsi,%rdi), %r15
               	addq	$-1, %r15
               	testq	%rax, %rdi
               	jne	0x42dbdb <_mi_mem_free+0x6b>
               	negq	%rdi
               	andq	%rdi, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	je	0x42dc06 <_mi_mem_free+0x96>
               	movzbl	%cl, %ecx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42d3b0 <_mi_arena_free>
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x42dbf1 <_mi_mem_free+0x81>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x42dbf8 <_mi_mem_free+0x88>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rdx, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	jne	0x42dbbc <_mi_mem_free+0x4c>
               	cmpq	$67108864, %r15         # imm = 0x4000000
               	ja	0x42dce7 <_mi_mem_free+0x177>
               	shrq	$7, %rbx
               	andl	$63, %r12d
               	leaq	4194303(%r15), %rbp
               	movq	%rbp, %r13
               	shrq	$22, %r13
               	shlq	$6, %rbx
               	leaq	245388(%rip), %rdi      # 0x469ac0 <regions>
               	movq	(%rbx,%rdi), %rax
               	movq	8(%rbx,%rdi), %rdx
               	leaq	(%r12,%r13), %rsi
               	cmpq	$64, %rsi
               	ja	0x42dce7 <_mi_mem_free+0x177>
               	movq	%r12, %rsi
               	shlq	$22, %rsi
               	addq	%rsi, %rdx
               	cmpq	%r14, %rdx
               	jne	0x42dce7 <_mi_mem_free+0x177>
               	testl	$4194303, %r15d         # imm = 0x3FFFFF
               	jne	0x42dc8e <_mi_mem_free+0x11e>
               	testb	%cl, %cl
               	je	0x42dc8e <_mi_mem_free+0x11e>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 32(%rbx,%rdi)
               	testb	%r8b, %r8b
               	je	0x42dcb6 <_mi_mem_free+0x146>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 40(%rbx,%rdi)
               	testl	$768, %eax              # imm = 0x300
               	je	0x42dcf6 <_mi_mem_free+0x186>
               	leaq	(%rbx,%rdi), %rax
               	addq	$16, %rax
               	movq	$-1, %rdx
               	testq	%r13, %r13
               	je	0x42dce3 <_mi_mem_free+0x173>
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	lock
               	andq	%rdx, (%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$12, %edi
               	callq	0x42a9c0 <mi_option_get>
               	leaq	245177(%rip), %rdi      # 0x469ac0 <regions>
               	testq	%rax, %rax
               	je	0x42dcbd <_mi_mem_free+0x14d>
               	movl	$3, %edi
               	callq	0x42a9c0 <mi_option_get>
               	leaq	245155(%rip), %rdi      # 0x469ac0 <regions>
               	testq	%rax, %rax
               	jne	0x42dd38 <_mi_mem_free+0x1c8>
               	movl	$5, %edi
               	callq	0x42a9c0 <mi_option_get>
               	leaq	245133(%rip), %rdi      # 0x469ac0 <regions>
               	testq	%rax, %rax
               	je	0x42dcbd <_mi_mem_free+0x14d>
               	leaq	(%rbx,%rdi), %rsi
               	addq	$40, %rsi
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	movq	40(%rbx,%rdi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdx, %rcx
               	lock
               	cmpxchgq	%rcx, (%rsi)
               	jne	0x42dd70 <_mi_mem_free+0x200>
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	je	0x42dcbd <_mi_mem_free+0x14d>
               	movq	310576(%rip), %rax      # 0x479ac0 <abandoned_readers>
               	testq	%rax, %rax
               	je	0x42dda3 <_mi_mem_free+0x233>
               	pause
               	movq	310562(%rip), %rax      # 0x479ac0 <abandoned_readers>
               	testq	%rax, %rax
               	jne	0x42dd95 <_mi_mem_free+0x225>
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%r14, %rdi
               	movq	%rbp, %rsi
               	callq	0x42dde0 <_mi_os_reset>
               	leaq	244996(%rip), %rax      # 0x469ac0 <regions>
               	addq	%rbx, %rax
               	addq	$16, %rax
               	cmpq	$264241152, %r15        # imm = 0xFC00000
               	jbe	0x42dcc5 <_mi_mem_free+0x155>
               	xorl	%edx, %edx
               	jmp	0x42dce3 <_mi_mem_free+0x173>
               	nopw	(%rax,%rax)

<_mi_os_reset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	movl	$5, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42de20 <_mi_os_reset+0x40>
               	leaq	7(%rsp), %r8
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42d860 <mi_os_commitx>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%r12, %r12
               	je	0x42de14 <_mi_os_reset+0x34>
               	testq	%r15, %r15
               	je	0x42de14 <_mi_os_reset+0x34>
               	movq	205127(%rip), %rsi      # 0x45ff78 <os_page_size>
               	leaq	-1(%rsi), %rax
               	leaq	(%r12,%rsi), %r14
               	addq	$-1, %r14
               	testq	%rax, %rsi
               	jne	0x42de58 <_mi_os_reset+0x78>
               	negq	%rsi
               	andq	%rsi, %r14
               	addq	%r15, %r12
               	andq	%rsi, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jg	0x42deac <_mi_os_reset+0xcc>
               	jmp	0x42de14 <_mi_os_reset+0x34>
               	movq	%r14, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42de71 <_mi_os_reset+0x91>
               	movq	%r14, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rcx
               	jmp	0x42de7a <_mi_os_reset+0x9a>
               	movl	%r14d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ecx
               	addq	%r15, %r12
               	movq	%r12, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42de93 <_mi_os_reset+0xb3>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42de9a <_mi_os_reset+0xba>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	subq	%rcx, %r14
               	subq	%rdx, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jle	0x42de14 <_mi_os_reset+0x34>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 210720(%rip)      # 0x4615d8 <_mi_stats_main+0x98>
               	addq	%r12, %rcx
               	movq	210702(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x90>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42dee0 <_mi_os_reset+0x100>
               	lock
               	cmpxchgq	%rcx, 210674(%rip)      # 0x4615d0 <_mi_stats_main+0x90>
               	jne	0x42ded0 <_mi_os_reset+0xf0>
               	testq	%r12, %r12
               	jle	0x42deef <_mi_os_reset+0x10f>
               	lock
               	addq	%r12, 210643(%rip)      # 0x4615c0 <_mi_stats_main+0x80>
               	jmp	0x42defd <_mi_os_reset+0x11d>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 210635(%rip)      # 0x4615c8 <_mi_stats_main+0x88>
               	movq	205428(%rip), %r15      # 0x460178 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42de14 <_mi_os_reset+0x34>
               	callq	0x413820 <__errno_location@plt>
               	movq	%rax, %rbx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movl	(%rbx), %ecx
               	cmpl	$11, %ecx
               	jne	0x42df54 <_mi_os_reset+0x174>
               	movl	$0, (%rbx)
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42df30 <_mi_os_reset+0x150>
               	jmp	0x42de14 <_mi_os_reset+0x34>
               	cmpl	$8, %r15d
               	jne	0x42df84 <_mi_os_reset+0x1a4>
               	cmpl	$22, %ecx
               	jne	0x42df84 <_mi_os_reset+0x1a4>
               	movq	$4, 205326(%rip)        # 0x460178 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	$4, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42de14 <_mi_os_reset+0x34>
               	movl	(%rbx), %ecx
               	leaq	92907(%rip), %rdi       # 0x444a76 <typeinfo name for kotlin::gc::GCSchedulerData+0x15cd>
               	movq	%r14, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42ba20 <_mi_warning_message>
               	nopw	%cs:(%rax,%rax)

<_mi_segment_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebx
               	movq	%rdi, %r12
               	movq	%rdi, %r13
               	andq	$-4194304, %r13         # imm = 0xFFC00000
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e0ee <_mi_segment_page_free+0x13e>
               	movl	%ebx, 4(%rsp)
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	40(%r14), %r15
               	testq	%r15, %r15
               	je	0x42e0d4 <_mi_segment_page_free+0x124>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x42e047 <_mi_segment_page_free+0x97>
               	nop
               	movl	$0, 16(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbp)
               	testq	%r15, %r15
               	je	0x42e0d4 <_mi_segment_page_free+0x124>
               	movq	%r15, %rbp
               	cmpl	%ebx, 16(%r15)
               	jg	0x42e0de <_mi_segment_page_free+0x12e>
               	movq	56(%rbp), %r15
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e030 <_mi_segment_page_free+0x80>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42e030 <_mi_segment_page_free+0x80>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e030 <_mi_segment_page_free+0x80>
               	cmpl	$3, 112(%rdx)
               	jne	0x42e091 <_mi_segment_page_free+0xe1>
               	movq	72(%rdx), %rsi
               	jmp	0x42e09d <_mi_segment_page_free+0xed>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x42e0bc <_mi_segment_page_free+0x10c>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x42e030 <_mi_segment_page_free+0x80>
               	callq	0x42dde0 <_mi_os_reset>
               	jmp	0x42e030 <_mi_segment_page_free+0x80>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	jmp	0x42e0ea <_mi_segment_page_free+0x13a>
               	movq	%rbp, 40(%r14)
               	movq	$0, 48(%rbp)
               	movl	4(%rsp), %ebx
               	movq	%r13, %rdi
               	movq	%r12, %rsi
               	movq	%r14, %rdx
               	callq	0x42e1a0 <mi_segment_page_clear>
               	movq	56(%r13), %rax
               	testq	%rax, %rax
               	je	0x42e124 <_mi_segment_page_free+0x174>
               	cmpq	40(%r13), %rax
               	jne	0x42e140 <_mi_segment_page_free+0x190>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ede0 <mi_segment_abandon>
               	movzbl	%bl, %esi
               	movq	%r13, %rdi
               	movq	%r14, %rdx
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e410 <mi_segment_free>
               	addq	$1, %rax
               	cmpq	64(%r13), %rax
               	jne	0x42e182 <_mi_segment_page_free+0x1d2>
               	movl	112(%r13), %eax
               	cmpl	$1, %eax
               	je	0x42e15c <_mi_segment_page_free+0x1ac>
               	testl	%eax, %eax
               	je	0x42e160 <_mi_segment_page_free+0x1b0>
               	xorl	%r14d, %r14d
               	jmp	0x42e160 <_mi_segment_page_free+0x1b0>
               	addq	$16, %r14
               	movq	$0, 24(%r13)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r13)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r13, (%rcx)
               	movq	%r13, 8(%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_segment_page_clear>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movzwl	2(%rsi), %edi
               	movl	20(%rsi), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x42e39d <mi_segment_page_clear+0x1fd>
               	imulq	%rdi, %rsi
               	movq	112(%r15), %rdi
               	addq	$160, %rdi
               	callq	0x42b990 <_mi_stat_decrease>
               	movq	112(%r15), %rcx
               	leaq	32(%rcx), %rax
               	leaq	209752(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42e225 <mi_segment_page_clear+0x85>
               	leaq	210316(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e225 <mi_segment_page_clear+0x85>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 56(%rcx)
               	addq	$-1, %rdx
               	movq	48(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e21d <mi_segment_page_clear+0x7d>
               	lock
               	cmpxchgq	%rdx, 48(%rcx)
               	jne	0x42e210 <mi_segment_page_clear+0x70>
               	lock
               	addq	$1, 40(%rcx)
               	jmp	0x42e247 <mi_segment_page_clear+0xa7>
               	movq	56(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%rcx)
               	cmpq	48(%rcx), %rax
               	jle	0x42e23b <mi_segment_page_clear+0x9b>
               	movq	%rax, 48(%rcx)
               	movq	40(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rcx)
               	movb	1(%rbx), %al
               	andb	$-10, %al
               	movb	%al, 1(%rbx)
               	movl	20(%rbx), %eax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 22(%rbx)
               	movups	%xmm0, 6(%rbx)
               	movups	%xmm0, 48(%rbx)
               	movups	%xmm0, 38(%rbx)
               	movl	%eax, 20(%rbx)
               	movq	56(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%r14)
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e322 <mi_segment_page_clear+0x182>
               	cmpb	$0, 8(%r14)
               	jne	0x42e322 <mi_segment_page_clear+0x182>
               	movb	1(%rbx), %al
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e322 <mi_segment_page_clear+0x182>
               	movl	$14, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e333 <mi_segment_page_clear+0x193>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	(%rsp), %rax
               	imull	$1000, %eax, %ecx       # imm = 0x3E8
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %r14
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %r14
               	addl	%eax, %r14d
               	addl	%ecx, %r14d
               	movl	$14, %edi
               	callq	0x42a9c0 <mi_option_get>
               	addl	%r14d, %eax
               	movl	%eax, 16(%rbx)
               	movq	32(%r15), %rax
               	movq	%rax, 48(%rbx)
               	movq	$0, 56(%rbx)
               	leaq	56(%rax), %rcx
               	leaq	40(%r15), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%rbx, (%rcx)
               	movq	%rbx, 32(%r15)
               	movl	$0, 2(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e322 <mi_segment_page_clear+0x182>
               	cmpb	$0, 8(%r14)
               	jne	0x42e322 <mi_segment_page_clear+0x182>
               	movb	1(%rbx), %al
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e322 <mi_segment_page_clear+0x182>
               	cmpl	$3, 112(%r14)
               	jne	0x42e363 <mi_segment_page_clear+0x1c3>
               	movq	72(%r14), %rsi
               	jmp	0x42e36f <mi_segment_page_clear+0x1cf>
               	movq	96(%r14), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movb	(%rbx), %cl
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r14, %rdi
               	testb	%cl, %cl
               	jne	0x42e38c <mi_segment_page_clear+0x1ec>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e322 <mi_segment_page_clear+0x182>
               	callq	0x42dde0 <_mi_os_reset>
               	jmp	0x42e322 <mi_segment_page_clear+0x182>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x42e3b4 <mi_segment_page_clear+0x214>
               	movq	72(%rax), %r8
               	jmp	0x42e3c1 <mi_segment_page_clear+0x221>
               	movq	96(%rax), %rcx
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	cmpb	$0, (%rbx)
               	jne	0x42e3fb <mi_segment_page_clear+0x25b>
               	movq	80(%rax), %rcx
               	subq	%rcx, %r8
               	cmpl	$1, %edx
               	ja	0x42e3fb <mi_segment_page_clear+0x25b>
               	addq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x42e3e5 <mi_segment_page_clear+0x245>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42e3e9 <mi_segment_page_clear+0x249>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rsi
               	jmp	0x42e1c5 <mi_segment_page_clear+0x25>
               	nopw	%cs:(%rax,%rax)

<mi_segment_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%sil, %sil
               	movq	%rdi, (%rsp)
               	je	0x42e45a <mi_segment_free+0x4a>
               	movl	$11, %edi
               	callq	0x42a9c0 <mi_option_get>
               	cmpb	$0, 8(%r14)
               	je	0x42e484 <mi_segment_free+0x74>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e639 <mi_segment_free+0x229>
               	cmpl	$1, %eax
               	jne	0x42e6af <mi_segment_free+0x29f>
               	leaq	16(%r12), %rax
               	jmp	0x42e641 <mi_segment_free+0x231>
               	cmpb	$0, 8(%r14)
               	je	0x42e59f <mi_segment_free+0x18f>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e659 <mi_segment_free+0x249>
               	cmpl	$1, %eax
               	jne	0x42e6fb <mi_segment_free+0x2eb>
               	leaq	16(%r12), %rax
               	jmp	0x42e665 <mi_segment_free+0x255>
               	movq	64(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x42e43b <mi_segment_free+0x2b>
               	testq	%rax, %rax
               	je	0x42ecfa <mi_segment_free+0x8ea>
               	leaq	120(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x42e4b1 <mi_segment_free+0xa1>
               	nop
               	movq	64(%r14), %rcx
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	%rcx, %rbp
               	jae	0x42e43b <mi_segment_free+0x2b>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e4a4 <mi_segment_free+0x94>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42e4cf <mi_segment_free+0xbf>
               	testq	%rcx, %rcx
               	jne	0x42e4d4 <mi_segment_free+0xc4>
               	jmp	0x42e4e1 <mi_segment_free+0xd1>
               	testq	%rcx, %rcx
               	je	0x42e54d <mi_segment_free+0x13d>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42e4e5 <mi_segment_free+0xd5>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r12), %rbx
               	je	0x42e536 <mi_segment_free+0x126>
               	cmpq	32(%r12), %rbx
               	je	0x42e546 <mi_segment_free+0x136>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e4a0 <mi_segment_free+0x90>
               	cmpb	$0, 8(%r14)
               	jne	0x42e4a0 <mi_segment_free+0x90>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e4a0 <mi_segment_free+0x90>
               	cmpl	$3, 112(%r14)
               	jne	0x42e55d <mi_segment_free+0x14d>
               	movq	72(%r14), %rsi
               	jmp	0x42e569 <mi_segment_free+0x159>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r12)
               	cmpq	32(%r12), %rbx
               	jne	0x42e4f3 <mi_segment_free+0xe3>
               	movq	%rax, 32(%r12)
               	jmp	0x42e4f3 <mi_segment_free+0xe3>
               	cmpq	32(%r12), %rbx
               	je	0x42e4e5 <mi_segment_free+0xd5>
               	cmpq	40(%r12), %rbx
               	jne	0x42e501 <mi_segment_free+0xf1>
               	jmp	0x42e4e5 <mi_segment_free+0xd5>
               	movq	96(%r14), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r14, %rdi
               	testb	%cl, %cl
               	jne	0x42e587 <mi_segment_free+0x177>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e4a0 <mi_segment_free+0x90>
               	callq	0x42dde0 <_mi_os_reset>
               	jmp	0x42e4a0 <mi_segment_free+0x90>
               	movq	64(%r14), %rax
               	testq	%rax, %rax
               	je	0x42e465 <mi_segment_free+0x55>
               	leaq	120(%r14), %rcx
               	xorps	%xmm0, %xmm0
               	jmp	0x42e5de <mi_segment_free+0x1ce>
               	movq	56(%rcx), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rcx
               	je	0x42e622 <mi_segment_free+0x212>
               	movl	$0, 16(%rcx)
               	movups	%xmm0, 48(%rcx)
               	addq	$64, %rcx
               	addq	$-1, %rax
               	je	0x42e465 <mi_segment_free+0x55>
               	movzbl	1(%rcx), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42e5d0 <mi_segment_free+0x1c0>
               	movq	48(%rcx), %rdx
               	movq	56(%rcx), %rsi
               	testq	%rdx, %rdx
               	je	0x42e5fe <mi_segment_free+0x1ee>
               	testq	%rsi, %rsi
               	jne	0x42e603 <mi_segment_free+0x1f3>
               	jmp	0x42e610 <mi_segment_free+0x200>
               	testq	%rsi, %rsi
               	je	0x42e629 <mi_segment_free+0x219>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e614 <mi_segment_free+0x204>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rcx
               	je	0x42e5b5 <mi_segment_free+0x1a5>
               	cmpq	32(%r12), %rcx
               	jne	0x42e5c5 <mi_segment_free+0x1b5>
               	movq	%rdx, 32(%r12)
               	jmp	0x42e5c5 <mi_segment_free+0x1b5>
               	cmpq	32(%r12), %rcx
               	je	0x42e614 <mi_segment_free+0x204>
               	cmpq	40(%r12), %rcx
               	jne	0x42e5d0 <mi_segment_free+0x1c0>
               	jmp	0x42e614 <mi_segment_free+0x204>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e6af <mi_segment_free+0x29f>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e67d <mi_segment_free+0x26d>
               	testq	%rsi, %rsi
               	jne	0x42e686 <mi_segment_free+0x276>
               	jmp	0x42e692 <mi_segment_free+0x282>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e6fb <mi_segment_free+0x2eb>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e6c9 <mi_segment_free+0x2b9>
               	testq	%rsi, %rsi
               	jne	0x42e6d2 <mi_segment_free+0x2c2>
               	jmp	0x42e6de <mi_segment_free+0x2ce>
               	testq	%rsi, %rsi
               	je	0x42ed87 <mi_segment_free+0x977>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e696 <mi_segment_free+0x286>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42ec47 <mi_segment_free+0x837>
               	cmpq	%r14, 8(%rax)
               	je	0x42ec54 <mi_segment_free+0x844>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r12), %rdi
               	addq	$160, %rdi
               	movq	80(%r14), %rsi
               	callq	0x42b990 <_mi_stat_decrease>
               	jmp	0x42ea3e <mi_segment_free+0x62e>
               	testq	%rsi, %rsi
               	je	0x42ed95 <mi_segment_free+0x985>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e6e2 <mi_segment_free+0x2d2>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42ec61 <mi_segment_free+0x851>
               	cmpq	%r14, 8(%rax)
               	je	0x42ec6e <mi_segment_free+0x85e>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r12), %rdi
               	addq	$160, %rdi
               	movq	80(%r14), %rsi
               	callq	0x42b990 <_mi_stat_decrease>
               	cmpq	$4194304, 72(%r14)      # imm = 0x400000
               	jne	0x42ea3e <mi_segment_free+0x62e>
               	movl	$9, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rax, %rbx
               	movq	88(%r12), %rax
               	cmpq	%rbx, %rax
               	jae	0x42e747 <mi_segment_free+0x337>
               	movq	64(%r12), %rcx
               	shrq	$3, %rcx
               	cmpq	%rcx, %rax
               	jbe	0x42ec7b <mi_segment_free+0x86b>
               	cmpq	%rbx, %rax
               	jbe	0x42ea3e <mi_segment_free+0x62e>
               	leaq	208361(%rip), %rdi      # 0x461540 <_mi_stats_main>
               	movl	$1, %r14d
               	jmp	0x42e792 <mi_segment_free+0x382>
               	nop
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	movq	(%r13), %rdx
               	andb	$1, %r15b
               	movzbl	%al, %r8d
               	movzbl	%r15b, %ecx
               	movq	%r13, %rdi
               	callq	0x42db70 <_mi_mem_free>
               	movq	88(%r12), %rax
               	leaq	208311(%rip), %rdi      # 0x461540 <_mi_stats_main>
               	cmpq	%rbx, %rax
               	jbe	0x42ea3e <mi_segment_free+0x62e>
               	movq	104(%r12), %r13
               	testq	%r13, %r13
               	je	0x42e789 <mi_segment_free+0x379>
               	addq	$-1, %rax
               	movq	%rax, 88(%r12)
               	movq	24(%r13), %rax
               	movq	%rax, 104(%r12)
               	movq	$0, 24(%r13)
               	movq	112(%r12), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rdi, %rax
               	jb	0x42e810 <mi_segment_free+0x400>
               	leaq	208818(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e810 <mi_segment_free+0x400>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e800 <mi_segment_free+0x3f0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42e7f0 <mi_segment_free+0x3e0>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42e844 <mi_segment_free+0x434>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42e832 <mi_segment_free+0x422>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	72(%r13), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	cmpq	%rdi, %rcx
               	setae	%dl
               	leaq	208672(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42e8b0 <mi_segment_free+0x4a0>
               	testb	%al, %al
               	je	0x42e8e7 <mi_segment_free+0x4d7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e89d <mi_segment_free+0x48d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42e890 <mi_segment_free+0x480>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42e909 <mi_segment_free+0x4f9>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42e9ff <mi_segment_free+0x5ef>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42e8dd <mi_segment_free+0x4cd>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42e8d0 <mi_segment_free+0x4c0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ea1f <mi_segment_free+0x60f>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42e8fd <mi_segment_free+0x4ed>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42e926 <mi_segment_free+0x516>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%rsi, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42e93f <mi_segment_free+0x52f>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r10
               	testq	%r10, %r10
               	je	0x42e760 <mi_segment_free+0x350>
               	cmpq	$1, %r10
               	jne	0x42e95c <mi_segment_free+0x54c>
               	movb	$1, %r15b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42e9b4 <mi_segment_free+0x5a4>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	nopl	(%rax,%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r15b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42e980 <mi_segment_free+0x570>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42e9d0 <mi_segment_free+0x5c0>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r15b
               	testb	$1, %al
               	je	0x42e763 <mi_segment_free+0x353>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r15b, %r15d
               	movl	$0, %eax
               	cmovnel	%eax, %r15d
               	movb	$1, %al
               	jmp	0x42e765 <mi_segment_free+0x355>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42ea15 <mi_segment_free+0x605>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42e921 <mi_segment_free+0x511>
               	jmp	0x42e926 <mi_segment_free+0x516>
               	movq	(%rsp), %r13
               	movq	72(%r13), %r15
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	leaq	207592(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	208155(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%r15, %r15
               	jle	0x42eaa5 <mi_segment_free+0x695>
               	testb	%al, %al
               	je	0x42ead7 <mi_segment_free+0x6c7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ea9d <mi_segment_free+0x68d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42ea90 <mi_segment_free+0x680>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42eaf9 <mi_segment_free+0x6e9>
               	testb	%al, %al
               	je	0x42ec08 <mi_segment_free+0x7f8>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jg	0x42eacd <mi_segment_free+0x6bd>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42eac0 <mi_segment_free+0x6b0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ec28 <mi_segment_free+0x818>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42eaed <mi_segment_free+0x6dd>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42eb16 <mi_segment_free+0x706>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%r15, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42eb2f <mi_segment_free+0x71f>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r9
               	testq	%r9, %r9
               	je	0x42eb48 <mi_segment_free+0x738>
               	cmpq	$1, %r9
               	jne	0x42eb52 <mi_segment_free+0x742>
               	movb	$1, %r14b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42eb9f <mi_segment_free+0x78f>
               	movb	$1, %r14b
               	xorl	%ebp, %ebp
               	jmp	0x42ebdf <mi_segment_free+0x7cf>
               	movq	%r9, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rsi
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r14b
               	xorl	%eax, %eax
               	movl	$1, %ebp
               	movzbl	-64(%rsi), %ecx
               	movzbl	(%rsi), %ebx
               	movl	%ebx, %edx
               	andb	%cl, %dl
               	shlb	$5, %dl
               	sarb	$7, %dl
               	andb	%dl, %r14b
               	orb	%cl, %bl
               	testb	$2, %bl
               	movzbl	%al, %eax
               	cmovnel	%ebp, %eax
               	subq	$-128, %rsi
               	addq	$2, %rdi
               	jne	0x42eb70 <mi_segment_free+0x760>
               	testb	$1, %r9b
               	je	0x42ebbf <mi_segment_free+0x7af>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %edx
               	movl	$1, %eax
               	cmovel	%edx, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r14b
               	xorl	%ebp, %ebp
               	testb	$1, %al
               	je	0x42ebdf <mi_segment_free+0x7cf>
               	movl	$5, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	movzbl	%r14b, %eax
               	cmovel	%eax, %ebp
               	movl	%ebp, %r14d
               	movb	$1, %bpl
               	movq	(%r13), %rdx
               	andb	$1, %r14b
               	movzbl	%bpl, %r8d
               	movzbl	%r14b, %ecx
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42db70 <_mi_mem_free>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42ec1e <mi_segment_free+0x80e>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42eb11 <mi_segment_free+0x701>
               	jmp	0x42eb16 <mi_segment_free+0x706>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e6a9 <mi_segment_free+0x299>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e6a9 <mi_segment_free+0x299>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e6f5 <mi_segment_free+0x2e5>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e6f5 <mi_segment_free+0x2e5>
               	movq	104(%r12), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 24(%rdx)
               	movq	%rdx, 104(%r12)
               	addq	$1, %rax
               	movq	%rax, 88(%r12)
               	movq	112(%r12), %rdx
               	leaq	416(%rdx), %rcx
               	leaq	206999(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x42eda3 <mi_segment_free+0x993>
               	leaq	207559(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42eda3 <mi_segment_free+0x993>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 440(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	432(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x42ecf0 <mi_segment_free+0x8e0>
               	lock
               	cmpxchgq	%rdi, 432(%rdx)
               	jne	0x42ece0 <mi_segment_free+0x8d0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42edcf <mi_segment_free+0x9bf>
               	leaq	120(%r14), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42ed2c <mi_segment_free+0x91c>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rax
               	je	0x42ed70 <mi_segment_free+0x960>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42e43b <mi_segment_free+0x2b>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42ed1e <mi_segment_free+0x90e>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42ed4c <mi_segment_free+0x93c>
               	testq	%rsi, %rsi
               	jne	0x42ed51 <mi_segment_free+0x941>
               	jmp	0x42ed5e <mi_segment_free+0x94e>
               	testq	%rsi, %rsi
               	je	0x42ed77 <mi_segment_free+0x967>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42ed62 <mi_segment_free+0x952>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rax
               	je	0x42ed03 <mi_segment_free+0x8f3>
               	cmpq	32(%r12), %rax
               	jne	0x42ed13 <mi_segment_free+0x903>
               	movq	%rdx, 32(%r12)
               	jmp	0x42ed13 <mi_segment_free+0x903>
               	cmpq	32(%r12), %rax
               	je	0x42ed62 <mi_segment_free+0x952>
               	cmpq	40(%r12), %rax
               	jne	0x42ed1e <mi_segment_free+0x90e>
               	jmp	0x42ed62 <mi_segment_free+0x952>
               	cmpq	%r14, (%rax)
               	jne	0x42e6af <mi_segment_free+0x29f>
               	jmp	0x42e696 <mi_segment_free+0x286>
               	cmpq	%r14, (%rax)
               	jne	0x42e6fb <mi_segment_free+0x2eb>
               	jmp	0x42e6e2 <mi_segment_free+0x2d2>
               	movq	440(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 440(%rdx)
               	cmpq	432(%rdx), %rsi
               	jl	0x42edc5 <mi_segment_free+0x9b5>
               	movq	%rax, 432(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_segment_abandon>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42eefb <mi_segment_abandon+0x11b>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	40(%r14), %rbp
               	testq	%rbp, %rbp
               	je	0x42eef3 <mi_segment_abandon+0x113>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %r12d      # imm = 0x3E8
               	addl	%edx, %r12d
               	jmp	0x42ee67 <mi_segment_abandon+0x87>
               	nop
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	testq	%rbp, %rbp
               	je	0x42eef3 <mi_segment_abandon+0x113>
               	movq	%rbp, %rbx
               	cmpl	%r12d, 16(%rbp)
               	jg	0x42f13b <mi_segment_abandon+0x35b>
               	movq	56(%rbx), %rbp
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42ee50 <mi_segment_abandon+0x70>
               	movq	%rbx, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42ee50 <mi_segment_abandon+0x70>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42ee50 <mi_segment_abandon+0x70>
               	cmpl	$3, 112(%rdx)
               	jne	0x42eeb1 <mi_segment_abandon+0xd1>
               	movq	72(%rdx), %rsi
               	jmp	0x42eebd <mi_segment_abandon+0xdd>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x42eedb <mi_segment_abandon+0xfb>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42ee50 <mi_segment_abandon+0x70>
               	callq	0x42dde0 <_mi_os_reset>
               	jmp	0x42ee50 <mi_segment_abandon+0x70>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	movl	$11, %edi
               	callq	0x42a9c0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	je	0x42f15c <mi_segment_abandon+0x37c>
               	movl	112(%r15), %eax
               	testl	%eax, %eax
               	je	0x42ef23 <mi_segment_abandon+0x143>
               	cmpl	$1, %eax
               	jne	0x42ef79 <mi_segment_abandon+0x199>
               	leaq	16(%r14), %rax
               	jmp	0x42ef2b <mi_segment_abandon+0x14b>
               	movq	%r14, %rax
               	testq	%r14, %r14
               	je	0x42ef79 <mi_segment_abandon+0x199>
               	leaq	24(%r15), %rcx
               	movq	24(%r15), %rdx
               	movq	32(%r15), %rsi
               	testq	%rdx, %rdx
               	je	0x42ef43 <mi_segment_abandon+0x163>
               	testq	%rsi, %rsi
               	jne	0x42ef4c <mi_segment_abandon+0x16c>
               	jmp	0x42ef58 <mi_segment_abandon+0x178>
               	testq	%rsi, %rsi
               	je	0x42f350 <mi_segment_abandon+0x570>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42ef5c <mi_segment_abandon+0x17c>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r15, (%rax)
               	je	0x42f27c <mi_segment_abandon+0x49c>
               	cmpq	%r15, 8(%rax)
               	jne	0x42ef73 <mi_segment_abandon+0x193>
               	movq	32(%r15), %rdx
               	movq	%rdx, 8(%rax)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r14), %rcx
               	leaq	192(%rcx), %rdx
               	leaq	206261(%rip), %rsi      # 0x461540 <_mi_stats_main>
               	cmpq	%rsi, %rdx
               	jb	0x42efdb <mi_segment_abandon+0x1fb>
               	leaq	206821(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rdx
               	jae	0x42efdb <mi_segment_abandon+0x1fb>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 216(%rcx)
               	leaq	1(%rdi), %rbp
               	movq	208(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x42efd0 <mi_segment_abandon+0x1f0>
               	lock
               	cmpxchgq	%rbp, 208(%rcx)
               	jne	0x42efc0 <mi_segment_abandon+0x1e0>
               	lock
               	addq	$1, (%rdx)
               	movq	112(%r14), %rcx
               	jmp	0x42f007 <mi_segment_abandon+0x227>
               	movq	216(%rcx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 216(%rcx)
               	cmpq	208(%rcx), %rdi
               	jl	0x42effd <mi_segment_abandon+0x21d>
               	movq	%rax, 208(%rcx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movq	72(%r15), %rdx
               	cmpq	%rsi, %rcx
               	setae	%bl
               	leaq	206696(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%bl, %al
               	testq	%rdx, %rdx
               	jle	0x42f055 <mi_segment_abandon+0x275>
               	testb	%al, %al
               	je	0x42f087 <mi_segment_abandon+0x2a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	addq	$-1, %rsi
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42f04d <mi_segment_abandon+0x26d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42f040 <mi_segment_abandon+0x260>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42f0a9 <mi_segment_abandon+0x2c9>
               	testb	%al, %al
               	je	0x42f28e <mi_segment_abandon+0x4ae>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jg	0x42f07d <mi_segment_abandon+0x29d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42f070 <mi_segment_abandon+0x290>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42f2ae <mi_segment_abandon+0x4ce>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42f09d <mi_segment_abandon+0x2bd>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42f0c2 <mi_segment_abandon+0x2e2>
               	movq	%rax, 64(%r14)
               	movq	72(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 72(%r14)
               	cmpq	80(%r14), %rax
               	jbe	0x42f0d7 <mi_segment_abandon+0x2f7>
               	movq	%rax, 80(%r14)
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	$0, 16(%r15)
               	movq	305676(%rip), %rax      # 0x479b00 <abandoned>
               	nopw	%cs:(%rax,%rax)
               	nop
               	leal	1(%rax), %ecx
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	movq	%rdx, 16(%r15)
               	andl	$4194303, %ecx          # imm = 0x3FFFFF
               	orq	%r15, %rcx
               	lock
               	cmpxchgq	%rcx, 305629(%rip)      # 0x479b00 <abandoned>
               	jne	0x42f100 <mi_segment_abandon+0x320>
               	lock
               	addq	$1, 305682(%rip)        # 0x479b40 <abandoned_count>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, 40(%r14)
               	movq	$0, 48(%rbx)
               	movl	$11, %edi
               	callq	0x42a9c0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	jne	0x42ef10 <mi_segment_abandon+0x130>
               	movq	64(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42ef10 <mi_segment_abandon+0x130>
               	testq	%rax, %rax
               	je	0x42f2ca <mi_segment_abandon+0x4ea>
               	leaq	120(%r15), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x42f195 <mi_segment_abandon+0x3b5>
               	nop
               	movq	64(%r15), %rcx
               	addq	$1, %r12
               	addq	$64, %rbx
               	cmpq	%rcx, %r12
               	jae	0x42ef10 <mi_segment_abandon+0x130>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42f184 <mi_segment_abandon+0x3a4>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42f1b3 <mi_segment_abandon+0x3d3>
               	testq	%rcx, %rcx
               	jne	0x42f1b8 <mi_segment_abandon+0x3d8>
               	jmp	0x42f1c5 <mi_segment_abandon+0x3e5>
               	testq	%rcx, %rcx
               	je	0x42f22c <mi_segment_abandon+0x44c>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42f1c9 <mi_segment_abandon+0x3e9>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x42f218 <mi_segment_abandon+0x438>
               	cmpq	32(%r14), %rbx
               	je	0x42f226 <mi_segment_abandon+0x446>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f180 <mi_segment_abandon+0x3a0>
               	cmpb	$0, 8(%r15)
               	jne	0x42f180 <mi_segment_abandon+0x3a0>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f180 <mi_segment_abandon+0x3a0>
               	cmpl	$3, 112(%r15)
               	jne	0x42f23a <mi_segment_abandon+0x45a>
               	movq	72(%r15), %rsi
               	jmp	0x42f246 <mi_segment_abandon+0x466>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x42f1d5 <mi_segment_abandon+0x3f5>
               	movq	%rax, 32(%r14)
               	jmp	0x42f1d5 <mi_segment_abandon+0x3f5>
               	cmpq	32(%r14), %rbx
               	je	0x42f1c9 <mi_segment_abandon+0x3e9>
               	cmpq	40(%r14), %rbx
               	jne	0x42f1e3 <mi_segment_abandon+0x403>
               	jmp	0x42f1c9 <mi_segment_abandon+0x3e9>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%cl, %cl
               	jne	0x42f264 <mi_segment_abandon+0x484>
               	movq	80(%r15), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f180 <mi_segment_abandon+0x3a0>
               	callq	0x42dde0 <_mi_os_reset>
               	jmp	0x42f180 <mi_segment_abandon+0x3a0>
               	movq	%rdx, (%rax)
               	cmpq	%r15, 8(%rax)
               	jne	0x42ef73 <mi_segment_abandon+0x193>
               	jmp	0x42ef6b <mi_segment_abandon+0x18b>
               	movq	24(%rcx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rsi
               	jl	0x42f2a4 <mi_segment_abandon+0x4c4>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	ja	0x42f0be <mi_segment_abandon+0x2de>
               	jmp	0x42f0c2 <mi_segment_abandon+0x2e2>
               	leaq	120(%r15), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42f2fa <mi_segment_abandon+0x51a>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r14)
               	cmpq	32(%r14), %rax
               	je	0x42f33c <mi_segment_abandon+0x55c>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42ef10 <mi_segment_abandon+0x130>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42f2ec <mi_segment_abandon+0x50c>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42f31a <mi_segment_abandon+0x53a>
               	testq	%rsi, %rsi
               	jne	0x42f31f <mi_segment_abandon+0x53f>
               	jmp	0x42f32c <mi_segment_abandon+0x54c>
               	testq	%rsi, %rsi
               	je	0x42f342 <mi_segment_abandon+0x562>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42f330 <mi_segment_abandon+0x550>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r14), %rax
               	je	0x42f2d3 <mi_segment_abandon+0x4f3>
               	cmpq	32(%r14), %rax
               	jne	0x42f2e1 <mi_segment_abandon+0x501>
               	movq	%rdx, 32(%r14)
               	jmp	0x42f2e1 <mi_segment_abandon+0x501>
               	cmpq	32(%r14), %rax
               	je	0x42f330 <mi_segment_abandon+0x550>
               	cmpq	40(%r14), %rax
               	jne	0x42f2ec <mi_segment_abandon+0x50c>
               	jmp	0x42f330 <mi_segment_abandon+0x550>
               	cmpq	%r15, (%rax)
               	jne	0x42ef79 <mi_segment_abandon+0x199>
               	jmp	0x42ef5c <mi_segment_abandon+0x17c>
               	nop

<_mi_free_delayed_block>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r15
               	movq	%rdi, %r12
               	andq	$-4194304, %r12         # imm = 0xFFC00000
               	movl	%r15d, %ebx
               	andl	$4194303, %ebx          # imm = 0x3FFFFF
               	movq	96(%r12), %rcx
               	shrq	%cl, %rbx
               	shlq	$6, %rbx
               	leaq	(%r12,%rbx), %r14
               	addq	$120, %r14
               	movq	32(%r14), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42f3bc <_mi_free_delayed_block+0x5c>
               	cmpl	$3, %ecx
               	je	0x42f3bc <_mi_free_delayed_block+0x5c>
               	cmpl	$1, %ecx
               	je	0x42f3b8 <_mi_free_delayed_block+0x58>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x42f392 <_mi_free_delayed_block+0x32>
               	jmp	0x42f3bc <_mi_free_delayed_block+0x5c>
               	pause
               	jmp	0x42f392 <_mi_free_delayed_block+0x32>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d060 <_mi_page_free_collect>
               	movq	144(%r12,%rbx), %rax
               	movq	%rax, (%r15)
               	movq	%r15, 144(%r12,%rbx)
               	movl	136(%r12,%rbx), %eax
               	addl	$-1, %eax
               	movl	%eax, 136(%r12,%rbx)
               	je	0x42f402 <_mi_free_delayed_block+0xa2>
               	testb	$1, 126(%r12,%rbx)
               	jne	0x42f415 <_mi_free_delayed_block+0xb5>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f430 <_mi_page_retire>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f540 <_mi_page_unfull>
               	nopl	(%rax,%rax)

<_mi_page_retire>:
               	movb	6(%rdi), %dl
               	movl	%edx, %eax
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movl	20(%rdi), %r8d
               	movl	$74, %eax
               	testb	$1, %dl
               	jne	0x42f49c <_mi_page_retire+0x6c>
               	movl	$1, %ecx
               	cmpl	$9, %r8d
               	jb	0x42f499 <_mi_page_retire+0x69>
               	leaq	7(%r8), %rsi
               	shrq	$3, %rsi
               	cmpl	$64, %r8d
               	ja	0x42f46f <_mi_page_retire+0x3f>
               	addl	$1, %esi
               	andl	$254, %esi
               	movq	%rsi, %rcx
               	jmp	0x42f499 <_mi_page_retire+0x69>
               	movl	$73, %ecx
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f499 <_mi_page_retire+0x69>
               	addq	$-1, %rsi
               	bsrq	%rsi, %rax
               	movl	%eax, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%rax,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	movq	40(%rdi), %rcx
               	leaq	(%rax,%rax,2), %rax
               	leaq	(%rcx,%rax,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	testb	$1, %dl
               	jne	0x42f4cc <_mi_page_retire+0x9c>
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f4cc <_mi_page_retire+0x9c>
               	cmpq	%rdi, 1048(%rcx,%rax,8)
               	jne	0x42f4cc <_mi_page_retire+0x9c>
               	cmpq	%rdi, (%rsi)
               	je	0x42f4d3 <_mi_page_retire+0xa3>
               	xorl	%edx, %edx
               	jmp	0x42d130 <_mi_page_free>
               	cmpl	$16385, %r8d            # imm = 0x4001
               	movl	$16, %eax
               	movl	$4, %ecx
               	cmovbl	%eax, %ecx
               	movb	7(%rdi), %al
               	andb	$1, %al
               	orb	%cl, %al
               	movb	%al, 7(%rdi)
               	movq	40(%rdi), %rax
               	subq	%rax, %rsi
               	addq	$-1040, %rsi            # imm = 0xFBF0
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rsi, %rcx
               	cmpq	3024(%rax), %rcx
               	jb	0x42f524 <_mi_page_retire+0xf4>
               	cmpq	3032(%rax), %rcx
               	ja	0x42f534 <_mi_page_retire+0x104>
               	retq
               	movq	%rcx, 3024(%rax)
               	cmpq	3032(%rax), %rcx
               	jbe	0x42f523 <_mi_page_retire+0xf3>
               	movq	%rcx, 3032(%rax)
               	retq
               	nopl	(%rax)

<_mi_page_unfull>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	testb	$1, %al
               	je	0x42fa33 <_mi_page_unfull+0x4f3>
               	movq	40(%rdi), %r12
               	movl	%eax, %ecx
               	andb	$-2, %cl
               	movb	%cl, 6(%rdi)
               	movl	20(%rdi), %esi
               	movl	$1, %ecx
               	cmpl	$9, %esi
               	jb	0x42f5af <_mi_page_unfull+0x6f>
               	leaq	7(%rsi), %rdx
               	shrq	$3, %rdx
               	cmpl	$64, %esi
               	ja	0x42f586 <_mi_page_unfull+0x46>
               	addl	$1, %edx
               	andl	$254, %edx
               	movq	%rdx, %rcx
               	jmp	0x42f5af <_mi_page_unfull+0x6f>
               	movl	$73, %ecx
               	cmpl	$2097152, %esi          # imm = 0x200000
               	ja	0x42f5af <_mi_page_unfull+0x6f>
               	addq	$-1, %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %ecx
               	addl	$253, %ecx
               	orb	$1, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %r9
               	movq	56(%rdi), %rdx
               	testq	%rdx, %rdx
               	je	0x42f5c9 <_mi_page_unfull+0x89>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rdx)
               	movzbl	%cl, %ecx
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42f5d9 <_mi_page_unfull+0x99>
               	movq	%rdx, 56(%rax)
               	cmpq	%rdi, 2824(%r12)
               	je	0x42f5f7 <_mi_page_unfull+0xb7>
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f7fe <_mi_page_unfull+0x2be>
               	jmp	0x42f615 <_mi_page_unfull+0xd5>
               	movq	56(%rdi), %rdx
               	movq	%rdx, 2824(%r12)
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f7fe <_mi_page_unfull+0x2be>
               	movq	%rax, 2816(%r12)
               	movq	2832(%r12), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42f7fe <_mi_page_unfull+0x2be>
               	testq	%rax, %rax
               	leaq	90372(%rip), %r8        # 0x445740 <_mi_page_empty>
               	cmovneq	%rax, %r8
               	leaq	7(%rcx), %r14
               	shrq	$3, %r14
               	cmpq	%r8, 8(%r9,%r14,8)
               	je	0x42f7fe <_mi_page_unfull+0x2be>
               	cmpq	$9, %rcx
               	jae	0x42f660 <_mi_page_unfull+0x120>
               	xorl	%ecx, %ecx
               	jmp	0x42f722 <_mi_page_unfull+0x1e2>
               	cmpq	$64, %rcx
               	ja	0x42f670 <_mi_page_unfull+0x130>
               	leal	1(%r14), %r10d
               	andb	$-2, %r10b
               	jmp	0x42f68b <_mi_page_unfull+0x14b>
               	leaq	-1(%r14), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r10d
               	addb	$-3, %r10b
               	leaq	1040(%r9), %rbx
               	leaq	2792(%r12), %rsi
               	nopw	(%rax,%rax)
               	movq	16(%rsi), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rax
               	shrq	$3, %rax
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x42f700 <_mi_page_unfull+0x1c0>
               	cmpq	$71, %rdx
               	ja	0x42f6d0 <_mi_page_unfull+0x190>
               	leal	1(%rax), %ecx
               	andb	$-2, %cl
               	jmp	0x42f700 <_mi_page_unfull+0x1c0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x42f700 <_mi_page_unfull+0x1c0>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rbx, %rsi
               	jbe	0x42f70e <_mi_page_unfull+0x1ce>
               	addq	$-24, %rsi
               	cmpb	%cl, %r10b
               	je	0x42f6a0 <_mi_page_unfull+0x160>
               	leaq	1(%rax), %rcx
               	cmpq	%r14, %rax
               	cmovaeq	%r14, %rcx
               	cmpq	%r14, %rcx
               	ja	0x42f7fe <_mi_page_unfull+0x2be>
               	addq	$1, %r14
               	movq	%r14, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x42f7f0 <_mi_page_unfull+0x2b0>
               	movq	%r10, %r11
               	andq	$-4, %r11
               	movq	%r8, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x42f765 <_mi_page_unfull+0x225>
               	xorl	%esi, %esi
               	jmp	0x42f7b9 <_mi_page_unfull+0x279>
               	leaq	(%r9,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rsi,8)
               	movdqu	%xmm0, -96(%rbx,%rsi,8)
               	movdqu	%xmm0, -80(%rbx,%rsi,8)
               	movdqu	%xmm0, -64(%rbx,%rsi,8)
               	movdqu	%xmm0, -48(%rbx,%rsi,8)
               	movdqu	%xmm0, -32(%rbx,%rsi,8)
               	movdqu	%xmm0, -16(%rbx,%rsi,8)
               	movdqu	%xmm0, (%rbx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x42f780 <_mi_page_unfull+0x240>
               	testq	%rax, %rax
               	je	0x42f7e2 <_mi_page_unfull+0x2a2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42f7d0 <_mi_page_unfull+0x290>
               	cmpq	%r11, %r10
               	je	0x42f7fe <_mi_page_unfull+0x2be>
               	addq	%r11, %rcx
               	nop
               	movq	%r8, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r14
               	jne	0x42f7f0 <_mi_page_unfull+0x2b0>
               	leaq	(%r12,%r15,8), %rax
               	addq	$1048, %rax             # imm = 0x418
               	movq	1048(%r12,%r15,8), %rcx
               	movq	%rcx, 56(%rdi)
               	movq	$0, 48(%rdi)
               	testq	%rcx, %rcx
               	je	0x42f835 <_mi_page_unfull+0x2f5>
               	movq	%rdi, 48(%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	jmp	0x42fa1e <_mi_page_unfull+0x4de>
               	leaq	(%r12,%r15,8), %rcx
               	addq	$1040, %rcx             # imm = 0x410
               	movq	%rdi, (%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x42fa1e <_mi_page_unfull+0x4de>
               	leaq	7(%r8), %r10
               	shrq	$3, %r10
               	cmpq	%rdi, 8(%r9,%r10,8)
               	je	0x42fa1e <_mi_page_unfull+0x4de>
               	cmpq	$9, %r8
               	jae	0x42f87b <_mi_page_unfull+0x33b>
               	xorl	%ecx, %ecx
               	jmp	0x42f942 <_mi_page_unfull+0x402>
               	cmpq	$64, %r8
               	ja	0x42f88b <_mi_page_unfull+0x34b>
               	leal	1(%r10), %r11d
               	andb	$-2, %r11b
               	jmp	0x42f8a6 <_mi_page_unfull+0x366>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r11d
               	addb	$-3, %r11b
               	leaq	1040(%r9), %rsi
               	leaq	(%r12,%r15,8), %rdx
               	addq	$1016, %rdx             # imm = 0x3F8
               	nopl	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42f920 <_mi_page_unfull+0x3e0>
               	cmpq	$71, %rax
               	ja	0x42f8f0 <_mi_page_unfull+0x3b0>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42f920 <_mi_page_unfull+0x3e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42f920 <_mi_page_unfull+0x3e0>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r14
               	movl	%r14d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r14,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x42f92e <_mi_page_unfull+0x3ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r11b
               	je	0x42f8c0 <_mi_page_unfull+0x380>
               	leaq	1(%rbx), %rcx
               	cmpq	%r10, %rbx
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x42fa1e <_mi_page_unfull+0x4de>
               	addq	$1, %r10
               	movq	%r10, %r14
               	subq	%rcx, %r14
               	cmpq	$4, %r14
               	jb	0x42fa10 <_mi_page_unfull+0x4d0>
               	movq	%r14, %r11
               	andq	$-4, %r11
               	movq	%rdi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x42f985 <_mi_page_unfull+0x445>
               	xorl	%esi, %esi
               	jmp	0x42f9d9 <_mi_page_unfull+0x499>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rsi,8)
               	movdqu	%xmm0, -96(%rdx,%rsi,8)
               	movdqu	%xmm0, -80(%rdx,%rsi,8)
               	movdqu	%xmm0, -64(%rdx,%rsi,8)
               	movdqu	%xmm0, -48(%rdx,%rsi,8)
               	movdqu	%xmm0, -32(%rdx,%rsi,8)
               	movdqu	%xmm0, -16(%rdx,%rsi,8)
               	movdqu	%xmm0, (%rdx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rax
               	jne	0x42f9a0 <_mi_page_unfull+0x460>
               	testq	%rbx, %rbx
               	je	0x42fa02 <_mi_page_unfull+0x4c2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rax
               	addq	$24, %rax
               	negq	%rbx
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbx
               	jne	0x42f9f0 <_mi_page_unfull+0x4b0>
               	cmpq	%r11, %r14
               	je	0x42fa1e <_mi_page_unfull+0x4de>
               	addq	%r11, %rcx
               	nop
               	movq	%rdi, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x42fa10 <_mi_page_unfull+0x4d0>
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rdi), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<mi_segment_reclaim>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r8, %r14
               	movq	%rdx, 8(%rsp)
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	testq	%rcx, %rcx
               	je	0x42fa64 <mi_segment_reclaim+0x24>
               	movb	$0, (%rcx)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	72(%r15), %rbp
               	movq	112(%r14), %rdx
               	leaq	203448(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	204011(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rbp, %rbp
               	js	0x42fad4 <mi_segment_reclaim+0x94>
               	testb	%al, %al
               	je	0x42fb18 <mi_segment_reclaim+0xd8>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jg	0x42facd <mi_segment_reclaim+0x8d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x42fac0 <mi_segment_reclaim+0x80>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x42fb38 <mi_segment_reclaim+0xf8>
               	testb	%al, %al
               	je	0x42ff68 <mi_segment_reclaim+0x528>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jge	0x42fb0d <mi_segment_reclaim+0xcd>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x42fb00 <mi_segment_reclaim+0xc0>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x42ff8a <mi_segment_reclaim+0x54a>
               	movq	24(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rsi
               	jl	0x42fb2e <mi_segment_reclaim+0xee>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fb4f <mi_segment_reclaim+0x10f>
               	movq	%rax, 64(%r14)
               	addq	72(%r14), %rbp
               	movq	%rbp, 72(%r14)
               	cmpq	80(%r14), %rbp
               	jbe	0x42fb61 <mi_segment_reclaim+0x121>
               	movq	%rbp, 80(%r14)
               	movq	112(%r14), %rsi
               	leaq	192(%rsi), %rax
               	leaq	203213(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fd66 <mi_segment_reclaim+0x326>
               	leaq	203773(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fd66 <mi_segment_reclaim+0x326>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 216(%rsi)
               	addq	$-1, %rdx
               	movq	208(%rsi), %rax
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42fbc0 <mi_segment_reclaim+0x180>
               	lock
               	cmpxchgq	%rdx, 208(%rsi)
               	jne	0x42fbb0 <mi_segment_reclaim+0x170>
               	lock
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	je	0x42fda5 <mi_segment_reclaim+0x365>
               	testq	%rcx, %rcx
               	je	0x42fdf4 <mi_segment_reclaim+0x3b4>
               	movq	%rcx, 16(%rsp)
               	xorl	%r13d, %r13d
               	jmp	0x42fc11 <mi_segment_reclaim+0x1d1>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	movq	%r14, %rdx
               	callq	0x42e1a0 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %r13
               	movq	64(%r15), %rax
               	cmpq	%rax, %r13
               	jae	0x42fda7 <mi_segment_reclaim+0x367>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	testb	$1, 121(%r15,%rbx)
               	je	0x42fc00 <mi_segment_reclaim+0x1c0>
               	movq	40(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	203010(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fc90 <mi_segment_reclaim+0x250>
               	leaq	203574(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fc90 <mi_segment_reclaim+0x250>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42fc80 <mi_segment_reclaim+0x240>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42fc70 <mi_segment_reclaim+0x230>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42fcc4 <mi_segment_reclaim+0x284>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42fcb2 <mi_segment_reclaim+0x272>
               	movq	%rax, 240(%rcx)
               	movq	232(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 232(%rcx)
               	leaq	(%r15,%rbx), %rbp
               	addq	$120, %rbp
               	movq	%r12, 160(%r15,%rbx)
               	movq	32(%rbp), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42fd00 <mi_segment_reclaim+0x2c0>
               	cmpl	$1, %ecx
               	je	0x42fcf5 <mi_segment_reclaim+0x2b5>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%rbp)
               	jne	0x42fcd4 <mi_segment_reclaim+0x294>
               	jmp	0x42fd00 <mi_segment_reclaim+0x2c0>
               	pause
               	jmp	0x42fcd4 <mi_segment_reclaim+0x294>
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x42d060 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbx)
               	je	0x42fbe7 <mi_segment_reclaim+0x1a7>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x42ffe0 <_mi_page_reclaim>
               	movl	140(%r15,%rbx), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42fc00 <mi_segment_reclaim+0x1c0>
               	leaq	(%r15,%rbx), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbx), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42fd59 <mi_segment_reclaim+0x319>
               	movq	32(%rbp), %rax
               	cmpq	$4, %rax
               	jb	0x42fc00 <mi_segment_reclaim+0x1c0>
               	movq	16(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x42fc00 <mi_segment_reclaim+0x1c0>
               	movq	216(%rsi), %rax
               	addq	$-1, %rax
               	movq	%rax, 216(%rsi)
               	cmpq	208(%rsi), %rax
               	jle	0x42fd88 <mi_segment_reclaim+0x348>
               	movq	%rax, 208(%rsi)
               	movq	200(%rsi), %rax
               	addq	$1, %rax
               	movq	%rax, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	jne	0x42fbd4 <mi_segment_reclaim+0x194>
               	xorl	%eax, %eax
               	movq	56(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42fddf <mi_segment_reclaim+0x39f>
               	cmpq	%rax, %rcx
               	jae	0x42ffce <mi_segment_reclaim+0x58e>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x42ffce <mi_segment_reclaim+0x58e>
               	cmpl	$1, %eax
               	je	0x42ffa8 <mi_segment_reclaim+0x568>
               	testl	%eax, %eax
               	je	0x42ffac <mi_segment_reclaim+0x56c>
               	xorl	%r14d, %r14d
               	jmp	0x42ffac <mi_segment_reclaim+0x56c>
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x42e410 <mi_segment_free>
               	xorl	%r15d, %r15d
               	jmp	0x42ffce <mi_segment_reclaim+0x58e>
               	xorl	%ebx, %ebx
               	jmp	0x42fe1d <mi_segment_reclaim+0x3dd>
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	callq	0x42e1a0 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbx
               	movq	64(%r15), %rax
               	cmpq	%rax, %rbx
               	jae	0x42fda7 <mi_segment_reclaim+0x367>
               	movq	%rbx, %rbp
               	shlq	$6, %rbp
               	testb	$1, 121(%r15,%rbp)
               	je	0x42fe10 <mi_segment_reclaim+0x3d0>
               	movq	40(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	202486(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fea0 <mi_segment_reclaim+0x460>
               	leaq	203046(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fea0 <mi_segment_reclaim+0x460>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42fe90 <mi_segment_reclaim+0x450>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42fe80 <mi_segment_reclaim+0x440>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42fed4 <mi_segment_reclaim+0x494>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42fec2 <mi_segment_reclaim+0x482>
               	movq	%rax, 240(%rcx)
               	movq	232(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 232(%rcx)
               	leaq	(%r15,%rbp), %r13
               	addq	$120, %r13
               	movq	%r12, 160(%r15,%rbp)
               	movq	32(%r13), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42ff10 <mi_segment_reclaim+0x4d0>
               	cmpl	$1, %ecx
               	je	0x42ff05 <mi_segment_reclaim+0x4c5>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r13)
               	jne	0x42fee4 <mi_segment_reclaim+0x4a4>
               	jmp	0x42ff10 <mi_segment_reclaim+0x4d0>
               	pause
               	jmp	0x42fee4 <mi_segment_reclaim+0x4a4>
               	nopl	(%rax)
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x42d060 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbp)
               	je	0x42fdf8 <mi_segment_reclaim+0x3b8>
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	callq	0x42ffe0 <_mi_page_reclaim>
               	movl	140(%r15,%rbp), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42fe10 <mi_segment_reclaim+0x3d0>
               	leaq	(%r15,%rbp), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbp), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42fe10 <mi_segment_reclaim+0x3d0>
               	movq	32(%r13), %rax
               	jmp	0x42fe10 <mi_segment_reclaim+0x3d0>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x42ff7e <mi_segment_reclaim+0x53e>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fb4f <mi_segment_reclaim+0x10f>
               	jmp	0x42fb4b <mi_segment_reclaim+0x10b>
               	addq	$16, %r14
               	movq	$0, 24(%r15)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r15)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, 8(%r14)
               	movq	%r15, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<_mi_page_reclaim>:
               	pushq	%rbx
               	movl	20(%rsi), %r8d
               	cmpl	$67108864, %r8d         # imm = 0x4000000
               	jae	0x430282 <_mi_page_reclaim+0x2a2>
               	addq	$7, %r8
               	movl	$1, %ecx
               	cmpq	$16, %r8
               	jb	0x430045 <_mi_page_reclaim+0x65>
               	movq	%r8, %rax
               	shrq	$3, %rax
               	cmpq	$71, %r8
               	ja	0x43001b <_mi_page_reclaim+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	movq	%rax, %rcx
               	jmp	0x430045 <_mi_page_reclaim+0x65>
               	movl	$73, %ecx
               	cmpq	$2097159, %r8           # imm = 0x200007
               	ja	0x430045 <_mi_page_reclaim+0x65>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	leaq	(%rax,%rax,2), %rax
               	cmpq	$2097168, 1056(%rdi,%rax,8) # imm = 0x200010
               	sete	%cl
               	movb	6(%rsi), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 6(%rsi)
               	movq	1040(%rdi,%rax,8), %rcx
               	movq	%rcx, 48(%rsi)
               	movq	$0, 56(%rsi)
               	leaq	56(%rcx), %rdx
               	testq	%rcx, %rcx
               	leaq	1048(%rdi,%rax,8), %rcx
               	cmovneq	%rdx, %rcx
               	movq	%rsi, (%rcx)
               	movq	%rsi, 1040(%rdi,%rax,8)
               	movq	1056(%rdi,%rax,8), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43026e <_mi_page_reclaim+0x28e>
               	leaq	7(%rcx), %r9
               	shrq	$3, %r9
               	cmpq	%rsi, 8(%rdi,%r9,8)
               	je	0x43026e <_mi_page_reclaim+0x28e>
               	cmpq	$9, %rcx
               	jae	0x4300cd <_mi_page_reclaim+0xed>
               	xorl	%ecx, %ecx
               	jmp	0x430192 <_mi_page_reclaim+0x1b2>
               	cmpq	$64, %rcx
               	ja	0x4300dd <_mi_page_reclaim+0xfd>
               	leal	1(%r9), %r8d
               	andb	$-2, %r8b
               	jmp	0x4300f8 <_mi_page_reclaim+0x118>
               	leaq	-1(%r9), %rdx
               	bsrq	%rdx, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rbx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%rdi), %r10
               	leaq	(%rdi,%rax,8), %rax
               	addq	$1016, %rax             # imm = 0x3F8
               	nopl	(%rax)
               	movq	16(%rax), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x430170 <_mi_page_reclaim+0x190>
               	cmpq	$71, %rdx
               	ja	0x430140 <_mi_page_reclaim+0x160>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x430170 <_mi_page_reclaim+0x190>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x430170 <_mi_page_reclaim+0x190>
               	leaq	-1(%rbx), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%r10, %rax
               	jbe	0x43017e <_mi_page_reclaim+0x19e>
               	addq	$-24, %rax
               	cmpb	%cl, %r8b
               	je	0x430110 <_mi_page_reclaim+0x130>
               	leaq	1(%rbx), %rcx
               	cmpq	%r9, %rbx
               	cmovaeq	%r9, %rcx
               	cmpq	%r9, %rcx
               	ja	0x43026e <_mi_page_reclaim+0x28e>
               	addq	$1, %r9
               	movq	%r9, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x430260 <_mi_page_reclaim+0x280>
               	movq	%r10, %r8
               	andq	$-4, %r8
               	movq	%rsi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %r11d
               	andl	$3, %r11d
               	cmpq	$12, %rdx
               	jae	0x4301d7 <_mi_page_reclaim+0x1f7>
               	xorl	%edx, %edx
               	jmp	0x430229 <_mi_page_reclaim+0x249>
               	leaq	(%rdi,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%edx, %edx
               	nopl	(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rdx,8)
               	movdqu	%xmm0, -96(%rbx,%rdx,8)
               	movdqu	%xmm0, -80(%rbx,%rdx,8)
               	movdqu	%xmm0, -64(%rbx,%rdx,8)
               	movdqu	%xmm0, -48(%rbx,%rdx,8)
               	movdqu	%xmm0, -32(%rbx,%rdx,8)
               	movdqu	%xmm0, -16(%rbx,%rdx,8)
               	movdqu	%xmm0, (%rbx,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rax
               	jne	0x4301f0 <_mi_page_reclaim+0x210>
               	testq	%r11, %r11
               	je	0x430252 <_mi_page_reclaim+0x272>
               	addq	%rcx, %rdx
               	leaq	(%rdi,%rdx,8), %rax
               	addq	$24, %rax
               	negq	%r11
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%r11
               	jne	0x430240 <_mi_page_reclaim+0x260>
               	cmpq	%r8, %r10
               	je	0x43026e <_mi_page_reclaim+0x28e>
               	addq	%r8, %rcx
               	nop
               	movq	%rsi, 8(%rdi,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r9
               	jne	0x430260 <_mi_page_reclaim+0x280>
               	movq	3016(%rdi), %rax
               	addq	$1, %rax
               	movq	%rax, 3016(%rdi)
               	popq	%rbx
               	retq
               	movq	%rsi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebx
               	cmpl	$3, %ebx
               	jne	0x430299 <_mi_page_reclaim+0x2b9>
               	movq	72(%rax), %rdx
               	jmp	0x4302a5 <_mi_page_reclaim+0x2c5>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%rsi), %cl
               	testb	%cl, %cl
               	je	0x4302b3 <_mi_page_reclaim+0x2d3>
               	movq	%rdx, %r8
               	jmp	0x42fff2 <_mi_page_reclaim+0x12>
               	movq	80(%rax), %r9
               	movq	%rdx, %r10
               	subq	%r9, %r10
               	cmpl	$1, %ebx
               	ja	0x4302fb <_mi_page_reclaim+0x31b>
               	testl	%r8d, %r8d
               	je	0x4302fb <_mi_page_reclaim+0x31b>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4302e4 <_mi_page_reclaim+0x304>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x4302e9 <_mi_page_reclaim+0x309>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r10
               	movq	%r10, %r8
               	jmp	0x42fff2 <_mi_page_reclaim+0x12>
               	nopw	%cs:(%rax,%rax)

<mi_free>:
               	movq	%rdi, %rdx
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x43036d <mi_free+0x5d>
               	movq	%fs:0, %r8
               	movl	%edx, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movq	96(%rdi), %rcx
               	shrq	%cl, %rax
               	movq	104(%rdi), %rcx
               	cmpq	%r8, %rcx
               	jne	0x43036e <mi_free+0x5e>
               	shlq	$6, %rax
               	cmpb	$0, 126(%rdi,%rax)
               	jne	0x43036e <mi_free+0x5e>
               	movq	144(%rdi,%rax), %rcx
               	movq	%rcx, (%rdx)
               	movq	%rdx, 144(%rdi,%rax)
               	movl	136(%rdi,%rax), %ecx
               	addl	$-1, %ecx
               	movl	%ecx, 136(%rdi,%rax)
               	je	0x430380 <mi_free+0x70>
               	retq
               	movq	104(%rdi), %rax
               	xorl	%esi, %esi
               	cmpq	%r8, %rax
               	sete	%sil
               	jmp	0x430390 <mi_free_generic>
               	addq	%rax, %rdi
               	addq	$120, %rdi
               	jmp	0x42f430 <_mi_page_retire>
               	nopl	(%rax)

<mi_free_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r8
               	movq	%rdx, %r11
               	subq	%rdi, %r11
               	movq	96(%rdi), %rcx
               	shrq	%cl, %r11
               	shlq	$6, %r11
               	leaq	(%rdi,%r11), %r9
               	addq	$120, %r9
               	testb	$2, 126(%rdi,%r11)
               	je	0x430456 <mi_free_generic+0xc6>
               	movl	140(%rdi,%r11), %r14d
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x4303d4 <mi_free_generic+0x44>
               	movq	72(%rdi), %r10
               	jmp	0x4303dd <mi_free_generic+0x4d>
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	movb	(%r9), %cl
               	movzbl	%cl, %ebx
               	imulq	%rbx, %r10
               	addq	%rdi, %r10
               	testb	%bl, %bl
               	jne	0x430428 <mi_free_generic+0x98>
               	addq	80(%rdi), %r10
               	cmpl	$1, %eax
               	ja	0x430428 <mi_free_generic+0x98>
               	testl	%r14d, %r14d
               	je	0x430428 <mi_free_generic+0x98>
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43040f <mi_free_generic+0x7f>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430417 <mi_free_generic+0x87>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	leaq	(%r10,%rax), %rcx
               	cmpq	%r14, %rax
               	cmovbq	%rcx, %r10
               	cmpl	$67108864, %r14d        # imm = 0x4000000
               	jae	0x4304c4 <mi_free_generic+0x134>
               	movq	%r8, %rax
               	subq	%r10, %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x43044e <mi_free_generic+0xbe>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430453 <mi_free_generic+0xc3>
               	xorl	%edx, %edx
               	divl	%r14d
               	subq	%rdx, %r8
               	testb	%sil, %sil
               	je	0x430497 <mi_free_generic+0x107>
               	movq	144(%rdi,%r11), %rax
               	movq	%rax, (%r8)
               	movq	%r8, 144(%rdi,%r11)
               	movl	136(%rdi,%r11), %eax
               	addl	$-1, %eax
               	movl	%eax, 136(%rdi,%r11)
               	je	0x4304a8 <mi_free_generic+0x118>
               	leaq	(%rdi,%r11), %rax
               	addq	$126, %rax
               	testb	$1, (%rax)
               	jne	0x4304b6 <mi_free_generic+0x126>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x430540 <_mi_free_block_mt>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f430 <_mi_page_retire>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f540 <_mi_page_unfull>
               	movq	%r9, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebp
               	cmpl	$3, %ebp
               	jne	0x4304db <mi_free_generic+0x14b>
               	movq	72(%rax), %rdx
               	jmp	0x4304e7 <mi_free_generic+0x157>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	testb	%bl, %bl
               	je	0x4304f3 <mi_free_generic+0x163>
               	movq	%rdx, %r14
               	jmp	0x430435 <mi_free_generic+0xa5>
               	movq	80(%rax), %r15
               	movq	%rdx, %rcx
               	subq	%r15, %rcx
               	cmpl	$1, %ebp
               	ja	0x430538 <mi_free_generic+0x1a8>
               	testl	%r14d, %r14d
               	je	0x430538 <mi_free_generic+0x1a8>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430521 <mi_free_generic+0x191>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430526 <mi_free_generic+0x196>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%r14, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r14
               	jmp	0x430435 <mi_free_generic+0xa5>

<_mi_free_block_mt>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	%rdi, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	cmpl	$3, 112(%r15)
               	jne	0x430617 <_mi_free_block_mt+0xd7>
               	callq	0x42a7c0 <mi_thread_init>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rcx
               	movq	2848(%rcx), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, 104(%r15)
               	jne	0x430681 <_mi_free_block_mt+0x141>
               	movq	8(%r14), %rax
               	movq	%rax, (%rbx)
               	movq	%rbx, 8(%r14)
               	movl	16(%r14), %eax
               	addl	$-1, %eax
               	movl	%eax, 16(%r14)
               	movb	7(%r14), %al
               	andb	$-2, %al
               	movb	%al, 7(%r14)
               	movq	(%rcx), %rcx
               	movq	72(%r15), %rsi
               	movq	144(%rcx), %rdx
               	leaq	200582(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	201145(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rsi, %rsi
               	js	0x430687 <_mi_free_block_mt+0x147>
               	testb	%al, %al
               	je	0x4306c8 <_mi_free_block_mt+0x188>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	leaq	1(%rdi), %rbx
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x43060d <_mi_free_block_mt+0xcd>
               	lock
               	cmpxchgq	%rbx, 16(%rdx)
               	jne	0x430600 <_mi_free_block_mt+0xc0>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x4306e8 <_mi_free_block_mt+0x1a8>
               	movq	32(%r14), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	movq	%rax, %rdx
               	andq	$3, %rdx
               	je	0x430640 <_mi_free_block_mt+0x100>
               	movq	%rcx, (%rbx)
               	orq	%rbx, %rdx
               	lock
               	cmpxchgq	%rdx, 32(%r14)
               	jne	0x430620 <_mi_free_block_mt+0xe0>
               	jmp	0x430681 <_mi_free_block_mt+0x141>
               	orq	$1, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x430620 <_mi_free_block_mt+0xe0>
               	movq	40(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x43066a <_mi_free_block_mt+0x12a>
               	movq	2840(%rcx), %rax
               	movq	%rax, (%rbx)
               	lock
               	cmpxchgq	%rbx, 2840(%rcx)
               	jne	0x43065c <_mi_free_block_mt+0x11c>
               	movq	32(%r14), %rax
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	orq	$2, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x43066e <_mi_free_block_mt+0x12e>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	testb	%al, %al
               	je	0x430727 <_mi_free_block_mt+0x1e7>
               	movq	$-1, %rdi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	addq	$-1, %rdi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rdi, %rax
               	jge	0x4306bd <_mi_free_block_mt+0x17d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x4306b0 <_mi_free_block_mt+0x170>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x430749 <_mi_free_block_mt+0x209>
               	movq	24(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rdi
               	jl	0x4306de <_mi_free_block_mt+0x19e>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x4306ff <_mi_free_block_mt+0x1bf>
               	movq	%rax, 96(%rcx)
               	addq	104(%rcx), %rsi
               	leaq	32(%rcx), %rdx
               	movq	%rsi, 104(%rcx)
               	cmpq	112(%rcx), %rsi
               	jbe	0x430715 <_mi_free_block_mt+0x1d5>
               	movq	%rsi, 112(%rcx)
               	movq	%r14, %rdi
               	movl	$1, %esi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42dfb0 <_mi_segment_page_free>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43073d <_mi_free_block_mt+0x1fd>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x4306ff <_mi_free_block_mt+0x1bf>
               	jmp	0x4306fb <_mi_free_block_mt+0x1bb>

<mi_out_buf_stderr>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	186461(%rip), %rax      # 0x45dfc8 <write+0x45dfc8>
               	movq	(%rax), %rsi
               	callq	0x413790 <fputs@plt>
               	testq	%rbx, %rbx
               	je	0x4307a9 <mi_out_buf_stderr+0x49>
               	movq	201369(%rip), %rax      # 0x461a18 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x4307a9 <mi_out_buf_stderr+0x49>
               	movq	%rbx, %rdi
               	callq	0x4136e0 <strlen@plt>
               	testq	%rax, %rax
               	je	0x4307a9 <mi_out_buf_stderr+0x49>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 201336(%rip)      # 0x461a18 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x4307ab <mi_out_buf_stderr+0x4b>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	201303(%rip), %rdi      # 0x461a20 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x4136f0 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<mi_buffered_out>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x430933 <mi_buffered_out+0x153>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x430933 <mi_buffered_out+0x153>
               	movq	%rdi, %r14
               	movb	(%rdi), %r12b
               	testb	%r12b, %r12b
               	je	0x430933 <mi_buffered_out+0x153>
               	addq	$1, %r14
               	movq	$-56, %r15
               	movq	186295(%rip), %r13      # 0x45dfd8 <write+0x45dfd8>
               	movq	186272(%rip), %rbp      # 0x45dfc8 <write+0x45dfc8>
               	jmp	0x430849 <mi_buffered_out+0x69>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	movq	$0, 24(%rbx)
               	movzbl	(%r14), %r12d
               	addq	$1, %r14
               	testb	%r12b, %r12b
               	je	0x430933 <mi_buffered_out+0x153>
               	movq	24(%rbx), %rax
               	cmpq	32(%rbx), %rax
               	jb	0x4308b9 <mi_buffered_out+0xd9>
               	movq	16(%rbx), %rcx
               	movb	$0, (%rcx,%rax)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x430880 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%r13)
               	je	0x430880 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%rbp)
               	je	0x430880 <mi_buffered_out+0xa0>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	jmp	0x4308af <mi_buffered_out+0xcf>
               	nop
               	cmpb	$0, %fs:(%r15)
               	jne	0x4308af <mi_buffered_out+0xcf>
               	movb	$1, %fs:(%r15)
               	movq	201077(%rip), %rsi      # 0x461a08 <mi_out_arg>
               	movq	201078(%rip), %rax      # 0x461a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19780(%rip), %rcx      # 0x42bb60 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	movq	$0, 24(%rbx)
               	xorl	%eax, %eax
               	movq	16(%rbx), %rcx
               	leaq	1(%rax), %rdx
               	movq	%rdx, 24(%rbx)
               	movb	%r12b, (%rcx,%rax)
               	cmpb	$10, %r12b
               	jne	0x430838 <mi_buffered_out+0x58>
               	movq	16(%rbx), %rax
               	movq	24(%rbx), %rcx
               	movb	$0, (%rax,%rcx)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x4308fb <mi_buffered_out+0x11b>
               	cmpq	%rax, (%r13)
               	je	0x4308fb <mi_buffered_out+0x11b>
               	cmpq	%rax, (%rbp)
               	jne	0x43082a <mi_buffered_out+0x4a>
               	cmpb	$0, %fs:(%r15)
               	jne	0x430830 <mi_buffered_out+0x50>
               	movb	$1, %fs:(%r15)
               	movq	200950(%rip), %rsi      # 0x461a08 <mi_out_arg>
               	movq	200951(%rip), %rax      # 0x461a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19907(%rip), %rcx      # 0x42bb60 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	jmp	0x430830 <mi_buffered_out+0x50>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_fprintf>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rsi, %r14
               	testb	%al, %al
               	je	0x430998 <_mi_fprintf+0x48>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	752(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rdx, %rdx
               	je	0x430a2a <_mi_fprintf+0xda>
               	movq	$-56, %rbx
               	cmpb	$0, %fs:(%rbx)
               	jne	0x430a2a <_mi_fprintf+0xda>
               	movb	$1, %fs:(%rbx)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	callq	0x413850 <vsnprintf@plt>
               	movb	$0, %fs:(%rbx)
               	movq	185814(%rip), %rcx      # 0x45dfd8 <write+0x45dfd8>
               	leaq	-553(%rip), %rax        # 0x4307e0 <mi_buffered_out>
               	cmpq	%rax, (%rcx)
               	je	0x430a35 <_mi_fprintf+0xe5>
               	movq	185779(%rip), %rcx      # 0x45dfc8 <write+0x45dfc8>
               	cmpq	%rax, (%rcx)
               	je	0x430a35 <_mi_fprintf+0xe5>
               	leaq	208(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x4307e0 <mi_buffered_out>
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	movb	$1, %fs:(%rbx)
               	movq	200648(%rip), %rsi      # 0x461a08 <mi_out_arg>
               	movq	200649(%rip), %rax      # 0x461a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-20209(%rip), %rcx      # 0x42bb60 <mi_out_buf>
               	cmovneq	%rax, %rcx
               	leaq	208(%rsp), %rdi
               	callq	*%rcx
               	movb	$0, %fs:(%rbx)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<mi_stat_print>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rcx, %r15
               	movq	%rdx, %rbx
               	movq	%rsi, %rcx
               	movq	%rdi, %r14
               	leaq	82415(%rip), %rdx       # 0x444c7d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	testq	%rbx, %rbx
               	jle	0x430ada <mi_stat_print+0x6a>
               	movq	16(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430b21 <mi_stat_print+0xb1>
               	leaq	82331(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82331(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430c80 <mi_stat_print+0x210>
               	movq	16(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	testq	%rbx, %rbx
               	js	0x430b88 <mi_stat_print+0x118>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x430bb8 <mi_stat_print+0x148>
               	leaq	82258(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82258(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4310ff <mi_stat_print+0x68f>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	82224(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82219(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	82186(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430c21 <mi_stat_print+0x1b1>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430c27 <mi_stat_print+0x1b7>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431035 <mi_stat_print+0x5c5>
               	leaq	82107(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82145(%rip), %r8        # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4313cd <mi_stat_print+0x95d>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	82074(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82069(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	82036(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43109e <mi_stat_print+0x62e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4310a6 <mi_stat_print+0x636>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81913(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81910(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81918(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430cd2 <mi_stat_print+0x262>
               	leaq	81827(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81827(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430d91 <mi_stat_print+0x321>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81791(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81786(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81753(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430d32 <mi_stat_print+0x2c2>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430d38 <mi_stat_print+0x2c8>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81640(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81637(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81645(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	8(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430de4 <mi_stat_print+0x374>
               	leaq	81553(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81553(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430ea3 <mi_stat_print+0x433>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81517(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81512(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81479(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430e44 <mi_stat_print+0x3d4>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430e4a <mi_stat_print+0x3da>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81366(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81363(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81371(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430ef6 <mi_stat_print+0x486>
               	leaq	81279(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81279(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430fb5 <mi_stat_print+0x545>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81243(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81238(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81205(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430f56 <mi_stat_print+0x4e6>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430f5c <mi_stat_print+0x4ec>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81092(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81089(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81097(%rip), %r12       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rbx
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	81022(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81022(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movl	$32, %esi
               	movq	%rbx, %rdi
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	81017(%rip), %rcx       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	8(%r14), %rax
               	cmpq	%rax, (%r14)
               	leaq	80997(%rip), %rax       # 0x444c8a <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
               	leaq	81008(%rip), %rdx       # 0x444c9c <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>
               	cmovgq	%rax, %rdx
               	jmp	0x431356 <mi_stat_print+0x8e6>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	80925(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80920(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	80887(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43136c <mi_stat_print+0x8fc>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431374 <mi_stat_print+0x904>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80762(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80759(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80767(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431151 <mi_stat_print+0x6e1>
               	leaq	80676(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80676(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431210 <mi_stat_print+0x7a0>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80640(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80635(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80602(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4311b1 <mi_stat_print+0x741>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4311b7 <mi_stat_print+0x747>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80489(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80486(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80494(%rip), %rbx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	80467(%rip), %rcx       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43127a <mi_stat_print+0x80a>
               	leaq	80379(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80379(%rip), %r8        # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431339 <mi_stat_print+0x8c9>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80343(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80338(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80305(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4312da <mi_stat_print+0x86a>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4312e0 <mi_stat_print+0x870>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80192(%rip), %rax       # 0x444c5d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80189(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80197(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	80647(%rip), %rdx       # 0x444e5d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80082(%rip), %rax       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	80041(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80049(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43141c <mi_stat_print+0x9ac>
               	leaq	79959(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79997(%rip), %r8        # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4314df <mi_stat_print+0xa6f>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79926(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79921(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79888(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43147e <mi_stat_print+0xa0e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431486 <mi_stat_print+0xa16>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79808(%rip), %rax       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	79767(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	79775(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	8(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43152f <mi_stat_print+0xabf>
               	leaq	79684(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79722(%rip), %r8        # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4315f2 <mi_stat_print+0xb82>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79651(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79646(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79613(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x431591 <mi_stat_print+0xb21>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431599 <mi_stat_print+0xb29>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79533(%rip), %rax       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	79492(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	79500(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	24(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431642 <mi_stat_print+0xbd2>
               	leaq	79409(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79447(%rip), %r8        # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431705 <mi_stat_print+0xc95>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79376(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79371(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79338(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4316a4 <mi_stat_print+0xc34>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4316ac <mi_stat_print+0xc3c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79258(%rip), %rax       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	79217(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	79225(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	79232(%rip), %rdx       # 0x444ca2 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f9>
               	leaq	79506(%rip), %rcx       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%r15, %rsi
               	jmp	0x431010 <mi_stat_print+0x5a0>
               	nopw	%cs:(%rax,%rax)

<mi_stat_counter_print>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %rcx
               	movq	%rdi, %rbx
               	leaq	79142(%rip), %rdx       # 0x444c7d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	movq	(%rbx), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43179d <mi_stat_counter_print+0x5d>
               	leaq	79064(%rip), %rdx       # 0x444c56 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79102(%rip), %r8        # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x43185c <mi_stat_counter_print+0x11c>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	79028(%rip), %rdx       # 0x444c5f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79023(%rip), %rsi       # 0x444c61 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	78990(%rip), %r9        # 0x444c63 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4317fd <mi_stat_counter_print+0xbd>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431803 <mi_stat_counter_print+0xc3>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78915(%rip), %rax       # 0x444c83 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78874(%rip), %rdx       # 0x444c65 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	78882(%rip), %rdx       # 0x444c85 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	leaq	79332(%rip), %rdx       # 0x444e5d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430950 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<chacha_block>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movl	(%rdi), %r13d
               	movl	4(%rdi), %eax
               	movl	%eax, -24(%rsp)
               	movl	8(%rdi), %r12d
               	movl	12(%rdi), %r8d
               	movl	16(%rdi), %r9d
               	movl	20(%rdi), %eax
               	movl	24(%rdi), %ebx
               	movl	28(%rdi), %ebp
               	movl	32(%rdi), %ecx
               	movl	%ecx, -32(%rsp)
               	movl	36(%rdi), %ecx
               	movl	%ecx, -28(%rsp)
               	movl	40(%rdi), %ecx
               	movl	%ecx, -20(%rsp)
               	movl	44(%rdi), %r14d
               	movl	48(%rdi), %esi
               	movl	52(%rdi), %edx
               	movl	56(%rdi), %r15d
               	movq	%rdi, -8(%rsp)
               	movl	60(%rdi), %r11d
               	movq	$-2, -16(%rsp)
               	nop
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$16, %esi
               	movl	-32(%rsp), %ecx
               	addl	%esi, %ecx
               	xorl	%ecx, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$8, %esi
               	addl	%esi, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %r9d
               	roll	$7, %r9d
               	movl	-24(%rsp), %edi
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$16, %edx
               	movl	-28(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %eax
               	roll	$12, %eax
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -28(%rsp)
               	xorl	%ecx, %eax
               	roll	$7, %eax
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$16, %r15d
               	movl	-20(%rsp), %r10d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$7, %ebp
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r10d
               	xorl	%r10d, %eax
               	roll	$12, %eax
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r10d
               	movl	%r10d, -20(%rsp)
               	xorl	%r10d, %eax
               	roll	$7, %eax
               	addl	%ebx, %edi
               	xorl	%edi, %esi
               	roll	$16, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %edi
               	movl	%edi, -24(%rsp)
               	xorl	%edi, %esi
               	roll	$8, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$16, %edx
               	movl	-32(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %ebp
               	roll	$7, %ebp
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$16, %r15d
               	movl	-28(%rsp), %edi
               	addl	%r15d, %edi
               	xorl	%edi, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %edi
               	movl	%edi, -28(%rsp)
               	xorl	%edi, %r9d
               	roll	$7, %r9d
               	movq	-16(%rsp), %r10
               	addq	$2, %r10
               	movq	%r10, -16(%rsp)
               	cmpq	$18, %r10
               	jb	0x4318f0 <chacha_block+0x60>
               	movq	-8(%rsp), %rdi
               	addl	(%rdi), %r13d
               	movl	%r13d, 64(%rdi)
               	movd	%r9d, %xmm0
               	movd	%r8d, %xmm1
               	movd	%r12d, %xmm2
               	movd	-24(%rsp), %xmm3        # xmm3 = mem[0],zero,zero,zero
               	movd	-32(%rsp), %xmm4        # xmm4 = mem[0],zero,zero,zero
               	movd	%ebp, %xmm5
               	movd	%ebx, %xmm6
               	movd	%eax, %xmm7
               	punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
               	punpckldq	%xmm2, %xmm3    # xmm3 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
               	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
               	movdqu	4(%rdi), %xmm0
               	paddd	%xmm3, %xmm0
               	movdqu	20(%rdi), %xmm1
               	movdqu	%xmm0, 68(%rdi)
               	punpckldq	%xmm4, %xmm5    # xmm5 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
               	punpckldq	%xmm6, %xmm7    # xmm7 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
               	punpcklqdq	%xmm5, %xmm7    # xmm7 = xmm7[0],xmm5[0]
               	paddd	%xmm1, %xmm7
               	movdqu	%xmm7, 84(%rdi)
               	movl	-28(%rsp), %r10d
               	addl	36(%rdi), %r10d
               	movl	%r10d, 100(%rdi)
               	movl	-20(%rsp), %eax
               	addl	40(%rdi), %eax
               	movl	%eax, 104(%rdi)
               	addl	44(%rdi), %r14d
               	movl	%r14d, 108(%rdi)
               	movl	48(%rdi), %ebp
               	addl	%ebp, %esi
               	movl	%esi, 112(%rdi)
               	movl	52(%rdi), %esi
               	addl	%esi, %edx
               	movl	%edx, 116(%rdi)
               	movl	56(%rdi), %eax
               	addl	%eax, %r15d
               	movl	%r15d, 120(%rdi)
               	addl	60(%rdi), %r11d
               	movl	%r11d, 124(%rdi)
               	movl	$16, 128(%rdi)
               	incl	%ebp
               	movl	%ebp, 48(%rdi)
               	jne	0x431b1a <chacha_block+0x28a>
               	incl	%esi
               	movl	%esi, 52(%rdi)
               	jne	0x431b1a <chacha_block+0x28a>
               	addl	$1, %eax
               	movl	%eax, 56(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_malloc_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	175672(%rip), %r12      # 0x45c980 <_mi_heap_empty>
               	movq	$-80, %r13
               	xorl	%r15d, %r15d
               	cmpq	%r12, %rbx
               	je	0x431bee <_mi_malloc_generic+0xbe>
               	movq	(%rbx), %rax
               	movq	(%rax), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rax)
               	movq	295001(%rip), %rcx      # 0x479bc8 <deferred_free>
               	testq	%rcx, %rcx
               	je	0x431b97 <_mi_malloc_generic+0x67>
               	cmpb	$0, 8(%rax)
               	jne	0x431b97 <_mi_malloc_generic+0x67>
               	movb	$1, 8(%rax)
               	movq	294979(%rip), %rax      # 0x479bc8 <deferred_free>
               	movq	294980(%rip), %rdx      # 0x479bd0 <deferred_arg>
               	xorl	%edi, %edi
               	callq	*%rax
               	movq	(%rbx), %rax
               	movb	$0, 8(%rax)
               	movq	2840(%rbx), %rax
               	nop
               	testq	%rax, %rax
               	je	0x431bd0 <_mi_malloc_generic+0xa0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%r15, 2840(%rbx)
               	jne	0x431ba0 <_mi_malloc_generic+0x70>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x42f360 <_mi_free_delayed_block>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x431bc0 <_mi_malloc_generic+0x90>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431c60 <mi_find_page>
               	testq	%rax, %rax
               	je	0x431c03 <_mi_malloc_generic+0xd3>
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	jne	0x431c3b <_mi_malloc_generic+0x10b>
               	jmp	0x431b52 <_mi_malloc_generic+0x22>
               	callq	0x42a7c0 <mi_thread_init>
               	movq	%fs:(%r13), %rbx
               	cmpq	%r12, %rbx
               	jne	0x431b5b <_mi_malloc_generic+0x2b>
               	jmp	0x431c4e <_mi_malloc_generic+0x11e>
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42c470 <mi_heap_collect_ex>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431c60 <mi_find_page>
               	testq	%rax, %rax
               	jne	0x431be0 <_mi_malloc_generic+0xb0>
               	leaq	77985(%rip), %rsi       # 0x444cc8 <typeinfo name for kotlin::gc::GCSchedulerData+0x181f>
               	xorl	%r15d, %r15d
               	movl	$12, %edi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	jmp	0x431c4e <_mi_malloc_generic+0x11e>
               	movl	16(%rax), %edx
               	addl	$1, %edx
               	movl	%edx, 16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, %r15
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<mi_find_page>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %r15
               	cmpq	$2097153, %rsi          # imm = 0x200001
               	jae	0x431da4 <mi_find_page+0x144>
               	movl	$1, %eax
               	cmpq	$9, %rdx
               	jb	0x431cb6 <mi_find_page+0x56>
               	leaq	7(%rdx), %rax
               	shrq	$3, %rax
               	cmpq	$64, %rdx
               	ja	0x431c9b <mi_find_page+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	jmp	0x431cb6 <mi_find_page+0x56>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %eax
               	addl	$253, %eax
               	movzbl	%al, %eax
               	leaq	(%rax,%rax,2), %r14
               	movq	1040(%r15,%r14,8), %rbx
               	testq	%rbx, %rbx
               	je	0x431d87 <mi_find_page+0x127>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x431d29 <mi_find_page+0xc9>
               	movq	32(%rbx), %rax
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x431ce0 <mi_find_page+0x80>
               	andq	$-4, %rcx
               	je	0x431d29 <mi_find_page+0xc9>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x431d12 <mi_find_page+0xb2>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x431d00 <mi_find_page+0xa0>
               	cmpl	%edx, %eax
               	jbe	0x431d51 <mi_find_page+0xf1>
               	leaq	77201(%rip), %rsi       # 0x444aae <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	movq	24(%rbx), %rax
               	movq	8(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x431d71 <mi_find_page+0x111>
               	testq	%rcx, %rcx
               	jne	0x431d76 <mi_find_page+0x116>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	jmp	0x431d76 <mi_find_page+0x116>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	movq	8(%rbx), %rcx
               	testq	%rax, %rax
               	jne	0x431d36 <mi_find_page+0xd6>
               	testq	%rcx, %rcx
               	je	0x431d87 <mi_find_page+0x127>
               	movb	7(%rbx), %al
               	andb	$1, %al
               	movb	%al, 7(%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	(%r15,%r14,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	movq	%r15, %rdi
               	movl	$1, %edx
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4327c0 <mi_page_queue_find_free_ex>
               	testq	%rdx, %rdx
               	js	0x431f08 <mi_find_page+0x2a8>
               	cmpq	$33554432, %rdx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	cmpq	$8388608, %rdx          # imm = 0x800000
               	movl	$262144, %eax           # imm = 0x40000
               	cmovaeq	%rcx, %rax
               	movq	%rax, %rcx
               	notq	%rcx
               	cmpq	%rdx, %rcx
               	seta	%cl
               	testb	$1, %cl
               	je	0x431df4 <mi_find_page+0x194>
               	leaq	(%rdx,%rax), %rcx
               	addq	$-1, %rcx
               	negq	%rax
               	andq	%rcx, %rax
               	movq	%rax, %rdx
               	xorl	%ebx, %ebx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x431fb0 <mi_page_fresh_alloc>
               	testq	%rax, %rax
               	je	0x431d7e <mi_find_page+0x11e>
               	movq	%rax, %r14
               	movl	20(%rax), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x431f22 <mi_find_page+0x2c2>
               	movq	$0, 40(%r14)
               	movq	(%r15), %rdi
               	cmpq	$67108865, %rsi         # imm = 0x4000001
               	jb	0x431e74 <mi_find_page+0x214>
               	addq	$528, %rdi              # imm = 0x210
               	callq	0x42bbd0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	736(%rax), %rcx
               	leaq	194292(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x431eb6 <mi_find_page+0x256>
               	leaq	194856(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x431eb6 <mi_find_page+0x256>
               	lock
               	addq	$1, 744(%rax)
               	lock
               	addq	$1, 736(%rax)
               	jmp	0x431f00 <mi_find_page+0x2a0>
               	addq	$496, %rdi              # imm = 0x1F0
               	callq	0x42bbd0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	720(%rax), %rcx
               	leaq	194223(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x431edc <mi_find_page+0x27c>
               	leaq	194787(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x431edc <mi_find_page+0x27c>
               	lock
               	addq	$1, 728(%rax)
               	lock
               	addq	$1, 720(%rax)
               	jmp	0x431f00 <mi_find_page+0x2a0>
               	movq	744(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 744(%rax)
               	movq	736(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 736(%rax)
               	jmp	0x431f00 <mi_find_page+0x2a0>
               	movq	728(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 728(%rax)
               	movq	720(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 720(%rax)
               	movq	%r14, %rbx
               	jmp	0x431d7e <mi_find_page+0x11e>
               	leaq	77280(%rip), %rsi       # 0x444cef <typeinfo name for kotlin::gc::GCSchedulerData+0x1846>
               	xorl	%ebx, %ebx
               	movl	$75, %edi
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	jmp	0x431d7e <mi_find_page+0x11e>
               	movq	%r14, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x431f39 <mi_find_page+0x2d9>
               	movq	72(%rax), %rdx
               	jmp	0x431f45 <mi_find_page+0x2e5>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%r14), %bl
               	testb	%bl, %bl
               	je	0x431f54 <mi_find_page+0x2f4>
               	movq	%rdx, %rsi
               	jmp	0x431e1b <mi_find_page+0x1bb>
               	movq	80(%rax), %r8
               	movq	%rdx, %rcx
               	subq	%r8, %rcx
               	cmpl	$1, %edi
               	ja	0x431f9a <mi_find_page+0x33a>
               	testl	%esi, %esi
               	je	0x431f9a <mi_find_page+0x33a>
               	movzbl	%bl, %edi
               	imulq	%rdi, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431f84 <mi_find_page+0x324>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x431f88 <mi_find_page+0x328>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	jmp	0x431e1b <mi_find_page+0x1bb>
               	nopw	%cs:(%rax,%rax)

<mi_page_fresh_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r13
               	movq	%rdi, %r12
               	movq	(%rdi), %r14
               	leaq	32(%r14), %rbx
               	leaq	160(%r14), %r9
               	cmpq	$16384, %rdx            # imm = 0x4000
               	movq	%rdx, 16(%rsp)
               	ja	0x432015 <mi_page_fresh_alloc+0x65>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	jne	0x4321a7 <mi_page_fresh_alloc+0x1f7>
               	xorl	%r15d, %r15d
               	movl	$16, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %r8
               	callq	0x433090 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x4321b2 <mi_page_fresh_alloc+0x202>
               	movq	(%rbx), %rdi
               	jmp	0x4321a7 <mi_page_fresh_alloc+0x1f7>
               	cmpq	$131072, %rdx           # imm = 0x20000
               	ja	0x432055 <mi_page_fresh_alloc+0xa5>
               	movq	48(%r14), %rdi
               	testq	%rdi, %rdi
               	jne	0x4321a7 <mi_page_fresh_alloc+0x1f7>
               	movl	$19, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$1, %edx
               	movq	%rbx, %r8
               	callq	0x433090 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x432115 <mi_page_fresh_alloc+0x165>
               	movq	48(%r14), %rdi
               	jmp	0x4321a7 <mi_page_fresh_alloc+0x1f7>
               	cmpq	$2097152, %rdx          # imm = 0x200000
               	ja	0x432087 <mi_page_fresh_alloc+0xd7>
               	movl	$22, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$2, %edx
               	movq	%rbx, %r8
               	callq	0x433090 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x432115 <mi_page_fresh_alloc+0x165>
               	movq	%rax, %rdi
               	jmp	0x4321a7 <mi_page_fresh_alloc+0x1f7>
               	xorl	%r15d, %r15d
               	movl	$22, %ecx
               	xorl	%edi, %edi
               	movq	%rdx, %rsi
               	movl	$3, %edx
               	movq	%rbx, %r8
               	callq	0x4336f0 <mi_segment_init>
               	testq	%rax, %rax
               	je	0x4321b2 <mi_page_fresh_alloc+0x202>
               	movq	%rax, %rdi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%rdi)
               	movq	72(%rdi), %r8
               	movq	144(%r14), %rdx
               	leaq	193659(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%cl
               	leaq	194222(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%cl, %al
               	testq	%r8, %r8
               	jle	0x43211d <mi_page_fresh_alloc+0x16d>
               	testb	%al, %al
               	je	0x432157 <mi_page_fresh_alloc+0x1a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	cmpq	%rsi, %rax
               	jge	0x43210d <mi_page_fresh_alloc+0x15d>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x432100 <mi_page_fresh_alloc+0x150>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x432179 <mi_page_fresh_alloc+0x1c9>
               	xorl	%r15d, %r15d
               	jmp	0x4321b2 <mi_page_fresh_alloc+0x202>
               	testb	%al, %al
               	je	0x432436 <mi_page_fresh_alloc+0x486>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rbp
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x43214d <mi_page_fresh_alloc+0x19d>
               	lock
               	cmpxchgq	%rbp, 16(%rdx)
               	jne	0x432140 <mi_page_fresh_alloc+0x190>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x432456 <mi_page_fresh_alloc+0x4a6>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43216d <mi_page_fresh_alloc+0x1bd>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	jbe	0x432192 <mi_page_fresh_alloc+0x1e2>
               	movq	%rax, 96(%r14)
               	movq	104(%r14), %rax
               	subq	%r8, %rax
               	movq	%rax, 104(%r14)
               	cmpq	112(%r14), %rax
               	jbe	0x4321a7 <mi_page_fresh_alloc+0x1f7>
               	movq	%rax, 112(%r14)
               	movq	%rbx, %rsi
               	callq	0x433470 <mi_segment_find_free>
               	movq	%rax, %r15
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4322e4 <mi_page_fresh_alloc+0x334>
               	movq	%r12, 8(%rsp)
               	leaq	24(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	72(%r14), %r12
               	testq	%r12, %r12
               	je	0x4322c7 <mi_page_fresh_alloc+0x317>
               	movq	24(%rsp), %rcx
               	movq	32(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x432239 <mi_page_fresh_alloc+0x289>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	$0, 16(%rbp)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 48(%rbp)
               	testq	%r12, %r12
               	je	0x4322c7 <mi_page_fresh_alloc+0x317>
               	movq	%r12, %rbp
               	cmpl	%ebx, 16(%r12)
               	jg	0x4322d3 <mi_page_fresh_alloc+0x323>
               	movq	56(%rbp), %r12
               	movl	$10, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x432220 <mi_page_fresh_alloc+0x270>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x432220 <mi_page_fresh_alloc+0x270>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x432220 <mi_page_fresh_alloc+0x270>
               	cmpl	$3, 112(%rdx)
               	jne	0x432284 <mi_page_fresh_alloc+0x2d4>
               	movq	72(%rdx), %rsi
               	jmp	0x432290 <mi_page_fresh_alloc+0x2e0>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x4322af <mi_page_fresh_alloc+0x2ff>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x432220 <mi_page_fresh_alloc+0x270>
               	callq	0x42dde0 <_mi_os_reset>
               	jmp	0x432220 <mi_page_fresh_alloc+0x270>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 64(%r14)
               	jmp	0x4322df <mi_page_fresh_alloc+0x32f>
               	movq	%rbp, 72(%r14)
               	movq	$0, 48(%rbp)
               	movq	8(%rsp), %r12
               	testq	%r15, %r15
               	je	0x4327a2 <mi_page_fresh_alloc+0x7f2>
               	movq	%r15, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	movq	%r12, 40(%r15)
               	movl	112(%rsi), %edx
               	cmpl	$3, %edx
               	jne	0x432309 <mi_page_fresh_alloc+0x359>
               	movq	72(%rsi), %rax
               	jmp	0x432315 <mi_page_fresh_alloc+0x365>
               	movq	96(%rsi), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	movq	16(%rsp), %rbx
               	movb	(%r15), %cl
               	movzbl	%cl, %edi
               	testb	%dil, %dil
               	jne	0x43236f <mi_page_fresh_alloc+0x3bf>
               	movq	80(%rsi), %rbp
               	movq	%rax, %rcx
               	subq	%rbp, %rcx
               	cmpl	$1, %edx
               	ja	0x43236c <mi_page_fresh_alloc+0x3bc>
               	testq	%rbx, %rbx
               	je	0x43236c <mi_page_fresh_alloc+0x3bc>
               	imulq	%rdi, %rax
               	addq	%rsi, %rax
               	addq	%rbp, %rax
               	movq	%rax, %rdx
               	orq	%rbx, %rdx
               	shrq	$32, %rdx
               	je	0x432356 <mi_page_fresh_alloc+0x3a6>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x43235a <mi_page_fresh_alloc+0x3aa>
               	xorl	%edx, %edx
               	divl	%ebx
               	movq	%rbx, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbx, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	cmpq	$67108864, %rbx         # imm = 0x4000000
               	movl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbx, %rbp
               	movl	%ebp, 20(%r15)
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x432396 <mi_page_fresh_alloc+0x3e6>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x43239a <mi_page_fresh_alloc+0x3ea>
               	xorl	%edx, %edx
               	divl	%ebx
               	movw	%ax, 4(%r15)
               	movb	1(%r15), %cl
               	shrb	$3, %cl
               	andb	$1, %cl
               	movb	7(%r15), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 7(%r15)
               	cmpq	$0, 8(%r15)
               	jne	0x4324f0 <mi_page_fresh_alloc+0x540>
               	movzwl	2(%r15), %ecx
               	cmpw	%ax, %cx
               	jae	0x4324f0 <mi_page_fresh_alloc+0x540>
               	movzwl	%cx, %r8d
               	movl	112(%rsi), %edx
               	cmpl	$3, %edx
               	jne	0x4323ec <mi_page_fresh_alloc+0x43c>
               	movq	72(%rsi), %rax
               	testb	%dil, %dil
               	je	0x4323fd <mi_page_fresh_alloc+0x44d>
               	movq	%r12, %rbx
               	jmp	0x43248d <mi_page_fresh_alloc+0x4dd>
               	movq	96(%rsi), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%dil, %dil
               	jne	0x4323e4 <mi_page_fresh_alloc+0x434>
               	movq	80(%rsi), %rbx
               	movq	%rax, %rcx
               	subq	%rbx, %rcx
               	cmpl	$1, %edx
               	ja	0x432431 <mi_page_fresh_alloc+0x481>
               	testq	%rbp, %rbp
               	je	0x432431 <mi_page_fresh_alloc+0x481>
               	imulq	%rdi, %rax
               	addq	%rax, %rsi
               	addq	%rbx, %rsi
               	movq	%rsi, %rax
               	movq	%r12, %rbx
               	shrq	$32, %rax
               	je	0x432472 <mi_page_fresh_alloc+0x4c2>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x432478 <mi_page_fresh_alloc+0x4c8>
               	movq	%r12, %rbx
               	jmp	0x43248a <mi_page_fresh_alloc+0x4da>
               	movq	24(%rdx), %rcx
               	leaq	1(%rcx), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rcx
               	jl	0x43244c <mi_page_fresh_alloc+0x49c>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	ja	0x43218e <mi_page_fresh_alloc+0x1de>
               	jmp	0x432192 <mi_page_fresh_alloc+0x1e2>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	movl	20(%r15), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	cmovaeq	%rax, %rsi
               	movzwl	4(%r15), %r12d
               	subq	%r8, %r12
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x4324bd <mi_page_fresh_alloc+0x50d>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %r12
               	cmovaq	%rax, %r12
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	callq	0x432fc0 <mi_page_free_list_extend>
               	movzwl	2(%r15), %eax
               	addl	%r12d, %eax
               	movw	%ax, 2(%r15)
               	testb	$8, 1(%r15)
               	movq	%rbx, %r12
               	jne	0x4324f0 <mi_page_fresh_alloc+0x540>
               	movb	7(%r15), %al
               	andb	$-2, %al
               	movb	%al, 7(%r15)
               	movq	(%r12), %rdx
               	leaq	208(%rdx), %rcx
               	leaq	192574(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x43254f <mi_page_fresh_alloc+0x59f>
               	leaq	193138(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x43254f <mi_page_fresh_alloc+0x59f>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 232(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	224(%rdx), %rax
               	cmpq	%rsi, %rax
               	jg	0x432540 <mi_page_fresh_alloc+0x590>
               	lock
               	cmpxchgq	%rdi, 224(%rdx)
               	jne	0x432530 <mi_page_fresh_alloc+0x580>
               	lock
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	jne	0x432584 <mi_page_fresh_alloc+0x5d4>
               	jmp	0x4327a2 <mi_page_fresh_alloc+0x7f2>
               	movq	232(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 232(%rdx)
               	cmpq	224(%rdx), %rsi
               	jl	0x432571 <mi_page_fresh_alloc+0x5c1>
               	movq	%rax, 224(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	testq	%r13, %r13
               	je	0x4327a2 <mi_page_fresh_alloc+0x7f2>
               	cmpq	$2097168, 16(%r13)      # imm = 0x200010
               	sete	%al
               	movb	6(%r15), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%r15)
               	movq	(%r13), %rax
               	movq	%rax, 48(%r15)
               	movq	$0, 56(%r15)
               	leaq	56(%rax), %rcx
               	leaq	8(%r13), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, (%r13)
               	movq	16(%r13), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43278e <mi_page_fresh_alloc+0x7de>
               	leaq	7(%rcx), %rax
               	shrq	$3, %rax
               	cmpq	%r15, 8(%r12,%rax,8)
               	je	0x43278e <mi_page_fresh_alloc+0x7de>
               	cmpq	$9, %rcx
               	jae	0x4325f3 <mi_page_fresh_alloc+0x643>
               	xorl	%ecx, %ecx
               	jmp	0x4326b1 <mi_page_fresh_alloc+0x701>
               	cmpq	$64, %rcx
               	ja	0x432601 <mi_page_fresh_alloc+0x651>
               	leal	1(%rax), %edx
               	andb	$-2, %dl
               	jmp	0x43261a <mi_page_fresh_alloc+0x66a>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %edx
               	addb	$-3, %dl
               	leaq	1040(%r12), %rsi
               	addq	$-24, %r13
               	nopw	%cs:(%rax,%rax)
               	movq	16(%r13), %rdi
               	addq	$7, %rdi
               	movq	%rdi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rdi
               	jb	0x432690 <mi_page_fresh_alloc+0x6e0>
               	cmpq	$71, %rdi
               	ja	0x432660 <mi_page_fresh_alloc+0x6b0>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432690 <mi_page_fresh_alloc+0x6e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdi          # imm = 0x200007
               	ja	0x432690 <mi_page_fresh_alloc+0x6e0>
               	leaq	-1(%rbp), %rdi
               	bsrq	%rdi, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdi
               	andl	$3, %edi
               	leal	(%rdi,%rbx,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %r13
               	jbe	0x43269d <mi_page_fresh_alloc+0x6ed>
               	addq	$-24, %r13
               	cmpb	%cl, %dl
               	je	0x432630 <mi_page_fresh_alloc+0x680>
               	leaq	1(%rbp), %rcx
               	cmpq	%rax, %rbp
               	cmovaeq	%rax, %rcx
               	cmpq	%rax, %rcx
               	ja	0x43278e <mi_page_fresh_alloc+0x7de>
               	addq	$1, %rax
               	movq	%rax, %rdx
               	subq	%rcx, %rdx
               	cmpq	$4, %rdx
               	jb	0x432780 <mi_page_fresh_alloc+0x7d0>
               	movq	%rdx, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x4326f4 <mi_page_fresh_alloc+0x744>
               	xorl	%ebx, %ebx
               	jmp	0x432749 <mi_page_fresh_alloc+0x799>
               	leaq	(%r12,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rdi
               	jne	0x432710 <mi_page_fresh_alloc+0x760>
               	testq	%rbp, %rbp
               	je	0x432772 <mi_page_fresh_alloc+0x7c2>
               	addq	%rcx, %rbx
               	leaq	(%r12,%rbx,8), %rsi
               	addq	$24, %rsi
               	negq	%rbp
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rbp
               	jne	0x432760 <mi_page_fresh_alloc+0x7b0>
               	cmpq	%r8, %rdx
               	je	0x43278e <mi_page_fresh_alloc+0x7de>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %rax
               	jne	0x432780 <mi_page_fresh_alloc+0x7d0>
               	movq	3016(%r12), %rax
               	addq	$1, %rax
               	movq	%rax, 3016(%r12)
               	movq	%r15, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_queue_find_free_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorb	$1, %dl
               	leaq	-24(%rsi), %rax
               	movq	%rax, 8(%rsp)
               	leaq	1040(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movl	%edx, 4(%rsp)
               	movq	(%r14), %r13
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	testq	%r13, %r13
               	je	0x432de0 <mi_page_queue_find_free_ex+0x620>
               	movq	%r13, %rbx
               	movq	48(%r13), %r13
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432870 <mi_page_queue_find_free_ex+0xb0>
               	movq	32(%rbx), %rax
               	nop
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432820 <mi_page_queue_find_free_ex+0x60>
               	andq	$-4, %rcx
               	je	0x432870 <mi_page_queue_find_free_ex+0xb0>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x432852 <mi_page_queue_find_free_ex+0x92>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x432840 <mi_page_queue_find_free_ex+0x80>
               	cmpl	%edx, %eax
               	jbe	0x432943 <mi_page_queue_find_free_ex+0x183>
               	movl	$14, %edi
               	leaq	74312(%rip), %rsi       # 0x444aae <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432894 <mi_page_queue_find_free_ex+0xd4>
               	cmpq	$0, 8(%rbx)
               	jne	0x432894 <mi_page_queue_find_free_ex+0xd4>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	cmpq	$0, 8(%rbx)
               	jne	0x432f9a <mi_page_queue_find_free_ex+0x7da>
               	movzwl	2(%rbx), %eax
               	movzwl	4(%rbx), %ecx
               	cmpw	%cx, %ax
               	jb	0x432ec7 <mi_page_queue_find_free_ex+0x707>
               	testb	$1, 6(%rbx)
               	jne	0x432800 <mi_page_queue_find_free_ex+0x40>
               	movq	40(%rbx), %rdx
               	movq	40(%rbx), %r9
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4328d3 <mi_page_queue_find_free_ex+0x113>
               	movq	48(%rbx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	48(%rbx), %r15
               	testq	%r15, %r15
               	je	0x4328e0 <mi_page_queue_find_free_ex+0x120>
               	movq	%rax, 56(%r15)
               	cmpq	%rbx, 8(%r14)
               	je	0x4328f1 <mi_page_queue_find_free_ex+0x131>
               	cmpq	%rbx, (%r14)
               	jne	0x432b00 <mi_page_queue_find_free_ex+0x340>
               	jmp	0x432902 <mi_page_queue_find_free_ex+0x142>
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r14)
               	cmpq	%rbx, (%r14)
               	jne	0x432b00 <mi_page_queue_find_free_ex+0x340>
               	movq	%r15, (%r14)
               	movq	16(%r14), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x432b00 <mi_page_queue_find_free_ex+0x340>
               	testq	%r15, %r15
               	leaq	77345(%rip), %rcx       # 0x445740 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r10
               	shrq	$3, %r10
               	cmpq	%r15, 8(%r9,%r10,8)
               	je	0x432b00 <mi_page_queue_find_free_ex+0x340>
               	cmpq	$9, %rax
               	jae	0x432968 <mi_page_queue_find_free_ex+0x1a8>
               	xorl	%ecx, %ecx
               	jmp	0x432a22 <mi_page_queue_find_free_ex+0x262>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x432879 <mi_page_queue_find_free_ex+0xb9>
               	jmp	0x432894 <mi_page_queue_find_free_ex+0xd4>
               	cmpq	$64, %rax
               	ja	0x432978 <mi_page_queue_find_free_ex+0x1b8>
               	leal	1(%r10), %r8d
               	andb	$-2, %r8b
               	jmp	0x432993 <mi_page_queue_find_free_ex+0x1d3>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r9), %rax
               	movq	8(%rsp), %rdi
               	nop
               	movq	16(%rdi), %rsi
               	addq	$7, %rsi
               	movq	%rsi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rsi
               	jb	0x432a00 <mi_page_queue_find_free_ex+0x240>
               	cmpq	$71, %rsi
               	ja	0x4329d0 <mi_page_queue_find_free_ex+0x210>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432a00 <mi_page_queue_find_free_ex+0x240>
               	movb	$73, %cl
               	cmpq	$2097159, %rsi          # imm = 0x200007
               	ja	0x432a00 <mi_page_queue_find_free_ex+0x240>
               	leaq	-1(%rbp), %rsi
               	bsrq	%rsi, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rdi
               	jbe	0x432a0e <mi_page_queue_find_free_ex+0x24e>
               	addq	$-24, %rdi
               	cmpb	%cl, %r8b
               	je	0x4329a0 <mi_page_queue_find_free_ex+0x1e0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r10, %rbp
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x432b00 <mi_page_queue_find_free_ex+0x340>
               	addq	$1, %r10
               	movq	%r10, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432af0 <mi_page_queue_find_free_ex+0x330>
               	movq	%r11, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x432a65 <mi_page_queue_find_free_ex+0x2a5>
               	xorl	%ebp, %ebp
               	jmp	0x432ab9 <mi_page_queue_find_free_ex+0x2f9>
               	leaq	(%r9,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbp,8)
               	movdqu	%xmm0, -96(%rsi,%rbp,8)
               	movdqu	%xmm0, -80(%rsi,%rbp,8)
               	movdqu	%xmm0, -64(%rsi,%rbp,8)
               	movdqu	%xmm0, -48(%rsi,%rbp,8)
               	movdqu	%xmm0, -32(%rsi,%rbp,8)
               	movdqu	%xmm0, -16(%rsi,%rbp,8)
               	movdqu	%xmm0, (%rsi,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdi
               	jne	0x432a80 <mi_page_queue_find_free_ex+0x2c0>
               	testq	%rax, %rax
               	je	0x432ae2 <mi_page_queue_find_free_ex+0x322>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rsi
               	addq	$24, %rsi
               	negq	%rax
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rax
               	jne	0x432ad0 <mi_page_queue_find_free_ex+0x310>
               	cmpq	%r8, %r11
               	je	0x432b00 <mi_page_queue_find_free_ex+0x340>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x432af0 <mi_page_queue_find_free_ex+0x330>
               	nop
               	movq	2824(%rdx), %rax
               	movq	%rax, 56(%rbx)
               	movq	$0, 48(%rbx)
               	testq	%rax, %rax
               	je	0x432b2f <mi_page_queue_find_free_ex+0x36f>
               	movq	%rbx, 48(%rax)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	jmp	0x432d10 <mi_page_queue_find_free_ex+0x550>
               	movq	%rbx, 2816(%rdx)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x432d10 <mi_page_queue_find_free_ex+0x550>
               	leaq	7(%r8), %r15
               	shrq	$3, %r15
               	cmpq	%rbx, 8(%r9,%r15,8)
               	je	0x432d10 <mi_page_queue_find_free_ex+0x550>
               	cmpq	$9, %r8
               	jae	0x432b71 <mi_page_queue_find_free_ex+0x3b1>
               	xorl	%ecx, %ecx
               	jmp	0x432c32 <mi_page_queue_find_free_ex+0x472>
               	cmpq	$64, %r8
               	ja	0x432b81 <mi_page_queue_find_free_ex+0x3c1>
               	leal	1(%r15), %ebp
               	andb	$-2, %bpl
               	jmp	0x432b9b <mi_page_queue_find_free_ex+0x3db>
               	leaq	-1(%r15), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %ebp
               	addb	$-3, %bpl
               	leaq	1040(%r9), %rsi
               	addq	$2792, %rdx             # imm = 0xAE8
               	nopl	(%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x432c10 <mi_page_queue_find_free_ex+0x450>
               	cmpq	$71, %rax
               	ja	0x432be0 <mi_page_queue_find_free_ex+0x420>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x432c10 <mi_page_queue_find_free_ex+0x450>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x432c10 <mi_page_queue_find_free_ex+0x450>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r10
               	movl	%r10d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r10,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x432c1e <mi_page_queue_find_free_ex+0x45e>
               	addq	$-24, %rdx
               	cmpb	%cl, %bpl
               	je	0x432bb0 <mi_page_queue_find_free_ex+0x3f0>
               	leaq	1(%rdi), %rcx
               	cmpq	%r15, %rdi
               	cmovaeq	%r15, %rcx
               	cmpq	%r15, %rcx
               	ja	0x432d10 <mi_page_queue_find_free_ex+0x550>
               	addq	$1, %r15
               	movq	%r15, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432d00 <mi_page_queue_find_free_ex+0x540>
               	movq	%r11, %r10
               	andq	$-4, %r10
               	movq	%rbx, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r10), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rdx
               	jae	0x432c75 <mi_page_queue_find_free_ex+0x4b5>
               	xorl	%ebp, %ebp
               	jmp	0x432cc9 <mi_page_queue_find_free_ex+0x509>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rbp,8)
               	movdqu	%xmm0, -96(%rdx,%rbp,8)
               	movdqu	%xmm0, -80(%rdx,%rbp,8)
               	movdqu	%xmm0, -64(%rdx,%rbp,8)
               	movdqu	%xmm0, -48(%rdx,%rbp,8)
               	movdqu	%xmm0, -32(%rdx,%rbp,8)
               	movdqu	%xmm0, -16(%rdx,%rbp,8)
               	movdqu	%xmm0, (%rdx,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rsi
               	jne	0x432c90 <mi_page_queue_find_free_ex+0x4d0>
               	testq	%rax, %rax
               	je	0x432cf2 <mi_page_queue_find_free_ex+0x532>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x432ce0 <mi_page_queue_find_free_ex+0x520>
               	cmpq	%r10, %r11
               	je	0x432d10 <mi_page_queue_find_free_ex+0x550>
               	addq	%r10, %rcx
               	nop
               	movq	%rbx, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r15
               	jne	0x432d00 <mi_page_queue_find_free_ex+0x540>
               	nop
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rbx), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rbx)
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432d90 <mi_page_queue_find_free_ex+0x5d0>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432d40 <mi_page_queue_find_free_ex+0x580>
               	andq	$-4, %rcx
               	je	0x432d90 <mi_page_queue_find_free_ex+0x5d0>
               	movzwl	2(%rbx), %esi
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rdx
               	addl	$1, %eax
               	cmpl	%esi, %eax
               	ja	0x432d72 <mi_page_queue_find_free_ex+0x5b2>
               	movq	(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x432d60 <mi_page_queue_find_free_ex+0x5a0>
               	cmpl	%esi, %eax
               	jbe	0x432dc1 <mi_page_queue_find_free_ex+0x601>
               	movl	$14, %edi
               	leaq	73000(%rip), %rsi       # 0x444aae <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42be20 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rcx
               	testq	%rcx, %rcx
               	je	0x432800 <mi_page_queue_find_free_ex+0x40>
               	cmpq	$0, 8(%rbx)
               	jne	0x432800 <mi_page_queue_find_free_ex+0x40>
               	movq	%rcx, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	jmp	0x432800 <mi_page_queue_find_free_ex+0x40>
               	movq	24(%rbx), %rsi
               	movq	%rsi, (%rdx)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %edx
               	subl	%eax, %edx
               	movl	%edx, 16(%rbx)
               	testq	%rcx, %rcx
               	jne	0x432d9d <mi_page_queue_find_free_ex+0x5dd>
               	jmp	0x432800 <mi_page_queue_find_free_ex+0x40>
               	nop
               	movq	3024(%r12), %rbp
               	cmpq	3032(%r12), %rbp
               	jbe	0x432e40 <mi_page_queue_find_free_ex+0x680>
               	movl	$74, %r13d
               	xorl	%r15d, %r15d
               	movq	%r13, 3024(%r12)
               	movq	%r15, 3032(%r12)
               	movq	16(%r14), %rdx
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x431fb0 <mi_page_fresh_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	setne	%al
               	orb	4(%rsp), %al
               	movb	$1, %dl
               	testb	$1, %al
               	je	0x4327ec <mi_page_queue_find_free_ex+0x2c>
               	jmp	0x432fa2 <mi_page_queue_find_free_ex+0x7e2>
               	nopw	%cs:(%rax,%rax)
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	movq	16(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %rbx
               	movl	$74, %r13d
               	xorl	%r15d, %r15d
               	jmp	0x432e86 <mi_page_queue_find_free_ex+0x6c6>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r12), %rbp
               	ja	0x432dfb <mi_page_queue_find_free_ex+0x63b>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432e70 <mi_page_queue_find_free_ex+0x6b0>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x432e70 <mi_page_queue_find_free_ex+0x6b0>
               	cmpl	$0, 16(%rax)
               	jne	0x432e5f <mi_page_queue_find_free_ex+0x69f>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	cmpb	$1, %cl
               	ja	0x432eb7 <mi_page_queue_find_free_ex+0x6f7>
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	callq	0x42d130 <_mi_page_free>
               	jmp	0x432e70 <mi_page_queue_find_free_ex+0x6b0>
               	cmpq	%r13, %rbp
               	cmovbq	%rbp, %r13
               	cmpq	%r15, %rbp
               	cmovaq	%rbp, %r15
               	jmp	0x432e70 <mi_page_queue_find_free_ex+0x6b0>
               	movzwl	%ax, %r8d
               	movzwl	%cx, %ebp
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rbx), %edi
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x432eee <mi_page_queue_find_free_ex+0x72e>
               	movq	72(%rax), %rsi
               	movb	(%rbx), %cl
               	testb	%cl, %cl
               	jne	0x432f49 <mi_page_queue_find_free_ex+0x789>
               	jmp	0x432f00 <mi_page_queue_find_free_ex+0x740>
               	movq	96(%rax), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movb	(%rbx), %cl
               	testb	%cl, %cl
               	jne	0x432f49 <mi_page_queue_find_free_ex+0x789>
               	movq	80(%rax), %r9
               	movq	%rsi, %r10
               	subq	%r9, %r10
               	cmpl	$1, %edx
               	ja	0x432f46 <mi_page_queue_find_free_ex+0x786>
               	testl	%edi, %edi
               	je	0x432f46 <mi_page_queue_find_free_ex+0x786>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rsi
               	addq	%rsi, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x432f30 <mi_page_queue_find_free_ex+0x770>
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x432f34 <mi_page_queue_find_free_ex+0x774>
               	xorl	%edx, %edx
               	divl	%edi
               	movq	%rdi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rdi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r10
               	movq	%r10, %rsi
               	cmpl	$67108864, %edi         # imm = 0x4000000
               	cmovbq	%rdi, %rsi
               	subq	%r8, %rbp
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x432f70 <mi_page_queue_find_free_ex+0x7b0>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %rbp
               	cmovaq	%rax, %rbp
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x432fc0 <mi_page_free_list_extend>
               	movzwl	2(%rbx), %eax
               	addl	%ebp, %eax
               	movw	%ax, 2(%rbx)
               	testb	$8, 1(%rbx)
               	jne	0x432f9a <mi_page_queue_find_free_ex+0x7da>
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	movb	7(%rbx), %al
               	andb	$1, %al
               	movb	%al, 7(%rbx)
               	movq	%rbx, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_free_list_extend>:
               	movq	%rdx, %r8
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rdi), %r9d
               	movl	112(%rax), %r10d
               	cmpl	$3, %r10d
               	jne	0x432fe0 <mi_page_free_list_extend+0x20>
               	movq	72(%rax), %r11
               	jmp	0x432fed <mi_page_free_list_extend+0x2d>
               	movq	96(%rax), %rcx
               	movl	$1, %r11d
               	shlq	%cl, %r11
               	movb	(%rdi), %cl
               	movzbl	%cl, %edx
               	movq	%rdx, %rcx
               	imulq	%r11, %rcx
               	addq	%rax, %rcx
               	testb	%dl, %dl
               	jne	0x43303a <mi_page_free_list_extend+0x7a>
               	addq	80(%rax), %rcx
               	cmpl	$1, %r10d
               	ja	0x43303a <mi_page_free_list_extend+0x7a>
               	testl	%r9d, %r9d
               	je	0x43303a <mi_page_free_list_extend+0x7a>
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433022 <mi_page_free_list_extend+0x62>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%r9
               	jmp	0x433029 <mi_page_free_list_extend+0x69>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%r9d
               	movq	%r9, %rax
               	subq	%rdx, %rax
               	leaq	(%rcx,%rax), %rdx
               	cmpq	%r9, %rax
               	cmovbq	%rdx, %rcx
               	movzwl	2(%rdi), %r10d
               	movq	%r10, %r11
               	imulq	%rsi, %r11
               	leaq	(%rcx,%r11), %r9
               	leaq	(%r8,%r10), %rax
               	addq	$-1, %rax
               	imulq	%rsi, %rax
               	leaq	(%rcx,%rax), %rdx
               	cmpq	%rax, %r11
               	jg	0x43307e <mi_page_free_list_extend+0xbe>
               	addq	$1, %r10
               	imulq	%rsi, %r10
               	addq	%r10, %rcx
               	movq	%r9, %rax
               	nopl	(%rax)
               	movq	%rcx, (%rax)
               	addq	%rsi, %rax
               	addq	%rsi, %rcx
               	cmpq	%rdx, %rax
               	jbe	0x433070 <mi_page_free_list_extend+0xb0>
               	movq	8(%rdi), %rax
               	movq	%rax, (%rdx)
               	movq	%r9, 8(%rdi)
               	retq
               	nopw	(%rax,%rax)

<mi_segment_reclaim_or_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%r9, %r14
               	movq	%r8, %rbx
               	movq	%rcx, %r12
               	movl	%edx, %r13d
               	movq	104(%r8), %rbp
               	testq	%rbp, %rbp
               	je	0x43313e <mi_segment_reclaim_or_alloc+0xae>
               	movq	88(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 88(%rbx)
               	movq	24(%rbp), %rax
               	movq	%rax, 104(%rbx)
               	movq	$0, 24(%rbp)
               	movq	112(%rbx), %rcx
               	leaq	416(%rcx), %rax
               	leaq	189531(%rip), %rdx      # 0x461540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x4333c9 <mi_segment_reclaim_or_alloc+0x339>
               	leaq	190091(%rip), %rdx      # 0x461780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x4333c9 <mi_segment_reclaim_or_alloc+0x339>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x433130 <mi_segment_reclaim_or_alloc+0xa0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x433120 <mi_segment_reclaim_or_alloc+0x90>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x4333fd <mi_segment_reclaim_or_alloc+0x36d>
               	movq	%rdi, %r15
               	movq	%rsi, 24(%rsp)
               	movb	$0, 3(%rsp)
               	movl	$7, %eax
               	xorl	%ebp, %ebp
               	movl	%r13d, 4(%rsp)
               	movq	%rdi, 8(%rsp)
               	movl	%eax, 20(%rsp)
               	movq	289177(%rip), %rax      # 0x479b00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x43322c <mi_segment_reclaim_or_alloc+0x19c>
               	movq	289286(%rip), %rax      # 0x479b80 <abandoned_visited>
               	testq	%rax, %rax
               	je	0x4333ba <mi_segment_reclaim_or_alloc+0x32a>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 289268(%rip)      # 0x479b80 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x4333ba <mi_segment_reclaim_or_alloc+0x32a>
               	movq	289124(%rip), %rax      # 0x479b00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x4331c2 <mi_segment_reclaim_or_alloc+0x132>
               	movq	289301(%rip), %rdx      # 0x479bc0 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 289088(%rip)      # 0x479b00 <abandoned>
               	je	0x43321c <mi_segment_reclaim_or_alloc+0x18c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x4331d0 <mi_segment_reclaim_or_alloc+0x140>
               	movq	289049(%rip), %rax      # 0x479b00 <abandoned>
               	nopw	(%rax,%rax)
               	movq	289225(%rip), %rdx      # 0x479bc0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 288998(%rip)      # 0x479b00 <abandoned>
               	jne	0x4331f0 <mi_segment_reclaim_or_alloc+0x160>
               	lock
               	addq	%rdx, 289052(%rip)      # 0x479b40 <abandoned_count>
               	lock
               	subq	%rdx, 289172(%rip)      # 0x479bc0 <abandoned_visited_count>
               	lock
               	addq	$1, 288907(%rip)        # 0x479ac0 <abandoned_readers>
               	movq	288964(%rip), %rax      # 0x479b00 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	je	0x4333aa <mi_segment_reclaim_or_alloc+0x31a>
               	movq	16(%r15), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 288919(%rip)      # 0x479b00 <abandoned>
               	jne	0x433240 <mi_segment_reclaim_or_alloc+0x1b0>
               	lock
               	subq	$1, 288844(%rip)        # 0x479ac0 <abandoned_readers>
               	movq	$0, 16(%r15)
               	lock
               	subq	$1, 288955(%rip)        # 0x479b40 <abandoned_count>
               	movq	48(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 48(%r15)
               	cmpq	$0, 64(%r15)
               	je	0x433321 <mi_segment_reclaim_or_alloc+0x291>
               	movq	%r12, 32(%rsp)
               	movq	%rbx, 40(%rsp)
               	movq	%r14, 48(%rsp)
               	leaq	120(%r15), %r14
               	xorl	%ebp, %ebp
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	xorl	%ebx, %ebx
               	jmp	0x4332d0 <mi_segment_reclaim_or_alloc+0x240>
               	addq	$1, %r12
               	movb	$1, %bpl
               	addq	$1, %r13
               	addq	$64, %r14
               	cmpq	64(%r15), %r13
               	jae	0x43330d <mi_segment_reclaim_or_alloc+0x27d>
               	testb	$1, 1(%r14)
               	je	0x4332bf <mi_segment_reclaim_or_alloc+0x22f>
               	addq	$1, %rbx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d060 <_mi_page_free_collect>
               	movl	16(%r14), %eax
               	testl	%eax, %eax
               	je	0x4332bb <mi_segment_reclaim_or_alloc+0x22b>
               	movl	20(%r14), %ecx
               	cmpq	24(%rsp), %rcx
               	jne	0x4332c2 <mi_segment_reclaim_or_alloc+0x232>
               	movzwl	4(%r14), %ecx
               	cmpl	%ecx, %eax
               	jb	0x4332bf <mi_segment_reclaim_or_alloc+0x22f>
               	movq	32(%r14), %rax
               	cmpq	$4, %rax
               	jae	0x4332bf <mi_segment_reclaim_or_alloc+0x22f>
               	jmp	0x4332c2 <mi_segment_reclaim_or_alloc+0x232>
               	cmpq	%r12, %rbx
               	movq	48(%rsp), %r14
               	movq	40(%rsp), %rbx
               	movq	32(%rsp), %r12
               	jne	0x43334e <mi_segment_reclaim_or_alloc+0x2be>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fa40 <mi_segment_reclaim>
               	movl	4(%rsp), %r13d
               	movl	20(%rsp), %eax
               	subl	$1, %eax
               	movl	$0, %ebp
               	jae	0x43315c <mi_segment_reclaim_or_alloc+0xcc>
               	jmp	0x4333ba <mi_segment_reclaim_or_alloc+0x32a>
               	testb	$1, %bpl
               	movl	4(%rsp), %r13d
               	je	0x433363 <mi_segment_reclaim_or_alloc+0x2d3>
               	cmpl	%r13d, 112(%r15)
               	je	0x433425 <mi_segment_reclaim_or_alloc+0x395>
               	cmpq	$3, 48(%r15)
               	jb	0x433380 <mi_segment_reclaim_or_alloc+0x2f0>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fa40 <mi_segment_reclaim>
               	jmp	0x43333a <mi_segment_reclaim_or_alloc+0x2aa>
               	movq	288761(%rip), %rax      # 0x479b80 <abandoned_visited>
               	nopw	(%rax,%rax)
               	movq	%rax, 16(%r15)
               	lock
               	cmpxchgq	%r15, 288739(%rip)      # 0x479b80 <abandoned_visited>
               	jne	0x433390 <mi_segment_reclaim_or_alloc+0x300>
               	lock
               	addq	$1, 288792(%rip)        # 0x479bc0 <abandoned_visited_count>
               	jmp	0x43333a <mi_segment_reclaim_or_alloc+0x2aa>
               	lock
               	subq	$1, 288525(%rip)        # 0x479ac0 <abandoned_readers>
               	xorl	%ebp, %ebp
               	movl	4(%rsp), %r13d
               	cmpb	$0, 3(%rsp)
               	je	0x43344d <mi_segment_reclaim_or_alloc+0x3bd>
               	xorl	%ebp, %ebp
               	jmp	0x433413 <mi_segment_reclaim_or_alloc+0x383>
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x4333eb <mi_segment_reclaim_or_alloc+0x35b>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%rbx, %r8
               	movq	%r14, %r9
               	callq	0x4336f0 <mi_segment_init>
               	movq	%rbp, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	3(%rsp), %rcx
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	movq	24(%rsp), %rdx
               	movq	%rbx, %r8
               	callq	0x42fa40 <mi_segment_reclaim>
               	movq	%rax, %rbp
               	cmpb	$0, 3(%rsp)
               	jne	0x4333c5 <mi_segment_reclaim_or_alloc+0x335>
               	testq	%rbp, %rbp
               	jne	0x433413 <mi_segment_reclaim_or_alloc+0x383>
               	xorl	%edi, %edi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%rbx, %r8
               	movq	%r14, %r9
               	callq	0x4336f0 <mi_segment_init>
               	movq	%rax, %rbp
               	jmp	0x433413 <mi_segment_reclaim_or_alloc+0x383>
               	nopl	(%rax)

<mi_segment_find_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 64(%rdi)
               	je	0x433664 <mi_segment_find_free+0x1f4>
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	120(%rdi), %rbx
               	leaq	6(%rsp), %r12
               	leaq	7(%rsp), %r13
               	xorl	%ebp, %ebp
               	jmp	0x4334d6 <mi_segment_find_free+0x66>
               	nop
               	movzbl	1(%rbx), %ecx
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	testb	%al, %al
               	jne	0x433668 <mi_segment_find_free+0x1f8>
               	andb	$-2, %cl
               	movb	%cl, 1(%rbx)
               	movq	56(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%r15)
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	64(%r15), %rbp
               	jae	0x433664 <mi_segment_find_free+0x1f4>
               	movzbl	1(%rbx), %ecx
               	testb	$1, %cl
               	jne	0x4334c4 <mi_segment_find_free+0x54>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rdx
               	testq	%rax, %rax
               	je	0x4334f3 <mi_segment_find_free+0x83>
               	testq	%rdx, %rdx
               	jne	0x4334fc <mi_segment_find_free+0x8c>
               	jmp	0x433509 <mi_segment_find_free+0x99>
               	testq	%rdx, %rdx
               	je	0x43364b <mi_segment_find_free+0x1db>
               	movq	%rax, 48(%rdx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43350d <mi_segment_find_free+0x9d>
               	movq	%rdx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x43353d <mi_segment_find_free+0xcd>
               	cmpq	32(%r14), %rbx
               	je	0x43354b <mi_segment_find_free+0xdb>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movzbl	1(%rbx), %ecx
               	testb	$4, %cl
               	jne	0x4335ae <mi_segment_find_free+0x13e>
               	cmpl	$3, 112(%r15)
               	jne	0x433551 <mi_segment_find_free+0xe1>
               	movq	72(%r15), %rsi
               	jmp	0x43355d <mi_segment_find_free+0xed>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x433519 <mi_segment_find_free+0xa9>
               	movq	%rax, 32(%r14)
               	jmp	0x433519 <mi_segment_find_free+0xa9>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%al, %al
               	jne	0x43357b <mi_segment_find_free+0x10b>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 6(%rsp)
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r12, %r8
               	callq	0x42d860 <mi_os_commitx>
               	testb	%al, %al
               	je	0x4334c4 <mi_segment_find_free+0x54>
               	cmpb	$0, 6(%rsp)
               	movzbl	1(%rbx), %ecx
               	je	0x4335a8 <mi_segment_find_free+0x138>
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	orb	$4, %cl
               	movb	%cl, 1(%rbx)
               	orb	$1, %cl
               	movb	%cl, 1(%rbx)
               	movq	56(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 56(%r15)
               	movzbl	1(%rbx), %eax
               	testb	$2, %al
               	je	0x433668 <mi_segment_find_free+0x1f8>
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433668 <mi_segment_find_free+0x1f8>
               	cmpb	$0, 8(%r15)
               	jne	0x433668 <mi_segment_find_free+0x1f8>
               	andb	$-3, %al
               	movb	%al, 1(%rbx)
               	cmpl	$3, 112(%r15)
               	jne	0x4335f7 <mi_segment_find_free+0x187>
               	movq	72(%r15), %rsi
               	jmp	0x433603 <mi_segment_find_free+0x193>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%al, %al
               	jne	0x433621 <mi_segment_find_free+0x1b1>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 7(%rsp)
               	testq	%rsi, %rsi
               	je	0x433668 <mi_segment_find_free+0x1f8>
               	movq	%r13, %rdx
               	callq	0x434770 <_mi_os_unreset>
               	cmpb	$0, 7(%rsp)
               	jne	0x4334a0 <mi_segment_find_free+0x30>
               	testb	%al, %al
               	jne	0x433668 <mi_segment_find_free+0x1f8>
               	movzbl	1(%rbx), %ecx
               	jmp	0x4334b2 <mi_segment_find_free+0x42>
               	cmpq	32(%r14), %rbx
               	je	0x43350d <mi_segment_find_free+0x9d>
               	cmpq	40(%r14), %rbx
               	jne	0x43352b <mi_segment_find_free+0xbb>
               	jmp	0x43350d <mi_segment_find_free+0x9d>
               	xorl	%ebx, %ebx
               	jmp	0x4336d1 <mi_segment_find_free+0x261>
               	movq	64(%r15), %rax
               	cmpq	%rax, 56(%r15)
               	jne	0x4336d1 <mi_segment_find_free+0x261>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4336d1 <mi_segment_find_free+0x261>
               	testl	%eax, %eax
               	je	0x433688 <mi_segment_find_free+0x218>
               	cmpl	$1, %eax
               	jne	0x4336d1 <mi_segment_find_free+0x261>
               	addq	$16, %r14
               	leaq	24(%r15), %rax
               	movq	24(%r15), %rcx
               	movq	32(%r15), %rdx
               	testq	%rcx, %rcx
               	je	0x4336a0 <mi_segment_find_free+0x230>
               	testq	%rdx, %rdx
               	jne	0x4336a5 <mi_segment_find_free+0x235>
               	jmp	0x4336b1 <mi_segment_find_free+0x241>
               	testq	%rdx, %rdx
               	je	0x4336e3 <mi_segment_find_free+0x273>
               	movq	%rcx, 24(%rdx)
               	movq	(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4336b5 <mi_segment_find_free+0x245>
               	movq	%rdx, 32(%rcx)
               	cmpq	%r15, (%r14)
               	jne	0x4336bd <mi_segment_find_free+0x24d>
               	movq	%rcx, (%r14)
               	cmpq	%r15, 8(%r14)
               	jne	0x4336cb <mi_segment_find_free+0x25b>
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%r14)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpq	%r15, (%r14)
               	jne	0x4336d1 <mi_segment_find_free+0x261>
               	jmp	0x4336b5 <mi_segment_find_free+0x245>
               	nopw	(%rax,%rax)

<mi_segment_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%r9, 56(%rsp)
               	movq	%r8, %r12
               	movq	%rcx, %r14
               	movl	%edx, %r13d
               	movq	%rdi, %rbp
               	movl	$4194304, %eax          # imm = 0x400000
               	movl	$4194304, %edx          # imm = 0x400000
               	shrq	%cl, %rdx
               	cmpl	$3, %r13d
               	movl	$1, %r15d
               	cmovneq	%rdx, %r15
               	movl	%r15d, %ecx
               	shll	$6, %ecx
               	addl	$391, %ecx              # imm = 0x187
               	andl	$1073741568, %ecx       # imm = 0x3FFFFF00
               	movq	%rcx, 88(%rsp)
               	leaq	(%rsi,%rcx), %rbx
               	addq	$262143, %rbx           # imm = 0x3FFFF
               	andq	$-262144, %rbx          # imm = 0xFFFC0000
               	testq	%rsi, %rsi
               	cmoveq	%rax, %rbx
               	cmpl	$1, %r13d
               	movq	%rbx, 80(%rsp)
               	ja	0x433785 <mi_segment_init+0x95>
               	movq	56(%r12), %rbx
               	movl	$13, %edi
               	callq	0x42a9c0 <mi_option_get>
               	xorl	%ecx, %ecx
               	movl	$0, %edx
               	cmpq	%rax, %rbx
               	movq	80(%rsp), %rbx
               	jb	0x433797 <mi_segment_init+0xa7>
               	movl	$3, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%dl
               	movb	$1, %cl
               	movb	%dl, 9(%rsp)
               	movb	$0, 8(%rsp)
               	testq	%rbp, %rbp
               	je	0x4338c6 <mi_segment_init+0x1d6>
               	movq	%r14, 96(%rsp)
               	cmpl	$1, %r13d
               	ja	0x4337ec <mi_segment_init+0xfc>
               	cmpl	%r13d, 112(%rbp)
               	jne	0x4337ec <mi_segment_init+0xfc>
               	cmpq	%rbx, 72(%rbp)
               	jne	0x4337ec <mi_segment_init+0xfc>
               	movq	$0, 16(%rbp)
               	leaq	24(%rbp), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbp)
               	movups	%xmm0, 88(%rbp)
               	movups	%xmm0, 72(%rbp)
               	movups	%xmm0, 56(%rbp)
               	movups	%xmm0, 40(%rbp)
               	movups	%xmm0, 24(%rbp)
               	jmp	0x4339dc <mi_segment_init+0x2ec>
               	movl	%r13d, 24(%rsp)
               	movq	%r12, %r14
               	cmpq	$0, 64(%rbp)
               	je	0x43391d <mi_segment_init+0x22d>
               	movb	9(%rsp), %r13b
               	leaq	121(%rbp), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x433845 <mi_segment_init+0x155>
               	movl	$5, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x43384f <mi_segment_init+0x15f>
               	movzbl	(%rbx), %eax
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	addq	$1, %r12
               	movq	64(%rbp), %rax
               	addq	$64, %rbx
               	cmpq	%rax, %r12
               	jae	0x43391f <mi_segment_init+0x22f>
               	testb	$2, (%rbx)
               	je	0x433830 <mi_segment_init+0x140>
               	testb	%r13b, %r13b
               	je	0x43380d <mi_segment_init+0x11d>
               	cmpb	$0, 8(%rbp)
               	jne	0x433830 <mi_segment_init+0x140>
               	movzbl	(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433830 <mi_segment_init+0x140>
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	cmpl	$3, 112(%rbp)
               	jne	0x433872 <mi_segment_init+0x182>
               	movq	72(%rbp), %rsi
               	jmp	0x43387e <mi_segment_init+0x18e>
               	movq	96(%rbp), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	-1(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%rbp, %rdi
               	testb	%al, %al
               	jne	0x43389d <mi_segment_init+0x1ad>
               	movq	80(%rbp), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 16(%rsp)
               	testq	%rsi, %rsi
               	je	0x433830 <mi_segment_init+0x140>
               	leaq	16(%rsp), %rdx
               	callq	0x434770 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x433830 <mi_segment_init+0x140>
               	movzbl	(%rbx), %eax
               	orb	$8, %al
               	jmp	0x433821 <mi_segment_init+0x131>
               	movb	%cl, 10(%rsp)
               	movb	$0, 8(%rsp)
               	movb	$0, 11(%rsp)
               	testq	%rbx, %rbx
               	je	0x434311 <mi_segment_init+0xc21>
               	movq	181908(%rip), %rcx      # 0x45ff78 <os_page_size>
               	leaq	-1(%rcx), %rax
               	leaq	(%rbx,%rcx), %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x433a30 <mi_segment_init+0x340>
               	negq	%rcx
               	andq	%rcx, %rbp
               	leaq	4194303(%rbp), %rcx
               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
               	movq	%r14, 96(%rsp)
               	jbe	0x433a94 <mi_segment_init+0x3a4>
               	jmp	0x4341a7 <mi_segment_init+0xab7>
               	xorl	%eax, %eax
               	cmpq	%r15, %rax
               	jae	0x43395f <mi_segment_init+0x26f>
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movq	88(%rsp), %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d860 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	movq	%r14, %r12
               	movl	24(%rsp), %r13d
               	je	0x433956 <mi_segment_init+0x266>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	jne	0x433967 <mi_segment_init+0x277>
               	jmp	0x434311 <mi_segment_init+0xc21>
               	movq	%r14, %r12
               	movl	24(%rsp), %r13d
               	movq	$0, 16(%rbp)
               	leaq	24(%rbp), %r14
               	movq	88(%rsp), %rax
               	leaq	-24(%rax), %rdx
               	xorl	%ebx, %ebx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movb	$1, %al
               	nopw	(%rax,%rax)
               	leal	-1(%rax), %ecx
               	shlq	$6, %rbx
               	movb	%cl, 120(%rbp,%rbx)
               	movzbl	121(%rbp,%rbx), %ecx
               	movl	%ecx, %edx
               	andb	$-3, %dl
               	movb	%dl, 121(%rbp,%rbx)
               	movzbl	9(%rsp), %edx
               	shlb	$2, %dl
               	andb	$-7, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%rbp,%rbx)
               	movzbl	8(%rsp), %edx
               	shlb	$3, %dl
               	andb	$-11, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%rbp,%rbx)
               	movzbl	%al, %ebx
               	movl	%ebx, %eax
               	addb	$1, %al
               	cmpq	%rbx, %r15
               	ja	0x433990 <mi_segment_init+0x2a0>
               	movq	80(%rsp), %rbx
               	movl	%r13d, 112(%rbp)
               	movq	%r15, 64(%rbp)
               	movq	96(%rsp), %rax
               	movq	%rax, 96(%rbp)
               	movq	%rbx, 72(%rbp)
               	movq	88(%rsp), %rax
               	movq	%rax, 80(%rbp)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%rbp)
               	movq	180650(%rip), %rax      # 0x45fbb8 <_mi_heap_main+0xb28>
               	xorq	%rbp, %rax
               	movq	%rax, 88(%rbp)
               	cmpl	$1, %r13d
               	ja	0x434313 <mi_segment_init+0xc23>
               	movl	112(%rbp), %eax
               	cmpl	$1, %eax
               	je	0x433a46 <mi_segment_init+0x356>
               	testl	%eax, %eax
               	je	0x433a4a <mi_segment_init+0x35a>
               	xorl	%r12d, %r12d
               	jmp	0x433a4a <mi_segment_init+0x35a>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433a72 <mi_segment_init+0x382>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x433a78 <mi_segment_init+0x388>
               	addq	$16, %r12
               	movq	$0, (%r14)
               	movq	8(%r12), %rax
               	movq	%rax, 32(%rbp)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r12, %rcx
               	movq	%rbp, (%rcx)
               	movq	%rbp, 8(%r12)
               	jmp	0x434313 <mi_segment_init+0xc23>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	leaq	4194303(%rbp), %rcx
               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
               	movq	%r14, 96(%rsp)
               	ja	0x4341a7 <mi_segment_init+0xab7>
               	movq	221117(%rip), %rax      # 0x469a58 <_mi_numa_node_count>
               	testq	%rax, %rax
               	movq	%rcx, 32(%rsp)
               	je	0x434386 <mi_segment_init+0xc96>
               	movq	%rbp, 104(%rsp)
               	movl	%r13d, 24(%rsp)
               	movq	%r12, 72(%rsp)
               	movl	$4294967295, %r10d      # imm = 0xFFFFFFFF
               	cmpq	$2, %rax
               	jb	0x433ad8 <mi_segment_init+0x3e8>
               	movq	221069(%rip), %rax      # 0x469a58 <_mi_numa_node_count>
               	xorl	%r10d, %r10d
               	cmpq	$1, %rax
               	jne	0x434395 <mi_segment_init+0xca5>
               	shrq	$22, %rcx
               	movq	%rcx, 40(%rsp)
               	movb	10(%rsp), %r9b
               	movq	221123(%rip), %r12      # 0x469ab0 <regions_count>
               	testq	%r12, %r12
               	je	0x433c88 <mi_segment_init+0x598>
               	movq	56(%rsp), %rax
               	movq	(%rax), %rbp
               	testl	%r10d, %r10d
               	js	0x433baf <mi_segment_init+0x4bf>
               	xorl	%edi, %edi
               	leaq	221104(%rip), %r8       # 0x469ac0 <regions>
               	movq	%r12, %r13
               	movq	%r15, 112(%rsp)
               	movq	%r12, 64(%rsp)
               	jmp	0x433b2e <mi_segment_init+0x43e>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %r13
               	je	0x433c88 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	cmovaeq	%rdi, %rbp
               	movq	%rbp, %rbx
               	shlq	$6, %rbx
               	movq	(%rbx,%r8), %rax
               	testq	%rax, %rax
               	je	0x433b20 <mi_segment_init+0x430>
               	testb	%r9b, %r9b
               	sete	%dl
               	movl	%eax, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	testl	%eax, %eax
               	sets	%cl
               	sarl	$16, %eax
               	cmpl	%r10d, %eax
               	sete	%al
               	testb	%sil, %dl
               	jne	0x433b20 <mi_segment_init+0x430>
               	orb	%al, %cl
               	je	0x433b20 <mi_segment_init+0x430>
               	movl	%r10d, %r12d
               	leaq	(%rbx,%r8), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %r14
               	movl	%r9d, %r15d
               	callq	0x4344d0 <_mi_bitmap_try_find_claim_field>
               	xorl	%edi, %edi
               	movl	%r15d, %r9d
               	movl	%r12d, %r10d
               	movq	64(%rsp), %r12
               	movq	112(%rsp), %r15
               	movq	%r14, %r8
               	testb	%al, %al
               	je	0x433b20 <mi_segment_init+0x430>
               	addq	%rbx, %r8
               	jmp	0x433c71 <mi_segment_init+0x581>
               	testb	%r9b, %r9b
               	je	0x433c11 <mi_segment_init+0x521>
               	leaq	220933(%rip), %r8       # 0x469ac0 <regions>
               	movq	%r12, %r14
               	jmp	0x433bce <mi_segment_init+0x4de>
               	addq	$1, %rbp
               	addq	$-1, %r14
               	je	0x433c88 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	movl	$0, %eax
               	cmovaeq	%rax, %rbp
               	movq	%rbp, %r13
               	shlq	$6, %r13
               	movq	(%r13,%r8), %rax
               	testq	%rax, %rax
               	je	0x433bc0 <mi_segment_init+0x4d0>
               	leaq	(%r8,%r13), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %rbx
               	callq	0x4344d0 <_mi_bitmap_try_find_claim_field>
               	movq	%rbx, %r8
               	testb	%al, %al
               	je	0x433bc0 <mi_segment_init+0x4d0>
               	addq	%r13, %r8
               	jmp	0x433c71 <mi_segment_init+0x581>
               	xorl	%ecx, %ecx
               	leaq	220838(%rip), %r8       # 0x469ac0 <regions>
               	movq	%r12, %rbx
               	jmp	0x433c2a <mi_segment_init+0x53a>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %rbx
               	je	0x433c88 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	cmovaeq	%rcx, %rbp
               	movq	%rbp, %r14
               	shlq	$6, %r14
               	movq	(%r14,%r8), %rax
               	testq	%rax, %rax
               	je	0x433c20 <mi_segment_init+0x530>
               	andl	$256, %eax              # imm = 0x100
               	testq	%rax, %rax
               	jne	0x433c20 <mi_segment_init+0x530>
               	leaq	(%r14,%r8), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %r13
               	callq	0x4344d0 <_mi_bitmap_try_find_claim_field>
               	xorl	%ecx, %ecx
               	movq	%r13, %r8
               	testb	%al, %al
               	je	0x433c20 <mi_segment_init+0x530>
               	addq	%r14, %r8
               	movq	72(%rsp), %r12
               	movl	24(%rsp), %r13d
               	movq	56(%rsp), %rax
               	movq	%rbp, (%rax)
               	jmp	0x433e41 <mi_segment_init+0x751>
               	movb	9(%rsp), %bl
               	movb	10(%rsp), %bpl
               	movq	220696(%rip), %rax      # 0x469ab0 <regions_count>
               	cmpq	$1022, %rax             # imm = 0x3FE
               	movq	72(%rsp), %r12
               	movl	24(%rsp), %r13d
               	ja	0x43418c <mi_segment_init+0xa9c>
               	testb	%bl, %bl
               	je	0x433cc4 <mi_segment_init+0x5d4>
               	movl	$4, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%al
               	jmp	0x433cc6 <mi_segment_init+0x5d6>
               	xorl	%eax, %eax
               	testb	%bpl, %bpl
               	setne	%cl
               	testb	%bl, %bl
               	setne	%dl
               	movb	%al, 12(%rsp)
               	andb	%cl, %dl
               	movb	%dl, 15(%rsp)
               	movb	$0, 14(%rsp)
               	movb	$0, 13(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	12(%rsp), %rsi
               	leaq	15(%rsp), %rdx
               	leaq	13(%rsp), %rcx
               	leaq	14(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movl	$268435456, %edi        # imm = 0x10000000
               	callq	0x434590 <_mi_arena_alloc_aligned>
               	testq	%rax, %rax
               	je	0x433d6c <mi_segment_init+0x67c>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 220556(%rip)      # 0x469ab0 <regions_count>
               	cmpq	$1024, %rdx             # imm = 0x400
               	jb	0x433d73 <mi_segment_init+0x683>
               	lock
               	subq	$1, 220538(%rip)        # 0x469ab0 <regions_count>
               	movq	16(%rsp), %rdx
               	xorl	%ecx, %ecx
               	cmpb	$0, 12(%rsp)
               	setne	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	movq	%rax, %rdi
               	callq	0x42d3b0 <_mi_arena_free>
               	leaq	69571(%rip), %rdi       # 0x444d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1873>
               	xorl	%ebx, %ebx
               	movl	$256, %esi              # imm = 0x100
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	jmp	0x433e39 <mi_segment_init+0x749>
               	xorl	%ebx, %ebx
               	jmp	0x433e39 <mi_segment_init+0x749>
               	shlq	$6, %rdx
               	leaq	220482(%rip), %rsi      # 0x469ac0 <regions>
               	movq	16(%rsp), %rcx
               	xchgq	%rcx, 48(%rdx,%rsi)
               	leaq	(%rdx,%rsi), %rdi
               	addq	$16, %rdi
               	movq	$0, 16(%rdx,%rsi)
               	movsbq	14(%rsp), %rcx
               	addq	$-1, %rcx
               	movq	%rcx, 24(%rdx,%rsi)
               	movb	12(%rsp), %cl
               	andb	$1, %cl
               	negb	%cl
               	movsbq	%cl, %rcx
               	movq	%rcx, 32(%rdx,%rsi)
               	movq	$0, 40(%rdx,%rsi)
               	movq	$0, 48(%rsp)
               	movq	$-1, %rbp
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x433df9 <mi_segment_init+0x709>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x433df7 <mi_segment_init+0x707>
               	movq	$-1, %rbp
               	shlq	%cl, %rbp
               	notq	%rbp
               	jmp	0x433df9 <mi_segment_init+0x709>
               	xorl	%ebp, %ebp
               	lock
               	orq	%rbp, (%rdi)
               	leaq	(%rsi,%rdx), %r8
               	movq	%rax, 8(%rdx,%rsi)
               	movzbl	13(%rsp), %eax
               	addq	%rax, %rax
               	movzbl	15(%rsp), %ebx
               	orq	%rax, %rbx
               	movq	220219(%rip), %rax      # 0x469a58 <_mi_numa_node_count>
               	cmpq	$1, %rax
               	jne	0x4343a7 <mi_segment_init+0xcb7>
               	xorl	%eax, %eax
               	shlq	$8, %rbx
               	orq	%rax, %rbx
               	orq	$1, %rbx
               	movq	%rbx, (%r8)
               	movb	$1, %bl
               	testb	%bl, %bl
               	je	0x43418c <mi_segment_init+0xa9c>
               	movq	(%r8), %rdx
               	movq	8(%r8), %r9
               	movq	48(%rsp), %rax
               	movq	%rax, %rsi
               	shrq	$6, %rsi
               	movq	$-1, %rdi
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x433e89 <mi_segment_init+0x799>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x433e87 <mi_segment_init+0x797>
               	andl	$63, %eax
               	movq	$-1, %rdi
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x433e89 <mi_segment_init+0x799>
               	xorl	%edi, %edi
               	movq	24(%r8,%rsi,8), %rax
               	nop
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 24(%r8,%rsi,8)
               	jne	0x433e90 <mi_segment_init+0x7a0>
               	testq	%rdi, %rax
               	sete	8(%rsp)
               	movq	%rdx, %rax
               	shrq	$8, %rax
               	andb	$1, %al
               	movb	%al, 10(%rsp)
               	shrq	$9, %rdx
               	andb	$1, %dl
               	movb	%dl, 11(%rsp)
               	movq	48(%rsp), %rdi
               	movl	%edi, %ebp
               	andl	$63, %ebp
               	shlq	$22, %rbp
               	addq	%r9, %rbp
               	cmpb	$0, 9(%rsp)
               	je	0x433f13 <mi_segment_init+0x823>
               	movq	%rdi, %rdx
               	shrq	$6, %rdx
               	movq	$-1, %rsi
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x433f5d <mi_segment_init+0x86d>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x433f5b <mi_segment_init+0x86b>
               	movl	%edi, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	jmp	0x433f5d <mi_segment_init+0x86d>
               	movq	$-1, %rdx
               	movq	32(%rsp), %rbx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	ja	0x434036 <mi_segment_init+0x946>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x434034 <mi_segment_init+0x944>
               	movl	%edi, %eax
               	andl	$63, %eax
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%eax, %ecx
               	shlq	%cl, %rdx
               	movq	32(%rsp), %rbx
               	jmp	0x434036 <mi_segment_init+0x946>
               	xorl	%esi, %esi
               	movq	32(%r8,%rdx,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rsi, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r8,%rdx,8)
               	jne	0x433f70 <mi_segment_init+0x880>
               	andq	%rsi, %rax
               	cmpq	%rsi, %rax
               	movq	32(%rsp), %rbx
               	je	0x43404d <mi_segment_init+0x95d>
               	movq	%rdi, 64(%rsp)
               	movq	%r9, 56(%rsp)
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	movq	%rbx, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d860 <mi_os_commitx>
               	testb	%al, %al
               	je	0x433fe8 <mi_segment_init+0x8f8>
               	cmpb	$0, 16(%rsp)
               	je	0x433fd2 <mi_segment_init+0x8e2>
               	movb	$1, 8(%rsp)
               	movq	32(%rsp), %rbx
               	movq	24(%rsp), %r8
               	movq	56(%rsp), %r9
               	movq	64(%rsp), %rdi
               	jmp	0x43404d <mi_segment_init+0x95d>
               	movq	48(%rsp), %rdx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	jbe	0x434002 <mi_segment_init+0x912>
               	xorl	%esi, %esi
               	movq	24(%rsp), %rdi
               	jmp	0x434182 <mi_segment_init+0xa92>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	movq	24(%rsp), %rdi
               	je	0x43417b <mi_segment_init+0xa8b>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	jmp	0x434182 <mi_segment_init+0xa92>
               	xorl	%edx, %edx
               	movq	%rdi, %rax
               	shrq	$6, %rax
               	movq	32(%r8,%rax,8), %rax
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	sete	9(%rsp)
               	movq	48(%rsp), %rdx
               	movq	$-1, %rsi
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	ja	0x43408c <mi_segment_init+0x99c>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43408a <mi_segment_init+0x99a>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	movq	32(%rsp), %rbx
               	jmp	0x43408c <mi_segment_init+0x99c>
               	xorl	%esi, %esi
               	shrq	$6, %rdx
               	movq	40(%r8,%rdx,8), %rax
               	testq	%rsi, %rax
               	je	0x43415f <mi_segment_init+0xa6f>
               	movq	48(%rsp), %rdx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	jbe	0x4340b0 <mi_segment_init+0x9c0>
               	xorl	%esi, %esi
               	jmp	0x4340e2 <mi_segment_init+0x9f2>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x4340db <mi_segment_init+0x9eb>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	movq	32(%rsp), %rbx
               	notq	%rsi
               	jmp	0x4340e2 <mi_segment_init+0x9f2>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 40(%r8,%rdx,8)
               	cmpb	$0, 9(%rsp)
               	movq	%r9, 56(%rsp)
               	movq	%rdi, 64(%rsp)
               	je	0x43413b <mi_segment_init+0xa4b>
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	leaq	16(%rsp), %rdx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x434770 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x43412a <mi_segment_init+0xa3a>
               	movb	$1, 8(%rsp)
               	movq	24(%rsp), %r8
               	movq	56(%rsp), %r9
               	movq	64(%rsp), %rdi
               	jmp	0x43415f <mi_segment_init+0xa6f>
               	movl	$5, %edi
               	movq	%r8, %rbx
               	callq	0x42a9c0 <mi_option_get>
               	movq	64(%rsp), %rdi
               	movq	56(%rsp), %r9
               	movq	%rbx, %r8
               	movq	32(%rsp), %rbx
               	testq	%rax, %rax
               	je	0x4340fd <mi_segment_init+0xa0d>
               	testq	%r9, %r9
               	je	0x43418c <mi_segment_init+0xa9c>
               	leaq	219477(%rip), %rax      # 0x469ac0 <regions>
               	subq	%rax, %r8
               	addq	%rdi, %r8
               	addq	%r8, %r8
               	movq	80(%rsp), %rbx
               	jmp	0x4341d8 <mi_segment_init+0xae8>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 16(%rdi,%rdx,8)
               	leaq	68589(%rip), %rdi       # 0x444d80 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
               	movq	104(%rsp), %rbp
               	movq	%rbp, %rsi
               	xorl	%eax, %eax
               	callq	0x42ba20 <_mi_warning_message>
               	movq	80(%rsp), %rbx
               	leaq	9(%rsp), %rsi
               	leaq	10(%rsp), %rdx
               	leaq	11(%rsp), %rcx
               	leaq	8(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movq	%rbp, %rdi
               	callq	0x434590 <_mi_arena_alloc_aligned>
               	movq	%rax, %rbp
               	movq	16(%rsp), %rax
               	leaq	(%rax,%rax), %r8
               	addq	$1, %r8
               	testq	%rbp, %rbp
               	je	0x434311 <mi_segment_init+0xc21>
               	movb	$1, %al
               	cmpb	$0, 9(%rsp)
               	jne	0x434228 <mi_segment_init+0xb38>
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movq	88(%rsp), %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d860 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	je	0x434219 <mi_segment_init+0xb29>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x4342fc <mi_segment_init+0xc0c>
               	xorl	%eax, %eax
               	movq	%r8, (%rbp)
               	movb	11(%rsp), %cl
               	andb	$1, %cl
               	orb	10(%rsp), %cl
               	movb	%cl, 8(%rbp)
               	movb	%al, 9(%rbp)
               	movq	112(%r12), %rcx
               	leaq	185079(%rip), %rax      # 0x461540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	185642(%rip), %rax      # 0x461780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rbx, %rbx
               	js	0x43429c <mi_segment_init+0xbac>
               	testb	%al, %al
               	je	0x4342d5 <mi_segment_init+0xbe5>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jg	0x43428d <mi_segment_init+0xb9d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x434280 <mi_segment_init+0xb90>
               	lock
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x43434e <mi_segment_init+0xc5e>
               	testb	%al, %al
               	je	0x434325 <mi_segment_init+0xc35>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x4342cd <mi_segment_init+0xbdd>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x4342c0 <mi_segment_init+0xbd0>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x434347 <mi_segment_init+0xc57>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x4342eb <mi_segment_init+0xbfb>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	jmp	0x43434e <mi_segment_init+0xc5e>
               	movl	$4194304, %esi          # imm = 0x400000
               	movq	%rbp, %rdi
               	movq	%r8, %rdx
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	callq	0x42db70 <_mi_mem_free>
               	xorl	%ebp, %ebp
               	movq	%rbp, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x43433b <mi_segment_init+0xc4b>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x434364 <mi_segment_init+0xc74>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	addq	%rbx, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x433967 <mi_segment_init+0x277>
               	movq	%rax, 80(%r12)
               	jmp	0x433967 <mi_segment_init+0x277>
               	callq	0x42bd70 <_mi_os_numa_node_count_get>
               	movq	32(%rsp), %rcx
               	jmp	0x433aa9 <mi_segment_init+0x3b9>
               	callq	0x4343c0 <_mi_os_numa_node_get>
               	movq	32(%rsp), %rcx
               	movl	%eax, %r10d
               	jmp	0x433ad8 <mi_segment_init+0x3e8>
               	movq	%r8, %rbp
               	callq	0x4343c0 <_mi_os_numa_node_get>
               	movq	%rbp, %r8
               	shll	$16, %eax
               	jmp	0x433e29 <mi_segment_init+0x739>
               	nopw	(%rax,%rax)

<_mi_os_numa_node_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	218757(%rip), %rbx      # 0x469a58 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	je	0x434447 <_mi_os_numa_node_get+0x87>
               	xorl	%eax, %eax
               	cmpq	$2, %rbx
               	jb	0x43443a <_mi_os_numa_node_get+0x7a>
               	movq	$0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	xorl	%r14d, %r14d
               	leaq	8(%rsp), %rsi
               	leaq	16(%rsp), %rdx
               	movl	$309, %edi              # imm = 0x135
               	xorl	%ecx, %ecx
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	testq	%rax, %rax
               	movq	16(%rsp), %rax
               	cmovneq	%r14, %rax
               	cmpq	%rbx, %rax
               	jb	0x43443a <_mi_os_numa_node_get+0x7a>
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x434434 <_mi_os_numa_node_get+0x74>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rdx, %rax
               	jmp	0x43443a <_mi_os_numa_node_get+0x7a>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%edx, %eax
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	218634(%rip), %rbx      # 0x469a58 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x4343d8 <_mi_os_numa_node_get+0x18>
               	movl	$15, %edi
               	callq	0x42a9c0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x4344b1 <_mi_os_numa_node_get+0xf1>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	66296(%rip), %r14       # 0x444769 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	leaq	16(%rsp), %r15
               	cmpl	$255, %ebx
               	je	0x4344a9 <_mi_os_numa_node_get+0xe9>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x4138c0 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x434476 <_mi_os_numa_node_get+0xb6>
               	jmp	0x4344ae <_mi_os_numa_node_get+0xee>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 218528(%rip)      # 0x469a58 <_mi_numa_node_count>
               	leaq	66250(%rip), %rdi       # 0x444789 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a6a0 <_mi_verbose_message>
               	jmp	0x4343d8 <_mi_os_numa_node_get+0x18>
               	nop

<_mi_bitmap_try_find_claim_field>:
               	movq	(%rdi), %rax
               	cmpq	$-1, %rax
               	je	0x434525 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	$-1, %r8
               	cmpq	$63, %rsi
               	ja	0x4344ff <_mi_bitmap_try_find_claim_field+0x2f>
               	testq	%rsi, %rsi
               	je	0x4344fc <_mi_bitmap_try_find_claim_field+0x2c>
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x4344ff <_mi_bitmap_try_find_claim_field+0x2f>
               	xorl	%r8d, %r8d
               	movl	$64, %ecx
               	movl	$64, %r9d
               	subq	%rsi, %r9
               	cmpq	$-1, %rax
               	je	0x43451d <_mi_bitmap_try_find_claim_field+0x4d>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %rcx
               	shlq	%cl, %r8
               	cmpq	%r9, %rcx
               	jbe	0x434528 <_mi_bitmap_try_find_claim_field+0x58>
               	xorl	%eax, %eax
               	retq
               	cmpq	$1, %rsi
               	jne	0x43456e <_mi_bitmap_try_find_claim_field+0x9e>
               	jmp	0x43453c <_mi_bitmap_try_find_claim_field+0x6c>
               	addq	$1, %rcx
               	addq	%r8, %r8
               	cmpq	%r9, %rcx
               	ja	0x434525 <_mi_bitmap_try_find_claim_field+0x55>
               	testq	%r8, %rax
               	jne	0x434530 <_mi_bitmap_try_find_claim_field+0x60>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434537 <_mi_bitmap_try_find_claim_field+0x67>
               	jmp	0x434583 <_mi_bitmap_try_find_claim_field+0xb3>
               	bsrq	%rsi, %r10
               	movl	%r10d, %esi
               	subl	%ecx, %esi
               	addq	$1, %r10
               	addb	$1, %sil
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	movq	%r10, %rcx
               	cmpq	%r9, %rcx
               	ja	0x434525 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	%rax, %rsi
               	andq	%r8, %rsi
               	jne	0x434550 <_mi_bitmap_try_find_claim_field+0x80>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434569 <_mi_bitmap_try_find_claim_field+0x99>
               	movq	%rcx, (%rdx)
               	movb	$1, %al
               	retq
               	nopl	(%rax)

<_mi_arena_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, %r14
               	movq	%rcx, %r15
               	movq	%rdx, %r12
               	movq	%rsi, (%rsp)
               	movq	%r9, 8(%rsp)
               	movq	$0, (%r9)
               	movb	$0, (%r8)
               	movb	$0, (%rcx)
               	movq	%rdi, 16(%rsp)
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x4346fb <_mi_arena_alloc_aligned+0x16b>
               	movq	184809(%rip), %rax      # 0x4617c0 <mi_arena_count>
               	testq	%rax, %rax
               	je	0x4346fb <_mi_arena_alloc_aligned+0x16b>
               	movq	%r15, 24(%rsp)
               	movq	16(%rsp), %rax
               	leaq	16777215(%rax), %rbx
               	movq	218208(%rip), %rax      # 0x469a58 <_mi_numa_node_count>
               	xorl	%r13d, %r13d
               	cmpq	$1, %rax
               	jne	0x43475e <_mi_arena_alloc_aligned+0x1ce>
               	shrq	$24, %rbx
               	leaq	184816(%rip), %rbp      # 0x461800 <mi_arenas>
               	xorl	%r15d, %r15d
               	jmp	0x43465f <_mi_arena_alloc_aligned+0xcf>
               	nopl	(%rax,%rax)
               	cmpb	$0, (%r12)
               	je	0x434676 <_mi_arena_alloc_aligned+0xe6>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	movq	(%rsp), %rcx
               	movq	%r12, %r8
               	movq	24(%rsp), %r9
               	pushq	8(%rsp)
               	pushq	%r14
               	callq	0x434890 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x43474f <_mi_arena_alloc_aligned+0x1bf>
               	addq	$1, %r15
               	addq	$8, %rbp
               	cmpq	$64, %r15
               	je	0x43467e <_mi_arena_alloc_aligned+0xee>
               	movq	(%rbp), %rdi
               	testq	%rdi, %rdi
               	je	0x43467e <_mi_arena_alloc_aligned+0xee>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x434620 <_mi_arena_alloc_aligned+0x90>
               	cmpl	%r13d, %eax
               	jne	0x434651 <_mi_arena_alloc_aligned+0xc1>
               	jmp	0x434620 <_mi_arena_alloc_aligned+0x90>
               	cmpb	$0, 30(%rdi)
               	jne	0x434651 <_mi_arena_alloc_aligned+0xc1>
               	jmp	0x434627 <_mi_arena_alloc_aligned+0x97>
               	movq	%rbx, 32(%rsp)
               	leaq	184694(%rip), %rbx      # 0x461800 <mi_arenas>
               	xorl	%ebp, %ebp
               	movq	24(%rsp), %r15
               	jmp	0x4346d8 <_mi_arena_alloc_aligned+0x148>
               	nopw	%cs:(%rax,%rax)
               	movq	%rbp, %rsi
               	movq	32(%rsp), %rdx
               	movq	(%rsp), %rcx
               	movq	%r12, %r8
               	movq	%r15, %r9
               	pushq	8(%rsp)
               	pushq	%r14
               	callq	0x434890 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x43474f <_mi_arena_alloc_aligned+0x1bf>
               	addq	$1, %rbp
               	addq	$8, %rbx
               	cmpq	$64, %rbp
               	je	0x4346fb <_mi_arena_alloc_aligned+0x16b>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4346fb <_mi_arena_alloc_aligned+0x16b>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x4346ca <_mi_arena_alloc_aligned+0x13a>
               	cmpl	%r13d, %eax
               	je	0x4346ca <_mi_arena_alloc_aligned+0x13a>
               	cmpb	$0, (%r12)
               	jne	0x4346a0 <_mi_arena_alloc_aligned+0x110>
               	cmpb	$0, 30(%rdi)
               	jne	0x4346ca <_mi_arena_alloc_aligned+0x13a>
               	jmp	0x4346a0 <_mi_arena_alloc_aligned+0x110>
               	movl	$16, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x434719 <_mi_arena_alloc_aligned+0x189>
               	callq	0x413820 <__errno_location@plt>
               	movl	$12, (%rax)
               	xorl	%eax, %eax
               	jmp	0x43474f <_mi_arena_alloc_aligned+0x1bf>
               	movb	$1, (%r14)
               	movq	8(%rsp), %rax
               	movq	$0, (%rax)
               	xorl	%esi, %esi
               	movq	(%rsp), %rax
               	cmpb	$0, (%rax)
               	setne	%sil
               	movq	16(%rsp), %rdi
               	movq	%r12, %rdx
               	callq	0x42add0 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x434715 <_mi_arena_alloc_aligned+0x185>
               	movb	(%r12), %cl
               	movb	%cl, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x4343c0 <_mi_os_numa_node_get>
               	movl	%eax, %r13d
               	jmp	0x434605 <_mi_arena_alloc_aligned+0x75>
               	nopl	(%rax,%rax)

<_mi_os_unreset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$5, %edi
               	callq	0x42a9c0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4347aa <_mi_os_unreset+0x3a>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movl	$1, %edx
               	movl	$1, %ecx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42d860 <mi_os_commitx>
               	movb	$0, (%rbx)
               	testq	%r15, %r15
               	je	0x434887 <_mi_os_unreset+0x117>
               	testq	%r14, %r14
               	je	0x434887 <_mi_os_unreset+0x117>
               	movq	178098(%rip), %rdi      # 0x45ff78 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%r15,%rdi), %rcx
               	addq	$-1, %rcx
               	testq	%rax, %rdi
               	jne	0x4347f0 <_mi_os_unreset+0x80>
               	negq	%rdi
               	andq	%rdi, %rcx
               	addq	%r14, %r15
               	andq	%rdi, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jg	0x43483f <_mi_os_unreset+0xcf>
               	jmp	0x434887 <_mi_os_unreset+0x117>
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x434809 <_mi_os_unreset+0x99>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rsi
               	jmp	0x434811 <_mi_os_unreset+0xa1>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %esi
               	addq	%r14, %r15
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43482a <_mi_os_unreset+0xba>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x434831 <_mi_os_unreset+0xc1>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rsi, %rcx
               	subq	%rdx, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jle	0x434887 <_mi_os_unreset+0x117>
               	movq	%r15, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 183687(%rip)      # 0x4615d8 <_mi_stats_main+0x98>
               	subq	%r15, %rdx
               	movq	183669(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x90>
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x434870 <_mi_os_unreset+0x100>
               	lock
               	cmpxchgq	%rdx, 183650(%rip)      # 0x4615d0 <_mi_stats_main+0x90>
               	jne	0x434860 <_mi_os_unreset+0xf0>
               	testq	%r15, %r15
               	js	0x43487f <_mi_os_unreset+0x10f>
               	lock
               	addq	%r15, 183627(%rip)      # 0x4615c8 <_mi_stats_main+0x88>
               	jmp	0x434887 <_mi_os_unreset+0x117>
               	lock
               	addq	%rcx, 183609(%rip)      # 0x4615c0 <_mi_stats_main+0x80>
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<mi_arena_alloc_from>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %rbp
               	movq	%rdx, %rbx
               	movq	%rdi, %r12
               	movq	32(%rdi), %rax
               	movq	16(%rdi), %r10
               	cmpq	$1, %rdx
               	jne	0x434977 <mi_arena_alloc_from+0xe7>
               	testq	%r10, %r10
               	je	0x434e09 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r9, 64(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%esi, %esi
               	movq	%rax, 48(%rsp)
               	movq	%rax, %rdx
               	jmp	0x4348f1 <mi_arena_alloc_from+0x61>
               	nop
               	addq	$1, %rsi
               	addq	$1, %rdx
               	cmpq	%r10, %rsi
               	je	0x434e0c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %rdx
               	cmovaeq	%r15, %rdx
               	movq	56(%r12,%rdx,8), %rax
               	cmpq	$-1, %rax
               	je	0x4348e0 <mi_arena_alloc_from+0x50>
               	je	0x434920 <mi_arena_alloc_from+0x90>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpl	$63, %r14d
               	ja	0x4348e0 <mi_arena_alloc_from+0x50>
               	jmp	0x43492c <mi_arena_alloc_from+0x9c>
               	nop
               	movl	$64, %r14d
               	cmpl	$63, %r14d
               	ja	0x4348e0 <mi_arena_alloc_from+0x50>
               	movl	$1, %edi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	jmp	0x43494d <mi_arena_alloc_from+0xbd>
               	nopl	(%rax)
               	addq	$1, %r14
               	addq	%rdi, %rdi
               	cmpq	$64, %r14
               	jae	0x4348e0 <mi_arena_alloc_from+0x50>
               	testq	%rax, %rdi
               	jne	0x434940 <mi_arena_alloc_from+0xb0>
               	movq	%rdi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%rdx,8)
               	jne	0x434947 <mi_arena_alloc_from+0xb7>
               	movq	%rbp, 40(%rsp)
               	movq	%r8, 32(%rsp)
               	shlq	$6, %rdx
               	addq	%rdx, %r14
               	jmp	0x434d7d <mi_arena_alloc_from+0x4ed>
               	testq	%r10, %r10
               	je	0x434e09 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r8, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movq	%rbp, 40(%rsp)
               	movq	$-1, %rdx
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	movl	$64, %r13d
               	movl	$64, %ecx
               	subq	%rbx, %rcx
               	leaq	63(%rbx), %rdi
               	movq	%rdi, 120(%rsp)
               	testq	%rbx, %rbx
               	notq	%rsi
               	cmoveq	%rbx, %rsi
               	cmpq	$63, %rbx
               	cmovaq	%rdx, %rsi
               	movq	%rcx, %rbp
               	movq	%rsi, 24(%rsp)
               	leaq	48(%r12), %rcx
               	movq	%rcx, 88(%rsp)
               	leaq	64(%r12), %rcx
               	movq	%rcx, 80(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%edx, %edx
               	movq	%rax, 48(%rsp)
               	movq	%rax, %r8
               	movq	%r10, 72(%rsp)
               	movq	%rbp, 16(%rsp)
               	jmp	0x434a39 <mi_arena_alloc_from+0x1a9>
               	nopl	(%rax,%rax)
               	movq	128(%rsp), %rdx
               	addq	$1, %rdx
               	addq	$1, %r8
               	movq	72(%rsp), %r10
               	cmpq	%r10, %rdx
               	movl	$0, %r15d
               	movq	16(%rsp), %rbp
               	je	0x434e0c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %r8
               	cmovaeq	%r15, %r8
               	cmpq	$64, %rbx
               	ja	0x434a80 <mi_arena_alloc_from+0x1f0>
               	movq	56(%r12,%r8,8), %rax
               	cmpq	$-1, %rax
               	je	0x434a80 <mi_arena_alloc_from+0x1f0>
               	je	0x434a67 <mi_arena_alloc_from+0x1d7>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	%rbp, %r14
               	ja	0x434a80 <mi_arena_alloc_from+0x1f0>
               	jmp	0x434cac <mi_arena_alloc_from+0x41c>
               	movl	$64, %r14d
               	cmpq	%rbp, %r14
               	jbe	0x434cac <mi_arena_alloc_from+0x41c>
               	nopw	%cs:(%rax,%rax)
               	movq	%rdx, 128(%rsp)
               	movq	56(%r12,%r8,8), %r10
               	testq	%r10, %r10
               	je	0x434ab0 <mi_arena_alloc_from+0x220>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	testq	%rbp, %rbp
               	jne	0x434abe <mi_arena_alloc_from+0x22e>
               	jmp	0x434a10 <mi_arena_alloc_from+0x180>
               	nopl	(%rax)
               	movl	$64, %ebp
               	testq	%rbp, %rbp
               	je	0x434a10 <mi_arena_alloc_from+0x180>
               	leaq	(%r12,%r8,8), %r11
               	addq	$56, %r11
               	movq	72(%rsp), %r15
               	subq	%r8, %r15
               	movq	88(%rsp), %rax
               	leaq	(%rax,%r8,8), %r14
               	movq	80(%rsp), %rax
               	leaq	(%rax,%r8,8), %rax
               	movq	%rax, 96(%rsp)
               	xorl	%edx, %edx
               	cmpq	%rbx, %rbp
               	jae	0x434cf8 <mi_arena_alloc_from+0x468>
               	movq	120(%rsp), %rax
               	subq	%rbp, %rax
               	shrq	$6, %rax
               	cmpq	%r15, %rax
               	jae	0x434a10 <mi_arena_alloc_from+0x180>
               	movq	%r14, %r9
               	movq	%rbp, %rax
               	nopl	(%rax,%rax)
               	leaq	64(%rax), %rsi
               	movq	%rbx, %rcx
               	subq	%rax, %rcx
               	cmpq	%rbx, %rsi
               	cmovbeq	%r13, %rcx
               	movq	16(%r9), %rdi
               	movq	$-1, %rsi
               	cmpq	$63, %rcx
               	ja	0x434b44 <mi_arena_alloc_from+0x2b4>
               	testq	%rcx, %rcx
               	je	0x434b5b <mi_arena_alloc_from+0x2cb>
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	testq	%rdi, %rsi
               	jne	0x434a10 <mi_arena_alloc_from+0x180>
               	addq	%rcx, %rax
               	addq	$8, %r9
               	cmpq	%rbx, %rax
               	jb	0x434b10 <mi_arena_alloc_from+0x280>
               	jmp	0x434b70 <mi_arena_alloc_from+0x2e0>
               	xorl	%esi, %esi
               	testq	%rdi, %rsi
               	je	0x434b4d <mi_arena_alloc_from+0x2bd>
               	jmp	0x434a10 <mi_arena_alloc_from+0x180>
               	nopl	(%rax,%rax)
               	movq	%rdx, 104(%rsp)
               	movq	%r14, 112(%rsp)
               	movl	$64, %r14d
               	subq	%rbp, %r14
               	movq	$-1, %rax
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	notq	%rax
               	negq	%rbp
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	cmpq	$1, %r10
               	movl	$0, %ecx
               	sbbq	%rcx, %rcx
               	orq	%rax, %rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	testq	%rcx, %rax
               	jne	0x434bf0 <mi_arena_alloc_from+0x360>
               	movq	%rax, %rdi
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, (%r11)
               	jne	0x434bb0 <mi_arena_alloc_from+0x320>
               	movq	96(%rsp), %rdi
               	movq	$-1, %rdx
               	nop
               	movq	%rdi, %rbp
               	leaq	-8(%rdi), %rax
               	cmpq	%r9, %rax
               	jae	0x434c80 <mi_arena_alloc_from+0x3f0>
               	leaq	8(%rbp), %rdi
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, (%rbp)
               	je	0x434bd0 <mi_arena_alloc_from+0x340>
               	jmp	0x434bf3 <mi_arena_alloc_from+0x363>
               	movq	%r11, %rbp
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %rdx
               	jbe	0x434c21 <mi_arena_alloc_from+0x391>
               	nopw	(%rax,%rax)
               	movq	$0, (%rbp)
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	ja	0x434c10 <mi_arena_alloc_from+0x380>
               	cmpq	%r11, %rbp
               	jne	0x434c3d <mi_arena_alloc_from+0x3ad>
               	movq	(%r11), %rax
               	notq	%rcx
               	movq	%rax, %rsi
               	andq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, (%r11)
               	jne	0x434c30 <mi_arena_alloc_from+0x3a0>
               	cmpq	$4, %rdx
               	je	0x434a10 <mi_arena_alloc_from+0x180>
               	movq	(%r11), %r10
               	testq	%r10, %r10
               	je	0x434c69 <mi_arena_alloc_from+0x3d9>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434ae7 <mi_arena_alloc_from+0x257>
               	jmp	0x434a10 <mi_arena_alloc_from+0x180>
               	movl	$64, %ebp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434ae7 <mi_arena_alloc_from+0x257>
               	jmp	0x434a10 <mi_arena_alloc_from+0x180>
               	movq	(%rbp), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rsi, %rax
               	jne	0x434bf3 <mi_arena_alloc_from+0x363>
               	movq	%rax, %rdi
               	orq	%rsi, %rdi
               	lock
               	cmpxchgq	%rdi, (%rbp)
               	jne	0x434c90 <mi_arena_alloc_from+0x400>
               	jmp	0x434d76 <mi_arena_alloc_from+0x4e6>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434cdf <mi_arena_alloc_from+0x44f>
               	nopl	(%rax)
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	%rbp, %r14
               	ja	0x434a80 <mi_arena_alloc_from+0x1f0>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434cc0 <mi_arena_alloc_from+0x430>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%r8,8)
               	jne	0x434cd6 <mi_arena_alloc_from+0x446>
               	jmp	0x434d76 <mi_arena_alloc_from+0x4e6>
               	movq	(%r11), %rax
               	cmpq	$-1, %rax
               	je	0x434a10 <mi_arena_alloc_from+0x180>
               	je	0x434d1e <mi_arena_alloc_from+0x48e>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434a10 <mi_arena_alloc_from+0x180>
               	jmp	0x434d2f <mi_arena_alloc_from+0x49f>
               	movl	$64, %r14d
               	cmpq	16(%rsp), %r14
               	ja	0x434a10 <mi_arena_alloc_from+0x180>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434d61 <mi_arena_alloc_from+0x4d1>
               	nop
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434a10 <mi_arena_alloc_from+0x180>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434d40 <mi_arena_alloc_from+0x4b0>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, (%r11)
               	jne	0x434d56 <mi_arena_alloc_from+0x4c6>
               	shlq	$6, %r8
               	addq	%r8, %r14
               	movq	200(%rsp), %rax
               	movq	192(%rsp), %r13
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%r12)
               	movq	(%r12), %r15
               	movq	%r14, %rbp
               	shlq	$24, %rbp
               	movq	%r14, %rcx
               	shlq	$8, %rcx
               	movq	56(%rsp), %rdx
               	addl	$1, %edx
               	movzbl	%dl, %edx
               	orq	%rcx, %rdx
               	movq	%rdx, (%rax)
               	movq	40(%r12), %rdi
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	xorl	%ecx, %ecx
               	callq	0x435060 <_mi_bitmap_claim_across>
               	movb	%al, (%r13)
               	movb	30(%r12), %al
               	movq	32(%rsp), %rcx
               	movb	%al, (%rcx)
               	movb	$1, %al
               	cmpb	$0, 30(%r12)
               	jne	0x434deb <mi_arena_alloc_from+0x55b>
               	movb	29(%r12), %al
               	addq	%rbp, %r15
               	movq	64(%rsp), %rcx
               	movb	%al, (%rcx)
               	cmpb	$0, 29(%r12)
               	movq	40(%rsp), %r13
               	je	0x434e21 <mi_arena_alloc_from+0x591>
               	movb	$1, (%r13)
               	jmp	0x434e0c <mi_arena_alloc_from+0x57c>
               	xorl	%r15d, %r15d
               	movq	%r15, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpb	$0, (%r13)
               	je	0x434e73 <mi_arena_alloc_from+0x5e3>
               	movq	48(%r12), %rdi
               	leaq	15(%rsp), %rcx
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	callq	0x435060 <_mi_bitmap_claim_across>
               	cmpb	$0, 15(%rsp)
               	je	0x434e0c <mi_arena_alloc_from+0x57c>
               	shlq	$24, %rbx
               	leaq	14(%rsp), %r8
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d860 <mi_os_commitx>
               	cmpb	$0, 14(%rsp)
               	je	0x434e0c <mi_arena_alloc_from+0x57c>
               	movq	192(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x434e0c <mi_arena_alloc_from+0x57c>
               	movq	%r15, %r11
               	movq	48(%r12), %rdi
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	andl	$63, %r14d
               	leaq	(%r14,%rbx), %rax
               	cmpq	$64, %rax
               	ja	0x434fea <mi_arena_alloc_from+0x75a>
               	cmpq	$63, %rbx
               	jbe	0x434ea3 <mi_arena_alloc_from+0x613>
               	movq	$-1, %rsi
               	jmp	0x434ec1 <mi_arena_alloc_from+0x631>
               	testq	%rbx, %rbx
               	je	0x434fe0 <mi_arena_alloc_from+0x750>
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	xorl	%r10d, %r10d
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	(%rdi,%rbp,8), %rcx
               	andq	%rsi, %rcx
               	cmpq	%rsi, %rcx
               	sete	%cl
               	leaq	(%rdi,%rbp,8), %rdi
               	addq	$8, %rdi
               	testq	%rdx, %rdx
               	je	0x434fbb <mi_arena_alloc_from+0x72b>
               	leaq	-1(%rdx), %r9
               	movq	%rdx, %rsi
               	andq	$3, %rsi
               	je	0x434f1d <mi_arena_alloc_from+0x68d>
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	andq	%r10, %rbp
               	cmpq	%r10, %rbp
               	movzbl	%cl, %ecx
               	cmovnel	%ebx, %ecx
               	addq	$8, %rdi
               	addq	$-1, %rsi
               	jne	0x434f00 <mi_arena_alloc_from+0x670>
               	andq	$-4, %rdx
               	cmpq	$3, %r9
               	movq	%r11, %r15
               	jb	0x434fbe <mi_arena_alloc_from+0x72e>
               	leaq	-4(%rdx), %rsi
               	testb	$4, %sil
               	jne	0x434f64 <mi_arena_alloc_from+0x6d4>
               	movq	(%rdi), %rdx
               	movq	8(%rdi), %rbp
               	andq	%rdx, %rbp
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rbx
               	andq	%rdx, %rbx
               	andq	%rbp, %rbx
               	movq	%r11, %r15
               	andq	%r10, %rbx
               	xorl	%edx, %edx
               	cmpq	%r10, %rbx
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	addq	$32, %rdi
               	movq	%rsi, %rdx
               	cmpq	$4, %rsi
               	jb	0x434fbe <mi_arena_alloc_from+0x72e>
               	xorl	%r9d, %r9d
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	movq	8(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	16(%rdi), %rbp
               	movq	24(%rdi), %rsi
               	andq	%rbp, %rsi
               	andq	%rbx, %rsi
               	movq	32(%rdi), %rbp
               	movq	40(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	48(%rdi), %rbp
               	movq	56(%rdi), %rax
               	andq	%rbp, %rax
               	andq	%rbx, %rax
               	andq	%rsi, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%r9d, %ecx
               	addq	$64, %rdi
               	addq	$-8, %rdx
               	jne	0x434f70 <mi_arena_alloc_from+0x6e0>
               	movq	%r11, %r15
               	testq	%r8, %r8
               	je	0x434fd4 <mi_arena_alloc_from+0x744>
               	movq	(%rdi), %rax
               	andq	%r8, %rax
               	xorl	%edx, %edx
               	cmpq	%r8, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	andb	$1, %cl
               	movb	%cl, (%r13)
               	jmp	0x434e0c <mi_arena_alloc_from+0x57c>
               	xorl	%r10d, %r10d
               	xorl	%esi, %esi
               	jmp	0x434ec4 <mi_arena_alloc_from+0x634>
               	movl	$64, %r9d
               	subq	%r14, %r9
               	movq	%r14, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r14d, %ecx
               	shlq	%cl, %rdx
               	xorl	%r8d, %r8d
               	cmpq	$1, %r14
               	movl	$0, %esi
               	sbbq	%rsi, %rsi
               	orq	%rdx, %rsi
               	subq	%r9, %rbx
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rbx
               	je	0x434ec9 <mi_arena_alloc_from+0x639>
               	movq	$-1, %r10
               	movq	$-1, %r8
               	movl	%ebx, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x434ec9 <mi_arena_alloc_from+0x639>
               	nopw	%cs:(%rax,%rax)

<_mi_bitmap_claim_across>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rcx, %r8
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x435317 <_mi_bitmap_claim_across+0x2b7>
               	cmpq	$63, %rsi
               	jbe	0x435094 <_mi_bitmap_claim_across+0x34>
               	movq	$-1, %rbp
               	jmp	0x4350b1 <_mi_bitmap_claim_across+0x51>
               	testq	%rsi, %rsi
               	je	0x4351dc <_mi_bitmap_claim_across+0x17c>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	xorl	%edx, %edx
               	leaq	(%rdi,%rax,8), %rcx
               	movq	(%rdi,%rax,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%rbp, %rsi
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	jne	0x4350d0 <_mi_bitmap_claim_across+0x70>
               	xorl	%edi, %edi
               	andq	%rbp, %rax
               	sete	%r15b
               	xorl	%esi, %esi
               	cmpq	%rbp, %rax
               	setne	%r11b
               	addq	$8, %rcx
               	testq	%rdx, %rdx
               	je	0x43510b <_mi_bitmap_claim_across+0xab>
               	testb	$1, %dl
               	jne	0x435113 <_mi_bitmap_claim_across+0xb3>
               	movq	%rdx, %r13
               	cmpq	$1, %rdx
               	jne	0x435159 <_mi_bitmap_claim_across+0xf9>
               	jmp	0x4352c3 <_mi_bitmap_claim_across+0x263>
               	movl	%r15d, %edi
               	jmp	0x4352c3 <_mi_bitmap_claim_across+0x263>
               	leaq	-1(%rdx), %r13
               	movq	(%rcx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rbp
               	orq	%r10, %rbp
               	lock
               	cmpxchgq	%rbp, (%rcx)
               	jne	0x435120 <_mi_bitmap_claim_across+0xc0>
               	xorl	%ebp, %ebp
               	andq	%r10, %rax
               	movb	%r15b, %dil
               	cmovnel	%ebp, %edi
               	cmpq	%r10, %rax
               	movb	%r11b, %sil
               	movl	$1, %r11d
               	cmovel	%esi, %r11d
               	addq	$8, %rcx
               	movl	%edi, %r15d
               	cmpq	$1, %rdx
               	je	0x4352c3 <_mi_bitmap_claim_across+0x263>
               	leaq	-2(%r13), %rbp
               	testb	$2, %bpl
               	jne	0x4351e6 <_mi_bitmap_claim_across+0x186>
               	movq	(%rcx), %rdx
               	nopw	(%rax,%rax)
               	movq	%rdx, %rsi
               	orq	%r10, %rsi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	movq	%rax, %rdx
               	jne	0x435170 <_mi_bitmap_claim_across+0x110>
               	movq	8(%rcx), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 8(%rcx)
               	jne	0x435190 <_mi_bitmap_claim_across+0x130>
               	movq	%rax, %rsi
               	orq	%rdx, %rsi
               	xorl	%ebx, %ebx
               	testq	%rsi, %r10
               	movzbl	%r15b, %edi
               	cmovnel	%ebx, %edi
               	andq	%rdx, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	addq	$16, %rcx
               	movq	%rbp, %r13
               	movl	%edi, %r15d
               	cmpq	$2, %rbp
               	jae	0x4351f0 <_mi_bitmap_claim_across+0x190>
               	jmp	0x4352c3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r10d, %r10d
               	xorl	%ebp, %ebp
               	jmp	0x4350b4 <_mi_bitmap_claim_across+0x54>
               	cmpq	$2, %rbp
               	jb	0x4352c3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r14d, %r14d
               	movl	$1, %r12d
               	movl	%r15d, %edi
               	nopl	(%rax)
               	movq	(%rcx), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	orq	%r10, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	movq	%rax, %rsi
               	jne	0x435210 <_mi_bitmap_claim_across+0x1b0>
               	movq	8(%rcx), %rbp
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdx
               	orq	%r10, %rdx
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdx, 8(%rcx)
               	movq	%rax, %rbp
               	jne	0x435230 <_mi_bitmap_claim_across+0x1d0>
               	movq	%rbp, %rdx
               	orq	%rsi, %rdx
               	andq	%rsi, %rbp
               	movq	16(%rcx), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbx, %rsi
               	orq	%r10, %rsi
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	movq	%rax, %rbx
               	jne	0x435260 <_mi_bitmap_claim_across+0x200>
               	addq	$-4, %r13
               	movq	24(%rcx), %rax
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 24(%rcx)
               	jne	0x435280 <_mi_bitmap_claim_across+0x220>
               	movq	%rax, %rsi
               	orq	%rbx, %rsi
               	orq	%rdx, %rsi
               	testq	%rsi, %r10
               	movzbl	%dil, %edi
               	cmovnel	%r14d, %edi
               	andq	%rbx, %rax
               	andq	%rbp, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %r11d
               	cmovnel	%r12d, %r11d
               	addq	$32, %rcx
               	testq	%r13, %r13
               	jne	0x435200 <_mi_bitmap_claim_across+0x1a0>
               	testq	%r9, %r9
               	je	0x4352fa <_mi_bitmap_claim_across+0x29a>
               	movq	(%rcx), %rax
               	nop
               	movq	%rax, %rdx
               	orq	%r9, %rdx
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	jne	0x4352d0 <_mi_bitmap_claim_across+0x270>
               	xorl	%ecx, %ecx
               	andq	%r9, %rax
               	movzbl	%dil, %edi
               	cmovnel	%ecx, %edi
               	cmpq	%r9, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	testq	%r8, %r8
               	je	0x435306 <_mi_bitmap_claim_across+0x2a6>
               	andb	$1, %r11b
               	movb	%r11b, (%r8)
               	andb	$1, %dil
               	movl	%edi, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$64, %r11d
               	subq	%rdx, %r11
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r9d, %r9d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r11, %rsi
               	movq	%rsi, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rsi
               	je	0x4350b9 <_mi_bitmap_claim_across+0x59>
               	movq	$-1, %r10
               	movq	$-1, %r9
               	movl	%esi, %ecx
               	shlq	%cl, %r9
               	notq	%r9
               	jmp	0x4350b9 <_mi_bitmap_claim_across+0x59>

<_mi_usable_size>:
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	je	0x4353c0 <_mi_usable_size+0x40>
               	movl	%edi, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	shlq	$6, %rdx
               	leaq	(%rax,%rdx), %r8
               	addq	$120, %r8
               	testb	$2, 126(%rax,%rdx)
               	movl	140(%rax,%rdx), %esi
               	jne	0x4353c6 <_mi_usable_size+0x46>
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x4353d4 <_mi_usable_size+0x54>
               	movq	%rsi, %rax
               	retq
               	xorl	%esi, %esi
               	movq	%rsi, %rax
               	retq
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x4353eb <_mi_usable_size+0x6b>
               	movq	72(%rax), %r9
               	jmp	0x4353f4 <_mi_usable_size+0x74>
               	movq	%r8, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x43542b <_mi_usable_size+0xab>
               	movq	72(%rax), %rdx
               	jmp	0x435437 <_mi_usable_size+0xb7>
               	movl	$1, %r9d
               	shlq	%cl, %r9
               	movb	(%r8), %cl
               	movzbl	%cl, %r11d
               	imulq	%r11, %r9
               	addq	%rax, %r9
               	testb	%r11b, %r11b
               	jne	0x43548e <_mi_usable_size+0x10e>
               	addq	80(%rax), %r9
               	cmpl	$1, %edx
               	ja	0x43548e <_mi_usable_size+0x10e>
               	testl	%esi, %esi
               	je	0x43548e <_mi_usable_size+0x10e>
               	movq	%r9, %rax
               	shrq	$32, %rax
               	je	0x435476 <_mi_usable_size+0xf6>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43547d <_mi_usable_size+0xfd>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%r8), %cl
               	testb	%cl, %cl
               	je	0x435442 <_mi_usable_size+0xc2>
               	movq	%rdx, %rax
               	retq
               	movq	80(%rax), %r8
               	movq	%rdx, %r9
               	subq	%r8, %r9
               	cmpl	$1, %edi
               	ja	0x435472 <_mi_usable_size+0xf2>
               	testl	%esi, %esi
               	je	0x435472 <_mi_usable_size+0xf2>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4354c3 <_mi_usable_size+0x143>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4354c7 <_mi_usable_size+0x147>
               	movq	%r9, %rax
               	retq
               	movl	%r9d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	leaq	(%r9,%rax), %rcx
               	cmpq	%rsi, %rax
               	cmovbq	%rcx, %r9
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x4354dd <_mi_usable_size+0x15d>
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x4354b4 <_mi_usable_size+0x134>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rdi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %edi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %rax
               	retq
               	andq	$-4194304, %r8          # imm = 0xFFC00000
               	movl	112(%r8), %eax
               	cmpl	$3, %eax
               	jne	0x4354f3 <_mi_usable_size+0x173>
               	movq	72(%r8), %r10
               	jmp	0x435500 <_mi_usable_size+0x180>
               	movq	96(%r8), %rcx
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	testb	%r11b, %r11b
               	jne	0x435551 <_mi_usable_size+0x1d1>
               	movq	80(%r8), %rdx
               	movq	%r10, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x43554e <_mi_usable_size+0x1ce>
               	testl	%esi, %esi
               	je	0x43554e <_mi_usable_size+0x1ce>
               	imulq	%r11, %r10
               	addq	%r8, %r10
               	addq	%rdx, %r10
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x435535 <_mi_usable_size+0x1b5>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43553c <_mi_usable_size+0x1bc>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r10
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	orq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43556d <_mi_usable_size+0x1ed>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	movq	%rdx, %rdi
               	jmp	0x435576 <_mi_usable_size+0x1f6>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movl	%edx, %edi
               	movl	112(%r8), %edx
               	cmpl	$3, %edx
               	jne	0x435585 <_mi_usable_size+0x205>
               	movq	72(%r8), %rax
               	jmp	0x435591 <_mi_usable_size+0x211>
               	movq	96(%r8), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%r11b, %r11b
               	je	0x4355a0 <_mi_usable_size+0x220>
               	movq	%rax, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movq	80(%r8), %r9
               	movq	%rax, %rcx
               	subq	%r9, %rcx
               	cmpl	$1, %edx
               	ja	0x4355e9 <_mi_usable_size+0x269>
               	testl	%esi, %esi
               	je	0x4355e9 <_mi_usable_size+0x269>
               	imulq	%r11, %rax
               	addq	%rax, %r8
               	addq	%r9, %r8
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x4355d0 <_mi_usable_size+0x250>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4355d7 <_mi_usable_size+0x257>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_heap_malloc_zero>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x43568e <_mi_heap_malloc_zero+0x8e>
               	leaq	7(%r14), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x43568e <_mi_heap_malloc_zero+0x8e>
               	movl	16(%rax), %ecx
               	addl	$1, %ecx
               	movl	%ecx, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	testq	%rbx, %rbx
               	je	0x435683 <_mi_heap_malloc_zero+0x83>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	%ebx, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	cmpq	$9, %r14
               	jb	0x43566e <_mi_heap_malloc_zero+0x6e>
               	shlq	$6, %rdx
               	movb	127(%rax,%rdx), %al
               	andb	$1, %al
               	je	0x43566e <_mi_heap_malloc_zero+0x6e>
               	movq	$0, (%rbx)
               	jmp	0x435683 <_mi_heap_malloc_zero+0x83>
               	movq	%rbx, %rdi
               	callq	0x435380 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413710 <memset@plt>
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%r14, %rsi
               	callq	0x431b30 <_mi_malloc_generic>
               	movq	%rax, %rbx
               	testq	%rbx, %rbx
               	jne	0x43563b <_mi_heap_malloc_zero+0x3b>
               	jmp	0x435683 <_mi_heap_malloc_zero+0x83>

<__cxa_demangle>:
               	movl	$4294967294, (%rcx)     # imm = 0xFFFFFFFE
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<konan::consoleErrorf(char const*, ...)>:
               	subq	$1240, %rsp             # imm = 0x4D8
               	movq	%rdi, %r10
               	testb	%al, %al
               	je	0x4356f5 <konan::consoleErrorf(char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	1248(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$1024, %esi             # imm = 0x400
               	movq	%r10, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43576e <konan::consoleErrorf(char const*, ...)+0xbe>
               	cmpl	$1023, %eax             # imm = 0x3FF
               	movl	$1023, %edx             # imm = 0x3FF
               	cmovbl	%eax, %edx
               	leaq	208(%rsp), %rsi
               	movl	$2, %edi
               	callq	0x4138e0 <write@plt>
               	addq	$1240, %rsp             # imm = 0x4D8
               	retq
               	nopw	%cs:(%rax,%rax)

<konan::gettid()>:
               	movl	$186, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	nopl	(%rax)

<kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$216, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x4357db <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x4b>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x435825 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x95>
               	cmpq	$1, %rbx
               	jne	0x435829 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x99>
               	movb	$0, (%r14)
               	movl	$1, %ebx
               	jmp	0x43584e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	xorl	%ebx, %ebx
               	jmp	0x43584e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movq	%rsp, %rcx
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43584e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	addq	%rax, %r14
               	subq	%rax, %rbx
               	movq	%r14, %rax
               	movq	%rbx, %rdx
               	addq	$216, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>:
               	subq	$216, %rsp
               	movq	%rdx, %rdi
               	testb	%al, %al
               	je	0x4358a5 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rsi
               	callq	0x4358f0 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>
               	callq	0x435990 <konan::abort()>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$1024, %rsp             # imm = 0x400
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	62625(%rip), %rdx       # 0x444daa <typeinfo name for kotlin::gc::GCSchedulerData+0x1901>
               	movq	%rsp, %rdi
               	movl	$1024, %esi             # imm = 0x400
               	xorl	%eax, %eax
               	callq	0x435790 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	testq	%rdx, %rdx
               	je	0x435930 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x40>
               	movq	%rdx, %rbx
               	cmpq	$1, %rdx
               	jne	0x435934 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x44>
               	movb	$0, (%rax)
               	movl	$1, %ebx
               	jmp	0x435959 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	xorl	%ebx, %ebx
               	jmp	0x435959 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x435959 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	subq	%rax, %rbx
               	movl	$1024, %edx             # imm = 0x400
               	subl	%ebx, %edx
               	movq	%rsp, %rsi
               	movl	$2, %edi
               	callq	0x4138e0 <write@plt>
               	leaq	62697(%rip), %rdi       # 0x444e5d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	xorl	%eax, %eax
               	callq	0x4356b0 <konan::consoleErrorf(char const*, ...)>
               	addq	$1024, %rsp             # imm = 0x400
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>

<konan::abort()>:
               	pushq	%rax
               	callq	0x4138f0 <abort@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r14
               	leaq	8(%rsp), %rdi
               	callq	0x436270 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
               	movq	16(%rsp), %r12
               	movq	8(%rsp), %rbx
               	movq	%r12, %r13
               	subq	%rbx, %r13
               	movq	%r13, %r15
               	sarq	$3, %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	$0, 16(%r14)
               	testq	%r13, %r13
               	je	0x4359f4 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x54>
               	movl	$8, %esi
               	movq	%r15, %rdi
               	callq	0x4136c0 <calloc@plt>
               	jmp	0x4359f6 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x56>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	%rax, 8(%r14)
               	leaq	(%rax,%r15,8), %rcx
               	movq	%rcx, 16(%r14)
               	cmpq	%r12, %rbx
               	je	0x435b28 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	addq	$-8, %r13
               	cmpq	$24, %r13
               	jb	0x435b10 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	shrq	$3, %r13
               	addq	$1, %r13
               	leaq	(%rbx,%r13,8), %rcx
               	cmpq	%rcx, %rax
               	jae	0x435a3a <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x9a>
               	leaq	(%rax,%r13,8), %rcx
               	cmpq	%rcx, %rbx
               	jb	0x435b10 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	%r13, %rcx
               	andq	$-4, %rcx
               	leaq	-4(%rcx), %rdi
               	movq	%rdi, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$3, %edx
               	cmpq	$12, %rdi
               	jae	0x435a5f <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xbf>
               	xorl	%edi, %edi
               	jmp	0x435ac8 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x128>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edi, %edi
               	nopl	(%rax,%rax)
               	movups	(%rbx,%rdi,8), %xmm0
               	movups	16(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, (%rax,%rdi,8)
               	movups	%xmm1, 16(%rax,%rdi,8)
               	movups	32(%rbx,%rdi,8), %xmm0
               	movups	48(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 32(%rax,%rdi,8)
               	movups	%xmm1, 48(%rax,%rdi,8)
               	movups	64(%rbx,%rdi,8), %xmm0
               	movups	80(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 64(%rax,%rdi,8)
               	movups	%xmm1, 80(%rax,%rdi,8)
               	movups	96(%rbx,%rdi,8), %xmm0
               	movups	112(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 96(%rax,%rdi,8)
               	movups	%xmm1, 112(%rax,%rdi,8)
               	addq	$16, %rdi
               	addq	$4, %rsi
               	jne	0x435a70 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xd0>
               	testq	%rdx, %rdx
               	je	0x435afb <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x15b>
               	leaq	16(,%rdi,8), %rsi
               	negq	%rdx
               	nopl	(%rax)
               	movups	-16(%rbx,%rsi), %xmm0
               	movups	(%rbx,%rsi), %xmm1
               	movups	%xmm0, -16(%rax,%rsi)
               	movups	%xmm1, (%rax,%rsi)
               	addq	$32, %rsi
               	incq	%rdx
               	jne	0x435ae0 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x140>
               	leaq	(%rax,%rcx,8), %rax
               	cmpq	%rcx, %r13
               	je	0x435b28 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	leaq	(%rbx,%rcx,8), %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, (%rax)
               	addq	$8, %rbx
               	addq	$8, %rax
               	cmpq	%rbx, %r12
               	jne	0x435b10 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r14)
               	testq	%rbx, %rbx
               	je	0x435b39 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x199>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1016, %rsp             # imm = 0x3F8
               	movq	%r9, %r13
               	movl	%r8d, %r15d
               	movq	%rcx, %rbx
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x435bb4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x64>
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm1, 240(%rsp)
               	movaps	%xmm2, 256(%rsp)
               	movaps	%xmm3, 272(%rsp)
               	movaps	%xmm4, 288(%rsp)
               	movaps	%xmm5, 304(%rsp)
               	movaps	%xmm6, 320(%rsp)
               	movaps	%xmm7, 336(%rsp)
               	movl	$3176496, 496(%rsp)     # imm = 0x307830
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	leaq	112(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413900 <dladdr@plt>
               	movq	112(%rsp), %rbp
               	testq	%rbp, %rbp
               	je	0x435cce <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x17e>
               	movq	%rbp, %rdi
               	movl	$47, %esi
               	callq	0x413910 <strrchr@plt>
               	leaq	1(%rax), %r8
               	testq	%rax, %rax
               	cmoveq	%rbp, %r8
               	testq	%rbx, %rbx
               	je	0x435cde <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x18e>
               	movq	%r8, 64(%rsp)
               	leaq	144(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413900 <dladdr@plt>
               	testl	%eax, %eax
               	je	0x435c3e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	160(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x435c3e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	%rbx, %rbp
               	subq	168(%rsp), %rbp
               	jmp	0x435cb2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x162>
               	cmpq	$0, 278434(%rip)        # 0x479be8 <(anonymous namespace)::symbols>
               	je	0x435d9f <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x24f>
               	movq	278421(%rip), %rcx      # 0x479be8 <(anonymous namespace)::symbols>
               	movq	(%rcx), %rax
               	movq	8(%rcx), %rcx
               	jmp	0x435c64 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x114>
               	nop
               	addq	$24, %rax
               	cmpq	%rcx, %rax
               	je	0x435ce3 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x193>
               	movq	(%rax), %rdx
               	movq	8(%rax), %rsi
               	jmp	0x435c84 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x134>
               	nopl	(%rax)
               	addq	$24, %rdx
               	cmpq	%rsi, %rdx
               	jae	0x435c60 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x110>
               	movq	8(%rdx), %rdi
               	cmpq	%rbx, %rdi
               	ja	0x435c80 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rdx), %rbp
               	addq	%rdi, %rbp
               	cmpq	%rbx, %rbp
               	jbe	0x435c80 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rax), %rsi
               	movq	%rbx, %rbp
               	subq	%rdi, %rbp
               	testq	%rsi, %rsi
               	je	0x435ce6 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	movl	(%rdx), %eax
               	addq	%rax, %rsi
               	leaq	496(%rsp), %rdi
               	movl	$512, %edx              # imm = 0x200
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 1007(%rsp)
               	jmp	0x435ce6 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	leaq	61674(%rip), %r8        # 0x444dbf <typeinfo name for kotlin::gc::GCSchedulerData+0x1916>
               	testq	%rbx, %rbx
               	jne	0x435c0b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xbb>
               	movq	%rbx, %rbp
               	jmp	0x435ceb <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x19b>
               	movq	%rbx, %rbp
               	movq	64(%rsp), %r8
               	leaq	496(%rsp), %r10
               	leaq	61641(%rip), %rdx       # 0x444dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x191a>
               	movl	$1023, %esi             # imm = 0x3FF
               	movq	%r14, %rdi
               	movq	%r12, %rcx
               	movq	%rbx, %r9
               	movl	$0, %eax
               	pushq	%rbp
               	pushq	%r10
               	callq	0x435790 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	addq	$16, %rsp
               	testb	%r15b, %r15b
               	je	0x435d35 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x1e5>
               	leaq	61625(%rip), %rcx       # 0x444dde <typeinfo name for kotlin::gc::GCSchedulerData+0x1935>
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	xorl	%eax, %eax
               	callq	0x435790 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	leaq	176(%rsp), %rcx
               	movq	%rcx, 368(%rsp)
               	leaq	1072(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movabsq	$206158430256, %rcx     # imm = 0x3000000030
               	movq	%rcx, 352(%rsp)
               	testq	%rdx, %rdx
               	je	0x435d8d <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	cmpq	$1, %rdx
               	jne	0x435d77 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x227>
               	movb	$0, (%rax)
               	jmp	0x435d8d <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	leaq	352(%rsp), %rcx
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%r13, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	addq	$1016, %rsp             # imm = 0x3F8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x435dc3 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x273>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	jmp	0x435dc5 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x275>
               	xorl	%eax, %eax
               	movq	%rax, 278044(%rip)      # 0x479be8 <(anonymous namespace)::symbols>
               	leaq	61462(%rip), %rdi       # 0x444de9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1940>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x413920 <open@plt>
               	testl	%eax, %eax
               	js	0x435c4c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movl	%eax, %ebp
               	leaq	352(%rsp), %rdx
               	movl	$1, %edi
               	movl	%eax, %esi
               	callq	0x413930 <__fxstat@plt>
               	testl	%eax, %eax
               	js	0x435c4c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	400(%rsp), %rsi
               	xorl	%edi, %edi
               	movl	$1, %edx
               	movl	$2, %ecx
               	movl	%ebp, %r8d
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	$-1, %rax
               	je	0x435c4c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	testq	%rax, %rax
               	je	0x435c4c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	cmpw	$0, 60(%rax)
               	je	0x435c4c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	40(%rax), %rsi
               	addq	%rax, %rsi
               	xorl	%edx, %edx
               	movq	%r13, 48(%rsp)
               	movl	%r15d, 12(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	%rsi, 72(%rsp)
               	movq	%r14, 104(%rsp)
               	jmp	0x435ea7 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x357>
               	addq	$8, %r15
               	movq	%rbp, (%r12)
               	movq	%r9, 8(%r12)
               	movq	%r14, 16(%r12)
               	movq	(%r15), %rcx
               	addq	$24, %rcx
               	movq	%r15, %rdi
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	%rcx, (%rdi)
               	addq	$1, %rdx
               	movzwl	60(%rax), %ecx
               	cmpq	%rcx, %rdx
               	movq	104(%rsp), %r14
               	jae	0x435c4c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	%rdx, %r14
               	shlq	$6, %r14
               	movl	4(%rsi,%r14), %ecx
               	cmpl	$2, %ecx
               	jne	0x436057 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x507>
               	leaq	(%rsi,%r14), %r8
               	addq	$4, %r8
               	movq	24(%rsi,%r14), %r15
               	addq	%rax, %r15
               	movq	32(%rsi,%r14), %r10
               	addq	%r15, %r10
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %rbp
               	addq	%rax, %rbp
               	movq	277756(%rip), %r12      # 0x479be8 <(anonymous namespace)::symbols>
               	movq	8(%r12), %r13
               	cmpq	16(%r12), %r13
               	je	0x435f27 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x3d7>
               	addq	$8, %r12
               	movq	%r15, (%r13)
               	movq	%r10, 8(%r13)
               	movq	%rbp, 16(%r13)
               	movq	(%r12), %rcx
               	addq	$24, %rcx
               	movq	%r12, %rdi
               	movq	48(%rsp), %r13
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	jmp	0x436051 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x501>
               	movq	(%r12), %r9
               	movq	%r13, %rax
               	subq	%r9, %rax
               	movq	%rax, %rsi
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %rsi
               	testq	%rax, %rax
               	movq	%rsi, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rsi), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%rsi, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%r8, 40(%rsp)
               	movq	%rdi, 32(%rsp)
               	je	0x435fb2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x462>
               	movq	%rsi, 88(%rsp)
               	movl	$24, %esi
               	movq	%r9, 24(%rsp)
               	movq	%r10, 96(%rsp)
               	callq	0x4136c0 <calloc@plt>
               	movq	88(%rsp), %rsi
               	movq	96(%rsp), %r10
               	movq	24(%rsp), %r9
               	movq	%rax, %rdx
               	jmp	0x435fb4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x464>
               	xorl	%edx, %edx
               	leaq	(%rsi,%rsi,2), %rax
               	movq	%r15, (%rdx,%rax,8)
               	movq	%r10, 8(%rdx,%rax,8)
               	movq	%rbp, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r9, %r13
               	je	0x435ffc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4ac>
               	movq	%rdx, %rbp
               	movq	%r9, %rax
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r13
               	jne	0x435fe0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x490>
               	addq	$24, %rbp
               	testq	%r9, %r9
               	movl	12(%rsp), %r15d
               	je	0x436018 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4c8>
               	movq	%r9, %rdi
               	movq	%rdx, %r13
               	callq	0x4136d0 <free@plt>
               	movq	%r13, %rdx
               	leaq	16(%r12), %rdi
               	movq	%rdx, (%r12)
               	movq	%rbp, 8(%r12)
               	movq	32(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movq	48(%rsp), %r13
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	movq	40(%rsp), %r8
               	movq	%rcx, (%rdi)
               	movl	(%r8), %ecx
               	cmpl	$11, %ecx
               	jne	0x435e91 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x341>
               	movq	24(%rsi,%r14), %rbp
               	addq	%rax, %rbp
               	movq	32(%rsi,%r14), %r9
               	addq	%rbp, %r9
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %r14
               	addq	%rax, %r14
               	movq	277344(%rip), %r15      # 0x479be8 <(anonymous namespace)::symbols>
               	movq	8(%r15), %r12
               	cmpq	16(%r15), %r12
               	jne	0x435e68 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x318>
               	movq	(%r15), %r8
               	movq	%r12, %rax
               	subq	%r8, %rax
               	movq	%rax, %r13
               	sarq	$3, %r13
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %r13
               	testq	%rax, %rax
               	movq	%r13, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r13), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%r13, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%rdi, 40(%rsp)
               	je	0x436111 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c1>
               	movl	$24, %esi
               	movq	%r8, 32(%rsp)
               	movq	%r9, 24(%rsp)
               	callq	0x4136c0 <calloc@plt>
               	movq	24(%rsp), %r9
               	movq	32(%rsp), %r8
               	movq	%rax, %rdx
               	jmp	0x436113 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c3>
               	xorl	%edx, %edx
               	leaq	(,%r13,2), %rax
               	addq	%r13, %rax
               	movq	%rbp, (%rdx,%rax,8)
               	movq	%r9, 8(%rdx,%rax,8)
               	movq	%r14, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r8, %r12
               	je	0x43615c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x60c>
               	movq	%rdx, %rbp
               	movq	%r8, %rax
               	nop
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r12
               	jne	0x436140 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5f0>
               	addq	$24, %rbp
               	testq	%r8, %r8
               	movq	48(%rsp), %r13
               	je	0x436178 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x628>
               	movq	%r8, %rdi
               	movq	%rdx, %r14
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rdx
               	leaq	16(%r15), %rdi
               	movq	%rdx, (%r15)
               	movq	%rbp, 8(%r15)
               	movq	40(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	jmp	0x435e8e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x33e>
               	nop

<std::__throw_length_error(char const*)>:
               	pushq	%rax
               	movq	%rdi, %rcx
               	leaq	60417(%rip), %rdx       # 0x444dbc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435860 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	8(%rdi), %r15
               	cmpq	%r15, %rbx
               	je	0x43620f <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3f>
               	movq	%rdi, %r14
               	jmp	0x4361f9 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x29>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%r15, %rbx
               	je	0x43620c <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4361f0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4361f0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x436221 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x51>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>:
               	movq	%rdi, %rax
               	movq	8(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43625a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	movl	16(%rax), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x43625a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	cmpl	$1, %eax
               	jne	0x43625a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	movb	176706(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43625b <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2b>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	(%rax,%rax)

<kotlin::internal::GetCurrentStackTrace(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdi, %r13
               	movq	$0, 48(%rsp)
               	movl	$1, 56(%rsp)
               	movb	$0, 60(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	testq	%rax, %rax
               	je	0x4362c8 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x58>
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	%rax, 48(%rsp)
               	movl	%ecx, 56(%rsp)
               	movb	$1, 60(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	$0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	leaq	920(%rip), %rdi         # 0x436680 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
               	leaq	32(%rsp), %rsi
               	callq	0x413940 <_Unwind_Backtrace@plt>
               	movq	32(%rsp), %r12
               	cmpq	$4, %r12
               	jbe	0x43639a <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x12a>
               	addq	$-4, %r12
               	movq	8(%rsp), %r15
               	movq	(%rsp), %rbx
               	movq	%r15, %rdx
               	subq	%rbx, %rdx
               	movq	%rdx, %r14
               	sarq	$3, %r14
               	movq	%r12, %rbp
               	subq	%r14, %rbp
               	jbe	0x4363c1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x151>
               	je	0x4365ac <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	movq	16(%rsp), %rax
               	subq	%r15, %rax
               	sarq	$3, %rax
               	cmpq	%rbp, %rax
               	jae	0x4363e1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x171>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%r14, %rcx
               	xorq	%rax, %rcx
               	cmpq	%rbp, %rcx
               	jb	0x436646 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3d6>
               	movq	%rdx, 64(%rsp)
               	movq	%r13, 80(%rsp)
               	cmpq	%rbp, %r14
               	movq	%r14, %rcx
               	cmovbq	%rbp, %rcx
               	leaq	(%rcx,%r14), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%r14, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	movq	%rdi, 72(%rsp)
               	je	0x436401 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x191>
               	movl	$8, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x436404 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x194>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r13)
               	movq	$0, 16(%r13)
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x436602 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
               	callq	0x4136d0 <free@plt>
               	jmp	0x436602 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
               	jae	0x4365ac <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	leaq	(%rbx,%r12,8), %rax
               	cmpq	%r15, %rax
               	je	0x4365ac <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	movq	%rax, 8(%rsp)
               	movq	%rax, %r15
               	jmp	0x4365ac <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	leaq	8(%rsp), %rbx
               	leaq	(,%rbp,8), %rdx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	(%r15,%rbp,8), %rax
               	jmp	0x4365a0 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x330>
               	xorl	%r13d, %r13d
               	leaq	(,%r14,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %rbp
               	xorl	%esi, %esi
               	movq	%rbp, %rdx
               	callq	0x413710 <memset@plt>
               	cmpq	%r15, %rbx
               	je	0x436565 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
               	movq	64(%rsp), %rdi
               	addq	$-8, %rdi
               	movq	%r13, %rcx
               	cmpq	$24, %rdi
               	jb	0x436542 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
               	shrq	$3, %rdi
               	addq	$1, %rdi
               	leaq	(%rbx,%rdi,8), %rax
               	cmpq	%rax, %r13
               	jae	0x436464 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x1f4>
               	leaq	(,%rdi,8), %rax
               	addq	%r13, %rax
               	movq	%r13, %rcx
               	cmpq	%rbx, %rax
               	ja	0x436542 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
               	movq	%rdi, %rax
               	andq	$-4, %rax
               	leaq	-4(%rax), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %ecx
               	andl	$3, %ecx
               	cmpq	$12, %rsi
               	jae	0x436489 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x219>
               	xorl	%esi, %esi
               	jmp	0x4364f3 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x283>
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	movups	(%rbx,%rsi,8), %xmm0
               	movups	16(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, (%r13,%rsi,8)
               	movups	%xmm1, 16(%r13,%rsi,8)
               	movups	32(%rbx,%rsi,8), %xmm0
               	movups	48(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 32(%r13,%rsi,8)
               	movups	%xmm1, 48(%r13,%rsi,8)
               	movups	64(%rbx,%rsi,8), %xmm0
               	movups	80(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 64(%r13,%rsi,8)
               	movups	%xmm1, 80(%r13,%rsi,8)
               	movups	96(%rbx,%rsi,8), %xmm0
               	movups	112(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 96(%r13,%rsi,8)
               	movups	%xmm1, 112(%r13,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x436492 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x222>
               	testq	%rcx, %rcx
               	je	0x43652e <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2be>
               	leaq	16(,%rsi,8), %rdx
               	negq	%rcx
               	nopw	(%rax,%rax)
               	movups	-16(%rbx,%rdx), %xmm0
               	movups	(%rbx,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rcx
               	jne	0x436510 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2a0>
               	cmpq	%rax, %rdi
               	je	0x436565 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
               	leaq	(,%rax,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rbx,%rax,8), %rbx
               	subq	%rbx, %r15
               	xorl	%eax, %eax
               	nopw	(%rax,%rax)
               	movq	(%rbx,%rax), %rdx
               	movq	%rdx, (%rcx,%rax)
               	addq	$8, %rax
               	cmpq	%rax, %r15
               	jne	0x436550 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2e0>
               	movq	(%rsp), %rbx
               	testq	%rbx, %rbx
               	je	0x436572 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x302>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	leaq	16(%rsp), %rbx
               	movq	%r13, (%rsp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 8(%rsp)
               	movq	72(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	80(%rsp), %r13
               	movq	%rax, (%rbx)
               	movq	(%rsp), %rbx
               	movq	8(%rsp), %r15
               	subq	%rbx, %r15
               	sarq	$3, %r15
               	movq	$0, 88(%rsp)
               	movq	$4, 96(%rsp)
               	movq	%rbx, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	leaq	186(%rip), %rdi         # 0x436690 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
               	leaq	88(%rsp), %rsi
               	callq	0x413940 <_Unwind_Backtrace@plt>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	16(%rsp), %rax
               	movq	%rax, 16(%r13)
               	movq	$0, 16(%rsp)
               	movq	48(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x436637 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	movl	56(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x436637 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	cmpl	$1, %eax
               	jne	0x436637 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	movb	175729(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x436637 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	59307(%rip), %rdi       # 0x444df8 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4361b0 <std::__throw_length_error(char const*)>
               	jmp	0x436654 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3e4>
               	movq	%rax, %rbx
               	movq	%rsp, %rdi
               	callq	0x4366d0 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
               	leaq	40(%rsp), %rdi
               	callq	0x436230 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>:
               	movq	(%rsi), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsi)
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	8(%rsi), %rax
               	testq	%rax, %rax
               	je	0x4366a9 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x19>
               	addq	$-1, %rax
               	movq	%rax, 8(%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	movq	24(%rbx), %rax
               	cmpq	%rax, (%rbx)
               	jae	0x4366a5 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
               	callq	0x413950 <_Unwind_GetIP@plt>
               	movq	(%rbx), %rcx
               	leaq	1(%rcx), %rdx
               	movq	%rdx, (%rbx)
               	movq	16(%rbx), %rdx
               	movq	%rax, (%rdx,%rcx,8)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4366dd <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()+0xd>
               	jmp	0x4136d0 <free@plt>
               	retq
               	nop

<CreateStringFromCString>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	testq	%rdi, %rdi
               	je	0x4367e2 <CreateStringFromCString+0x102>
               	movq	%rdi, %r12
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, %r13
               	leaq	(%r12,%rax), %rbx
               	movq	%r12, (%rsp)
               	testq	%rax, %rax
               	movq	%r15, 24(%rsp)
               	jle	0x4367e9 <CreateStringFromCString+0x109>
               	movq	%r13, 32(%rsp)
               	movq	%r12, 16(%rsp)
               	xorl	%r14d, %r14d
               	movq	%rsp, %r13
               	leaq	12(%rsp), %rbp
               	movl	$52, %r12d
               	movl	$10, %r15d
               	jmp	0x436759 <CreateStringFromCString+0x79>
               	nop
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	movl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jae	0x4367c9 <CreateStringFromCString+0xe9>
               	movl	$0, 12(%rsp)
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	callq	0x436950 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r12d
               	jb	0x436740 <CreateStringFromCString+0x60>
               	btl	%eax, %r15d
               	jae	0x4367ad <CreateStringFromCString+0xcd>
               	movq	(%rsp), %rcx
               	addq	$1, %rcx
               	nopl	(%rax,%rax)
               	movq	%rcx, %rax
               	movq	%rcx, (%rsp)
               	cmpq	%rbx, %rcx
               	jae	0x43674c <CreateStringFromCString+0x6c>
               	movzbl	(%rax), %edx
               	andb	$-64, %dl
               	leaq	1(%rax), %rcx
               	cmpb	$-128, %dl
               	je	0x436790 <CreateStringFromCString+0xb0>
               	jmp	0x43674c <CreateStringFromCString+0x6c>
               	xorl	%ecx, %ecx
               	cmpl	$65535, 12(%rsp)        # imm = 0xFFFF
               	movq	(%rsp), %rax
               	seta	%cl
               	addl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jb	0x436759 <CreateStringFromCString+0x79>
               	testl	%r14d, %r14d
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %r12
               	movq	32(%rsp), %r13
               	jns	0x4367ec <CreateStringFromCString+0x10c>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	xorl	%eax, %eax
               	jmp	0x43692f <CreateStringFromCString+0x24f>
               	xorl	%r14d, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%r14d, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	134293(%rip), %rax      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbp)
               	movl	%r14d, 24(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	%rcx, (%r15)
               	movq	%r12, (%rsp)
               	testq	%r13, %r13
               	je	0x436925 <CreateStringFromCString+0x245>
               	addq	$32, %rbp
               	movq	%rsp, %r15
               	leaq	12(%rsp), %r12
               	movl	$52, %r14d
               	movl	$10, %r13d
               	jmp	0x4368a0 <CreateStringFromCString+0x1c0>
               	movl	%eax, %ecx
               	shrl	$10, %ecx
               	addl	$4294956992, %ecx       # imm = 0xFFFFD7C0
               	movw	%cx, (%rbp)
               	andl	$1023, %eax             # imm = 0x3FF
               	orl	$56320, %eax            # imm = 0xDC00
               	movw	%ax, 2(%rbp)
               	addq	$4, %rbp
               	cmpq	%rbx, (%rsp)
               	je	0x436925 <CreateStringFromCString+0x245>
               	nopl	(%rax)
               	movl	$0, 12(%rsp)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x436950 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r14d
               	jae	0x4368d0 <CreateStringFromCString+0x1f0>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	jmp	0x436900 <CreateStringFromCString+0x220>
               	nopl	(%rax)
               	btl	%eax, %r13d
               	jae	0x436915 <CreateStringFromCString+0x235>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	nop
               	movq	%rax, (%rsp)
               	cmpq	%rbx, %rax
               	jae	0x436900 <CreateStringFromCString+0x220>
               	movzbl	(%rax), %ecx
               	andb	$-64, %cl
               	addq	$1, %rax
               	cmpb	$-128, %cl
               	je	0x4368e0 <CreateStringFromCString+0x200>
               	movl	$65533, %eax            # imm = 0xFFFD
               	movw	%ax, (%rbp)
               	addq	$2, %rbp
               	cmpq	%rbx, (%rsp)
               	jne	0x4368a0 <CreateStringFromCString+0x1c0>
               	jmp	0x436925 <CreateStringFromCString+0x245>
               	movl	12(%rsp), %eax
               	cmpl	$65536, %eax            # imm = 0x10000
               	jb	0x436905 <CreateStringFromCString+0x225>
               	jmp	0x436872 <CreateStringFromCString+0x192>
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %rax
               	movq	%rax, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>:
               	movq	(%rdi), %r8
               	movb	(%r8), %al
               	movzbl	%al, %ecx
               	testb	%cl, %cl
               	js	0x436975 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x25>
               	movq	%r8, %r9
               	cmpq	%rsi, %r8
               	je	0x436b6b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movl	%ecx, (%rdx)
               	addq	$1, %r9
               	movq	%r9, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movl	%ecx, %eax
               	andl	$-32, %eax
               	cmpl	$192, %eax
               	jne	0x4369d9 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x89>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%sil, %eax
               	andl	$31, %ecx
               	shll	$6, %ecx
               	andl	$63, %eax
               	orl	%eax, %ecx
               	movl	$4, %eax
               	cmpl	$128, %ecx
               	jae	0x436969 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	jmp	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	%ecx, %eax
               	andl	$-16, %eax
               	cmpl	$224, %eax
               	jne	0x436a9e <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x14e>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %r9b
               	movl	%r9d, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%r9b, %r10d
               	shll	$12, %ecx
               	movzwl	%cx, %eax
               	andl	$63, %r10d
               	shll	$6, %r10d
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	andl	$63488, %ecx            # imm = 0xF800
               	movl	$5, %eax
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	$4, %eax
               	cmpl	$2048, %r10d            # imm = 0x800
               	jb	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	2(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %ecx
               	andb	$-64, %cl
               	movl	$3, %eax
               	cmpb	$-128, %cl
               	jne	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%sil, %eax
               	andl	$63, %eax
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	jmp	0x436969 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	movl	%ecx, %r9d
               	andl	$-8, %r9d
               	movl	$2, %eax
               	cmpl	$240, %r9d
               	jne	0x436974 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x24>
               	cmpq	%rsi, %r8
               	je	0x436b6b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	leaq	1(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x436b6b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movb	(%rax), %r9b
               	movl	%r9d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x436b74 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
               	movzbl	%r9b, %r10d
               	andl	$7, %ecx
               	shll	$18, %ecx
               	andl	$63, %r10d
               	shll	$12, %r10d
               	orl	%ecx, %r10d
               	movl	$5, %eax
               	cmpl	$1114111, %r10d         # imm = 0x10FFFF
               	ja	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	$4, %eax
               	cmpl	$65536, %r10d           # imm = 0x10000
               	jae	0x436b15 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c5>
               	movq	%r8, (%rdi)
               	retq
               	leaq	2(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x436b6b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movb	(%rax), %cl
               	movl	%ecx, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x436b74 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
               	leaq	3(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %r11d
               	andb	$-64, %r11b
               	movl	$3, %eax
               	cmpb	$-128, %r11b
               	jne	0x436b11 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%cl, %eax
               	andl	$63, %eax
               	shll	$6, %eax
               	orl	%r10d, %eax
               	movzbl	%sil, %ecx
               	andl	$63, %ecx
               	orl	%eax, %ecx
               	jmp	0x436969 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	movl	$1, %eax
               	movq	%r8, (%rdi)
               	retq
               	movl	$3, %eax
               	movq	%r8, (%rdi)
               	retq
               	nopl	(%rax)

<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %r14d
               	cmpl	$127, %edi
               	ja	0x436bb7 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x436cb3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x133>
               	movq	16(%rbx), %rcx
               	jmp	0x436cc3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	%r14d, %ebp
               	cmpl	$2047, %r14d            # imm = 0x7FF
               	ja	0x436c2b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xab>
               	shrl	$6, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436d6f <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ef>
               	movq	16(%rbx), %rcx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436bf9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436df0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	andb	$63, %r14b
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436cba <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13a>
               	movq	16(%rbx), %rcx
               	jmp	0x436cbf <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13f>
               	cmpl	$65535, %r14d           # imm = 0xFFFF
               	ja	0x436cf8 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x178>
               	shrl	$12, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436d9d <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x21d>
               	movq	16(%rbx), %rcx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436c6e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436df0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$6, %ebp
               	andb	$63, %bpl
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436d86 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x206>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436beb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436bf9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	jmp	0x436cc3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	$15, %ecx
               	orb	$-128, %r14b
               	cmpq	%rcx, %r15
               	jbe	0x436cd6 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x156>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x436df0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r14b, (%rax,%rbp)
               	movq	%r15, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, (%rax,%r15)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	shrl	$18, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436db4 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x234>
               	movq	16(%rbx), %rcx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436d2e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436df0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$12, %ebp
               	andb	$63, %bpl
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436dcb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x24b>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436c60 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436c6e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436beb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436bf9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436beb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436bf9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436c60 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436c6e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d20 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1a0>
               	jmp	0x436d2e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436c60 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436c6e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	nopw	%cs:(%rax,%rax)

<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movq	8(%rdi), %r12
               	leaq	1(%r12), %rbp
               	movq	(%rdi), %r14
               	leaq	16(%rdi), %rcx
               	cmpq	%rcx, %r14
               	je	0x436e6e <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x7e>
               	movq	16(%r15), %rax
               	testq	%rbp, %rbp
               	js	0x436e78 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x88>
               	cmpq	%rax, %rbp
               	movq	%rcx, (%rsp)
               	jbe	0x436e41 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x436e41 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	subq	%rbx, %r12
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	testq	%rbx, %rbx
               	je	0x436e67 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x77>
               	cmpq	$1, %rbx
               	jne	0x436e84 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x94>
               	movb	(%r14), %al
               	movb	%al, (%r13)
               	testq	%r12, %r12
               	jne	0x436e97 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xa7>
               	jmp	0x436eac <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	movl	$15, %eax
               	testq	%rbp, %rbp
               	jns	0x436e1f <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x2f>
               	leaq	57281(%rip), %rdi       # 0x444e40 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4361b0 <std::__throw_length_error(char const*)>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	testq	%r12, %r12
               	je	0x436eac <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	leaq	(%rbx,%r13), %rdi
               	addq	$1, %rdi
               	addq	%r14, %rbx
               	cmpq	$1, %r12
               	jne	0x436ed0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xe0>
               	movb	(%rbx), %al
               	movb	%al, (%rdi)
               	cmpq	(%rsp), %r14
               	je	0x436eba <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, (%r15)
               	movq	%rbp, 16(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	cmpq	(%rsp), %r14
               	jne	0x436eb2 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xc2>
               	jmp	0x436eba <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_plusImpl>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movl	8(%rdi), %ebp
               	addl	8(%rsi), %ebp
               	js	0x436fb0 <Kotlin_String_plusImpl+0xc0>
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	132466(%rip), %rax      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r12, (%r14)
               	leaq	32(%rbx), %rdi
               	leaq	16(%r15), %rsi
               	movl	8(%r15), %edx
               	addq	%rdx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movslq	8(%r15), %rax
               	leaq	(%rbx,%rax,2), %rdi
               	addq	$32, %rdi
               	movl	8(%r13), %edx
               	addq	$16, %r13
               	addq	%rdx, %rdx
               	movq	%r13, %rsi
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_subSequence>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	testl	%esi, %esi
               	js	0x4370f1 <Kotlin_String_subSequence+0x131>
               	movl	%edx, %ebp
               	movl	%esi, %ebx
               	cmpl	%esi, %edx
               	jl	0x4370f1 <Kotlin_String_subSequence+0x131>
               	movq	%rdi, %r15
               	cmpl	%ebp, 8(%rdi)
               	jb	0x4370f1 <Kotlin_String_subSequence+0x131>
               	movq	%rcx, %r14
               	subl	%ebx, %ebp
               	jne	0x43706a <Kotlin_String_subSequence+0xaa>
               	movq	$0, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbx
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 16(%rsp)
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 24(%rsp)
               	movb	173145(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437048 <Kotlin_String_subSequence+0x88>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	150873(%rip), %r12      # 0x45bda8 <__unnamed_6>
               	movq	%r12, (%r14)
               	movq	%rbx, %rax
               	movq	-64(%rbx), %rax
               	movq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	jmp	0x4370e1 <Kotlin_String_subSequence+0x121>
               	js	0x4370f6 <Kotlin_String_subSequence+0x136>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	132117(%rip), %rcx      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%r12, (%r14)
               	leaq	32(%rax), %rdi
               	movl	%ebx, %eax
               	leaq	(%r15,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopl	(%rax,%rax)

<Kotlin_String_get>:
               	pushq	%rax
               	cmpl	%esi, 8(%rdi)
               	jbe	0x437110 <Kotlin_String_get+0x10>
               	movslq	%esi, %rax
               	movzwl	16(%rdi,%rax,2), %eax
               	popq	%rcx
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<konan::snprintf(char*, unsigned long, char const*, ...)>:
               	subq	$216, %rsp
               	testb	%al, %al
               	je	0x437162 <konan::snprintf(char*, unsigned long, char const*, ...)+0x42>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rcx
               	callq	0x413850 <vsnprintf@plt>
               	addq	$216, %rsp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_equals>:
               	pushq	%rax
               	testq	%rsi, %rsi
               	je	0x4371cc <Kotlin_String_equals+0x1c>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	131849(%rip), %rcx      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, %rax
               	je	0x4371d0 <Kotlin_String_equals+0x20>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	cmpq	%rdi, %rsi
               	je	0x4371f4 <Kotlin_String_equals+0x44>
               	movl	8(%rdi), %edx
               	cmpl	8(%rsi), %edx
               	jne	0x4371cc <Kotlin_String_equals+0x1c>
               	addq	$16, %rdi
               	addq	$16, %rsi
               	addq	%rdx, %rdx
               	callq	0x413960 <bcmp@plt>
               	testl	%eax, %eax
               	sete	%al
               	popq	%rcx
               	retq
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopl	(%rax,%rax)

<Kotlin_String_hashCode>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	8(%rdi), %r14d
               	cmpb	$0, 272862(%rip)        # 0x479bf0 <(anonymous namespace)::initialized>
               	jne	0x437237 <Kotlin_String_hashCode+0x37>
               	movb	$1, 272853(%rip)        # 0x479bf0 <(anonymous namespace)::initialized>
               	movl	273067(%rip), %eax      # 0x479ccc <__cpu_model+0xc>
               	movl	%eax, %ecx
               	shrb	$7, %cl
               	movb	%cl, 272837(%rip)       # 0x479bf1 <(anonymous namespace)::sseSupported>
               	shrl	$10, %eax
               	andb	$1, %al
               	movb	%al, 272827(%rip)       # 0x479bf2 <(anonymous namespace)::avx2Supported>
               	cmpl	$16, %r14d
               	jge	0x437249 <Kotlin_String_hashCode+0x49>
               	testl	%r14d, %r14d
               	jg	0x437277 <Kotlin_String_hashCode+0x77>
               	xorl	%eax, %eax
               	jmp	0x4373e1 <Kotlin_String_hashCode+0x1e1>
               	movb	272803(%rip), %al       # 0x479bf2 <(anonymous namespace)::avx2Supported>
               	movb	272796(%rip), %cl       # 0x479bf1 <(anonymous namespace)::sseSupported>
               	orb	%al, %cl
               	je	0x437277 <Kotlin_String_hashCode+0x77>
               	leaq	16(%rbx), %rsi
               	movl	%r14d, %edi
               	shrl	$2, %edi
               	cmpl	$31, %r14d
               	jg	0x43731b <Kotlin_String_hashCode+0x11b>
               	callq	0x4373f0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
               	jmp	0x437348 <Kotlin_String_hashCode+0x148>
               	leaq	-1(%r14), %rax
               	movl	%r14d, %ecx
               	andl	$3, %ecx
               	cmpq	$3, %rax
               	jae	0x43728e <Kotlin_String_hashCode+0x8e>
               	xorl	%r14d, %r14d
               	xorl	%eax, %eax
               	jmp	0x4372e1 <Kotlin_String_hashCode+0xe1>
               	andl	$-4, %r14d
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	16(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	18(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	20(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	22(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$4, %rdx
               	cmpq	%rdx, %r14
               	jne	0x4372a0 <Kotlin_String_hashCode+0xa0>
               	testq	%rcx, %rcx
               	je	0x4373e1 <Kotlin_String_hashCode+0x1e1>
               	leaq	(%rbx,%r14,2), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%eax, %edi
               	shll	$5, %edi
               	subl	%eax, %edi
               	movzwl	(%rdx,%rsi,2), %eax
               	addl	%edi, %eax
               	addq	$1, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x437300 <Kotlin_String_hashCode+0x100>
               	jmp	0x4373e1 <Kotlin_String_hashCode+0x1e1>
               	testb	%al, %al
               	je	0x43732c <Kotlin_String_hashCode+0x12c>
               	cmpl	$127, %r14d
               	jg	0x437333 <Kotlin_String_hashCode+0x133>
               	callq	0x437620 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x437348 <Kotlin_String_hashCode+0x148>
               	callq	0x4374a0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x437348 <Kotlin_String_hashCode+0x148>
               	cmpl	$575, %r14d             # imm = 0x23F
               	jg	0x437343 <Kotlin_String_hashCode+0x143>
               	callq	0x437720 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>
               	jmp	0x437348 <Kotlin_String_hashCode+0x148>
               	callq	0x437910 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>
               	movl	%r14d, %ecx
               	andl	$-4, %ecx
               	cmpl	%r14d, %ecx
               	jge	0x4373e1 <Kotlin_String_hashCode+0x1e1>
               	movq	%rcx, %r8
               	notq	%r8
               	addq	%r14, %r8
               	movq	%r14, %r9
               	andq	$3, %r9
               	je	0x437399 <Kotlin_String_hashCode+0x199>
               	movl	%r14d, %edx
               	andl	$-4, %edx
               	leaq	(%rbx,%rdx,2), %rdi
               	addq	$16, %rdi
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	(%rdi,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$1, %rdx
               	cmpq	%rdx, %r9
               	jne	0x437380 <Kotlin_String_hashCode+0x180>
               	orq	%r9, %rcx
               	cmpq	$3, %r8
               	jb	0x4373e1 <Kotlin_String_hashCode+0x1e1>
               	nop
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	16(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	18(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	20(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	22(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	addq	$4, %rcx
               	cmpq	%rcx, %r14
               	jne	0x4373a0 <Kotlin_String_hashCode+0x1a0>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>:
               	addl	$2, %edi
               	pxor	%xmm1, %xmm1
               	movdqa	47713(%rip), %xmm2      # 0x442e60 <_IO_stdin_used+0xa0>
               	movdqa	47721(%rip), %xmm3      # 0x442e70 <_IO_stdin_used+0xb0>
               	movdqa	47729(%rip), %xmm4      # 0x442e80 <_IO_stdin_used+0xc0>
               	pxor	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rax
               	pmovzxwd	(%rsi), %xmm5           # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm5
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm4, %xmm6
               	pmulld	%xmm2, %xmm0
               	paddd	%xmm5, %xmm0
               	pmulld	%xmm2, %xmm1
               	paddd	%xmm6, %xmm1
               	addl	$-2, %edi
               	addq	$16, %rsi
               	cmpl	$3, %edi
               	jg	0x437420 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0x30>
               	phaddd	%xmm1, %xmm0
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	cmpl	$3, %edi
               	jne	0x437490 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0xa0>
               	pmovzxwd	16(%rax), %xmm1         # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47639(%rip), %xmm0      # 0x442e90 <_IO_stdin_used+0xd0>
               	pmulld	47614(%rip), %xmm1      # 0x442e80 <_IO_stdin_used+0xc0>
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm0
               	movd	%xmm0, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	pxor	%xmm5, %xmm5
               	movdqa	47603(%rip), %xmm12     # 0x442ea0 <_IO_stdin_used+0xe0>
               	movdqa	47610(%rip), %xmm10     # 0x442eb0 <_IO_stdin_used+0xf0>
               	movdqa	47617(%rip), %xmm11     # 0x442ec0 <_IO_stdin_used+0x100>
               	movdqa	47528(%rip), %xmm8      # 0x442e70 <_IO_stdin_used+0xb0>
               	movdqa	47535(%rip), %xmm9      # 0x442e80 <_IO_stdin_used+0xc0>
               	pxor	%xmm7, %xmm7
               	pxor	%xmm1, %xmm1
               	pxor	%xmm3, %xmm3
               	nopl	(%rax)
               	movl	%edi, %eax
               	pmovzxwd	(%rsi), %xmm2           # xmm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm10, %xmm2
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm7, %xmm0
               	pmovzxwd	16(%rsi), %xmm7         # xmm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm11, %xmm6
               	movdqa	%xmm5, %xmm4
               	pmovzxwd	24(%rsi), %xmm5         # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm12, %xmm3
               	paddd	%xmm2, %xmm3
               	pmulld	%xmm12, %xmm1
               	paddd	%xmm6, %xmm1
               	pmulld	%xmm12, %xmm0
               	pmulld	%xmm12, %xmm4
               	pmulld	%xmm8, %xmm7
               	paddd	%xmm0, %xmm7
               	pmulld	%xmm9, %xmm5
               	paddd	%xmm4, %xmm5
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x4374e0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x40>
               	phaddd	%xmm1, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm5, %xmm7
               	phaddd	%xmm7, %xmm7
               	phaddd	%xmm7, %xmm7
               	paddd	%xmm3, %xmm7
               	leal	4(%rdi), %eax
               	cmpl	$6, %eax
               	jl	0x4375ef <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x14f>
               	pxor	%xmm4, %xmm4
               	movdqa	47317(%rip), %xmm3      # 0x442e60 <_IO_stdin_used+0xa0>
               	pxor	%xmm1, %xmm1
               	nop
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm1, %xmm2
               	movl	%edi, %eax
               	movdqa	%xmm4, %xmm5
               	pmovzxwd	8(%rsi), %xmm4          # xmm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm2
               	pmulld	%xmm3, %xmm5
               	pmulld	%xmm8, %xmm0
               	movdqa	%xmm0, %xmm1
               	paddd	%xmm2, %xmm1
               	pmulld	%xmm9, %xmm4
               	paddd	%xmm5, %xmm4
               	addq	$16, %rsi
               	leal	-2(%rax), %edi
               	cmpl	$3, %eax
               	jg	0x437590 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf0>
               	pmulld	47236(%rip), %xmm7      # 0x442e60 <_IO_stdin_used+0xa0>
               	phaddd	%xmm4, %xmm1
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm7
               	testl	%edi, %edi
               	jle	0x437618 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x178>
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47247(%rip), %xmm7      # 0x442e90 <_IO_stdin_used+0xd0>
               	pmulld	47222(%rip), %xmm0      # 0x442e80 <_IO_stdin_used+0xc0>
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	paddd	%xmm0, %xmm7
               	movd	%xmm7, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	addl	$-2, %edi
               	vpbroadcastd	47000(%rip), %ymm1 # 0x442dc4 <_IO_stdin_used+0x4>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vmovdqa	47304(%rip), %ymm2      # 0x442f00 <_IO_stdin_used+0x140>
               	vmovdqa	47328(%rip), %ymm3      # 0x442f20 <_IO_stdin_used+0x160>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm5   # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm2, %ymm5, %ymm5
               	vpmovzxwd	16(%rsi), %ymm6 # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm1, %ymm4, %ymm4
               	vpaddd	%ymm4, %ymm5, %ymm4
               	vpmulld	%ymm1, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm6, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	addl	$2, %eax
               	cmpl	$7, %eax
               	jg	0x437650 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x30>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	leal	6(%rdi), %eax
               	cmpl	$6, %eax
               	jge	0x4376b2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x92>
               	addl	$2, %edi
               	testl	%edi, %edi
               	jg	0x4376ee <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xce>
               	jmp	0x437718 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46856(%rip), %xmm2 # 0x442dc8 <_IO_stdin_used+0x8>
               	vpmulld	47191(%rip), %ymm1, %ymm1 # 0x442f20 <_IO_stdin_used+0x160>
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	addq	$16, %rsi
               	testl	%edi, %edi
               	jle	0x437718 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %xmm1   # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46800(%rip), %xmm2 # 0x442dcc <_IO_stdin_used+0xc>
               	vpmulld	46971(%rip), %xmm1, %xmm1 # 0x442e80 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vmovd	%xmm0, %eax
               	vzeroupper
               	retq

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>:
               	vpbroadcastd	46759(%rip), %ymm3 # 0x442dd0 <_IO_stdin_used+0x10>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	47115(%rip), %ymm4      # 0x442f40 <_IO_stdin_used+0x180>
               	vmovdqa	47139(%rip), %ymm5      # 0x442f60 <_IO_stdin_used+0x1a0>
               	vmovdqa	47035(%rip), %ymm0      # 0x442f00 <_IO_stdin_used+0x140>
               	vmovdqa	47059(%rip), %ymm1      # 0x442f20 <_IO_stdin_used+0x160>
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	nopw	(%rax,%rax)
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm9   # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm9, %ymm9
               	vpmovzxwd	16(%rsi), %ymm10 # ymm10 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm11 # ymm11 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm5, %ymm10, %ymm10
               	vpmovzxwd	48(%rsi), %ymm12 # ymm12 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm8, %ymm8
               	vpaddd	%ymm8, %ymm9, %ymm8
               	vpmulld	%ymm3, %ymm7, %ymm7
               	vpaddd	%ymm7, %ymm10, %ymm7
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm3, %ymm2, %ymm2
               	vpmulld	%ymm0, %ymm11, %ymm9
               	vpaddd	%ymm6, %ymm9, %ymm6
               	vpmulld	%ymm1, %ymm12, %ymm9
               	vpaddd	%ymm2, %ymm9, %ymm2
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x437760 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x40>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm6, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm3, %xmm4
               	vextracti128	$1, %ymm2, %xmm5
               	vpaddd	%xmm2, %xmm3, %xmm2
               	vpaddd	%xmm2, %xmm4, %xmm2
               	vpaddd	%xmm5, %xmm2, %xmm2
               	leal	8(%rdi), %eax
               	cmpl	$12, %eax
               	jge	0x43783b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x11b>
               	cmpl	$2, %edi
               	jge	0x4378b9 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x199>
               	testl	%edi, %edi
               	jle	0x437833 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46517(%rip), %xmm1 # 0x442dcc <_IO_stdin_used+0xc>
               	vpmulld	46688(%rip), %xmm0, %xmm0 # 0x442e80 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpxor	%xmm3, %xmm3, %xmm3
               	vpbroadcastd	46460(%rip), %ymm4 # 0x442dc4 <_IO_stdin_used+0x4>
               	vpxor	%xmm5, %xmm5, %xmm5
               	nopl	(%rax)
               	vpmovzxwd	(%rsi), %ymm6   # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm7 # ymm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm5, %ymm5
               	vpmulld	%ymm4, %ymm3, %ymm3
               	vpmulld	%ymm0, %ymm6, %ymm6
               	vpaddd	%ymm5, %ymm6, %ymm5
               	vpmulld	%ymm1, %ymm7, %ymm6
               	vpaddd	%ymm3, %ymm6, %ymm3
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437850 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x130>
               	vpbroadcastd	46390(%rip), %xmm0 # 0x442dc4 <_IO_stdin_used+0x4>
               	vphaddd	%ymm3, %ymm5, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm0, %xmm2, %xmm0
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437805 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe5>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46337(%rip), %xmm1 # 0x442dc8 <_IO_stdin_used+0x8>
               	vpmulld	46672(%rip), %ymm0, %ymm0 # 0x442f20 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437809 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe9>
               	jmp	0x437833 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>:
               	vpbroadcastd	46267(%rip), %ymm6 # 0x442dd4 <_IO_stdin_used+0x14>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46683(%rip), %ymm10     # 0x442f80 <_IO_stdin_used+0x1c0>
               	vmovdqa	46771(%rip), %ymm11     # 0x442fe0 <_IO_stdin_used+0x220>
               	vmovdqa	46539(%rip), %ymm7      # 0x442f00 <_IO_stdin_used+0x140>
               	vmovdqa	46563(%rip), %ymm8      # 0x442f20 <_IO_stdin_used+0x160>
               	vpxor	%xmm5, %xmm5, %xmm5
               	vpxor	%xmm9, %xmm9, %xmm9
               	vpxor	%xmm12, %xmm12, %xmm12
               	vpxor	%xmm13, %xmm13, %xmm13
               	vpxor	%xmm14, %xmm14, %xmm14
               	vpxor	%xmm15, %xmm15, %xmm15
               	vpxor	%xmm0, %xmm0, %xmm0
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	46625(%rip), %ymm3, %ymm3 # 0x442fa0 <_IO_stdin_used+0x1e0>
               	vpmulld	46648(%rip), %ymm4, %ymm4 # 0x442fc0 <_IO_stdin_used+0x200>
               	vpmulld	%ymm6, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm1, %ymm0
               	vpmovzxwd	48(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm11, %ymm1, %ymm1
               	vpmulld	%ymm6, %ymm15, %ymm15
               	vpaddd	%ymm3, %ymm15, %ymm15
               	vpmovzxwd	64(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm14, %ymm14
               	vpaddd	%ymm4, %ymm14, %ymm14
               	vpmovzxwd	80(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm13, %ymm13
               	vpaddd	%ymm1, %ymm13, %ymm13
               	vpmulld	%ymm6, %ymm12, %ymm1
               	vpmulld	46447(%rip), %ymm3, %ymm3 # 0x442f40 <_IO_stdin_used+0x180>
               	vpaddd	%ymm1, %ymm3, %ymm12
               	vpmovzxwd	96(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm9, %ymm3
               	vpmulld	46455(%rip), %ymm4, %ymm4 # 0x442f60 <_IO_stdin_used+0x1a0>
               	vpaddd	%ymm3, %ymm4, %ymm9
               	vpmulld	%ymm6, %ymm5, %ymm3
               	vpmulld	%ymm7, %ymm1, %ymm1
               	vpaddd	%ymm3, %ymm1, %ymm5
               	vpmovzxwd	112(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm2, %ymm2
               	vpmulld	%ymm8, %ymm1, %ymm1
               	vpaddd	%ymm2, %ymm1, %ymm2
               	movl	%edi, %eax
               	subq	$-128, %rsi
               	leal	-16(%rax), %edi
               	cmpl	$31, %eax
               	jg	0x437960 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x50>
               	vmovdqa	%ymm8, %ymm11
               	vmovdqa	%ymm7, %ymm10
               	vphaddd	%ymm15, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm13, %ymm14, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm9, %ymm12, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm5, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm0, %xmm4
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm1, %xmm5
               	vextracti128	$1, %ymm3, %xmm6
               	vextracti128	$1, %ymm2, %xmm7
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm4, %xmm0
               	vpaddd	%xmm3, %xmm5, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm6, %xmm1
               	vpaddd	%xmm7, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm2
               	leal	16(%rdi), %eax
               	cmpl	$24, %eax
               	jge	0x437aea <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1da>
               	cmpl	$4, %edi
               	jge	0x437bce <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2be>
               	cmpl	$2, %edi
               	jge	0x437c49 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x339>
               	testl	%edi, %edi
               	jle	0x437ae2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	45830(%rip), %xmm1 # 0x442dcc <_IO_stdin_used+0xc>
               	vpmulld	46001(%rip), %xmm0, %xmm0 # 0x442e80 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpbroadcastd	45789(%rip), %ymm5 # 0x442dd0 <_IO_stdin_used+0x10>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	vmovdqa	46132(%rip), %ymm12     # 0x442f40 <_IO_stdin_used+0x180>
               	vmovdqa	46156(%rip), %ymm13     # 0x442f60 <_IO_stdin_used+0x1a0>
               	nopw	%cs:(%rax,%rax)
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	48(%rsi), %ymm9 # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmulld	%ymm5, %ymm8, %ymm8
               	vpmulld	%ymm5, %ymm7, %ymm7
               	vpmulld	%ymm5, %ymm6, %ymm6
               	vpmulld	%ymm5, %ymm0, %ymm0
               	vpmulld	%ymm12, %ymm1, %ymm1
               	vpaddd	%ymm1, %ymm8, %ymm8
               	vpmulld	%ymm13, %ymm3, %ymm1
               	vpaddd	%ymm7, %ymm1, %ymm7
               	vpmulld	%ymm10, %ymm4, %ymm1
               	vpaddd	%ymm6, %ymm1, %ymm6
               	vpmulld	%ymm11, %ymm9, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x437b20 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x210>
               	vpbroadcastd	45642(%rip), %xmm1 # 0x442dd0 <_IO_stdin_used+0x10>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm6, %ymm0
               	vextracti128	$1, %ymm3, %xmm2
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm4
               	vpaddd	%xmm3, %xmm1, %xmm1
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm4, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	cmpl	$4, %edi
               	jl	0x437aab <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x19b>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpbroadcastd	45545(%rip), %ymm3 # 0x442dc4 <_IO_stdin_used+0x4>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm5 # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm4, %ymm4
               	vpmulld	%ymm3, %ymm0, %ymm0
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpaddd	%ymm4, %ymm1, %ymm4
               	vpmulld	%ymm11, %ymm5, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437be0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2d0>
               	vpbroadcastd	45478(%rip), %xmm1 # 0x442dc4 <_IO_stdin_used+0x4>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437ab4 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a4>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45425(%rip), %xmm1 # 0x442dc8 <_IO_stdin_used+0x8>
               	vpmulld	45760(%rip), %ymm0, %ymm0 # 0x442f20 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437ab8 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a8>
               	jmp	0x437ae2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	leaq	131211(%rip), %rax      # 0x457d40 <ktypeglobal:kotlin.native.internal.CleanerImpl#internal>
               	cmpq	%rax, %rsi
               	je	0x437d16 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x76>
               	leaq	131055(%rip), %rax      # 0x457cb0 <ktypeglobal:kotlin.native.concurrent.WorkerBoundReference#internal>
               	cmpq	%rax, %rsi
               	jne	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movq	8(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	cmpq	$0, (%rbx)
               	je	0x437d00 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x60>
               	movq	8(%rbx), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$8, %rdi
               	movq	%rbp, %rsi
               	callq	0x4244b0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	%rbx, %rdi
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4136d0 <free@plt>
               	movl	270039(%rip), %r13d     # 0x479bf4 <(anonymous namespace)::globalCleanerWorker>
               	cmpl	$-2, %r13d
               	je	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movslq	%r13d, %r15
               	movq	8(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	callq	0x4381b0 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	movq	%r12, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437d90 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x437d90 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	cmpl	$1, %eax
               	jne	0x437d90 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movb	169748(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437d90 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movq	%rbp, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	152(%r12), %rdi
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x437dc5 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x125>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x437de3 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x143>
               	jmp	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	(%rax), %rbp
               	cmpl	%r13d, 8(%rbp)
               	jne	0x437e14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x174>
               	testq	%rbp, %rbp
               	jne	0x437e4e <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1ae>
               	jmp	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	cmpl	%r13d, %esi
               	je	0x437e45 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1a5>
               	movq	%rbp, %rbx
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movl	8(%rbp), %esi
               	movslq	%esi, %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x437e00 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x437e0f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x16f>
               	jmp	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	testq	%rbx, %rbx
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	16(%rbp), %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movups	80(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	%r14, 16(%rsp)
               	movq	%r14, %rax
               	movq	-64(%r14), %rdx
               	movl	$1, %r13d
               	movl	$1, %ecx
               	movq	%rdx, %r14
               	xchgl	%ecx, 328(%rdx)
               	movl	%ecx, 12(%rsp)
               	leaq	144(%rbx), %rdi
               	movq	-64(%rax), %rbp
               	xchgl	%r13d, 328(%rbp)
               	movq	%rdi, %r15
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437ed8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%r13d, %eax
               	xchgl	%eax, (%rbp)
               	testl	%r13d, %r13d
               	jne	0x437ed8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	cmpl	$1, %eax
               	jne	0x437ed8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	movb	169420(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437ed8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	movq	%rbp, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	56(%rbx), %rax
               	movq	72(%rbx), %rcx
               	addq	$-40, %rcx
               	cmpq	%rcx, %rax
               	je	0x437f26 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x286>
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movq	56(%rbx), %rax
               	addq	$40, %rax
               	movq	%rax, 56(%rbx)
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	jmp	0x4380d1 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x431>
               	movq	16(%rbx), %rax
               	movq	80(%rbx), %rdx
               	movq	8(%rbx), %rcx
               	movq	%rdx, %rsi
               	subq	%rcx, %rsi
               	sarq	$3, %rsi
               	movq	%rax, %rdi
               	subq	%rsi, %rdi
               	cmpq	$1, %rdi
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	ja	0x438072 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x3d2>
               	movq	%r13, 72(%rsp)
               	movq	48(%rbx), %rsi
               	subq	%rsi, %rdx
               	movq	%rdx, %rbp
               	sarq	$3, %rbp
               	leaq	2(%rbp), %r8
               	leaq	4(,%rbp), %rdi
               	addq	%rbp, %rdi
               	cmpq	%rdi, %rax
               	jbe	0x437fa7 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x307>
               	subq	%r8, %rax
               	andq	$-2, %rax
               	leaq	(%rcx,%rax,4), %r13
               	addq	$8, %rdx
               	cmpq	%rsi, %r13
               	jae	0x438019 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x379>
               	testq	%rdx, %rdx
               	je	0x438035 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	movq	%r13, %rdi
               	jmp	0x438030 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x390>
               	movq	%rbp, 64(%rsp)
               	testq	%rax, %rax
               	movl	$1, %ecx
               	cmovneq	%rax, %rcx
               	leaq	(%rax,%rcx), %r13
               	addq	$2, %r13
               	movl	$8, %esi
               	movq	%r13, %rdi
               	movq	%r8, %rbp
               	callq	0x4136c0 <calloc@plt>
               	movq	%r13, 56(%rsp)
               	subq	%rbp, %r13
               	andq	$-2, %r13
               	movq	%rax, %rbp
               	leaq	(%rax,%r13,4), %r13
               	movq	48(%rbx), %rsi
               	movq	80(%rbx), %rdx
               	subq	%rsi, %rdx
               	addq	$8, %rdx
               	je	0x437ffc <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x35c>
               	movq	%r13, %rdi
               	callq	0x4136b0 <memmove@plt>
               	movq	8(%rbx), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, 8(%rbx)
               	movq	56(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	64(%rsp), %rbp
               	jmp	0x438035 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	testq	%rdx, %rdx
               	je	0x438035 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	leaq	1(%rbp), %rax
               	leaq	(,%rax,8), %rdi
               	addq	%r13, %rdi
               	subq	%rdx, %rdi
               	callq	0x4136b0 <memmove@plt>
               	movq	%r13, 48(%rbx)
               	movq	(%r13), %rax
               	movq	%rax, 32(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 40(%rbx)
               	leaq	(,%rbp,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbx)
               	movq	(%r13,%rbp,8), %rax
               	movq	%rax, 64(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 72(%rbx)
               	movq	72(%rsp), %r13
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	80(%rbx), %rcx
               	movq	%rax, 8(%rcx)
               	movq	56(%rbx), %rax
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movq	80(%rbx), %rax
               	leaq	8(%rax), %rcx
               	movq	%rcx, 80(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rbx)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 72(%rbx)
               	movq	%rax, 56(%rbx)
               	addq	$184, %rbx
               	movq	%rbx, %rdi
               	callq	0x413970 <pthread_cond_signal@plt>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438125 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438125 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	cmpl	$1, %eax
               	jne	0x438125 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	movb	168831(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438125 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	addq	$328, %r15              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ecx, %ecx
               	jne	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	cmpl	$1, %eax
               	jne	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movb	168783(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	cmpl	$1, %eax
               	jne	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movb	168714(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43819a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<(anonymous namespace)::theState()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	268858(%rip), %r14      # 0x479bf8 <(anonymous namespace)::theState()::state>
               	testq	%r14, %r14
               	jne	0x438497 <(anonymous namespace)::theState()+0x2e7>
               	movl	$1, %edi
               	movl	$272, %esi              # imm = 0x110
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438302 <(anonymous namespace)::theState()+0x152>
               	movq	%rax, %rbx
               	addq	$136, %rax
               	movq	%rax, 88(%rbx)
               	movq	$1, 96(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movl	$1065353216, 120(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 128(%rbx)
               	leaq	192(%rbx), %rax
               	movq	%rax, 144(%rbx)
               	movq	$1, 152(%rbx)
               	movups	%xmm0, 160(%rbx)
               	movl	$1065353216, 176(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 184(%rbx)
               	leaq	248(%rbx), %rax
               	movq	%rax, 200(%rbx)
               	movq	$1, 208(%rbx)
               	movups	%xmm0, 216(%rbx)
               	movl	$1065353216, 232(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 240(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r14)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413980 <pthread_mutex_init@plt>
               	movq	%rbx, %rdi
               	addq	$40, %rdi
               	xorl	%esi, %esi
               	callq	0x413990 <pthread_cond_init@plt>
               	movabsq	$4294967297, %rax       # imm = 0x100000001
               	movq	%rax, 256(%rbx)
               	movl	$0, 264(%rbx)
               	testq	%r14, %r14
               	je	0x4382e9 <(anonymous namespace)::theState()+0x139>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x4382e9 <(anonymous namespace)::theState()+0x139>
               	cmpl	$1, %eax
               	jne	0x4382e9 <(anonymous namespace)::theState()+0x139>
               	movb	168379(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4382e9 <(anonymous namespace)::theState()+0x139>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 268548(%rip)      # 0x479bf8 <(anonymous namespace)::theState()::state>
               	jne	0x438311 <(anonymous namespace)::theState()+0x161>
               	movq	268539(%rip), %r14      # 0x479bf8 <(anonymous namespace)::theState()::state>
               	jmp	0x438497 <(anonymous namespace)::theState()+0x2e7>
               	xorl	%ebx, %ebx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 268521(%rip)      # 0x479bf8 <(anonymous namespace)::theState()::state>
               	je	0x4382f6 <(anonymous namespace)::theState()+0x146>
               	movq	%rax, %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rbx, %rdi
               	callq	0x4139a0 <pthread_mutex_destroy@plt>
               	leaq	40(%rbx), %rdi
               	callq	0x4139b0 <pthread_cond_destroy@plt>
               	testq	%r15, %r15
               	je	0x438370 <(anonymous namespace)::theState()+0x1c0>
               	addq	$328, %r15              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x438370 <(anonymous namespace)::theState()+0x1c0>
               	cmpl	$1, %eax
               	jne	0x438370 <(anonymous namespace)::theState()+0x1c0>
               	movb	168244(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438370 <(anonymous namespace)::theState()+0x1c0>
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	leaq	216(%rbx), %r15
               	movq	216(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4383a0 <(anonymous namespace)::theState()+0x1f0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438390 <(anonymous namespace)::theState()+0x1e0>
               	movq	200(%rbx), %rdi
               	movq	208(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	200(%rbx), %rdi
               	leaq	248(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x4383d8 <(anonymous namespace)::theState()+0x228>
               	callq	0x4136d0 <free@plt>
               	leaq	160(%rbx), %r15
               	movq	160(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438400 <(anonymous namespace)::theState()+0x250>
               	nop
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x4383f0 <(anonymous namespace)::theState()+0x240>
               	movq	144(%rbx), %rdi
               	movq	152(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	144(%rbx), %rdi
               	leaq	192(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x438438 <(anonymous namespace)::theState()+0x288>
               	callq	0x4136d0 <free@plt>
               	leaq	104(%rbx), %r15
               	movq	104(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438460 <(anonymous namespace)::theState()+0x2b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438450 <(anonymous namespace)::theState()+0x2a0>
               	movq	88(%rbx), %rdi
               	movq	96(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	88(%rbx), %rdi
               	leaq	136(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x43848f <(anonymous namespace)::theState()+0x2df>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_initRuntimeIfNeeded>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%fs:0, %rax
               	cmpq	$0, -48(%rax)
               	jne	0x43901e <Kotlin_initRuntimeIfNeeded+0xb6e>
               	movq	%rax, %r12
               	movb	268087(%rip), %al       # 0x479c18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x439123 <Kotlin_initRuntimeIfNeeded+0xc73>
               	leaq	24(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	leaq	-8(%rax), %rax
               	leaq	96(%rsp), %rcx
               	movq	%rcx, (%rax)
               	leaq	-67122(%rip), %rbx      # 0x427ee0 <void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	%rbx, (%rax)
               	cmpq	$0, 154251(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43915b <Kotlin_initRuntimeIfNeeded+0xcab>
               	leaq	167894(%rip), %rdi      # 0x461510 <(anonymous namespace)::initOptions>
               	leaq	19553(%rip), %rsi       # 0x43d1a2 <__once_proxy>
               	callq	0x4139c0 <pthread_once@plt>
               	testl	%eax, %eax
               	jne	0x439160 <Kotlin_initRuntimeIfNeeded+0xcb0>
               	callq	0x42a7c0 <mi_thread_init>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438fc6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movq	%rax, %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	movq	%r12, %rax
               	cmpq	$0, -48(%r12)
               	jne	0x439167 <Kotlin_initRuntimeIfNeeded+0xcb7>
               	movq	%r14, -48(%r12)
               	lock
               	addl	$1, 267878(%rip)        # 0x479c04 <(anonymous namespace)::aliveRuntimesCount>
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, 267859(%rip)      # 0x479c00 <(anonymous namespace)::globalRuntimeStatus>
               	sete	%r13b
               	callq	0x435780 <konan::gettid()>
               	movl	%eax, %ebx
               	movl	$1, %edi
               	movl	$368, %esi              # imm = 0x170
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r15
               	leaq	8(%rax), %rbp
               	movl	%ebx, 8(%rax)
               	leaq	163520(%rip), %rax      # 0x460498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 16(%r15)
               	leaq	24(%r15), %rax
               	movq	%rax, 32(%r15)
               	movq	%rax, 24(%r15)
               	leaq	48(%r15), %rax
               	movq	%rax, 56(%r15)
               	movq	%rax, 48(%r15)
               	leaq	144(%r15), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 64(%r15)
               	movups	%xmm0, 80(%r15)
               	movq	%rax, 96(%r15)
               	movq	$1, 104(%r15)
               	movups	%xmm0, 112(%r15)
               	movl	$1065353216, 128(%r15)  # imm = 0x3F800000
               	movups	%xmm0, 136(%r15)
               	movups	%xmm0, 152(%r15)
               	xorps	%xmm0, %xmm0
               	movq	$0, 168(%r15)
               	leaq	163463(%rip), %rax      # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 176(%r15)
               	leaq	184(%r15), %rax
               	movq	%rax, 192(%r15)
               	movq	%rax, 184(%r15)
               	leaq	208(%r15), %rax
               	movq	%rax, 216(%r15)
               	movq	%rax, 208(%r15)
               	leaq	163463(%rip), %rax      # 0x460508 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 232(%r15)
               	leaq	240(%r15), %rax
               	movq	%rax, 248(%r15)
               	movq	%rax, 240(%r15)
               	leaq	264(%r15), %rax
               	movq	%rax, 272(%r15)
               	movq	%rax, 264(%r15)
               	leaq	296(%r15), %rdi
               	movups	%xmm0, 280(%r15)
               	leaq	163448(%rip), %rsi      # 0x460540 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	%rbp, %rdx
               	callq	0x427ad0 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 304(%r15)
               	movq	$0, 320(%r15)
               	movl	$1, 328(%r15)
               	movq	%rbp, 336(%r15)
               	movb	$0, 344(%r15)
               	movups	%xmm0, 352(%r15)
               	cmpq	$0, 153768(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x438726 <Kotlin_initRuntimeIfNeeded+0x276>
               	leaq	163143(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439177 <Kotlin_initRuntimeIfNeeded+0xcc7>
               	leaq	352(%r15), %rax
               	movq	163100(%rip), %rcx      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x438742 <Kotlin_initRuntimeIfNeeded+0x292>
               	movq	%r15, 360(%rcx)
               	jmp	0x43874b <Kotlin_initRuntimeIfNeeded+0x29b>
               	movq	%r15, 163087(%rip)      # 0x460458 <kotlin::mm::GlobalData::instance_+0x20>
               	xorl	%ecx, %ecx
               	movq	$0, 163066(%rip)        # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	(%rax), %rbx
               	movq	%rcx, (%rax)
               	testq	%rbx, %rbx
               	je	0x438799 <Kotlin_initRuntimeIfNeeded+0x2e9>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x43877d <Kotlin_initRuntimeIfNeeded+0x2cd>
               	movq	%rbp, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x423f60 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	162992(%rip), %rbx      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	%r15, 162985(%rip)      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rbx, %rbx
               	je	0x4387e4 <Kotlin_initRuntimeIfNeeded+0x334>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x4387c8 <Kotlin_initRuntimeIfNeeded+0x318>
               	movq	%rbp, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x423f60 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, 153548(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4387fa <Kotlin_initRuntimeIfNeeded+0x34a>
               	leaq	162923(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	%r13b, 15(%rsp)
               	leaq	328(%r15), %rbx
               	movq	%r12, %rax
               	movq	%r15, -64(%r12)
               	movq	%r15, (%r14)
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%r15)
               	movl	%eax, 36(%rsp)
               	cmpl	$1, %eax
               	jne	0x438838 <Kotlin_initRuntimeIfNeeded+0x388>
               	movb	167020(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438838 <Kotlin_initRuntimeIfNeeded+0x388>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 48(%rsp)
               	movq	(%r14), %rbx
               	movq	%r12, %rax
               	movq	-40(%r12), %r13
               	movq	%rbx, %rbp
               	testq	%r13, %r13
               	movq	%r12, 56(%rsp)
               	movq	%r14, 40(%rsp)
               	jne	0x438d56 <Kotlin_initRuntimeIfNeeded+0x8a6>
               	movq	%rbx, 88(%rsp)
               	callq	0x4381b0 <(anonymous namespace)::theState()>
               	movq	%rax, %rdi
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rax, 16(%rsp)
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbx, %rbx
               	je	0x4388b6 <Kotlin_initRuntimeIfNeeded+0x406>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x4388b6 <Kotlin_initRuntimeIfNeeded+0x406>
               	cmpl	$1, %eax
               	jne	0x4388b6 <Kotlin_initRuntimeIfNeeded+0x406>
               	movb	166894(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4388b6 <Kotlin_initRuntimeIfNeeded+0x406>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$1, %edi
               	movl	$256, %esi              # imm = 0x100
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438a0c <Kotlin_initRuntimeIfNeeded+0x55c>
               	movq	%rax, %r13
               	movq	16(%rsp), %rdx
               	movl	256(%rdx), %eax
               	leal	1(%rax), %ecx
               	movl	%ecx, 256(%rdx)
               	movl	%eax, (%r13)
               	movl	$1, 4(%r13)
               	movq	$8, 16(%r13)
               	movl	$8, %edi
               	movl	$8, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 8(%r13)
               	movq	16(%r13), %rax
               	leaq	-4(,%rax,4), %rbp
               	andq	$-8, %rbp
               	leaq	(%rbx,%rbp), %r14
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, (%rbx,%rbp)
               	movq	%r14, 48(%r13)
               	movq	(%rbx,%rbp), %rax
               	movq	%rax, 32(%r13)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 40(%r13)
               	movq	%r14, 80(%r13)
               	movq	%rax, 64(%r13)
               	movq	%rcx, 72(%r13)
               	movq	%rax, 24(%r13)
               	movq	%rax, 56(%r13)
               	leaq	96(%r13), %rax
               	movq	%rax, 112(%r13)
               	movq	%rax, 120(%r13)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 240(%r13)
               	movups	%xmm0, 128(%r13)
               	movq	-64(%r12), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r13), %rdi
               	xorl	%esi, %esi
               	callq	0x413980 <pthread_mutex_init@plt>
               	movq	%r13, %rdi
               	addq	$184, %rdi
               	xorl	%esi, %esi
               	callq	0x413990 <pthread_cond_init@plt>
               	testq	%rbp, %rbp
               	je	0x4389de <Kotlin_initRuntimeIfNeeded+0x52e>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x4389de <Kotlin_initRuntimeIfNeeded+0x52e>
               	cmpl	$1, %eax
               	jne	0x4389de <Kotlin_initRuntimeIfNeeded+0x52e>
               	movb	166598(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4389de <Kotlin_initRuntimeIfNeeded+0x52e>
               	movq	%rbp, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	(%r13), %r8d
               	movslq	%r8d, %rax
               	movq	16(%rsp), %r9
               	movq	152(%r9), %rsi
               	movq	%rax, %rcx
               	orq	%rsi, %rcx
               	shrq	$32, %rcx
               	movq	%rax, 80(%rsp)
               	je	0x438a67 <Kotlin_initRuntimeIfNeeded+0x5b7>
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rbx
               	jmp	0x438a70 <Kotlin_initRuntimeIfNeeded+0x5c0>
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	16(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438a5f <Kotlin_initRuntimeIfNeeded+0x5af>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	xorl	%r13d, %r13d
               	testl	%ebp, %ebp
               	jne	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	cmpl	$1, %eax
               	jne	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	movb	166469(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438a5f <Kotlin_initRuntimeIfNeeded+0x5af>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%r13d, %r13d
               	jmp	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ebx
               	movq	40(%rsp), %r14
               	movq	144(%r9), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x438adc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movq	(%rax), %rbp
               	cmpl	8(%rbp), %r8d
               	jne	0x438aa9 <Kotlin_initRuntimeIfNeeded+0x5f9>
               	testq	%rbp, %rbp
               	jne	0x438cf9 <Kotlin_initRuntimeIfNeeded+0x849>
               	jmp	0x438adc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	cmpq	%rbx, %rdx
               	jne	0x438adc <Kotlin_initRuntimeIfNeeded+0x62c>
               	cmpl	%ecx, %r8d
               	je	0x438ad3 <Kotlin_initRuntimeIfNeeded+0x623>
               	movq	%rbp, %rdi
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438adc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movl	8(%rbp), %ecx
               	movslq	%ecx, %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x438a99 <Kotlin_initRuntimeIfNeeded+0x5e9>
               	xorl	%edx, %edx
               	divq	%rsi
               	cmpq	%rbx, %rdx
               	je	0x438aa4 <Kotlin_initRuntimeIfNeeded+0x5f4>
               	jmp	0x438adc <Kotlin_initRuntimeIfNeeded+0x62c>
               	testq	%rdi, %rdi
               	jne	0x438cf9 <Kotlin_initRuntimeIfNeeded+0x849>
               	movq	%rbx, 72(%rsp)
               	movl	$1, %edi
               	movl	$24, %esi
               	movl	%r8d, %r14d
               	movq	%r9, %rbx
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbp
               	movl	%r14d, 32(%rsp)
               	movl	%r14d, 8(%rax)
               	leaq	176(%rbx), %rdi
               	movq	152(%rbx), %rsi
               	movq	168(%rbx), %rdx
               	movl	$1, %ecx
               	callq	0x43d0aa <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x438b3b <Kotlin_initRuntimeIfNeeded+0x68b>
               	movq	16(%rsp), %r9
               	movq	144(%r9), %r12
               	movq	72(%rsp), %rbx
               	jmp	0x438c69 <Kotlin_initRuntimeIfNeeded+0x7b9>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	movq	%rbp, 64(%rsp)
               	je	0x439107 <Kotlin_initRuntimeIfNeeded+0xc57>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r12
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	16(%rsp), %rax
               	movq	160(%rax), %rbp
               	movq	$0, 160(%rax)
               	testq	%rbp, %rbp
               	movl	32(%rsp), %r8d
               	je	0x438c09 <Kotlin_initRuntimeIfNeeded+0x759>
               	movq	16(%rsp), %rax
               	leaq	160(%rax), %rdi
               	xorl	%ebx, %ebx
               	jmp	0x438bc6 <Kotlin_initRuntimeIfNeeded+0x716>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%r12,%rdx,8), %rax
               	testq	%rax, %rax
               	je	0x438bf0 <Kotlin_initRuntimeIfNeeded+0x740>
               	movq	(%rax), %rax
               	movq	%rax, (%rsi)
               	movq	(%r12,%rdx,8), %rax
               	movq	%rsi, (%rax)
               	movq	%rbx, %rdx
               	movq	%rdx, %rbx
               	testq	%rbp, %rbp
               	je	0x438c09 <Kotlin_initRuntimeIfNeeded+0x759>
               	movq	%rbp, %rsi
               	movq	(%rbp), %rbp
               	movl	8(%rsi), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x438ba0 <Kotlin_initRuntimeIfNeeded+0x6f0>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%r12,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x438bae <Kotlin_initRuntimeIfNeeded+0x6fe>
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	movq	%rsi, (%rdi)
               	movq	%rdi, (%r12,%rdx,8)
               	cmpq	$0, (%rsi)
               	je	0x438bbe <Kotlin_initRuntimeIfNeeded+0x70e>
               	movq	%rsi, (%r12,%rbx,8)
               	jmp	0x438bbe <Kotlin_initRuntimeIfNeeded+0x70e>
               	movq	16(%rsp), %r9
               	movq	144(%r9), %rdi
               	leaq	192(%r9), %rax
               	cmpq	%rdi, %rax
               	movq	64(%rsp), %rbp
               	je	0x438c36 <Kotlin_initRuntimeIfNeeded+0x786>
               	movq	%r9, %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %r9
               	movl	32(%rsp), %r8d
               	movq	%r14, 152(%r9)
               	movq	%r12, 144(%r9)
               	movq	80(%rsp), %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x438c5f <Kotlin_initRuntimeIfNeeded+0x7af>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	jmp	0x438c69 <Kotlin_initRuntimeIfNeeded+0x7b9>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%r12,%rbx,8), %rax
               	testq	%rax, %rax
               	movq	40(%rsp), %r14
               	je	0x438c87 <Kotlin_initRuntimeIfNeeded+0x7d7>
               	movq	(%rax), %rax
               	movq	%rax, (%rbp)
               	movq	(%r12,%rbx,8), %rax
               	movq	%rbp, (%rax)
               	jmp	0x438ce2 <Kotlin_initRuntimeIfNeeded+0x832>
               	movq	%r9, %rsi
               	addq	$160, %rsi
               	movq	160(%r9), %rax
               	movq	%rax, (%rbp)
               	movq	%rbp, 160(%r9)
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	je	0x438cde <Kotlin_initRuntimeIfNeeded+0x82e>
               	movq	152(%r9), %rdi
               	movl	8(%rax), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x438ccf <Kotlin_initRuntimeIfNeeded+0x81f>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x438cd3 <Kotlin_initRuntimeIfNeeded+0x823>
               	xorl	%edx, %edx
               	divl	%edi
               	movq	%rbp, (%r12,%rdx,8)
               	movq	144(%r9), %r12
               	movq	%rsi, (%r12,%rbx,8)
               	movq	168(%r9), %rax
               	addq	$1, %rax
               	movq	%rax, 168(%r9)
               	movq	56(%rsp), %r12
               	movq	%r13, 16(%rbp)
               	movq	%r9, %rdi
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	cmpl	$1, %eax
               	jne	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	movb	165729(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438d43 <Kotlin_initRuntimeIfNeeded+0x893>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r12, %rax
               	movq	%r13, -40(%r12)
               	movq	(%r14), %rbp
               	movq	88(%rsp), %rbx
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, 240(%r13)
               	movq	%rbx, 248(%r13)
               	movq	%r13, 8(%r14)
               	movq	265876(%rip), %rbx      # 0x479c08 <(anonymous namespace)::initHeadNode>
               	testq	%rbx, %rbx
               	je	0x438d93 <Kotlin_initRuntimeIfNeeded+0x8e3>
               	nopl	(%rax)
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	callq	*(%rbx)
               	movq	8(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x438d80 <Kotlin_initRuntimeIfNeeded+0x8d0>
               	movq	(%r14), %rbp
               	movslq	156(%rbp), %rdx
               	leaq	80(%rbp), %r12
               	movq	80(%rbp), %r13
               	movq	72(%rbp), %rax
               	movq	%r13, %rbx
               	subq	%rax, %rbx
               	sarq	$3, %rbx
               	cmpq	%rdx, %rbx
               	jae	0x438e22 <Kotlin_initRuntimeIfNeeded+0x972>
               	movq	%rdx, %r14
               	subq	%rbx, %r14
               	je	0x438f19 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	88(%rbp), %rax
               	subq	%r13, %rax
               	sarq	$3, %rax
               	cmpq	%r14, %rax
               	jae	0x438e36 <Kotlin_initRuntimeIfNeeded+0x986>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%rbx, %rcx
               	xorq	%rax, %rcx
               	cmpq	%r14, %rcx
               	jb	0x43917e <Kotlin_initRuntimeIfNeeded+0xcce>
               	movq	%rdx, 16(%rsp)
               	cmpq	%r14, %rbx
               	movq	%rbx, %rcx
               	cmovbq	%r14, %rcx
               	leaq	(%rcx,%rbx), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%rbx, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	je	0x438e5c <Kotlin_initRuntimeIfNeeded+0x9ac>
               	movl	$8, %esi
               	movq	%rdi, %r12
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x438e62 <Kotlin_initRuntimeIfNeeded+0x9b2>
               	jbe	0x438f19 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(%rax,%rdx,8), %rax
               	cmpq	%r13, %rax
               	jne	0x438e53 <Kotlin_initRuntimeIfNeeded+0x9a3>
               	jmp	0x438f19 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(,%r14,8), %rdx
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	(,%r14,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%r12)
               	jmp	0x438f19 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	%rdi, %r12
               	xorl	%r13d, %r13d
               	leaq	(,%rbx,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %r14
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x413710 <memset@plt>
               	movq	72(%rbp), %rdi
               	movq	80(%rbp), %rax
               	cmpq	%rax, %rdi
               	je	0x438ee5 <Kotlin_initRuntimeIfNeeded+0xa35>
               	movq	%rax, %rcx
               	subq	%rdi, %rcx
               	addq	$-8, %rcx
               	cmpq	$24, %rcx
               	jb	0x438ec1 <Kotlin_initRuntimeIfNeeded+0xa11>
               	shrq	$3, %rcx
               	addq	$1, %rcx
               	leaq	(%rdi,%rcx,8), %rdx
               	cmpq	%rdx, %r13
               	jae	0x43902d <Kotlin_initRuntimeIfNeeded+0xb7d>
               	leaq	(,%rcx,8), %rdx
               	addq	%r13, %rdx
               	cmpq	%rdx, %rdi
               	jae	0x43902d <Kotlin_initRuntimeIfNeeded+0xb7d>
               	movq	%r13, %rcx
               	subq	%rdi, %rax
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movq	(%rdi,%rdx), %rsi
               	movq	%rsi, (%rcx,%rdx)
               	addq	$8, %rdx
               	cmpq	%rdx, %rax
               	jne	0x438ed0 <Kotlin_initRuntimeIfNeeded+0xa20>
               	movq	72(%rbp), %rdi
               	leaq	88(%rbp), %rbx
               	testq	%rdi, %rdi
               	je	0x438ef3 <Kotlin_initRuntimeIfNeeded+0xa43>
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 72(%rbp)
               	movq	16(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%rbx)
               	movl	$1, 152(%rbp)
               	cmpb	$0, 15(%rsp)
               	movq	56(%rsp), %r12
               	movq	40(%rsp), %r14
               	movq	48(%rsp), %r13
               	je	0x438f64 <Kotlin_initRuntimeIfNeeded+0xab4>
               	movq	265412(%rip), %rbp      # 0x479c08 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x438f94 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r14), %rbx
               	movl	$1, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x438f50 <Kotlin_initRuntimeIfNeeded+0xaa0>
               	movq	265373(%rip), %rbp      # 0x479c08 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x438f94 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r14), %rbx
               	nopw	(%rax,%rax)
               	movl	$2, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x438f80 <Kotlin_initRuntimeIfNeeded+0xad0>
               	movl	$1, 16(%r14)
               	testq	%r15, %r15
               	je	0x438fc6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movl	36(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ecx, %ecx
               	jne	0x438fc6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	cmpl	$1, %eax
               	jne	0x438fc6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movb	165086(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438fc6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movq	%r13, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-48(%r12), %rbp
               	leaq	265227(%rip), %rdi      # 0x479be0 <konan::terminationKeyOnceControl>
               	leaq	2884(%rip), %rsi        # 0x439b20 <konan::onThreadExitInit()>
               	callq	0x4139c0 <pthread_once@plt>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	leaq	598(%rip), %rax         # 0x439250 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>
               	movq	%rax, 8(%rbx)
               	movq	%rbp, 16(%rbx)
               	movl	265172(%rip), %edi      # 0x479bdc <konan::terminationKey>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movq	%rax, (%rbx)
               	movl	265158(%rip), %edi      # 0x479bdc <konan::terminationKey>
               	movq	%rbx, %rsi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rcx, %r8
               	andq	$-4, %r8
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x439052 <Kotlin_initRuntimeIfNeeded+0xba2>
               	xorl	%edx, %edx
               	jmp	0x4390bc <Kotlin_initRuntimeIfNeeded+0xc0c>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edx, %edx
               	movups	(%rdi,%rdx,8), %xmm0
               	movups	16(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, (%r13,%rdx,8)
               	movups	%xmm1, 16(%r13,%rdx,8)
               	movups	32(%rdi,%rdx,8), %xmm0
               	movups	48(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 32(%r13,%rdx,8)
               	movups	%xmm1, 48(%r13,%rdx,8)
               	movups	64(%rdi,%rdx,8), %xmm0
               	movups	80(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 64(%r13,%rdx,8)
               	movups	%xmm1, 80(%r13,%rdx,8)
               	movups	96(%rdi,%rdx,8), %xmm0
               	movups	112(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 96(%r13,%rdx,8)
               	movups	%xmm1, 112(%r13,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rsi
               	jne	0x43905b <Kotlin_initRuntimeIfNeeded+0xbab>
               	testq	%rbx, %rbx
               	je	0x4390ea <Kotlin_initRuntimeIfNeeded+0xc3a>
               	leaq	16(,%rdx,8), %rdx
               	negq	%rbx
               	movups	-16(%rdi,%rdx), %xmm0
               	movups	(%rdi,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rbx
               	jne	0x4390cc <Kotlin_initRuntimeIfNeeded+0xc1c>
               	cmpq	%r8, %rcx
               	je	0x438ee1 <Kotlin_initRuntimeIfNeeded+0xa31>
               	leaq	(,%r8,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rdi,%r8,8), %rdi
               	jmp	0x438ec4 <Kotlin_initRuntimeIfNeeded+0xa14>
               	movq	16(%rsp), %rax
               	leaq	192(%rax), %r12
               	movq	$0, 192(%rax)
               	jmp	0x438b6f <Kotlin_initRuntimeIfNeeded+0x6bf>
               	leaq	264942(%rip), %rdi      # 0x479c18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c171 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x4384e9 <Kotlin_initRuntimeIfNeeded+0x39>
               	leaq	3346(%rip), %rdi        # 0x439e50 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43c2aa <std::set_terminate(void (*)())>
               	movq	%rax, 264918(%rip)      # 0x479c20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	264903(%rip), %rdi      # 0x479c18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c260 <__cxa_guard_release>
               	jmp	0x4384e9 <Kotlin_initRuntimeIfNeeded+0x39>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	leaq	48292(%rip), %rdx       # 0x444e12 <typeinfo name for kotlin::gc::GCSchedulerData+0x1969>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435860 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	leaq	48243(%rip), %rdi       # 0x444df8 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4361b0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	testq	%r15, %r15
               	je	0x4391a2 <Kotlin_initRuntimeIfNeeded+0xcf2>
               	movq	%r15, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	-64(%r12), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r14)
               	movq	16(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r14, %r14
               	je	0x43920d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x43920d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	cmpl	$1, %eax
               	jne	0x43920d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movb	164525(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43920d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43920d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movq	%rax, %rbp
               	jmp	0x439212 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	jmp	0x43920a <Kotlin_initRuntimeIfNeeded+0xd5a>
               	jmp	0x43920a <Kotlin_initRuntimeIfNeeded+0xd5a>
               	movq	%rax, %rbp
               	testq	%r15, %r15
               	jne	0x43921a <Kotlin_initRuntimeIfNeeded+0xd6a>
               	movq	%rbp, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	movl	36(%rsp), %edx
               	movl	%edx, %eax
               	movq	48(%rsp), %rcx
               	xchgl	%eax, (%rcx)
               	testl	%edx, %edx
               	jne	0x439212 <Kotlin_initRuntimeIfNeeded+0xd62>
               	cmpl	$1, %eax
               	jne	0x439212 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movb	164450(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439212 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movq	48(%rsp), %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x439287 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	movb	164385(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439287 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$2, 16(%rbx)
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	%rbx, -48(%rax)
               	lock
               	addl	$-1, 264536(%rip)       # 0x479c04 <(anonymous namespace)::aliveRuntimesCount>
               	movq	(%rbx), %rax
               	movq	72(%rax), %rcx
               	cmpq	%rcx, 80(%rax)
               	je	0x4392bd <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6d>
               	movq	%rcx, 80(%rax)
               	movl	$2, 152(%rax)
               	movq	%rbx, 16(%rsp)
               	movq	8(%rbx), %rbx
               	movl	(%rbx), %eax
               	movl	%eax, 12(%rsp)
               	movq	$0, -40(%r12)
               	callq	0x4381b0 <(anonymous namespace)::theState()>
               	movq	%rax, %r13
               	movq	%rbx, (%rsp)
               	movq	248(%rbx), %r15
               	leaq	328(%r15), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439335 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x439335 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	cmpl	$1, %eax
               	jne	0x439335 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movb	164207(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439335 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movl	(%rax), %esi
               	movslq	%esi, %rax
               	movq	152(%r13), %rcx
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x43936e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x11e>
               	xorl	%edx, %edx
               	divq	%rcx
               	movq	%rdx, %r9
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	jne	0x43938b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x13b>
               	jmp	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %r9d
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	je	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movq	(%r10), %rdi
               	cmpl	8(%rdi), %esi
               	jne	0x4393a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rdi, %rdi
               	jne	0x4393ec <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19c>
               	jmp	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	nopl	(%rax)
               	movq	%rdi, %rbp
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	8(%rdi), %ebx
               	movslq	%ebx, %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x4393d0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x180>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	je	0x4393df <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x18f>
               	jmp	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	jne	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	cmpl	%ebx, %esi
               	jne	0x4393a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rbp, %rbp
               	je	0x4394b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movq	%r10, %rax
               	nop
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rdi, %rax
               	jne	0x4393f0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1a0>
               	cmpq	%rsi, %r10
               	je	0x43942d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1dd>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x439496 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movl	8(%rax), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x439456 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x206>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43945f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20f>
               	jmp	0x439496 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43947d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x22d>
               	movl	8(%rbx), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x439465 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43946e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x21e>
               	jmp	0x439496 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x439496 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x439496 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x439496 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	%r10, (%r8,%rdx,8)
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	movq	%r13, %rax
               	addq	$160, %rax
               	cmpq	%r10, %rax
               	jne	0x43948e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x23e>
               	movq	%rbx, (%r10)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	callq	0x4136d0 <free@plt>
               	movq	168(%r13), %rax
               	addq	$-1, %rax
               	movq	%rax, 168(%r13)
               	testq	%r15, %r15
               	movq	%r12, 24(%rsp)
               	je	0x4394cf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x27f>
               	movl	$1, %ebx
               	xchgl	%ebx, (%r14)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4394f0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2a0>
               	movq	-64(%r12), %r15
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r15, %r15
               	je	0x43951b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	movl	%ebx, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebx, %ebx
               	jne	0x43951b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	cmpl	$1, %eax
               	jne	0x43951b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	movb	163728(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43951b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movq	24(%rax), %rbp
               	movq	56(%rax), %r13
               	cmpq	%rbp, %r13
               	je	0x439615 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movq	(%rsp), %rax
               	movq	48(%rax), %r12
               	movq	40(%rax), %r14
               	leaq	39613(%rip), %rbx       # 0x443000 <_IO_stdin_used+0x240>
               	jmp	0x439575 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	nopl	(%rax,%rax)
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rsi
               	movq	%rax, %rdi
               	callq	0x439ba0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	addq	$40, %rbp
               	cmpq	%r14, %rbp
               	je	0x4395d0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
               	cmpq	%rbp, %r13
               	je	0x439615 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movl	(%rbp), %ecx
               	cmpl	$3, %ecx
               	ja	0x439563 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	8(%rbp), %rax
               	movslq	(%rbx,%rcx,4), %rcx
               	addq	%rbx, %rcx
               	jmpq	*%rcx
               	movq	%r12, 32(%rsp)
               	movq	%rbx, %r15
               	movq	24(%rbp), %rbx
               	movq	16(%rbp), %rsi
               	testq	%rsi, %rsi
               	movq	(%rsp), %r12
               	je	0x4395b4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x364>
               	movq	248(%r12), %rdi
               	addq	$8, %rdi
               	callq	0x4244b0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r12), %rsi
               	movq	%rbx, %rdi
               	callq	0x439ba0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	movq	%r15, %rbx
               	movq	32(%rsp), %r12
               	jmp	0x439563 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	nop
               	movq	8(%r12), %rbp
               	addq	$8, %r12
               	leaq	480(%rbp), %r14
               	cmpq	%rbp, %r13
               	jne	0x439575 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	jmp	0x439615 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	nop
               	testq	%rax, %rax
               	je	0x439563 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rdi
               	addq	$8, %rdi
               	movq	%rax, %rsi
               	callq	0x4244b0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439563 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %r14
               	movq	112(%r14), %rbx
               	leaq	96(%r14), %rbp
               	cmpq	%rbp, %rbx
               	movl	12(%rsp), %r13d
               	movq	16(%rsp), %r15
               	jne	0x439834 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5e4>
               	movq	136(%r14), %rsi
               	testq	%rsi, %rsi
               	je	0x439650 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x400>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4244b0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	144(%r14), %rdi
               	callq	0x4139a0 <pthread_mutex_destroy@plt>
               	leaq	184(%r14), %rdi
               	callq	0x4139b0 <pthread_cond_destroy@plt>
               	testq	%rbx, %rbx
               	movq	24(%rsp), %r12
               	je	0x4396aa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x4396aa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	cmpl	$1, %eax
               	jne	0x4396aa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	movb	163322(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4396aa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	104(%r14), %rdi
               	callq	0x439e10 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	8(%r14), %rdi
               	testq	%rdi, %rdi
               	je	0x4396fb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4ab>
               	movq	48(%r14), %rbx
               	movq	80(%r14), %rbp
               	leaq	8(%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x4396f6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4a6>
               	addq	$-8, %rbx
               	nopl	(%rax)
               	movq	8(%rbx), %rdi
               	addq	$8, %rbx
               	callq	0x4136d0 <free@plt>
               	cmpq	%rbp, %rbx
               	jb	0x4396e0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x490>
               	movq	8(%r14), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	(%r15), %rax
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	(%r15), %rbx
               	movl	263362(%rip), %edi      # 0x479bdc <konan::terminationKey>
               	testl	%edi, %edi
               	je	0x439728 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4d8>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	testq	%rax, %rax
               	je	0x439737 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4e7>
               	movq	%r12, %rax
               	movq	$0, -64(%r12)
               	cmpq	$0, 149625(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x439755 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x505>
               	leaq	159000(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439b0a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x8ba>
               	movq	158964(%rip), %rax      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	%rbx, 158965(%rip)      # 0x460458 <kotlin::mm::GlobalData::instance_+0x20>
               	je	0x43984f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5ff>
               	cmpq	%rbx, %rax
               	je	0x439866 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x616>
               	movq	360(%rbx), %rbp
               	movq	352(%rbp), %r14
               	movq	$0, 352(%rbp)
               	movq	352(%rbx), %rax
               	movq	$0, 352(%rbx)
               	movq	352(%rbp), %rbx
               	movq	%rax, 352(%rbp)
               	testq	%rbx, %rbx
               	je	0x4397f4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5a4>
               	movq	352(%rbx), %r15
               	testq	%r15, %r15
               	je	0x4397cc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x57c>
               	movq	%r15, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x423f60 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	352(%rbp), %rax
               	movq	16(%rsp), %r15
               	testq	%rax, %rax
               	je	0x439800 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5b0>
               	movq	%rbp, 360(%rax)
               	testq	%r14, %r14
               	je	0x4398d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	movq	%r14, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	jmp	0x4398d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	nop
               	movq	%rbx, %rdi
               	callq	0x43c691 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
               	movq	%rax, %rbx
               	cmpq	%rbp, %rax
               	je	0x439634 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3e4>
               	movq	40(%rbx), %rsi
               	testq	%rsi, %rsi
               	je	0x439820 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d0>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4244b0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439820 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d0>
               	movq	360(%rbx), %rcx
               	movq	%rcx, 158715(%rip)      # 0x460458 <kotlin::mm::GlobalData::instance_+0x20>
               	cmpq	%rbx, %rax
               	jne	0x439772 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x522>
               	movq	352(%rbx), %rcx
               	movq	$0, 352(%rbx)
               	movq	%rcx, 158673(%rip)      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rax, %rax
               	je	0x4398c3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x673>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x4398a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x650>
               	movq	%rbp, %rdi
               	callq	0x423f10 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x423f60 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	158605(%rip), %rcx      # 0x460450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x4398d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	movq	$0, 360(%rcx)
               	movslq	%r13d, %rbp
               	cmpq	$0, 149210(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4398ec <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x69c>
               	leaq	158585(%rip), %rdi      # 0x460460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	callq	0x4381b0 <(anonymous namespace)::theState()>
               	movq	%rax, %r14
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	movq	208(%r14), %rdi
               	movq	%rbp, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x439937 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6e7>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	200(%r14), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x439954 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x704>
               	jmp	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	200(%r14), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movq	(%rax), %rbx
               	cmpl	%r13d, 8(%rbx)
               	jne	0x439970 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
               	testq	%rbx, %rbx
               	jne	0x4399bd <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x76d>
               	jmp	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	nop
               	movq	%rbx, %rbp
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	8(%rbx), %esi
               	movslq	%esi, %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x4399a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x750>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x4399af <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x75f>
               	jmp	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	cmpl	%r13d, %esi
               	jne	0x439970 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
               	testq	%rbp, %rbp
               	je	0x439ad7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movq	16(%rbx), %rdi
               	callq	0x4139e0 <pthread_detach@plt>
               	movq	208(%r14), %rdi
               	movl	8(%rbx), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x4399ec <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x79c>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r9
               	jmp	0x4399f3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7a3>
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r9d
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rbx, %rax
               	jne	0x439a10 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7c0>
               	cmpq	%rsi, %rcx
               	je	0x439a4d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7fd>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x439ab7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movl	8(%rax), %eax
               	movslq	%eax, %rdx
               	movq	%rdx, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x439a77 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x827>
               	movq	%rdx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x439a80 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x830>
               	jmp	0x439ab7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	(%rbx), %r10
               	testq	%r10, %r10
               	je	0x439a9e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x84e>
               	movl	8(%r10), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439a86 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x836>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x439a8f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x83f>
               	jmp	0x439ab7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x439ab7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x439ab7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x439ab7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	%rcx, (%r8,%rdx,8)
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%r14, %rax
               	addq	$216, %rax
               	cmpq	%rcx, %rax
               	jne	0x439aaf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x85f>
               	movq	%r10, (%rcx)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rbx), %rax
               	movq	%rax, (%rsi)
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	224(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 224(%r14)
               	movq	%r14, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	$0, -48(%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	45868(%rip), %rdx       # 0x444e2d <typeinfo name for kotlin::gc::GCSchedulerData+0x1984>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435860 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax)

<konan::onThreadExitInit()>:
               	pushq	%rax
               	leaq	262376(%rip), %rdi      # 0x479c10 <konan::dummyKey>
               	xorl	%esi, %esi
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	262310(%rip), %rdi      # 0x479bdc <konan::terminationKey>
               	leaq	19(%rip), %rsi          # 0x439b50 <konan::onThreadExitCallback(void*)>
               	popq	%rax
               	jmp	0x4137e0 <pthread_key_create@plt>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitCallback(void*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	262271(%rip), %edi      # 0x479bdc <konan::terminationKey>
               	xorl	%esi, %esi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	testq	%rbx, %rbx
               	je	0x439b8a <konan::onThreadExitCallback(void*)+0x3a>
               	nopl	(%rax)
               	movq	16(%rbx), %rdi
               	callq	*8(%rbx)
               	movq	(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x439b70 <konan::onThreadExitCallback(void*)+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	leaq	328(%rsi), %r14
               	movl	$1, %ebp
               	movl	$1, %eax
               	xchgl	%eax, 328(%rsi)
               	movl	%eax, 4(%rsp)
               	leaq	16(%rdi), %r12
               	movl	$1, %r13d
               	xchgl	%r13d, 328(%rsi)
               	movq	%r12, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439c43 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xa3>
               	movl	%r13d, %eax
               	xchgl	%eax, (%r14)
               	testl	%r13d, %r13d
               	jne	0x439c0c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	cmpl	$1, %eax
               	jne	0x439c0c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movb	161944(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439c0c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x439c96 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xf6>
               	jmp	0x439cad <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x439d1f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x17f>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x439cad <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	cmpl	$1, %eax
               	jne	0x439cad <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movb	161783(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439cad <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x4381b0 <(anonymous namespace)::theState()>
               	movq	%rax, %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439d3b <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x19b>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x439cee <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	cmpl	$1, %eax
               	jne	0x439cee <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movb	161718(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439cee <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	264(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 264(%rbx)
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %r12
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	je	0x439d88 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1e8>
               	jmp	0x439d9f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	callq	0x4381b0 <(anonymous namespace)::theState()>
               	movq	%rax, %rbx
               	movl	$1, %eax
               	xchgl	%eax, 328
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	movl	264(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 264(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r12)
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r12, %r12
               	je	0x439ddb <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x23b>
               	addq	$328, %r12              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x439d9f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	cmpl	$1, %eax
               	jne	0x439d9f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	movb	161541(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439d9f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	movq	%r12, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$40, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	testq	%r15, %r15
               	je	0x439dcc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	movl	4(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ecx, %ecx
               	jne	0x439dcc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	cmpl	$1, %eax
               	jne	0x439dcc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	movb	161488(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x439df5 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x255>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$40, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4139f0 <pthread_cond_broadcast@plt>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax,%rax)

<std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x439e3d <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x2d>
               	movq	%rdi, %rbx
               	movq	24(%rbx), %rdi
               	callq	0x439e10 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	16(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x439e20 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x10>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::kotlinHandler()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rdi
               	callq	0x43bccd <std::current_exception()>
               	cmpq	$0, 8(%rsp)
               	jne	0x439e97 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x47>
               	leaq	8(%rsp), %rdi
               	callq	0x43bc4a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x439eb1 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x61>
               	xorl	%ebx, %ebx
               	jmp	0x439eb7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x67>
               	leaq	16(%rsp), %rbx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43bc0c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbx, %rdi
               	callq	0x43bd22 <std::rethrow_exception(std::__exception_ptr::exception_ptr)>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43a150 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x439eee <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x439eee <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	cmpl	$1, %eax
               	jne	0x439eee <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movb	161213(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439eee <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	movq	%rdx, %r15
               	movq	%rax, %rbx
               	leaq	16(%rsp), %rdi
               	callq	0x43bc4a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%rbx, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	cmpl	$2, %r15d
               	jne	0x439f6e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x11e>
               	movq	%rax, %r14
               	callq	0x4384b0 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	xorl	%ebx, %ebx
               	xchgl	%ebx, 328(%r15)
               	addq	$328, %r15              # imm = 0x148
               	cmpl	$1, %ebx
               	jne	0x439f56 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movb	161102(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439f56 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43a010 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43a140 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x439f8f <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x13f>
               	xorl	%ebx, %ebx
               	jmp	0x439f95 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x145>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43a150 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	160991(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	jmp	0x439fe7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x197>
               	movq	%rax, %r14
               	movl	%ebx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebx, %ebx
               	jne	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	160952(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439fec <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x43bfd5 <__cxa_end_catch>
               	leaq	8(%rsp), %rdi
               	callq	0x43bc4a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::processUnhandledException(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	160812(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a075 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x65>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	156069(%rip), %eax      # 0x460220 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	cmpl	$2, %eax
               	je	0x43a093 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x83>
               	leaq	156057(%rip), %rdi      # 0x460220 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	leaq	-130462(%rip), %rsi     # 0x41a2f0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>
               	callq	0x43a360 <CallInitGlobalPossiblyLock>
               	movq	155998(%rip), %rax      # 0x4601f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	%rdi, 32(%rsp)
               	testq	%rdi, %rdi
               	je	0x43a0f3 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0xe3>
               	leaq	40(%rsp), %rdx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$44, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rbx, %rdi
               	callq	0x43a540 <ThrowException>
               	movq	%rax, %rbx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$2, %edx
               	jne	0x43a135 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x125>
               	movq	%rbx, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rdi
               	callq	0x43a140 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%rax, %rbx
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x423060 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>:
               	pushq	%rax
               	callq	0x43a280 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()>:
               	pushq	%rax
               	callq	0x43a160 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>
               	nopw	%cs:(%rax,%rax)

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 155661(%rip)      # 0x460184 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43a17e <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1e>
               	callq	0x43a230 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
               	movq	$0, 16(%rsp)
               	movl	$1, 24(%rsp)
               	movb	$0, 28(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43a1b0 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x50>
               	xorl	%ebx, %ebx
               	jmp	0x43a1c9 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x69>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rbx, 16(%rsp)
               	movl	%ebp, 24(%rsp)
               	movb	$1, 28(%rsp)
               	movl	155569(%rip), %edi      # 0x460180 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a00 <sleep@plt>
               	leaq	8(%rsp), %rdi
               	callq	0x436230 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a10 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a21a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a21a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	cmpl	$1, %eax
               	jne	0x43a21a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	movb	160401(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a21a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>:
               	pushq	%rax
               	callq	0x43a240 <(anonymous namespace)::TerminateHandler::instance()>
               	callq	*260580(%rip)           # 0x479c20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	nopl	(%rax)

<(anonymous namespace)::TerminateHandler::instance()>:
               	pushq	%rax
               	movb	260561(%rip), %al       # 0x479c18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x43a24d <(anonymous namespace)::TerminateHandler::instance()+0xd>
               	popq	%rax
               	retq
               	leaq	260548(%rip), %rdi      # 0x479c18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c171 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43a24b <(anonymous namespace)::TerminateHandler::instance()+0xb>
               	leaq	-1044(%rip), %rdi       # 0x439e50 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43c2aa <std::set_terminate(void (*)())>
               	movq	%rax, 260528(%rip)      # 0x479c20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	260513(%rip), %rdi      # 0x479c18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c260 <__cxa_guard_release>
               	popq	%rax
               	retq
               	nop

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 155368(%rip)      # 0x460184 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43a2a8 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x28>
               	leaq	24(%rsp), %rdi
               	callq	0x43a350 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
               	movq	$0, 8(%rsp)
               	movl	$1, 16(%rsp)
               	movb	$0, 20(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43a2da <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x5a>
               	xorl	%ebx, %ebx
               	jmp	0x43a2f3 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x73>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rbx, 8(%rsp)
               	movl	%ebp, 16(%rsp)
               	movb	$1, 20(%rsp)
               	movl	155271(%rip), %edi      # 0x460180 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a00 <sleep@plt>
               	movq	%rsp, %rdi
               	callq	0x436230 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a10 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a342 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a342 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	cmpl	$1, %eax
               	jne	0x43a342 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	movb	160105(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a342 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>:
               	pushq	%rax
               	movq	(%rdi), %rdi
               	callq	0x41a240 <ReportUnhandledException>
               	callq	0x435990 <konan::abort()>
               	nop

<CallInitGlobalPossiblyLock>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	(%rdi), %ebp
               	cmpl	$2, %ebp
               	je	0x43a442 <CallInitGlobalPossiblyLock+0xe2>
               	cmpl	$3, %ebp
               	je	0x43a447 <CallInitGlobalPossiblyLock+0xe7>
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	callq	0x435780 <konan::gettid()>
               	movl	%ebp, %ecx
               	andl	$3, %ecx
               	cmpl	$1, %ecx
               	jne	0x43a3ce <CallInitGlobalPossiblyLock+0x6e>
               	andl	$-4, %ebp
               	shll	$2, %eax
               	cmpl	%eax, %ebp
               	je	0x43a442 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a3c0 <CallInitGlobalPossiblyLock+0x60>
               	jmp	0x43a41c <CallInitGlobalPossiblyLock+0xbc>
               	leal	1(,%rax,4), %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	jne	0x43a3e8 <CallInitGlobalPossiblyLock+0x88>
               	callq	*%r14
               	movl	$2, (%rbx)
               	jmp	0x43a442 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	nopl	(%rax)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a410 <CallInitGlobalPossiblyLock+0xb0>
               	testq	%rcx, %rcx
               	je	0x43a43d <CallInitGlobalPossiblyLock+0xdd>
               	movl	%eax, %ecx
               	xchgl	%ecx, (%rdi)
               	testl	%eax, %eax
               	jne	0x43a43d <CallInitGlobalPossiblyLock+0xdd>
               	cmpl	$1, %ecx
               	jne	0x43a43d <CallInitGlobalPossiblyLock+0xdd>
               	movb	159844(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a43d <CallInitGlobalPossiblyLock+0xdd>
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	cmpl	$3, %ebp
               	je	0x43a447 <CallInitGlobalPossiblyLock+0xe7>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a170 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43c114 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<Kotlin_Long_toStringRadix>:
               	subq	$72, %rsp
               	testq	%rdi, %rdi
               	je	0x43a513 <Kotlin_Long_toStringRadix+0xa3>
               	negq	%rdi
               	xorl	%r10d, %r10d
               	movl	$48, %r8d
               	movabsq	$4294967296, %r9        # imm = 0x100000000
               	xorl	%r11d, %r11d
               	nopw	%cs:(%rax,%rax)
               	leaq	15(%rdi), %rdx
               	testq	%rdi, %rdi
               	cmovnsq	%rdi, %rdx
               	sarq	$4, %rdx
               	movl	%edx, %eax
               	shll	$4, %eax
               	subl	%edi, %eax
               	cmpl	$10, %eax
               	movl	$87, %ecx
               	cmovbl	%r8d, %ecx
               	addb	%al, %cl
               	movb	%cl, (%rsp,%r11)
               	addq	$1, %r11
               	addq	%r9, %r10
               	cmpq	$-15, %rdi
               	movq	%rdx, %rdi
               	jl	0x43a4a0 <Kotlin_Long_toStringRadix+0x30>
               	cmpl	$1, %r11d
               	jle	0x43a523 <Kotlin_Long_toStringRadix+0xb3>
               	movl	%r11d, %r10d
               	leaq	-2(%r10), %rcx
               	xorl	%edx, %edx
               	nop
               	movzbl	(%rsp,%rdx), %edi
               	movzbl	1(%rsp,%rcx), %eax
               	movb	%al, (%rsp,%rdx)
               	movb	%dil, 1(%rsp,%rcx)
               	addq	$1, %rdx
               	leaq	-1(%rcx), %rax
               	cmpq	%rcx, %rdx
               	movq	%rax, %rcx
               	jl	0x43a4f0 <Kotlin_Long_toStringRadix+0x80>
               	jmp	0x43a527 <Kotlin_Long_toStringRadix+0xb7>
               	leaq	43329(%rip), %rdi       # 0x444e5b <typeinfo name for kotlin::gc::GCSchedulerData+0x19b2>
               	addq	$72, %rsp
               	jmp	0x4366e0 <CreateStringFromCString>
               	sarq	$32, %r10
               	movb	$0, (%rsp,%r10)
               	movq	%rsp, %rdi
               	callq	0x4366e0 <CreateStringFromCString>
               	addq	$72, %rsp
               	retq
               	nopl	(%rax)

<ThrowException>:
               	pushq	%rax
               	callq	0x424570 <ExceptionObjHolder::Throw(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_terminateWithUnhandledException>:
               	pushq	%rax
               	callq	0x43a140 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_Any_equals>:
               	cmpq	%rsi, %rdi
               	sete	%al
               	retq
               	nopw	(%rax,%rax)

<Kotlin_getCurrentStackTrace>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbp
               	movq	-64(%rax), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rsp, %r12
               	movq	%r12, %rdi
               	callq	0x4359a0 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>
               	movq	(%rsp), %r14
               	movq	$0, (%rsp)
               	movq	8(%rsp), %r15
               	testq	%r13, %r13
               	je	0x43a5ee <Kotlin_getCurrentStackTrace+0x7e>
               	addq	$328, %r13              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ebx, %ebx
               	jne	0x43a5ee <Kotlin_getCurrentStackTrace+0x7e>
               	cmpl	$1, %eax
               	jne	0x43a5ee <Kotlin_getCurrentStackTrace+0x7e>
               	movb	159414(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a5ee <Kotlin_getCurrentStackTrace+0x7e>
               	movq	%r13, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 24(%rsp)
               	movq	%rbp, %r13
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	subq	%r14, %r15
               	movq	%r15, %rbp
               	sarq	$3, %rbp
               	testl	%ebp, %ebp
               	js	0x43a717 <Kotlin_getCurrentStackTrace+0x1a7>
               	movq	296(%rax), %rdi
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%r15, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	121030(%rip), %rax      # 0x457f40 <ktypeglobal:kotlin.native.internal.NativePtrArray#internal>
               	movq	%rax, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%r12, 24(%rsp)
               	testq	%r15, %r15
               	je	0x43a6d5 <Kotlin_getCurrentStackTrace+0x165>
               	cmpq	$1, %rbp
               	movl	$1, %esi
               	cmovaq	%rbp, %rsi
               	movl	24(%rcx), %edi
               	xorl	%ebp, %ebp
               	movabsq	$4294967296, %r8        # imm = 0x100000000
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	cmpq	%rbx, %rdi
               	je	0x43a712 <Kotlin_getCurrentStackTrace+0x1a2>
               	movq	(%r14,%rbx,8), %rax
               	movq	16(%rcx), %rdx
               	movq	%rbp, %rdx
               	sarq	$29, %rdx
               	movq	%rax, 32(%rcx,%rdx)
               	addq	$1, %rbx
               	addq	%r8, %rbp
               	cmpq	%rbx, %rsi
               	jne	0x43a6b0 <Kotlin_getCurrentStackTrace+0x140>
               	movq	32(%rsp), %rax
               	movq	%r12, (%rax)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a700 <Kotlin_getCurrentStackTrace+0x190>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	jmp	0x43a71e <Kotlin_getCurrentStackTrace+0x1ae>
               	movq	%rax, %r15
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a744 <Kotlin_getCurrentStackTrace+0x1d4>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax)

<Kotlin_io_Console_print>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	leaq	118113(%rip), %rcx      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, (%rax)
               	jne	0x43a9cf <Kotlin_io_Console_print+0x27f>
               	leaq	24(%rsp), %r13
               	movq	%r13, 8(%rsp)
               	movq	$0, 16(%rsp)
               	movb	$0, 24(%rsp)
               	movl	8(%r14), %ebp
               	movq	16(%rsp), %r12
               	cmpq	%rbp, %r12
               	cmovaq	%r12, %rbp
               	movq	8(%rsp), %r15
               	cmpq	%r13, %r15
               	movl	$15, %eax
               	cmovneq	24(%rsp), %rax
               	cmpq	%rax, %rbp
               	je	0x43a85a <Kotlin_io_Console_print+0x10a>
               	cmpq	$15, %rbp
               	ja	0x43a7ef <Kotlin_io_Console_print+0x9f>
               	cmpq	%rax, %rbp
               	ja	0x43a7ef <Kotlin_io_Console_print+0x9f>
               	cmpq	%r13, %r15
               	je	0x43a85a <Kotlin_io_Console_print+0x10a>
               	cmpq	$-1, %r12
               	je	0x43a934 <Kotlin_io_Console_print+0x1e4>
               	testq	%r12, %r12
               	jne	0x43a922 <Kotlin_io_Console_print+0x1d2>
               	movb	(%r15), %al
               	movb	%al, 24(%rsp)
               	jmp	0x43a934 <Kotlin_io_Console_print+0x1e4>
               	testq	%rbp, %rbp
               	js	0x43a9de <Kotlin_io_Console_print+0x28e>
               	movq	%r13, %rbx
               	cmpq	%rax, %rbp
               	jbe	0x43a819 <Kotlin_io_Console_print+0xc9>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x43a819 <Kotlin_io_Console_print+0xc9>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	cmpq	$-1, %r12
               	je	0x43a840 <Kotlin_io_Console_print+0xf0>
               	testq	%r12, %r12
               	jne	0x43a902 <Kotlin_io_Console_print+0x1b2>
               	movb	(%r15), %al
               	movb	%al, (%r13)
               	cmpq	%rbx, %r15
               	je	0x43a84d <Kotlin_io_Console_print+0xfd>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 8(%rsp)
               	movq	%rbp, 24(%rsp)
               	movq	%rbx, %r13
               	movl	8(%r14), %eax
               	movq	%rax, %rcx
               	addq	%rax, %rcx
               	je	0x43a951 <Kotlin_io_Console_print+0x201>
               	addq	$16, %r14
               	leaq	(%r14,%rax,2), %rbp
               	leaq	8(%rsp), %r15
               	jmp	0x43a899 <Kotlin_io_Console_print+0x149>
               	nopl	(%rax)
               	movl	$65533, %edi            # imm = 0xFFFD
               	movq	%r15, %rsi
               	callq	0x436b80 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%rbx, %r14
               	cmpq	%rbp, %rbx
               	je	0x43a951 <Kotlin_io_Console_print+0x201>
               	leaq	2(%r14), %rbx
               	movzwl	(%r14), %eax
               	movl	%eax, %ecx
               	andl	$64512, %ecx            # imm = 0xFC00
               	cmpl	$55296, %ecx            # imm = 0xD800
               	jne	0x43a8e0 <Kotlin_io_Console_print+0x190>
               	cmpq	%rbp, %rbx
               	je	0x43a8f1 <Kotlin_io_Console_print+0x1a1>
               	movzwl	2(%r14), %ecx
               	movl	%ecx, %edx
               	andl	$64512, %edx            # imm = 0xFC00
               	cmpl	$56320, %edx            # imm = 0xDC00
               	jne	0x43a880 <Kotlin_io_Console_print+0x130>
               	shll	$10, %eax
               	addq	$4, %r14
               	leal	(%rax,%rcx), %edi
               	addl	$4238353408, %edi       # imm = 0xFCA02400
               	movq	%r14, %rbx
               	jmp	0x43a885 <Kotlin_io_Console_print+0x135>
               	movl	$65533, %edi            # imm = 0xFFFD
               	cmpl	$56320, %ecx            # imm = 0xDC00
               	je	0x43a885 <Kotlin_io_Console_print+0x135>
               	movl	%eax, %edi
               	jmp	0x43a885 <Kotlin_io_Console_print+0x135>
               	leaq	8(%rsp), %rsi
               	movl	$65533, %edi            # imm = 0xFFFD
               	callq	0x436b80 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	jmp	0x43a951 <Kotlin_io_Console_print+0x201>
               	addq	$1, %r12
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	cmpq	%rbx, %r15
               	jne	0x43a845 <Kotlin_io_Console_print+0xf5>
               	jmp	0x43a84d <Kotlin_io_Console_print+0xfd>
               	addq	$1, %r12
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 8(%rsp)
               	movl	8(%r14), %eax
               	movq	%rax, %rcx
               	addq	%rax, %rcx
               	jne	0x43a86a <Kotlin_io_Console_print+0x11a>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	328(%rbx), %r14
               	movq	8(%rsp), %rsi
               	movq	16(%rsp), %rax
               	movl	%eax, %edx
               	movl	$1, %edi
               	callq	0x4138e0 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43a9b1 <Kotlin_io_Console_print+0x261>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x43a9b1 <Kotlin_io_Console_print+0x261>
               	cmpl	$1, %eax
               	jne	0x43a9b1 <Kotlin_io_Console_print+0x261>
               	movb	158451(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a9b1 <Kotlin_io_Console_print+0x261>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%rsp), %rdi
               	cmpq	%r13, %rdi
               	je	0x43a9c0 <Kotlin_io_Console_print+0x270>
               	callq	0x4136d0 <free@plt>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	117498(%rip), %rsi      # 0x4574d0 <ktypeglobal:kotlin.String#internal>
               	movq	%r14, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	leaq	42075(%rip), %rdi       # 0x444e40 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4361b0 <std::__throw_length_error(char const*)>
               	movq	%rax, %r15
               	testq	%rbx, %rbx
               	jne	0x43aa09 <Kotlin_io_Console_print+0x2b9>
               	movq	8(%rsp), %rdi
               	cmpq	%r13, %rdi
               	je	0x43aa01 <Kotlin_io_Console_print+0x2b1>
               	callq	0x4136d0 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x43a9f2 <Kotlin_io_Console_print+0x2a2>
               	cmpl	$1, %eax
               	jne	0x43a9f2 <Kotlin_io_Console_print+0x2a2>
               	movb	158331(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a9f2 <Kotlin_io_Console_print+0x2a2>
               	movq	%r14, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43a9f2 <Kotlin_io_Console_print+0x2a2>
               	nopl	(%rax,%rax)

<Kotlin_io_Console_println>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43a750 <Kotlin_io_Console_print>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	328(%rbx), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	41973(%rip), %rsi       # 0x444e5d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movl	$1, %edx
               	movl	$1, %edi
               	callq	0x4138e0 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43aa94 <Kotlin_io_Console_println+0x64>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43aa94 <Kotlin_io_Console_println+0x64>
               	cmpl	$1, %eax
               	jne	0x43aa94 <Kotlin_io_Console_println+0x64>
               	movb	158216(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43aa9f <Kotlin_io_Console_println+0x6f>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43aad9 <Kotlin_io_Console_println+0xa9>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43aad9 <Kotlin_io_Console_println+0xa9>
               	cmpl	$1, %eax
               	jne	0x43aad9 <Kotlin_io_Console_println+0xa9>
               	movb	158155(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43aad9 <Kotlin_io_Console_println+0xa9>
               	movq	%r15, %rdi
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<Init_and_run_start>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movl	%edx, %ebx
               	movq	%rsi, %r15
               	movl	%edi, %r14d
               	callq	0x4384b0 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x43ab44 <Init_and_run_start+0x54>
               	movb	158052(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ab44 <Init_and_run_start+0x54>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424350 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 80(%rsp)
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 72(%rsp)
               	testl	%r14d, %r14d
               	jle	0x43ad13 <Init_and_run_start+0x223>
               	movl	%ebx, 12(%rsp)
               	leal	-1(%r14), %ebp
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427c70 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 24(%rbx)
               	leaq	114053(%rip), %rcx      # 0x456950 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%rax, 80(%rsp)
               	cmpl	$1, %r14d
               	jne	0x43abf0 <Init_and_run_start+0x100>
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43ac73 <Init_and_run_start+0x183>
               	movl	%r14d, %ebp
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	addq	$-1, %rbp
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %r12
               	nopl	(%rax)
               	movq	$0, 40(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	8(%r15,%r14,8), %rdi
               	leaq	40(%rsp), %rsi
               	callq	0x4366e0 <CreateStringFromCString>
               	movq	40(%rsp), %rax
               	movq	%rax, 32(%rbx,%r14,8)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$1, %r14
               	cmpq	%r14, %rbp
               	jne	0x43ac10 <Init_and_run_start+0x120>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rbx
               	movq	%rbx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	157675(%rip), %al       # 0x461498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43acb6 <Init_and_run_start+0x1c6>
               	callq	0x424540 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x4205d0 <kfun:#main(){}>
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$0, 12(%rsp)
               	je	0x43ad02 <Init_and_run_start+0x212>
               	movq	%r13, %rax
               	movq	-48(%r13), %rcx
               	movl	$1, %edx
               	movl	$2, %esi
               	movl	$1, %eax
               	lock
               	cmpxchgl	%esi, 257799(%rip)      # 0x479c00 <(anonymous namespace)::globalRuntimeStatus>
               	movq	(%rcx), %rax
               	xchgl	%edx, 328(%rax)
               	xorl	%eax, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	movq	%rax, %rdi
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43ad8a <Init_and_run_start+0x29a>
               	movq	%rax, %rdi
               	movq	%r13, %rbp
               	movq	-64(%r13), %rax
               	movq	%rbx, 288(%rax)
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x43a010 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	%rbx, %rdi
               	callq	0x43a550 <Kotlin_terminateWithUnhandledException>
               	movq	%rax, %rdi
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	jmp	0x43ad7e <Init_and_run_start+0x28e>
               	movq	%rax, %rdi
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<main>:
               	pushq	%rax
               	movl	$1, %edx
               	callq	0x43aaf0 <Init_and_run_start>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq

<read_uleb128(unsigned char const*, unsigned long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %r8b
               	movq	%r8, %rdi
               	andl	$127, %edi
               	shlq	%cl, %rdi
               	addl	$7, %ecx
               	orq	%rdi, %rdx
               	testb	%r8b, %r8b
               	js	0x43adb6 <read_uleb128(unsigned char const*, unsigned long*)+0x7>
               	movq	%rdx, (%rsi)
               	retq

<read_sleb128(unsigned char const*, long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %dil
               	movq	%rdi, %r8
               	andl	$127, %r8d
               	shlq	%cl, %r8
               	addl	$7, %ecx
               	orq	%r8, %rdx
               	testb	%dil, %dil
               	js	0x43addc <read_sleb128(unsigned char const*, long*)+0x7>
               	cmpl	$63, %ecx
               	ja	0x43ae0d <read_sleb128(unsigned char const*, long*)+0x38>
               	andb	$64, %dil
               	je	0x43ae0d <read_sleb128(unsigned char const*, long*)+0x38>
               	orq	$-1, %rdi
               	shlq	%cl, %rdi
               	orq	%rdi, %rdx
               	movq	%rdx, (%rsi)
               	retq

<get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$40, %rsp
               	movq	(%rdx), %rax
               	movq	%rsi, 8(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	(%rsi), %rax
               	callq	*16(%rax)
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	je	0x43ae49 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x38>
               	movq	24(%rsp), %rax
               	movq	(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movq	(%rbp), %rax
               	leaq	24(%rsp), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	testb	%al, %al
               	je	0x43ae69 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x58>
               	movq	24(%rsp), %rdx
               	movq	%rdx, (%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>:
               	movq	%rdx, %r9
               	movq	%rcx, %r11
               	cmpb	$80, %dil
               	jne	0x43ae8f <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x1f>
               	leaq	7(%rdx), %rax
               	andq	$-8, %rax
               	movq	(%rax), %rdx
               	leaq	8(%rax), %rax
               	movq	%rdx, (%rcx)
               	retq
               	pushq	%rbx
               	movl	%edi, %eax
               	movl	%edi, %r10d
               	andl	$15, %eax
               	subq	$16, %rsp
               	cmpb	$12, %al
               	ja	0x43af00 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x90>
               	leaq	43225(%rip), %rdx       # 0x445780 <_mi_page_empty+0x40>
               	movzbl	%al, %eax
               	movq	%rsi, %rbx
               	movslq	(%rdx,%rax,4), %rax
               	addq	%rdx, %rax
               	jmpq	*%rax
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43adaf <read_uleb128(unsigned char const*, unsigned long*)>
               	jmp	0x43aed2 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x62>
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43add5 <read_sleb128(unsigned char const*, long*)>
               	movq	8(%rsp), %rdx
               	jmp	0x43af05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movzwl	(%r9), %edx
               	jmp	0x43aee8 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x78>
               	movl	(%r9), %edx
               	jmp	0x43aef1 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x81>
               	movswq	(%r9), %rdx
               	leaq	2(%r9), %rax
               	jmp	0x43af05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movslq	(%r9), %rdx
               	leaq	4(%r9), %rax
               	jmp	0x43af05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movq	(%r9), %rdx
               	leaq	8(%r9), %rax
               	jmp	0x43af05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	callq	0x4138f0 <abort@plt>
               	testq	%rdx, %rdx
               	je	0x43af22 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movl	%r10d, %ecx
               	andl	$112, %ecx
               	cmpb	$16, %cl
               	cmoveq	%r9, %rbx
               	addq	%rbx, %rdx
               	testb	%r10b, %r10b
               	jns	0x43af22 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movq	(%rdx), %rdx
               	movq	%rdx, (%r11)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<get_ttype_entry(lsda_header_info*, unsigned long)>:
               	subq	$24, %rsp
               	movq	%rdi, %r8
               	movzbl	40(%rdi), %edi
               	cmpb	$-1, %dil
               	je	0x43af6a <get_ttype_entry(lsda_header_info*, unsigned long)+0x3f>
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpb	$2, %dl
               	je	0x43af6e <get_ttype_entry(lsda_header_info*, unsigned long)+0x43>
               	ja	0x43af51 <get_ttype_entry(lsda_header_info*, unsigned long)+0x26>
               	movl	$8, %eax
               	testb	%dl, %dl
               	jmp	0x43af63 <get_ttype_entry(lsda_header_info*, unsigned long)+0x38>
               	movl	$4, %eax
               	cmpb	$3, %dl
               	je	0x43af73 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$8, %eax
               	cmpb	$4, %dl
               	je	0x43af73 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	callq	0x4138f0 <abort@plt>
               	xorl	%eax, %eax
               	jmp	0x43af73 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$2, %eax
               	imulq	%rsi, %rax
               	movq	24(%r8), %rdx
               	movq	16(%r8), %rsi
               	leaq	8(%rsp), %rcx
               	subq	%rax, %rdx
               	callq	0x43ae70 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>:
               	pushq	%r13
               	notq	%rcx
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	24(%rdi), %rbx
               	movq	%rdx, 8(%rsp)
               	leaq	24(%rsp), %r13
               	addq	%rcx, %rbx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43adaf <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rbx
               	testq	%rsi, %rsi
               	je	0x43aff0 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5a>
               	movq	%rbp, %rdi
               	callq	0x43af2b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	leaq	8(%rsp), %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43ae11 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	testb	%al, %al
               	je	0x43afba <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x24>
               	jmp	0x43aff2 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5c>
               	xorl	%eax, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<base_of_encoded_value(unsigned char, _Unwind_Context*)>:
               	movl	%edi, %eax
               	cmpb	$-1, %dil
               	je	0x43b03c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	andl	$112, %eax
               	movq	%rsi, %rdi
               	cmpb	$32, %al
               	je	0x43b02c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2f>
               	ja	0x43b01b <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1e>
               	testb	%al, %al
               	je	0x43b03c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$16, %al
               	je	0x43b03c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	jmp	0x43b036 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	cmpb	$64, %al
               	je	0x43b031 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
               	cmpb	$80, %al
               	je	0x43b03c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$48, %al
               	jne	0x43b036 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	jmp	0x413a20 <_Unwind_GetDataRelBase@plt>
               	jmp	0x413a30 <_Unwind_GetTextRelBase@plt>
               	jmp	0x413a40 <_Unwind_GetRegionStart@plt>
               	pushq	%rax
               	callq	0x4138f0 <abort@plt>
               	xorl	%eax, %eax
               	retq

<read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>:
               	pushq	%rbx
               	movzbl	%sil, %ebx
               	movq	%rdi, %rsi
               	movl	%ebx, %edi
               	subq	$16, %rsp
               	movq	%rdx, 8(%rsp)
               	movq	%rcx, (%rsp)
               	callq	0x43affd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rdx
               	movl	%ebx, %edi
               	addq	$16, %rsp
               	movq	%rax, %rsi
               	popq	%rbx
               	jmp	0x43ae70 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>

<parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x43b090 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x1d>
               	callq	0x413a40 <_Unwind_GetRegionStart@plt>
               	movq	%rax, (%rbx)
               	movzbl	(%r12), %esi
               	leaq	1(%r12), %rdx
               	cmpb	$-1, %sil
               	je	0x43b0b4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x41>
               	leaq	8(%rbx), %rcx
               	movq	%rbp, %rdi
               	callq	0x43b03f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movq	%rax, %rdx
               	jmp	0x43b0b8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x45>
               	movq	%rax, 8(%rbx)
               	leaq	1(%rdx), %rax
               	movb	(%rdx), %dl
               	leaq	8(%rsp), %r9
               	movb	%dl, 40(%rbx)
               	incb	%dl
               	je	0x43b0e3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x70>
               	movq	%r9, %rsi
               	movq	%rax, %rdi
               	callq	0x43adaf <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 24(%rbx)
               	jmp	0x43b0eb <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x78>
               	movq	$0, 24(%rbx)
               	leaq	1(%rax), %rdi
               	movb	(%rax), %al
               	movq	%r9, %rsi
               	movb	%al, 41(%rbx)
               	callq	0x43adaf <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 32(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<__gxx_personality_v0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$152, %rsp
               	decl	%edi
               	movq	$0, 56(%rsp)
               	movl	$0, 52(%rsp)
               	jne	0x43b4be <__gxx_personality_v0+0x3ad>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	movq	%r8, %rbp
               	movq	%rcx, %rbx
               	movl	%esi, 12(%rsp)
               	addq	%rdx, %rax
               	cmpq	$1, %rax
               	movq	%rax, (%rsp)
               	setbe	35(%rsp)
               	cmpl	$6, %esi
               	sete	%al
               	andb	35(%rsp), %al
               	movb	%al, 34(%rsp)
               	je	0x43b18c <__gxx_personality_v0+0x7b>
               	movq	-16(%rcx), %r12
               	movl	-36(%rcx), %r14d
               	movq	-24(%rcx), %r15
               	cmpq	$1, %r12
               	sbbl	%eax, %eax
               	andl	$-2, %eax
               	addl	$3, %eax
               	jmp	0x43b425 <__gxx_personality_v0+0x314>
               	movq	%r8, %rdi
               	callq	0x413a50 <_Unwind_GetLanguageSpecificData@plt>
               	movq	%rax, %r15
               	testq	%rax, %rax
               	je	0x43b3dc <__gxx_personality_v0+0x2cb>
               	leaq	96(%rsp), %rax
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	movq	%rax, %rdx
               	movq	%rax, 24(%rsp)
               	callq	0x43b073 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, %r14
               	callq	0x43affd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	leaq	52(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	%rax, 112(%rsp)
               	callq	0x413a60 <_Unwind_GetIPInfo@plt>
               	cmpl	$0, 52(%rsp)
               	movq	%rax, %r13
               	jne	0x43b1ea <__gxx_personality_v0+0xd9>
               	decq	%r13
               	leaq	64(%rsp), %r12
               	cmpq	%r14, 128(%rsp)
               	jbe	0x43b3c2 <__gxx_personality_v0+0x2b1>
               	movzbl	137(%rsp), %esi
               	movq	%r14, %rdx
               	movq	%r12, %rcx
               	xorl	%edi, %edi
               	callq	0x43b03f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	72(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43b03f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	80(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43b03f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	leaq	88(%rsp), %rsi
               	movq	%rax, %rdi
               	callq	0x43adaf <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	%rax, %r14
               	movq	64(%rsp), %rax
               	addq	96(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43b269 <__gxx_personality_v0+0x158>
               	movq	128(%rsp), %r14
               	jmp	0x43b1ef <__gxx_personality_v0+0xde>
               	addq	72(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43b1ef <__gxx_personality_v0+0xde>
               	movq	80(%rsp), %r12
               	testq	%r12, %r12
               	je	0x43b286 <__gxx_personality_v0+0x175>
               	addq	104(%rsp), %r12
               	movq	88(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b4e1 <__gxx_personality_v0+0x3d0>
               	movq	128(%rsp), %rdx
               	testq	%r12, %r12
               	je	0x43b3dc <__gxx_personality_v0+0x2cb>
               	leaq	-1(%rdx,%rax), %r13
               	testq	%r13, %r13
               	je	0x43b3ed <__gxx_personality_v0+0x2dc>
               	movl	12(%rsp), %eax
               	andl	$8, %eax
               	movl	%eax, 36(%rsp)
               	jne	0x43b2df <__gxx_personality_v0+0x1ce>
               	cmpq	$1, (%rsp)
               	ja	0x43b2e8 <__gxx_personality_v0+0x1d7>
               	leaq	32(%rbx), %rax
               	testb	$1, (%rbx)
               	je	0x43b2d4 <__gxx_personality_v0+0x1c3>
               	movq	-80(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movq	-112(%rax), %r14
               	jmp	0x43b2ef <__gxx_personality_v0+0x1de>
               	leaq	140194(%rip), %r14      # 0x45d688 <typeinfo for __cxxabiv1::__forced_unwind>
               	jmp	0x43b2ef <__gxx_personality_v0+0x1de>
               	leaq	140201(%rip), %r14      # 0x45d698 <typeinfo for __cxxabiv1::__foreign_exception>
               	leaq	72(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	40(%rsp), %rsi
               	movq	%r13, %rdi
               	callq	0x43add5 <read_sleb128(unsigned char const*, long*)>
               	leaq	80(%rsp), %rsi
               	movq	%rax, %rdi
               	movq	%rax, 16(%rsp)
               	callq	0x43add5 <read_sleb128(unsigned char const*, long*)>
               	movq	72(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43b3a6 <__gxx_personality_v0+0x295>
               	jle	0x43b355 <__gxx_personality_v0+0x244>
               	movq	24(%rsp), %rdi
               	movq	%rcx, %rsi
               	callq	0x43af2b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	testq	%rax, %rax
               	je	0x43b4d2 <__gxx_personality_v0+0x3c1>
               	testq	%r14, %r14
               	je	0x43b3ab <__gxx_personality_v0+0x29a>
               	leaq	56(%rsp), %rdx
               	movq	%r14, %rsi
               	movq	%rax, %rdi
               	callq	0x43ae11 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	jmp	0x43b39d <__gxx_personality_v0+0x28c>
               	cmpl	$0, 36(%rsp)
               	sete	%al
               	testb	%al, 35(%rsp)
               	je	0x43b37f <__gxx_personality_v0+0x26e>
               	testq	%r14, %r14
               	je	0x43b37f <__gxx_personality_v0+0x26e>
               	movq	56(%rsp), %rdx
               	leaq	96(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x43af96 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	xorl	$1, %eax
               	jmp	0x43b39d <__gxx_personality_v0+0x28c>
               	notq	%rcx
               	addq	120(%rsp), %rcx
               	leaq	88(%rsp), %rsi
               	movq	%rcx, %rdi
               	callq	0x43adaf <read_uleb128(unsigned char const*, unsigned long*)>
               	cmpq	$0, 88(%rsp)
               	sete	%al
               	testb	%al, %al
               	je	0x43b3ab <__gxx_personality_v0+0x29a>
               	jmp	0x43b4d2 <__gxx_personality_v0+0x3c1>
               	movb	$1, 34(%rsp)
               	movq	80(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b3e6 <__gxx_personality_v0+0x2d5>
               	movq	16(%rsp), %r13
               	addq	%rax, %r13
               	jmp	0x43b2f9 <__gxx_personality_v0+0x1e8>
               	xorl	%r14d, %r14d
               	xorl	%r12d, %r12d
               	xorl	%r13d, %r13d
               	movl	$1, %eax
               	testb	$1, 12(%rsp)
               	je	0x43b425 <__gxx_personality_v0+0x314>
               	cmpl	$2, %eax
               	jne	0x43b3f7 <__gxx_personality_v0+0x2e6>
               	movl	$8, %eax
               	jmp	0x43b4f5 <__gxx_personality_v0+0x3e4>
               	cmpb	$0, 34(%rsp)
               	je	0x43b3dc <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	movl	$2, %eax
               	jmp	0x43b3d0 <__gxx_personality_v0+0x2bf>
               	cmpq	$1, (%rsp)
               	movl	$6, %eax
               	ja	0x43b4f5 <__gxx_personality_v0+0x3e4>
               	movq	56(%rsp), %rdx
               	movl	%r14d, -36(%rbx)
               	movq	%r13, -32(%rbx)
               	movq	%r15, -24(%rbx)
               	movq	%rdx, -8(%rbx)
               	movq	%r12, -16(%rbx)
               	jmp	0x43b4f5 <__gxx_personality_v0+0x3e4>
               	testb	$8, 12(%rsp)
               	jne	0x43b433 <__gxx_personality_v0+0x322>
               	cmpq	$1, (%rsp)
               	jbe	0x43b445 <__gxx_personality_v0+0x334>
               	decl	%eax
               	je	0x43b4cd <__gxx_personality_v0+0x3bc>
               	testl	%r14d, %r14d
               	jns	0x43b48f <__gxx_personality_v0+0x37e>
               	callq	0x43c2f2 <std::unexpected()>
               	decl	%eax
               	jne	0x43b451 <__gxx_personality_v0+0x340>
               	movq	%rbx, %rdi
               	callq	0x43c47c <__cxa_call_terminate>
               	testl	%r14d, %r14d
               	jns	0x43b48f <__gxx_personality_v0+0x37e>
               	leaq	96(%rsp), %rdx
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	callq	0x43b073 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	callq	0x43affd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, 112(%rsp)
               	callq	0x43affd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	%rax, -16(%rbx)
               	movq	%rbx, %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x413a70 <_Unwind_SetGR@plt>
               	movslq	%r14d, %rdx
               	movl	$1, %esi
               	movq	%rbp, %rdi
               	callq	0x413a70 <_Unwind_SetGR@plt>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x413a80 <_Unwind_SetIP@plt>
               	movl	$7, %eax
               	jmp	0x43b4f5 <__gxx_personality_v0+0x3e4>
               	movl	$3, %eax
               	jmp	0x43b4f5 <__gxx_personality_v0+0x3e4>
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c2c3 <std::terminate()>
               	movl	72(%rsp), %r14d
               	movl	$3, %eax
               	jmp	0x43b3d0 <__gxx_personality_v0+0x2bf>
               	testq	%r12, %r12
               	je	0x43b3dc <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	xorl	%r13d, %r13d
               	jmp	0x43b3f0 <__gxx_personality_v0+0x2df>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<__cxa_call_unexpected>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	-16(%rbx), %rax
               	movq	-64(%rbx), %rdi
               	movq	-24(%rbx), %r15
               	movslq	-36(%rbx), %rbp
               	movq	-56(%rbx), %r14
               	movq	%rax, 16(%rsp)
               	callq	0x43c2d1 <__cxxabiv1::__unexpected(void (*)())>
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c333 <__cxa_get_globals_fast>
               	movq	(%rax), %rax
               	leaq	112(%rax), %r13
               	testb	$1, 80(%rax)
               	je	0x43b558 <__cxa_call_unexpected+0x51>
               	movq	(%rax), %r13
               	movq	%rsp, %r12
               	movq	%r15, %rsi
               	xorl	%edi, %edi
               	movq	%r12, %rdx
               	callq	0x43b073 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movq	-112(%r13), %rsi
               	movq	%rbp, %rcx
               	movq	%r13, %rdx
               	movq	%r12, %rdi
               	callq	0x43af96 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b583 <__cxa_call_unexpected+0x7c>
               	callq	0x43c114 <__cxa_rethrow>
               	leaq	139494(%rip), %rbx      # 0x45d670 <typeinfo for std::bad_exception>
               	movq	%rbp, %rcx
               	xorl	%edx, %edx
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x43af96 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b5c8 <__cxa_call_unexpected+0xc1>
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	139553(%rip), %rdx      # 0x45d6d0 <vtable for std::bad_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	1359(%rip), %rdx        # 0x43bb12 <std::bad_exception::~bad_exception()>
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%r14, %rdi
               	callq	0x43c298 <__cxxabiv1::__terminate(void (*)())>
               	movq	%rax, %rbx
               	callq	0x43bfd5 <__cxa_end_catch>
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<operator delete(void*)>:
               	jmp	0x4136d0 <free@plt>

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	leaq	139159(%rip), %rax      # 0x45d588 <vtable for __cxxabiv1::__si_class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bdea <__cxxabiv1::__class_type_info::~__class_type_info()>
               	nop

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b5ea <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
               	movq	%rbx, %rdi
               	movl	$24, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43b631 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43b631 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	cmpq	%rdx, %r8
               	jne	0x43b672 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x40>
               	movq	8(%rcx), %rsi
               	movq	8(%rdi), %rdi
               	movq	%r8, 24(%rsp)
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	callq	0x43b616 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rdx
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	jne	0x43b688 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x56>
               	movq	16(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	(%rdi), %rax
               	movq	64(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	addq	$40, %rsp
               	movl	$6, %eax
               	popq	%rbx
               	popq	%rbp
               	retq

<__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rdx
               	movq	8(%rcx), %rsi
               	movq	96(%rsp), %r12
               	movq	104(%rsp), %r15
               	movq	%r8, 24(%rsp)
               	movq	%rdx, %rdi
               	movq	%r9, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43b616 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %r9
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x43b71a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x86>
               	movq	%r8, (%r15)
               	movl	%ebp, 8(%r15)
               	testq	%rbx, %rbx
               	js	0x43b70a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x76>
               	addq	%rbx, %r8
               	xorl	%eax, %eax
               	cmpq	%r8, %r12
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	movl	%eax, 16(%r15)
               	jmp	0x43b776 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	$-2, %rbx
               	jne	0x43b776 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movl	$1, 16(%r15)
               	jmp	0x43b776 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	%r12, %r8
               	jne	0x43b749 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movq	8(%r9), %rsi
               	movq	%rdx, %rdi
               	movq	%r8, 16(%rsp)
               	movq	%r9, 8(%rsp)
               	callq	0x43b616 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %r9
               	movq	16(%rsp), %r8
               	testb	%al, %al
               	je	0x43b749 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movl	%ebp, 12(%r15)
               	jmp	0x43b776 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movq	16(%r14), %rdi
               	movq	%r13, %rcx
               	movl	%ebp, %edx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	%r15, 104(%rsp)
               	movq	%r12, 96(%rsp)
               	movq	56(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax
               	addq	$40, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	callq	0x43be90 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
               	testb	%al, %al
               	jne	0x43b7c3 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x3b>
               	movq	16(%r13), %rdi
               	movq	%r12, %rcx
               	movq	%rbp, %rdx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	48(%rax), %rax
               	popq	%r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmpq	*%rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<__gnu_cxx::__concurrence_lock_error::what() const>:
               	leaq	38540(%rip), %rax       # 0x444e5f <typeinfo name for kotlin::gc::GCSchedulerData+0x19b6>
               	retq

<__gnu_cxx::__concurrence_unlock_error::what() const>:
               	leaq	38568(%rip), %rax       # 0x444e83 <typeinfo name for kotlin::gc::GCSchedulerData+0x19da>
               	retq

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	leaq	138797(%rip), %rax      # 0x45d610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	leaq	138817(%rip), %rax      # 0x45d638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b7dc <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b7f0 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__mutex::lock()>:
               	cmpq	$0, 141180(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43b878 <__gnu_cxx::__mutex::lock()+0x44>
               	pushq	%rdx
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x43b876 <__gnu_cxx::__mutex::lock()+0x42>
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	138679(%rip), %rdx      # 0x45d610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	leaq	138624(%rip), %rsi      # 0x45d5e0 <typeinfo for __gnu_cxx::__concurrence_lock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-149(%rip), %rdx        # 0x43b7dc <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	callq	0x43c0c5 <__cxa_throw>
               	popq	%rax
               	retq
               	retq
               	nop

<__gnu_cxx::__scoped_lock::~__scoped_lock()>:
               	cmpq	$0, 141110(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43b8d3 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x59>
               	pushq	%rdx
               	movq	(%rdi), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testl	%eax, %eax
               	je	0x43b8d1 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x57>
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	138646(%rip), %rdx      # 0x45d638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	leaq	138575(%rip), %rsi      # 0x45d5f8 <typeinfo for __gnu_cxx::__concurrence_unlock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-202(%rip), %rdx        # 0x43b7f0 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rdi
               	incq	%rdx
               	je	0x43b8cc <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x52>
               	callq	0x413700 <_Unwind_Resume@plt>
               	callq	0x43b507 <__cxa_call_unexpected>
               	popq	%rax
               	retq
               	retq

<(anonymous namespace)::pool::free(void*) (.constprop.2)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	254817(%rip), %rdi      # 0x479c40 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b834 <__gnu_cxx::__mutex::lock()>
               	movq	254836(%rip), %rdx      # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	leaq	-16(%rbx), %rcx
               	testq	%rdx, %rdx
               	je	0x43b90a <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x36>
               	movq	-16(%rbx), %rax
               	leaq	(%rcx,%rax), %rsi
               	cmpq	%rsi, %rdx
               	jbe	0x43b910 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x3c>
               	movq	%rdx, -8(%rbx)
               	jmp	0x43b92f <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x5b>
               	leaq	254801(%rip), %r8       # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	jne	0x43b944 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x70>
               	addq	(%rdx), %rax
               	movq	%rax, -16(%rbx)
               	movq	254785(%rip), %rax      # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	movq	8(%rax), %rax
               	movq	%rax, -8(%rbx)
               	movq	%rcx, 254770(%rip)      # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x43b987 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	cmpq	%rdi, %rsi
               	jae	0x43b94d <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x79>
               	leaq	8(%rdx), %r8
               	movq	%rdi, %rdx
               	movq	8(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x43b938 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x64>
               	cmpq	%rdi, %rsi
               	jne	0x43b95d <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x89>
               	addq	(%rsi), %rax
               	movq	8(%rsi), %rsi
               	movq	%rsi, 8(%rdx)
               	movq	(%r8), %rdx
               	movq	(%rdx), %rsi
               	leaq	(%rdx,%rsi), %rdi
               	cmpq	%rdi, %rcx
               	jne	0x43b974 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xa0>
               	addq	%rsi, %rax
               	movq	%rax, (%rdx)
               	jmp	0x43b987 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	movq	%rax, -16(%rbx)
               	movq	8(%rdx), %rax
               	movq	%rax, -8(%rbx)
               	movq	(%r8), %rax
               	movq	%rcx, 8(%rax)
               	leaq	8(%rsp), %rdi
               	callq	0x43b87a <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	popq	%rbx
               	retq
               	nop

<(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	254621(%rip), %rdi      # 0x479c40 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b834 <__gnu_cxx::__mutex::lock()>
               	leaq	16(%rbx), %rdi
               	movl	$16, %eax
               	movq	254631(%rip), %rbx      # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	cmpq	$16, %rdi
               	leaq	254620(%rip), %rdx      # 0x479c68 <(anonymous namespace)::emergency_pool+0x28>
               	cmovbq	%rax, %rdi
               	addq	$15, %rdi
               	andq	$-16, %rdi
               	testq	%rbx, %rbx
               	je	0x43ba18 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x80>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rcx
               	cmpq	%rax, %rdi
               	jbe	0x43b9f2 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x5a>
               	leaq	8(%rbx), %rdx
               	movq	%rcx, %rbx
               	jmp	0x43b9d8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x40>
               	subq	%rdi, %rax
               	cmpq	$15, %rax
               	jbe	0x43ba11 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x79>
               	leaq	(%rbx,%rdi), %rsi
               	movq	%rcx, 8(%rsi)
               	movq	(%rdx), %rbx
               	movq	%rax, (%rsi)
               	movq	%rdi, (%rbx)
               	movq	%rsi, (%rdx)
               	jmp	0x43ba14 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x7c>
               	movq	%rcx, (%rdx)
               	addq	$16, %rbx
               	leaq	8(%rsp), %rdi
               	callq	0x43b87a <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__freeres()>:
               	movq	254526(%rip), %rdi      # 0x479c70 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rdi, %rdi
               	je	0x43ba4a <__gnu_cxx::__freeres()+0x1f>
               	pushq	%rax
               	callq	0x4136d0 <free@plt>
               	movq	$0, 254504(%rip)        # 0x479c70 <(anonymous namespace)::emergency_pool+0x30>
               	popq	%rdx
               	retq
               	retq

<__cxa_allocate_exception>:
               	pushq	%rbx
               	leaq	128(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43ba78 <__cxa_allocate_exception+0x2d>
               	movq	%rbx, %rdi
               	callq	0x43b998 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43ba78 <__cxa_allocate_exception+0x2d>
               	callq	0x43c2c3 <std::terminate()>
               	xorl	%eax, %eax
               	movl	$32, %ecx
               	movq	%rdx, %rdi
               	rep		stosl	%eax, %es:(%rdi)
               	leaq	128(%rdx), %rax
               	popq	%rbx
               	retq

<__cxa_free_exception>:
               	movq	254428(%rip), %rax      # 0x479c70 <(anonymous namespace)::emergency_pool+0x30>
               	addq	$-128, %rdi
               	cmpq	%rax, %rdi
               	jbe	0x43baae <__cxa_free_exception+0x21>
               	addq	254420(%rip), %rax      # 0x479c78 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43baae <__cxa_free_exception+0x21>
               	jmp	0x43b8d4 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x4136d0 <free@plt>

<__cxa_allocate_dependent_exception>:
               	pushq	%rcx
               	movl	$112, %edi
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43badd <__cxa_allocate_dependent_exception+0x2a>
               	movl	$112, %edi
               	callq	0x43b998 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43badd <__cxa_allocate_dependent_exception+0x2a>
               	callq	0x43c2c3 <std::terminate()>
               	xorl	%eax, %eax
               	movq	%rdx, %rdi
               	movl	$28, %ecx
               	rep		stosl	%eax, %es:(%rdi)
               	movq	%rdx, %rax
               	popq	%rdx
               	retq

<__cxa_free_dependent_exception>:
               	movq	254331(%rip), %rax      # 0x479c70 <(anonymous namespace)::emergency_pool+0x30>
               	cmpq	%rax, %rdi
               	jbe	0x43bb0b <__cxa_free_dependent_exception+0x1d>
               	addq	254327(%rip), %rax      # 0x479c78 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43bb0b <__cxa_free_dependent_exception+0x1d>
               	jmp	0x43b8d4 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x4136d0 <free@plt>

<std::exception::~exception()>:
               	retq
               	nop

<std::bad_exception::~bad_exception()>:
               	leaq	138167(%rip), %rax      # 0x45d6d0 <vtable for std::bad_exception>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::exception::what() const>:
               	leaq	37756(%rip), %rax       # 0x444ea9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a00>
               	retq

<std::bad_exception::what() const>:
               	leaq	37763(%rip), %rax       # 0x444eb8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a0f>
               	retq

<std::exception::~exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<std::bad_exception::~bad_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bb12 <std::bad_exception::~bad_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	retq
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bb66 <__cxxabiv1::__forced_unwind::~__forced_unwind()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	retq
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bb80 <__cxxabiv1::__foreign_exception::~__foreign_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>

<_ZGTtNKSt9exceptionD1Ev>:
               	retq

<_ZGTtNKSt9exception4whatEv>:
               	jmp	0x43bb26 <std::exception::what() const>

<_ZGTtNKSt13bad_exceptionD1Ev>:
               	retq

<_ZGTtNKSt13bad_exception4whatEv>:
               	jmp	0x43bb2e <std::bad_exception::what() const>
               	nop

<std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>:
               	retq

<__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	movq	-80(%rsi), %rbx
               	cmpl	$1, %edi
               	jbe	0x43bbba <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x13>
               	movq	-88(%rbx), %rdi
               	callq	0x43c298 <__cxxabiv1::__terminate(void (*)())>
               	leaq	-80(%rsi), %rax
               	movq	%rax, %rdi
               	callq	0x43baee <__cxa_free_dependent_exception>
               	lock
               	decl	-128(%rbx)
               	jne	0x43bbe3 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x3c>
               	movq	-104(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43bbda <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x33>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43ba8d <__cxa_free_exception>
               	popq	%rbx
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr()>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::_M_addref()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43bc02 <std::__exception_ptr::exception_ptr::_M_addref()+0xc>
               	lock
               	incl	-128(%rax)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr(void*)>:
               	movq	%rsi, (%rdi)
               	jmp	0x43bbf6 <std::__exception_ptr::exception_ptr::_M_addref()>

<std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bbf6 <std::__exception_ptr::exception_ptr::_M_addref()>
               	nop

<std::__exception_ptr::exception_ptr::_M_release()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43bc49 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	lock
               	decl	-128(%rax)
               	jne	0x43bc49 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	pushq	%rbx
               	movq	-104(%rax), %rax
               	movq	%rdi, %rbx
               	testq	%rax, %rax
               	je	0x43bc38 <std::__exception_ptr::exception_ptr::_M_release()+0x20>
               	movq	(%rdi), %rdi
               	callq	*%rax
               	movq	(%rbx), %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	retq

<std::__exception_ptr::exception_ptr::~exception_ptr()>:
               	jmp	0x43bc18 <std::__exception_ptr::exception_ptr::_M_release()>
               	nop

<std::__exception_ptr::exception_ptr::_M_get() const>:
               	movq	(%rdi), %rax
               	retq

<std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	movq	%rdx, (%rdi)
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x43bc0c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43bc54 <std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>
               	movq	%rbx, %rdi
               	callq	0x43bc4a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator!() const>:
               	cmpq	$0, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const>:
               	xorl	%eax, %eax
               	cmpq	$0, (%rdi)
               	je	0x43bcad <std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const+0xf>
               	leaq	-263(%rip), %rax        # 0x43bba6 <std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>
               	xorl	%edx, %edx
               	retq

<std::__exception_ptr::exception_ptr::__cxa_exception_type() const>:
               	movq	(%rdi), %rax
               	movq	-112(%rax), %rax
               	retq

<std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rax
               	callq	0x43bcb8 <std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>
               	popq	%rdx
               	xorl	$1, %eax
               	retq

<std::current_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c348 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	jne	0x43bce8 <std::current_exception()+0x1b>
               	movq	%rbx, %rdi
               	callq	0x43bbe6 <std::__exception_ptr::exception_ptr::exception_ptr()>
               	jmp	0x43bd1d <std::current_exception()+0x50>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	movq	80(%rax), %rcx
               	addq	%rcx, %rdx
               	cmpq	$1, %rdx
               	ja	0x43bcde <std::current_exception()+0x11>
               	movabsq	$5138137972254386944, %rdx # imm = 0x474E5543432B2B00
               	leaq	112(%rax), %rsi
               	cmpq	%rdx, %rcx
               	je	0x43bd15 <std::current_exception()+0x48>
               	movq	(%rax), %rsi
               	movq	%rbx, %rdi
               	callq	0x43bc04 <std::__exception_ptr::exception_ptr::exception_ptr(void*)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::rethrow_exception(std::__exception_ptr::exception_ptr)>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bc50 <std::__exception_ptr::exception_ptr::_M_get() const>
               	movq	%rax, %rbp
               	callq	0x43bab3 <__cxa_allocate_dependent_exception>
               	movq	%rax, %rbx
               	movq	%rbp, (%rax)
               	lock
               	incl	-128(%rbp)
               	callq	0x43c2e7 <std::get_unexpected()>
               	addq	$80, %rbx
               	movq	%rax, -64(%rbx)
               	callq	0x43c2b8 <std::get_terminate()>
               	movq	%rax, -56(%rbx)
               	movabsq	$5138137972254386945, %rax # imm = 0x474E5543432B2B01
               	movq	%rax, (%rbx)
               	leaq	-447(%rip), %rax        # 0x43bba7 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43c348 <__cxa_get_globals>
               	movq	%rbx, %rdi
               	incl	8(%rax)
               	callq	0x413ab0 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c2c3 <std::terminate()>
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	pushq	%rbx
               	movl	$1, %eax
               	movq	%rdx, %rbx
               	shlq	$36, %rax
               	subq	$32, %rsp
               	movq	(%rdx), %rdx
               	movq	%rax, 16(%rsp)
               	movq	(%rdi), %rax
               	leaq	8(%rsp), %rcx
               	movq	$0, 8(%rsp)
               	movq	$0, 24(%rsp)
               	callq	*48(%rax)
               	movl	16(%rsp), %edx
               	xorl	%eax, %eax
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x43bdd6 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x4e>
               	movq	8(%rsp), %rax
               	movq	%rax, (%rbx)
               	movb	$1, %al
               	addq	$32, %rsp
               	popq	%rbx
               	retq

<__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	xorl	%eax, %eax
               	cmpq	%r8, %rdx
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	retq
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	leaq	137583(%rip), %rax      # 0x45d760 <vtable for __cxxabiv1::__class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f3bc <std::type_info::~type_info()>
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bdea <__cxxabiv1::__class_type_info::~__class_type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43be31 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43be31 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	56(%rsp), %rbx
               	movq	8(%rdi), %r13
               	cmpq	48(%rsp), %r8
               	jne	0x43be67 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movq	8(%r9), %rsi
               	movq	%r13, %rdi
               	callq	0x43be16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43be67 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movl	%ebp, 12(%rbx)
               	jmp	0x43be84 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	8(%r14), %rsi
               	movq	%r13, %rdi
               	callq	0x43be16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43be84 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	%r12, (%rbx)
               	movl	%ebp, 8(%rbx)
               	movl	$1, 16(%rbx)
               	popq	%rbx
               	xorl	%eax, %eax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	pushq	%r8
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	callq	0x43be16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43bebd <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x2d>
               	movq	%rbp, (%rbx)
               	movq	$16, 16(%rbx)
               	movl	$6, 8(%rbx)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	movq	%rdx, 8(%rsp)
               	callq	0x43be16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	jne	0x43bf0b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	cmpl	$3, %r12d
               	ja	0x43bf0b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	40(%rax), %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmpq	*%rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<operator delete(void*, unsigned long)>:
               	jmp	0x43b5e5 <operator delete(void*)>

<operator new(unsigned long)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	jne	0x43bf27 <operator new(unsigned long)+0xe>
               	movl	$1, %ebx
               	movq	%rbx, %rdi
               	callq	0x413aa0 <malloc@plt>
               	testq	%rax, %rax
               	jne	0x43bf70 <operator new(unsigned long)+0x57>
               	callq	0x43c169 <std::get_new_handler()>
               	testq	%rax, %rax
               	jne	0x43bf6c <operator new(unsigned long)+0x53>
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	137345(%rip), %rdx      # 0x45d7d0 <vtable for std::bad_alloc>
               	leaq	137314(%rip), %rsi      # 0x45d7b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	929(%rip), %rdx         # 0x43c308 <std::bad_alloc::~bad_alloc()>
               	callq	0x43c0c5 <__cxa_throw>
               	callq	*%rax
               	jmp	0x43bf27 <operator new(unsigned long)+0xe>
               	popq	%rbx
               	retq

<__cxa_get_exception_ptr>:
               	movq	-8(%rdi), %rax
               	retq

<__cxa_begin_catch>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c348 <__cxa_get_globals>
               	leaq	-80(%rbx), %rsi
               	movabsq	$-5138137972254386944, %rcx # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rcx
               	movq	(%rax), %rdx
               	cmpq	$1, %rcx
               	jbe	0x43bfa9 <__cxa_begin_catch+0x32>
               	testq	%rdx, %rdx
               	je	0x43bfa4 <__cxa_begin_catch+0x2d>
               	callq	0x43c2c3 <std::terminate()>
               	movq	%rsi, (%rax)
               	jmp	0x43bfd0 <__cxa_begin_catch+0x59>
               	movl	-40(%rbx), %edi
               	leal	1(%rdi), %ecx
               	testl	%edi, %edi
               	jns	0x43bfba <__cxa_begin_catch+0x43>
               	movl	$1, %ecx
               	subl	%edi, %ecx
               	movl	%ecx, -40(%rbx)
               	decl	8(%rax)
               	cmpq	%rsi, %rdx
               	je	0x43bfcc <__cxa_begin_catch+0x55>
               	movq	%rdx, -48(%rbx)
               	movq	%rsi, (%rax)
               	movq	-8(%rbx), %rdx
               	movq	%rdx, %rax
               	popq	%rbx
               	retq

<__cxa_end_catch>:
               	pushq	%rcx
               	callq	0x43c333 <__cxa_get_globals_fast>
               	movq	(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x43c033 <__cxa_end_catch+0x5e>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43c000 <__cxa_end_catch+0x2b>
               	movq	$0, (%rax)
               	jmp	0x43c01f <__cxa_end_catch+0x4a>
               	movl	40(%rdi), %edx
               	testl	%edx, %edx
               	jns	0x43c014 <__cxa_end_catch+0x3f>
               	incl	%edx
               	jne	0x43c030 <__cxa_end_catch+0x5b>
               	movq	32(%rdi), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x43c030 <__cxa_end_catch+0x5b>
               	decl	%edx
               	jne	0x43c029 <__cxa_end_catch+0x54>
               	movq	32(%rdi), %rdx
               	movq	%rdx, (%rax)
               	addq	$80, %rdi
               	popq	%rdx
               	jmp	0x413ac0 <_Unwind_DeleteException@plt>
               	jns	0x43c030 <__cxa_end_catch+0x5b>
               	callq	0x43c2c3 <std::terminate()>
               	movl	%edx, 40(%rdi)
               	popq	%rax
               	retq

<std::uncaught_exception()>:
               	pushq	%rax
               	callq	0x43c348 <__cxa_get_globals>
               	cmpl	$0, 8(%rax)
               	popq	%rdx
               	setne	%al
               	retq

<std::uncaught_exceptions()>:
               	pushq	%rax
               	callq	0x43c348 <__cxa_get_globals>
               	movl	8(%rax), %eax
               	popq	%rdx
               	retq

<__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	cmpl	$1, %edi
               	jbe	0x43c05e <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0xf>
               	movq	-56(%rsi), %rdi
               	callq	0x43c298 <__cxxabiv1::__terminate(void (*)())>
               	lock
               	decl	-96(%rsi)
               	jne	0x43c07f <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x30>
               	movq	-72(%rsi), %rax
               	leaq	32(%rsi), %rbx
               	testq	%rax, %rax
               	je	0x43c076 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x27>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43ba8d <__cxa_free_exception>
               	popq	%rbx
               	retq

<__cxa_init_primary_exception>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	$0, -128(%rdi)
               	movq	%rsi, -112(%rdi)
               	movq	%rdx, -104(%rdi)
               	callq	0x43c2e7 <std::get_unexpected()>
               	movq	%rax, -96(%rbx)
               	callq	0x43c2b8 <std::get_terminate()>
               	movq	%rax, -88(%rbx)
               	movabsq	$5138137972254386944, %rax # imm = 0x474E5543432B2B00
               	movq	%rax, -32(%rbx)
               	leaq	-108(%rip), %rax        # 0x43c04f <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, -24(%rbx)
               	leaq	-128(%rbx), %rax
               	popq	%rbx
               	retq

<__cxa_throw>:
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43c348 <__cxa_get_globals>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %rsi
               	incl	8(%rax)
               	movq	24(%rsp), %rdi
               	callq	0x43c081 <__cxa_init_primary_exception>
               	movl	$1, (%rax)
               	leaq	96(%rax), %rbx
               	movq	%rbx, %rdi
               	callq	0x413ab0 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c2c3 <std::terminate()>

<__cxa_rethrow>:
               	pushq	%rbx
               	callq	0x43c348 <__cxa_get_globals>
               	movq	(%rax), %rdi
               	incl	8(%rax)
               	testq	%rdi, %rdi
               	je	0x43c159 <__cxa_rethrow+0x45>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43c142 <__cxa_rethrow+0x2e>
               	movq	$0, (%rax)
               	jmp	0x43c145 <__cxa_rethrow+0x31>
               	negl	40(%rdi)
               	leaq	80(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413ad0 <_Unwind_Resume_or_Rethrow@plt>
               	movq	%rbx, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c2c3 <std::terminate()>

<std::set_new_handler(void (*)())>:
               	movq	%rdi, %rax
               	xchgq	%rax, 252696(%rip)      # 0x479c80 <(anonymous namespace)::__new_handler>
               	retq

<std::get_new_handler()>:
               	movq	252688(%rip), %rax      # 0x479c80 <(anonymous namespace)::__new_handler>
               	retq

<__cxa_guard_acquire>:
               	movb	(%rdi), %al
               	testb	%al, %al
               	jne	0x43c22b <__cxa_guard_acquire+0xba>
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	cmpq	$0, 138795(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43c1e1 <__cxa_guard_acquire+0x70>
               	movl	$1, %r12d
               	movl	$256, %ebp              # imm = 0x100
               	xorl	%r13d, %r13d
               	movl	%r13d, %eax
               	lock
               	cmpxchgl	%ebp, (%rbx)
               	je	0x43c21e <__cxa_guard_acquire+0xad>
               	movl	%eax, %ecx
               	cmpl	%eax, %r12d
               	jne	0x43c1b1 <__cxa_guard_acquire+0x40>
               	xorl	%eax, %eax
               	jmp	0x43c223 <__cxa_guard_acquire+0xb2>
               	cmpl	%eax, %ebp
               	jne	0x43c1cb <__cxa_guard_acquire+0x5a>
               	movl	$65792, %ecx            # imm = 0x10100
               	movl	%ebp, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	je	0x43c1cb <__cxa_guard_acquire+0x5a>
               	cmpl	%eax, %r12d
               	je	0x43c1ad <__cxa_guard_acquire+0x3c>
               	testl	%eax, %eax
               	je	0x43c19d <__cxa_guard_acquire+0x2c>
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	%rbx, %rsi
               	movl	$202, %edi
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	jmp	0x43c19d <__cxa_guard_acquire+0x2c>
               	cmpb	$0, (%rdi)
               	jne	0x43c1ad <__cxa_guard_acquire+0x3c>
               	cmpb	$0, 1(%rdi)
               	je	0x43c21a <__cxa_guard_acquire+0xa9>
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	137291(%rip), %rdx      # 0x45da48 <vtable for __gnu_cxx::recursive_init_error>
               	leaq	137260(%rip), %rsi      # 0x45da30 <typeinfo for __gnu_cxx::recursive_init_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	12869(%rip), %rdx       # 0x43f45a <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	callq	0x43c0c5 <__cxa_throw>
               	movb	$1, 1(%rdi)
               	movl	$1, %eax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	xorl	%eax, %eax
               	retq

<__cxa_guard_abort>:
               	cmpq	$0, 138626(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	movq	%rdi, %rsi
               	je	0x43c25b <__cxa_guard_abort+0x2d>
               	xorl	%eax, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43c25f <__cxa_guard_abort+0x31>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	movb	$0, 1(%rdi)
               	retq

<__cxa_guard_release>:
               	cmpq	$0, 138576(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	movq	%rdi, %rsi
               	je	0x43c290 <__cxa_guard_release+0x30>
               	movl	$1, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43c297 <__cxa_guard_release+0x37>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	movb	$0, 1(%rdi)
               	movb	$1, (%rdi)
               	retq

<__cxxabiv1::__terminate(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	jmp	0x43c2a5 <__cxxabiv1::__terminate(void (*)())+0xd>
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x4138f0 <abort@plt>

<std::set_terminate(void (*)())>:
               	leaq	147175(%rip), %rdx      # 0x460198 <__cxxabiv1::__terminate_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_terminate()>:
               	leaq	147161(%rip), %rax      # 0x460198 <__cxxabiv1::__terminate_handler>
               	movq	(%rax), %rax
               	retq

<std::terminate()>:
               	pushq	%rax
               	callq	0x43c2b8 <std::get_terminate()>
               	movq	%rax, %rdi
               	callq	0x43c298 <__cxxabiv1::__terminate(void (*)())>

<__cxxabiv1::__unexpected(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	callq	0x43c2c3 <std::terminate()>

<std::set_unexpected(void (*)())>:
               	leaq	147144(%rip), %rdx      # 0x4601a8 <__cxxabiv1::__unexpected_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_unexpected()>:
               	leaq	147130(%rip), %rax      # 0x4601a8 <__cxxabiv1::__unexpected_handler>
               	movq	(%rax), %rax
               	retq

<std::unexpected()>:
               	pushq	%rax
               	callq	0x43c2e7 <std::get_unexpected()>
               	movq	%rax, %rdi
               	callq	0x43c2d1 <__cxxabiv1::__unexpected(void (*)())>

<std::bad_alloc::what() const>:
               	leaq	35780(%rip), %rax       # 0x444ecb <typeinfo name for kotlin::gc::GCSchedulerData+0x1a22>
               	retq

<std::bad_alloc::~bad_alloc()>:
               	leaq	136385(%rip), %rax      # 0x45d7d0 <vtable for std::bad_alloc>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::bad_alloc::~bad_alloc()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c308 <std::bad_alloc::~bad_alloc()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>

<__cxa_get_globals_fast>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__cxa_get_globals>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__gnu_cxx::__verbose_terminate_handler()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpb	$0, 252188(%rip)        # 0x479c88 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	movq	138325(%rip), %rbx      # 0x45dfc8 <write+0x45dfc8>
               	je	0x43c384 <__gnu_cxx::__verbose_terminate_handler()+0x27>
               	movq	(%rbx), %rsi
               	leaq	35675(%rip), %rdi       # 0x444eda <typeinfo name for kotlin::gc::GCSchedulerData+0x1a31>
               	jmp	0x43c40f <__gnu_cxx::__verbose_terminate_handler()+0xb2>
               	movb	$1, 252157(%rip)        # 0x479c88 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	callq	0x43f402 <__cxa_current_exception_type>
               	testq	%rax, %rax
               	je	0x43c405 <__gnu_cxx::__verbose_terminate_handler()+0xa8>
               	movq	8(%rax), %rbp
               	cmpb	$42, (%rbp)
               	jne	0x43c3a2 <__gnu_cxx::__verbose_terminate_handler()+0x45>
               	incq	%rbp
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	leaq	12(%rsp), %rcx
               	movq	%rbp, %rdi
               	movl	$4294967295, 12(%rsp)   # imm = 0xFFFFFFFF
               	callq	0x4356a0 <__cxa_demangle>
               	movq	(%rbx), %rsi
               	leaq	35635(%rip), %rdi       # 0x444ef8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a4f>
               	movq	%rax, %r12
               	callq	0x413790 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	je	0x43c3dd <__gnu_cxx::__verbose_terminate_handler()+0x80>
               	movq	%rbp, %rdi
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	leaq	35645(%rip), %rdi       # 0x444f29 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a80>
               	callq	0x413790 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	jne	0x43c400 <__gnu_cxx::__verbose_terminate_handler()+0xa3>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	callq	0x43c114 <__cxa_rethrow>
               	movq	(%rbx), %rsi
               	leaq	35613(%rip), %rdi       # 0x444f2c <typeinfo name for kotlin::gc::GCSchedulerData+0x1a83>
               	callq	0x413790 <fputs@plt>
               	callq	0x4138f0 <abort@plt>
               	movq	%rax, %rdi
               	decq	%rdx
               	jne	0x43c460 <__gnu_cxx::__verbose_terminate_handler()+0x103>
               	callq	0x43bf77 <__cxa_begin_catch>
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	callq	*16(%rdx)
               	movq	(%rbx), %rsi
               	leaq	35617(%rip), %rdi       # 0x444f5a <typeinfo name for kotlin::gc::GCSchedulerData+0x1ab1>
               	movq	%rax, %rbp
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	movl	$10, %edi
               	callq	0x413ae0 <fputc@plt>
               	callq	0x43bfd5 <__cxa_end_catch>
               	jmp	0x43c414 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43bfd5 <__cxa_end_catch>
               	jmp	0x43c414 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	movq	%rax, %rbx
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<__cxa_call_terminate>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x43c4a6 <__cxa_call_terminate+0x2a>
               	movq	%rdi, %rbx
               	callq	0x43bf77 <__cxa_begin_catch>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rax
               	cmpq	$1, %rax
               	ja	0x43c4a6 <__cxa_call_terminate+0x2a>
               	movq	-56(%rbx), %rdi
               	callq	0x43c298 <__cxxabiv1::__terminate(void (*)())>
               	callq	0x43c2c3 <std::terminate()>
               	nop

<std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	cmpq	%rdi, %rax
               	je	0x43c50c <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x60>
               	cmpq	%rdx, %rsi
               	je	0x43c4ef <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x43>
               	movq	%rdx, (%rdi)
               	movq	8(%rsi), %rdx
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdx, 8(%rdi)
               	movq	%rax, 8(%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdi, (%rax)
               	movq	(%rdi), %rax
               	movq	%rdi, 8(%rax)
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	retq
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rax, 8(%rsi)
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	movq	%rdi, 8(%rdi)
               	movq	%rdi, (%rdi)
               	retq
               	cmpq	%rdx, %rsi
               	je	0x43c52d <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x81>
               	movq	%rdx, (%rax)
               	movq	8(%rsi), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rax, (%rdx)
               	movq	(%rax), %rdx
               	movq	%rax, 8(%rdx)
               	movq	%rsi, 8(%rsi)
               	movq	%rsi, (%rsi)
               	retq

<std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>:
               	cmpq	%rdx, %rdi
               	je	0x43c558 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)+0x2a>
               	movq	8(%rdx), %rcx
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rcx)
               	movq	%rdx, (%rax)
               	movq	8(%rdi), %rax
               	movq	%rsi, (%rax)
               	movq	%rcx, 8(%rdi)
               	movq	8(%rsi), %rcx
               	movq	%rcx, 8(%rdx)
               	movq	%rax, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_reverse()>:
               	movq	%rdi, %rax
               	movq	(%rax), %rdx
               	movq	8(%rax), %rcx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, (%rax)
               	movq	%rdx, %rax
               	cmpq	%rdx, %rdi
               	jne	0x43c55d <std::__detail::_List_node_base::_M_reverse()+0x3>
               	retq

<std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rdi)
               	movq	%rax, 8(%rdi)
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rax)
               	movq	%rdi, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_unhook()>:
               	movq	(%rdi), %rax
               	movq	8(%rdi), %rdx
               	movq	%rax, (%rdx)
               	movq	%rdx, 8(%rax)
               	retq

<std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	24(%rdi), %rax
               	movq	16(%rax), %rdx
               	movq	%rdx, 24(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c5b0 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c5c2 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c5d2 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 16(%rdx)
               	jne	0x43c5ce <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 16(%rdx)
               	jmp	0x43c5d2 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 24(%rdx)
               	movq	%rdi, 16(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	16(%rdi), %rax
               	movq	24(%rax), %rdx
               	movq	%rdx, 16(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c5f0 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c602 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c612 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 24(%rdx)
               	jne	0x43c60e <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 24(%rdx)
               	jmp	0x43c612 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 16(%rdx)
               	movq	%rdi, 24(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	cmpl	$0, (%rdi)
               	jne	0x43c62f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 8(%rax)
               	jne	0x43c62f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	24(%rdi), %rax
               	retq
               	movq	16(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c646 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2b>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c659 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rdx, %rax
               	jmp	0x43c638 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x1d>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 16(%rax)
               	jne	0x43c659 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rax, %rdi
               	movq	8(%rax), %rax
               	jmp	0x43c64a <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2f>
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c671 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c690 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c663 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c687 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c678 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c690 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c6a8 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c6c7 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c69a <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c6be <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c6af <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c6c7 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	jmp	0x43c61b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)>:
               	jmp	0x43c61b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c59b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c5db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	%rsi, %r8
               	leaq	8(%rcx), %r11
               	movq	%rdx, 8(%rsi)
               	movq	$0, 16(%rsi)
               	movq	$0, 24(%rsi)
               	movl	$0, (%rsi)
               	testb	%dil, %dil
               	je	0x43c71d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x41>
               	movq	%rsi, 16(%rdx)
               	cmpq	%rdx, %rcx
               	jne	0x43c711 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x35>
               	movq	%rsi, 8(%rcx)
               	jmp	0x43c727 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x4b>
               	cmpq	%rdx, 16(%rcx)
               	jne	0x43c76d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 16(%rcx)
               	jmp	0x43c76d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 24(%rdx)
               	cmpq	%rdx, 24(%rcx)
               	jne	0x43c76d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%r8, 24(%rcx)
               	jmp	0x43c76d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	8(%r8), %r10
               	cmpl	$0, (%r10)
               	jne	0x43c7ec <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x110>
               	movq	8(%r10), %r9
               	movq	16(%r9), %rax
               	cmpq	%rax, %r10
               	jne	0x43c7aa <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xce>
               	movq	24(%r9), %rax
               	testq	%rax, %rax
               	je	0x43c778 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	cmpl	$0, (%rax)
               	jne	0x43c778 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	movl	$1, (%r10)
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	movq	%r9, %r8
               	movq	8(%rcx), %rax
               	cmpq	%r8, %rax
               	jne	0x43c72d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x51>
               	jmp	0x43c7e9 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x10d>
               	cmpq	%r8, 24(%r10)
               	jne	0x43c78c <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xb0>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c59b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c5db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43c7e4 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x108>
               	testq	%rax, %rax
               	je	0x43c7b4 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd8>
               	cmpl	$0, (%rax)
               	je	0x43c756 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x7a>
               	cmpq	%r8, 16(%r10)
               	jne	0x43c7c8 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xec>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c5db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c59b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r8, %r9
               	jmp	0x43c76a <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8e>
               	movq	%r8, %rax
               	movl	$1, (%rax)
               	retq

<std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	16(%rdi), %r9
               	movq	%rsi, %r10
               	movq	%rdi, %r8
               	movq	24(%rdi), %rsi
               	testq	%r9, %r9
               	je	0x43c898 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xa5>
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43c8a0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c824 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x31>
               	movq	%rdx, %rax
               	jmp	0x43c816 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x23>
               	movq	24(%rax), %rdx
               	cmpq	%r8, %rax
               	je	0x43c89d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xaa>
               	movq	%rax, 8(%r9)
               	movq	%rax, %rcx
               	movq	%r9, 16(%rax)
               	cmpq	%rax, %rsi
               	je	0x43c85e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x6b>
               	movq	8(%rax), %rcx
               	testq	%rdx, %rdx
               	je	0x43c84a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x57>
               	movq	%rcx, 8(%rdx)
               	movq	8(%rax), %rdi
               	movq	%rdx, 16(%rdi)
               	movq	%rsi, 24(%rax)
               	movq	24(%r8), %rsi
               	movq	%rax, 8(%rsi)
               	cmpq	%r8, 8(%r10)
               	jne	0x43c86a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x77>
               	movq	%rax, 8(%r10)
               	jmp	0x43c87e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	8(%r8), %rsi
               	cmpq	%r8, 16(%rsi)
               	jne	0x43c87a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x87>
               	movq	%rax, 16(%rsi)
               	jmp	0x43c87e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	%rax, 24(%rsi)
               	movq	8(%r8), %rsi
               	movl	(%r8), %edi
               	movq	%rdx, %r9
               	movq	%rsi, 8(%rax)
               	movl	(%rax), %esi
               	movl	%edi, (%rax)
               	movl	%esi, (%r8)
               	jmp	0x43c91d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	movq	%rsi, %r9
               	jmp	0x43c8a0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	%rdx, %r9
               	movq	8(%r8), %rcx
               	testq	%r9, %r9
               	je	0x43c8ad <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xba>
               	movq	%rcx, 8(%r9)
               	cmpq	%r8, 8(%r10)
               	jne	0x43c8b9 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xc6>
               	movq	%r9, 8(%r10)
               	jmp	0x43c8cd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	8(%r8), %rax
               	cmpq	%r8, 16(%rax)
               	jne	0x43c8c9 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd6>
               	movq	%r9, 16(%rax)
               	jmp	0x43c8cd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	%r9, 24(%rax)
               	cmpq	%r8, 16(%r10)
               	jne	0x43c8f5 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x102>
               	cmpq	$0, 24(%r8)
               	movq	%r9, %rax
               	jne	0x43c8e3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	8(%r8), %rax
               	jmp	0x43c8f1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c8f1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	%rdx, %rax
               	jmp	0x43c8e3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	%rax, 16(%r10)
               	cmpq	%r8, 24(%r10)
               	jne	0x43c91d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	cmpq	$0, 16(%r8)
               	movq	%r9, %rax
               	jne	0x43c90b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	8(%r8), %rax
               	jmp	0x43c919 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c919 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	%rdx, %rax
               	jmp	0x43c90b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	%rax, 24(%r10)
               	cmpl	$0, (%r8)
               	leaq	8(%r10), %r11
               	je	0x43ca8c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	cmpq	%r9, 8(%r10)
               	je	0x43ca83 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	testq	%r9, %r9
               	je	0x43c94c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	cmpl	$1, (%r9)
               	je	0x43c94c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	movl	$1, (%r9)
               	jmp	0x43ca8c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	movq	16(%rcx), %rdi
               	cmpq	%r9, %rdi
               	jne	0x43c9ec <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1f9>
               	movq	24(%rcx), %rdi
               	cmpl	$0, (%rdi)
               	jne	0x43c97d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x18a>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c59b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43c98f <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x19c>
               	cmpl	$1, (%rdx)
               	jne	0x43c9a1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1ae>
               	testq	%rax, %rax
               	je	0x43ca28 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	je	0x43ca28 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	testq	%rax, %rax
               	je	0x43c9ab <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1b8>
               	cmpl	$1, (%rax)
               	jne	0x43c9c3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1d0>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c5db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	24(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43c9dc <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1e9>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c59b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43ca83 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	cmpl	$0, (%rdi)
               	jne	0x43ca0c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x219>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c5db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movq	24(%rdi), %rdx
               	movq	16(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43ca1e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x22b>
               	cmpl	$1, (%rdx)
               	jne	0x43ca3d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	testq	%rax, %rax
               	je	0x43ca28 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	jne	0x43ca3d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	movq	8(%rcx), %rax
               	movq	%rcx, %r9
               	movl	$0, (%rdi)
               	movq	%rax, %rcx
               	jmp	0x43c92b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x138>
               	testq	%rax, %rax
               	je	0x43ca47 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x254>
               	cmpl	$1, (%rax)
               	jne	0x43ca5f <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x26c>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c59b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	16(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43ca78 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x285>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c5db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	testq	%r9, %r9
               	jne	0x43c940 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x14d>
               	movq	%r8, %rax
               	retq

<std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)>:
               	xorl	%eax, %eax
               	testq	%rdi, %rdi
               	je	0x43caa9 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	cmpl	$1, (%rdi)
               	jne	0x43ca9e <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0xe>
               	incl	%eax
               	cmpq	%rsi, %rdi
               	je	0x43caa9 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	movq	8(%rdi), %rdi
               	jmp	0x43ca97 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x7>
               	retq

<std::(anonymous namespace)::run(void*)>:
               	movq	%rdi, %rax
               	testq	%rdi, %rdi
               	jne	0x43cab3 <std::(anonymous namespace)::run(void*)+0x9>
               	retq
               	pushq	%rbx
               	movq	(%rax), %rbx
               	movq	%rax, %rdi
               	callq	*8(%rax)
               	movq	%rbx, %rax
               	testq	%rbx, %rbx
               	jne	0x43cab4 <std::(anonymous namespace)::run(void*)+0xa>
               	popq	%rbx
               	retq
               	nop

<std::(anonymous namespace)::key_init()::key_s::~key_s()>:
               	movl	250318(%rip), %edi      # 0x479c9c <std::(anonymous namespace)::key>
               	jmp	0x413af0 <pthread_key_delete@plt>

<std::(anonymous namespace)::key_init()>:
               	movb	250295(%rip), %al       # 0x479c90 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	leaq	91(%rip), %rdi          # 0x43cb3b <std::(anonymous namespace)::run()>
               	testb	%al, %al
               	jne	0x43cb36 <std::(anonymous namespace)::key_init()+0x63>
               	pushq	%rdx
               	leaq	250276(%rip), %rdi      # 0x479c90 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43c171 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43cb2e <std::(anonymous namespace)::key_init()+0x5b>
               	leaq	-82(%rip), %rsi         # 0x43caaa <std::(anonymous namespace)::run(void*)>
               	leaq	250265(%rip), %rdi      # 0x479c9c <std::(anonymous namespace)::key>
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	250241(%rip), %rdi      # 0x479c90 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43c260 <__cxa_guard_release>
               	leaq	137181(%rip), %rdx      # 0x45e2f8 <__dso_handle>
               	leaq	250230(%rip), %rsi      # 0x479c98 <std::(anonymous namespace)::key_init()::ks>
               	leaq	-97(%rip), %rdi         # 0x43cac8 <std::(anonymous namespace)::key_init()::key_s::~key_s()>
               	callq	0x413b00 <__cxa_atexit@plt>
               	leaq	6(%rip), %rdi           # 0x43cb3b <std::(anonymous namespace)::run()>
               	popq	%rax
               	jmp	0x442d40 <atexit>

<std::(anonymous namespace)::run()>:
               	pushq	%rbx
               	movl	250202(%rip), %edi      # 0x479c9c <std::(anonymous namespace)::key>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movl	250191(%rip), %edi      # 0x479c9c <std::(anonymous namespace)::key>
               	xorl	%esi, %esi
               	movq	%rax, %rbx
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43caaa <std::(anonymous namespace)::run(void*)>

<std::condition_variable::condition_variable()>:
               	movl	$12, %ecx
               	xorl	%eax, %eax
               	rep		stosl	%eax, %es:(%rdi)
               	retq

<std::condition_variable::~condition_variable()>:
               	jmp	0x4139b0 <pthread_cond_destroy@plt>
               	nop

<std::condition_variable::wait(std::unique_lock<std::mutex>&)>:
               	pushq	%rdx
               	movq	(%rsi), %rsi
               	callq	0x413b10 <pthread_cond_wait@plt>
               	testl	%eax, %eax
               	je	0x43cb82 <std::condition_variable::wait(std::unique_lock<std::mutex>&)+0x12>
               	callq	0x43c2c3 <std::terminate()>
               	popq	%rax
               	retq

<std::condition_variable::notify_one()>:
               	pushq	%rdx
               	callq	0x413970 <pthread_cond_signal@plt>
               	testl	%eax, %eax
               	je	0x43cb95 <std::condition_variable::notify_one()+0x11>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	popq	%rax
               	retq
               	nop

<std::condition_variable::notify_all()>:
               	pushq	%rdx
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	testl	%eax, %eax
               	je	0x43cba9 <std::condition_variable::notify_all()+0x11>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	popq	%rax
               	retq

<std::(anonymous namespace)::notifier::run(void*)>:
               	testq	%rdi, %rdi
               	je	0x43cbd9 <std::(anonymous namespace)::notifier::run(void*)+0x2e>
               	cmpq	$0, 136192(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43cbc7 <std::(anonymous namespace)::notifier::run(void*)+0x1c>
               	movq	24(%rdi), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	16(%rbx), %rdi
               	callq	0x43cb98 <std::condition_variable::notify_all()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>
               	retq

<std::__at_thread_exit(std::__at_thread_exit_elt*)>:
               	cmpq	$0, 136150(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43cbfb <std::__at_thread_exit(std::__at_thread_exit_elt*)+0x21>
               	leaq	-284(%rip), %rsi        # 0x43cad3 <std::(anonymous namespace)::key_init()>
               	leaq	250006(%rip), %rdi      # 0x479c8c <std::__at_thread_exit(std::__at_thread_exit_elt*)::once>
               	callq	0x4139c0 <pthread_once@plt>
               	movl	250011(%rip), %edi      # 0x479c9c <std::(anonymous namespace)::key>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movl	250000(%rip), %edi      # 0x479c9c <std::(anonymous namespace)::key>
               	movq	%rbx, %rsi
               	movq	%rax, (%rbx)
               	popq	%rbx
               	jmp	0x4137f0 <pthread_setspecific@plt>

<std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movl	$32, %edi
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43bf19 <operator new(unsigned long)>
               	movb	$0, 8(%rbp)
               	movq	%rax, %rbx
               	movq	%r12, 16(%rax)
               	movq	(%rbp), %rax
               	movq	$0, (%rbp)
               	movq	%rbx, %rdi
               	movq	%rax, 24(%rbx)
               	leaq	-166(%rip), %rax        # 0x43cbab <std::(anonymous namespace)::notifier::run(void*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43cbda <std::__at_thread_exit(std::__at_thread_exit_elt*)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<(anonymous namespace)::generic_error_category::name() const>:
               	leaq	33517(%rip), %rax       # 0x444f66 <typeinfo name for kotlin::gc::GCSchedulerData+0x1abd>
               	retq

<(anonymous namespace)::system_error_category::name() const>:
               	leaq	33517(%rip), %rax       # 0x444f6e <typeinfo name for kotlin::gc::GCSchedulerData+0x1ac5>
               	retq

<std::_V2::error_category::default_error_condition(int) const>:
               	movq	%rdi, %rdx
               	movl	%esi, %eax
               	retq

<std::_V2::error_category::equivalent(int, std::error_condition const&) const>:
               	movq	(%rdi), %rax
               	pushq	%rbx
               	movq	%rdx, %rbx
               	callq	*40(%rax)
               	xorl	%ecx, %ecx
               	cmpq	%rdx, 8(%rbx)
               	jne	0x43cc9f <std::_V2::error_category::equivalent(int, std::error_condition const&) const+0x17>
               	cmpl	%eax, (%rbx)
               	sete	%cl
               	movl	%ecx, %eax
               	popq	%rbx
               	retq
               	nop

<std::_V2::error_category::equivalent(std::error_code const&, int) const>:
               	xorl	%eax, %eax
               	cmpq	8(%rsi), %rdi
               	jne	0x43ccb1 <std::_V2::error_category::equivalent(std::error_code const&, int) const+0xd>
               	cmpl	%edx, (%rsi)
               	sete	%al
               	retq

<std::system_error::~system_error()>:
               	leaq	134279(%rip), %rax      # 0x45d940 <vtable for std::system_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f508 <std::runtime_error::~runtime_error()>
               	nop

<std::system_error::~system_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ccb2 <std::system_error::~system_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::_V2::error_category::_M_message[abi:cxx11](int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rsi), %rax
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	8(%rsp), %rdx
               	movq	(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x43f8fc <std::__cow_string::__cow_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	addq	$40, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	%edx, %edi
               	callq	0x413830 <strerror@plt>
               	orq	$-1, %rdx
               	movq	%rax, %rsi
               	leaq	16(%rbx), %rax
               	movq	%rax, (%rbx)
               	testq	%rsi, %rsi
               	je	0x43cd57 <(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const+0x33>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%rbx, %rdi
               	callq	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::~error_category()>:
               	retq
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	leaq	133955(%rip), %rax      # 0x45d8b0 <vtable for (anonymous namespace)::system_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43cd64 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cd66 <(anonymous namespace)::system_error_category::~system_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	leaq	133841(%rip), %rax      # 0x45d860 <vtable for (anonymous namespace)::generic_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43cd64 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cd88 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::_V2::error_category::~error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cd64 <std::_V2::error_category::~error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::_V2::system_category()>:
               	leaq	144365(%rip), %rax      # 0x4601b0 <(anonymous namespace)::system_category_instance>
               	retq

<std::_V2::generic_category()>:
               	leaq	144365(%rip), %rax      # 0x4601b8 <(anonymous namespace)::generic_category_instance>
               	retq

<(anonymous namespace)::system_error_category::default_error_condition(int) const>:
               	cmpl	$84, %esi
               	pushq	%rbx
               	movl	%esi, %ebx
               	je	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ce0c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x40>
               	cmpl	$43, %esi
               	jg	0x43cdf1 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x25>
               	cmpl	$42, %esi
               	jge	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	testl	%esi, %esi
               	jle	0x43ce4e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	cmpl	$14, %esi
               	jle	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	subl	$16, %esi
               	cmpl	$24, %esi
               	jmp	0x43ce45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$67, %esi
               	je	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ce00 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x34>
               	subl	$60, %esi
               	cmpl	$3, %esi
               	jmp	0x43ce45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$71, %esi
               	je	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jl	0x43ce4e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	subl	$74, %esi
               	jmp	0x43ce42 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x76>
               	cmpl	$111, %esi
               	jg	0x43ce2d <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x61>
               	cmpl	$110, %esi
               	jge	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	cmpl	$95, %esi
               	je	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ce25 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x59>
               	subl	$88, %esi
               	cmpl	$5, %esi
               	jmp	0x43ce45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$97, %esi
               	cmpl	$10, %esi
               	jmp	0x43ce45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$125, %esi
               	je	0x43ce47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ce3c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x70>
               	subl	$113, %esi
               	cmpl	$2, %esi
               	jmp	0x43ce45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$130, %esi
               	cmpl	$1, %esi
               	ja	0x43ce4e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	callq	0x43cdc4 <std::_V2::generic_category()>
               	jmp	0x43ce53 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x87>
               	callq	0x43cdbc <std::_V2::system_category()>
               	movq	%rax, %rdx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq

<std::__throw_system_error(int)>:
               	pushq	%r13
               	movl	%edi, %r13d
               	movl	$32, %edi
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rsp, %r12
               	movq	%rax, %rbx
               	callq	0x43cdc4 <std::_V2::generic_category()>
               	movl	%r13d, %edx
               	movq	%r12, %rdi
               	movq	%rax, %rbp
               	movq	(%rax), %rax
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d264 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r12, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	133784(%rip), %rax      # 0x45d940 <vtable for std::system_error>
               	movq	%rbx, %rdi
               	movl	%r13d, 16(%rbx)
               	leaq	-516(%rip), %rdx        # 0x43ccb2 <std::system_error::~system_error()>
               	leaq	133451(%rip), %rsi      # 0x45d808 <typeinfo for std::system_error>
               	movq	%rbp, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%r12, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43cedd <std::__throw_system_error(int)+0x83>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::error_code::default_error_condition() const>:
               	movq	8(%rdi), %rax
               	movl	(%rdi), %esi
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	movq	40(%rdx), %rdx
               	jmpq	*%rdx

<std::chrono::_V2::system_clock::now()>:
               	subq	$24, %rsp
               	xorl	%edi, %edi
               	movq	%rsp, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<std::chrono::_V2::steady_clock::now()>:
               	subq	$24, %rsp
               	movl	$1, %edi
               	movq	%rsp, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq
               	nop

<std::bad_function_call::what() const>:
               	leaq	32810(%rip), %rax       # 0x444f75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1acc>
               	retq

<std::bad_function_call::~bad_function_call()>:
               	leaq	133677(%rip), %rax      # 0x45d980 <vtable for std::bad_function_call>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::bad_function_call::~bad_function_call()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf4c <std::bad_function_call::~bad_function_call()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::__throw_bad_function_call()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	133628(%rip), %rdx      # 0x45d980 <vtable for std::bad_function_call>
               	leaq	133597(%rip), %rsi      # 0x45d968 <typeinfo for std::bad_function_call>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-80(%rip), %rdx         # 0x43cf4c <std::bad_function_call::~bad_function_call()>
               	callq	0x43c0c5 <__cxa_throw>
               	nop

<std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	cmpq	$12, %rsi
               	ja	0x43d00c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x6a>
               	leaq	35408(%rip), %rax       # 0x445a08 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const::__fast_bkt>
               	flds	(%rdi)
               	movzbl	(%rax,%rsi), %eax
               	movl	%eax, 4(%rsp)
               	fimull	4(%rsp)
               	movl	%eax, %ebp
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b20 <ceil@plt>
               	movsd	24313(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x442ed8 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43cff0 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x4e>
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	jmp	0x43d003 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x61>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	movzbl	%bpl, %eax
               	jmp	0x43d0a2 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x100>
               	leaq	35341(%rip), %rcx       # 0x445a20 <std::__detail::__prime_list>
               	incq	%rsi
               	movl	$297, %edx              # imm = 0x129
               	leaq	48(%rcx), %rbp
               	movq	%rdx, %rax
               	sarq	%rax
               	leaq	(%rbp,%rax,8), %rdi
               	cmpq	(%rdi), %rsi
               	ja	0x43d039 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x97>
               	testq	%rax, %rax
               	jle	0x43d046 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xa4>
               	movq	%rax, %rdx
               	jmp	0x43d01f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x7d>
               	subq	%rax, %rdx
               	leaq	8(%rdi), %rbp
               	leaq	-1(%rdx), %rax
               	jmp	0x43d02f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x8d>
               	leaq	2424(%rcx), %rdx
               	orq	$-1, %rax
               	cmpq	%rdx, %rbp
               	je	0x43d09a <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	fildll	(%rbp)
               	cmpq	$0, (%rbp)
               	jns	0x43d066 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xc4>
               	fadds	23922(%rip)             # 0x442dd8 <_IO_stdin_used+0x18>
               	fmuls	(%rbx)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b20 <ceil@plt>
               	movsd	24153(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x442ed8 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43d08c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xea>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43d09a <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>:
               	addq	%rcx, %rdx
               	cmpq	8(%rdi), %rdx
               	jb	0x43d196 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xec>
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	flds	(%rdi)
               	movq	%rdx, (%rsp)
               	fildll	(%rsp)
               	testq	%rdx, %rdx
               	jns	0x43d0d1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x27>
               	fadds	23815(%rip)             # 0x442dd8 <_IO_stdin_used+0x18>
               	fdiv	%st(1), %st
               	movq	%rsi, (%rsp)
               	fildll	(%rsp)
               	testq	%rsi, %rsi
               	jns	0x43d0e9 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x3f>
               	fadds	23795(%rip)             # 0x442dd8 <_IO_stdin_used+0x18>
               	fxch	%st(1)
               	jmp	0x43d0eb <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x41>
               	fxch	%st(1)
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	fcomi	%st(1), %st
               	jb	0x43d151 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xa7>
               	fstp	%st(1)
               	fstp	%st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b30 <floor@plt>
               	addsd	24016(%rip), %xmm0      # 0x442ee0 <_IO_stdin_used+0x120>
               	comisd	24000(%rip), %xmm0      # 0x442ed8 <_IO_stdin_used+0x118>
               	jae	0x43d121 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x77>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43d133 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x89>
               	subsd	23983(%rip), %xmm0      # 0x442ed8 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	leaq	(%rbp,%rbp), %rsi
               	movq	%rbx, %rdi
               	cmpq	%rsi, %rax
               	cmovaeq	%rax, %rsi
               	callq	0x43cfa2 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>
               	movq	%rax, %rdx
               	movl	$1, %eax
               	jmp	0x43d19b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	fstp	%st(0)
               	fmulp	%st, %st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b30 <floor@plt>
               	comisd	23916(%rip), %xmm0      # 0x442ed8 <_IO_stdin_used+0x118>
               	jae	0x43d179 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xcf>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	jmp	0x43d190 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xe6>
               	subsd	23895(%rip), %xmm0      # 0x442ed8 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	xorl	%eax, %eax
               	xorl	%edx, %edx
               	jmp	0x43d19b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	retq
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<__once_proxy>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	jmpq	*%rax
               	nop

<std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43f8fc <std::__cow_string::__cow_string(char const*, unsigned long)>

<std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	133489(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43d1ba <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d1c6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133476(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d1c6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133490(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d1c6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133504(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d1c6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133518(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	133531(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43d1ba <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d264 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133518(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d264 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133532(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d264 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133546(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
               	testq	%rdx, %rdx
               	je	0x43d2f1 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xa>
               	jmp	0x413780 <memcmp@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::find(char const*, unsigned long, char const&)>:
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43d307 <std::char_traits<char>::find(char const*, unsigned long, char const&)+0x13>
               	movsbl	(%rdx), %esi
               	movq	%rax, %rdx
               	jmp	0x413b40 <memchr@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::copy(char*, char const*, unsigned long)>:
               	movq	%rdi, %rax
               	movq	%rdx, %rcx
               	testq	%rdx, %rdx
               	je	0x43d317 <std::char_traits<char>::copy(char*, char const*, unsigned long)+0xd>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>:
               	movq	%rsi, 8(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>:
               	movq	%rsi, 16(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>:
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>:
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>:
               	movq	(%rsi), %rax
               	testq	%rax, %rax
               	jns	0x43d365 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x15>
               	pushq	%rax
               	leaq	31456(%rip), %rdi       # 0x444e40 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4404f8 <std::__throw_length_error(char const*)>
               	cmpq	%rdx, %rax
               	jbe	0x43d389 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	addq	%rdx, %rdx
               	cmpq	%rdx, %rax
               	jae	0x43d389 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	testq	%rdx, %rdx
               	js	0x43d37c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x2c>
               	movq	%rdx, (%rsi)
               	jmp	0x43d389 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	movq	%rax, (%rsi)
               	movq	(%rsi), %rdi
               	incq	%rdi
               	jmp	0x43bf19 <operator new(unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	addq	$16, %rax
               	cmpq	%rax, %rdi
               	je	0x43d3a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x14>
               	jmp	0x43b5e5 <operator delete(void*)>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>:
               	movq	(%rdi), %rdi
               	jmp	0x43b5e5 <operator delete(void*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>:
               	movq	8(%rdi), %rcx
               	movq	%rsi, %rax
               	cmpq	%rcx, %rsi
               	jbe	0x43d3db <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const+0x21>
               	pushq	%rsi
               	leaq	31673(%rip), %rdi       # 0x444f87 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x440586 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rax, %rsi
               	subq	8(%rdi), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x43d3fb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const+0x1f>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x4404f8 <std::__throw_length_error(char const*)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const>:
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x43d420 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const+0x14>
               	addq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d42c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	jmp	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d43c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x43d446 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136b0 <memmove@plt>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x43d453 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x43d45c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>:
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movq	%rsi, 8(%rsp)
               	cmpq	$15, %rsi
               	jbe	0x43d48c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x2e>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	8(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x43d4a2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x44>
               	movq	(%rbx), %rdi
               	movsbl	%bpl, %edx
               	callq	0x43d447 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)>:
               	movsbl	%dl, %edx
               	jmp	0x43d45e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d4c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d4cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x43d4fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	cmpq	%rsi, %rdi
               	je	0x43d57c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>
               	pushq	%r13
               	leaq	16(%rdi), %rax
               	movl	$15, %edx
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rsi), %rbp
               	cmpq	%rax, (%rdi)
               	je	0x43d521 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x25>
               	movq	16(%rdi), %rdx
               	movq	%rsi, %r12
               	movq	%rdi, %rbx
               	cmpq	%rbp, %rdx
               	jae	0x43d552 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
               	leaq	8(%rsp), %rsi
               	movq	%rbp, 8(%rsp)
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rbx, %rdi
               	movq	%rax, %r13
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%r13, (%rbx)
               	movq	%rax, 16(%rbx)
               	testq	%rbp, %rbp
               	je	0x43d566 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6a>
               	movq	(%r12), %rsi
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	leaq	(%rbp,%rdx), %r14
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	movq	%rsi, %rax
               	subq	%r14, %rax
               	movq	%rax, 8(%rsp)
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	movl	$15, %edx
               	addq	%rsi, %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	je	0x43d5cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x4e>
               	movq	16(%rdi), %rdx
               	leaq	24(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, %r12
               	testq	%rbp, %rbp
               	je	0x43d5ef <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x71>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdx
               	movq	%rax, %rdi
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	testq	%r13, %r13
               	je	0x43d608 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	testq	%r15, %r15
               	je	0x43d608 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	leaq	(%r12,%rbp), %rdi
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	cmpq	$0, 8(%rsp)
               	je	0x43d628 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xaa>
               	movq	(%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	8(%rsp), %rdx
               	addq	%r12, %rdi
               	addq	%r14, %rsi
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	24(%rsp), %rax
               	movq	%r12, (%rbx)
               	movq	%rax, 16(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	(%rsi,%rdx), %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rdx
               	subq	%rax, %rdx
               	je	0x43d678 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	testq	%rbp, %rbp
               	je	0x43d678 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rdi), %rdi
               	addq	%rdi, %rax
               	addq	%rsi, %rdi
               	movq	%rax, %rsi
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbx), %rdx
               	subq	%rbp, %rax
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movsbl	%dl, %edx
               	movq	%rax, (%rdi)
               	jmp	0x43d45e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, (%rbp)
               	movq	(%rsi), %rax
               	cmpq	%rax, %r12
               	jne	0x43d6f3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2d>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43d6ff <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	%rax, (%rbp)
               	movq	16(%rsi), %rax
               	movq	%rax, 16(%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	%r12, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rdx
               	movq	%rdi, (%rbp)
               	movq	-16(%rsi), %rcx
               	cmpq	%rcx, %rsi
               	jne	0x43d75c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x40>
               	movl	$16, %edx
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	jmp	0x43d77f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x63>
               	movq	%rcx, (%rbp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 8(%rbp)
               	movq	16(%rbx), %rcx
               	movq	%rcx, 16(%rbp)
               	movq	%rsi, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	jmp	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d4fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rcx
               	movq	-16(%rsi), %rax
               	movq	(%rdi), %rdi
               	cmpq	%rax, %rsi
               	jne	0x43d7d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	8(%rbx), %rdx
               	testq	%rdx, %rdx
               	je	0x43d7bf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x27>
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbp), %rdx
               	movq	%rax, 8(%rbp)
               	movb	$0, (%rdx,%rax)
               	jmp	0x43d807 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	leaq	16(%rbp), %rcx
               	cmpq	%rcx, %rdi
               	je	0x43d7e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x48>
               	movq	16(%rbp), %rdx
               	jmp	0x43d7e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4a>
               	xorl	%edi, %edi
               	movq	%rax, (%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rax
               	movq	%rax, 16(%rbp)
               	testq	%rdi, %rdi
               	je	0x43d804 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
               	movq	%rdi, (%rbx)
               	movq	%rdx, 16(%rbx)
               	jmp	0x43d807 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	movq	%rsi, (%rbx)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43d8b2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x12>
               	movq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rsi, 8(%rsp)
               	cmpq	%rax, %rsi
               	jae	0x43d8cd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x19>
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rsi
               	leaq	16(%rdi), %rbp
               	movl	$15, %edx
               	cmpq	%rsi, %rbp
               	je	0x43d8e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x2e>
               	movq	16(%rdi), %rdx
               	movq	8(%rsp), %rcx
               	cmpq	%rdx, %rcx
               	je	0x43d94f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	movq	%rdi, %rbx
               	cmpq	$15, %rcx
               	ja	0x43d8fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x46>
               	cmpq	%rdx, %rcx
               	jbe	0x43d933 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x7f>
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%rax, %rbp
               	movq	8(%rbx), %rax
               	movq	%rbp, %rdi
               	leaq	1(%rax), %rdx
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%rbp, (%rbx)
               	movq	%rax, 16(%rbx)
               	jmp	0x43d94f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	cmpq	%rsi, %rbp
               	je	0x43d94f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	leaq	1(%rax), %rdx
               	movq	%rbp, %rdi
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rdi
               	callq	0x43b5e5 <operator delete(void*)>
               	movq	%rbp, (%rbx)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43d968 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x12>
               	movq	16(%rdi), %rax
               	cmpq	%rax, 8(%rdi)
               	jae	0x43d986 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x30>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x43d8b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43bfd5 <__cxa_end_catch>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()>:
               	movq	(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movb	$0, (%rax)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const>:
               	cmpq	$0, 8(%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43d9ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const+0x18>
               	pushq	%rax
               	leaq	30203(%rip), %rdi       # 0x444fbe <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440586 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43d9ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)+0x18>
               	pushq	%rax
               	leaq	30171(%rip), %rdi       # 0x444fbe <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440586 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
               	pushq	%r13
               	movl	%esi, %r13d
               	movl	$15, %eax
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	8(%rdi), %rbp
               	leaq	16(%rdi), %rdx
               	leaq	1(%rbp), %r12
               	cmpq	%rdx, (%rdi)
               	je	0x43da3d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x27>
               	movq	16(%rdi), %rax
               	cmpq	%rax, %r12
               	jbe	0x43da57 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x41>
               	movl	$1, %r8d
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d57e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r13b, (%rax,%rbp)
               	movq	(%rbx), %rax
               	movq	%r12, 8(%rbx)
               	movb	$0, 1(%rax,%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x43da16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d4fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	jmp	0x43d798 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	30046(%rip), %rdx       # 0x445002 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	cmpq	$-1, %r12
               	jne	0x43dac4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	jmp	0x43dae2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	testq	%r12, %r12
               	je	0x43dae2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	movq	8(%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	subq	%rbp, %rdx
               	cmpq	%r12, %rdx
               	cmovaq	%r12, %rdx
               	callq	0x43d64c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43d64c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	subq	%rax, %rbx
               	addq	8(%rdi), %rax
               	cmpq	%rax, %rdx
               	jne	0x43db2f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x21>
               	movq	%rbx, 8(%rdi)
               	movb	$0, (%rsi)
               	jmp	0x43db3a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x2c>
               	subq	%rsi, %rdx
               	movq	%rbx, %rsi
               	callq	0x43d64c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()>:
               	movq	8(%rdi), %rax
               	movl	$1, %edx
               	leaq	-1(%rax), %rsi
               	jmp	0x43d64c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r15
               	movl	%r8d, %r15d
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	29862(%rip), %rcx       # 0x445016 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	movq	%r12, %rdx
               	movq	%r12, %r14
               	pushq	%rbx
               	movq	%rbp, %rsi
               	movq	%rdi, %rbx
               	subq	%rbp, %r14
               	pushq	%r9
               	callq	0x43d3dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%rbx), %rdx
               	movq	(%rbx), %rdi
               	leaq	16(%rbx), %rcx
               	movl	$15, %eax
               	addq	%rdx, %r14
               	cmpq	%rcx, %rdi
               	je	0x43dba7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x4f>
               	movq	16(%rbx), %rax
               	cmpq	%r14, %rax
               	jb	0x43dbcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x74>
               	leaq	(%rbp,%r13), %rax
               	subq	%rax, %rdx
               	je	0x43dbdf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	cmpq	%r12, %rbp
               	je	0x43dbdf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	addq	%r13, %rdi
               	leaq	(%rdi,%rbp), %rsi
               	addq	%r12, %rdi
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43dbdf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	movq	%r12, %r8
               	xorl	%ecx, %ecx
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d57e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	testq	%r12, %r12
               	je	0x43dbf6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x9e>
               	movq	(%rbx), %rdi
               	movsbl	%r15b, %edx
               	movq	%r12, %rsi
               	addq	%r13, %rdi
               	callq	0x43d447 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r14, 8(%rbx)
               	movb	$0, (%rax,%r14)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>:
               	movq	%rsi, %rcx
               	movq	8(%rdi), %rsi
               	movsbl	%dl, %r8d
               	xorl	%edx, %edx
               	jmp	0x43db58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>:
               	movq	8(%rdi), %rax
               	cmpq	%rsi, %rax
               	jae	0x43dc38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x14>
               	movsbl	%dl, %edx
               	subq	%rax, %rsi
               	jmp	0x43dc12 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	jbe	0x43dc45 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x21>
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x43dc24 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>:
               	movsbl	%dl, %r8d
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43db58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x43dc4e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	29611(%rip), %rdx       # 0x445033 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43db58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43db58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movl	%r8d, 4(%rsp)
               	cmpq	%rdx, %rax
               	leaq	29517(%rip), %rdx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x43db58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x43db58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	callq	0x43dd26 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	leaq	29420(%rip), %rcx       # 0x44505e <typeinfo name for kotlin::gc::GCSchedulerData+0x1bb5>
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%r8, %rdx
               	movq	%rbx, %rsi
               	subq	$40, %rsp
               	callq	0x43d3dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%r12), %rax
               	movq	%r15, %rcx
               	movq	(%r12), %rbp
               	subq	%rbx, %rcx
               	movl	$15, %edx
               	movq	%rcx, 16(%rsp)
               	addq	%rax, %rcx
               	movq	%rcx, 8(%rsp)
               	leaq	16(%r12), %rcx
               	cmpq	%rcx, %rbp
               	je	0x43ddbb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	16(%r12), %rdx
               	cmpq	8(%rsp), %rdx
               	jb	0x43deba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x15e>
               	addq	%r14, %rbp
               	addq	%rbx, %r14
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	subq	%r14, %rax
               	movq	%rax, %r14
               	callq	0x43d40c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>
               	cmpq	%r15, %rbx
               	setne	%cl
               	testq	%r14, %r14
               	setne	%dl
               	andl	%edx, %ecx
               	testb	%al, %al
               	je	0x43de16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xba>
               	testb	%cl, %cl
               	je	0x43de05 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xa9>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	testq	%r15, %r15
               	je	0x43dece <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	jmp	0x43de8a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x12e>
               	testq	%r15, %r15
               	je	0x43de40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	cmpq	%r15, %rbx
               	jb	0x43de40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movb	%cl, 31(%rsp)
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movb	31(%rsp), %cl
               	testb	%cl, %cl
               	je	0x43dece <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	jmp	0x43de44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe8>
               	testb	%cl, %cl
               	je	0x43de56 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xfa>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	cmpq	%r15, %rbx
               	jae	0x43dece <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	leaq	(%rbp,%rbx), %rdi
               	leaq	(%r13,%r15), %rax
               	cmpq	%rax, %rdi
               	jb	0x43de7a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x11e>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43dece <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	cmpq	%r13, %rdi
               	ja	0x43de8f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x133>
               	movq	16(%rsp), %rsi
               	movq	%r15, %rdx
               	addq	%r13, %rsi
               	movq	%rbp, %rdi
               	jmp	0x43deb3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x157>
               	movq	%rdi, %rbx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	subq	%r13, %rbx
               	movq	%rbx, %rdx
               	callq	0x43d431 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	%r15, %rdx
               	leaq	(%rbp,%r15), %rsi
               	leaq	(%rbp,%rbx), %rdi
               	subq	%rbx, %rdx
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43dece <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %r8
               	movq	%r13, %rcx
               	movq	%rbx, %rdx
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x43d57e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	8(%rsp), %rax
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r12)
               	movq	(%r12), %rax
               	movb	$0, (%rax,%rbx)
               	addq	$40, %rsp
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %r8
               	movq	(%rdi), %rbx
               	subq	%rdx, %r8
               	leaq	29023(%rip), %rdx       # 0x445077 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %r8
               	cmovaq	%rcx, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rbp), %rdx
               	movq	8(%rsp), %r8
               	xorl	%esi, %esi
               	addq	$24, %rsp
               	leaq	(%rbx,%rax), %rcx
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43dd5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>:
               	movq	%rdx, %r8
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43dd5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43df46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)>:
               	jmp	0x43df46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	movq	8(%r9), %rdx
               	leaq	-1(%rcx), %r8
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43dd5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)>:
               	jmp	0x43df6c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movq	%r8, (%rsp)
               	cmpq	%rdx, %rax
               	leaq	28804(%rip), %rdx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	(%rsp), %r8
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43dd5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rdx), %r8
               	movq	(%rdx), %rcx
               	xorl	%edx, %edx
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rdx, %rdi
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	8(%rdx), %rax
               	movq	(%rdx), %rbx
               	leaq	28697(%rip), %rdx       # 0x445033 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	$16, %rsp
               	xorl	%edx, %edx
               	leaq	(%rbx,%rax), %rcx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>:
               	movq	%rcx, %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x43e04c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28588(%rip), %rdx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%r8, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rcx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rcx), %rax
               	movq	%r9, %rbx
               	movq	(%rcx), %rbp
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r14, %rdx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rcx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43e10a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43e10a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	jmp	0x43e10a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43df9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rax
               	leaq	16(%rbx), %r8
               	movl	$15, %ecx
               	movq	(%rdi), %rdi
               	leaq	(%rax,%rdx), %rbp
               	cmpq	%r8, %rdi
               	je	0x43e1a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x23>
               	movq	16(%rbx), %rcx
               	cmpq	%rcx, %rbp
               	ja	0x43e1bb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x37>
               	testq	%rdx, %rdx
               	je	0x43e1ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	addq	%rax, %rdi
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43e1ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	movq	%rdx, %r8
               	movq	%rsi, %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d57e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43e184 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43e1e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rdi), %rax
               	movq	%rcx, %rbx
               	movq	(%rdi), %rbp
               	subq	%rdx, %rax
               	leaq	28281(%rip), %rdx       # 0x44508c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rsi
               	movq	%rbx, %rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e184 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>:
               	pushq	%r12
               	leaq	28239(%rip), %rcx       # 0x44508c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %r12
               	xorl	%esi, %esi
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d3dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e184 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)>:
               	jmp	0x43e234 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)>:
               	jmp	0x43e234 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	xorl	%esi, %esi
               	pushq	%rbx
               	repne		scasb	%es:(%rdi), %al
               	movq	%rbp, %rdi
               	movq	%rcx, %rdx
               	leaq	28154(%rip), %rcx       # 0x44508c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	movq	%rbx, %rdx
               	callq	0x43d3dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rdx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e184 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>:
               	jmp	0x43e26e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28123(%rip), %rdx       # 0x4450a1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	testq	%rbx, %rbx
               	je	0x43e303 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const+0x49>
               	movq	(%r12), %rsi
               	movq	%rbx, %rdx
               	movq	%r13, %rdi
               	addq	%rbp, %rsi
               	callq	0x43d421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
               	cmpq	%rsi, %rdi
               	je	0x43e463 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x153>
               	pushq	%r14
               	pushq	%r13
               	leaq	16(%rdi), %r13
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdx
               	movq	(%rsi), %rax
               	cmpq	%rdx, %r13
               	jne	0x43e40e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xfe>
               	cmpq	%rax, %r12
               	jne	0x43e3ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xda>
               	cmpq	$0, 8(%rdi)
               	movq	8(%rsi), %rax
               	je	0x43e393 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x83>
               	testq	%rax, %rax
               	je	0x43e3c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xb1>
               	movq	%rsp, %r14
               	movq	%r12, %rsi
               	movl	$16, %edx
               	movq	%r14, %rdi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	movl	$16, %edx
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movl	$16, %edx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43e446 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	testq	%rax, %rax
               	je	0x43e446 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	jmp	0x43e3e5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xd5>
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbp), %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	movq	$0, 8(%rbp)
               	movb	$0, (%rax)
               	jmp	0x43e456 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x146>
               	movq	16(%rsi), %r14
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rax, (%rbp)
               	movq	%r12, (%rbx)
               	movq	%r14, 16(%rbp)
               	jmp	0x43e446 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movq	16(%rdi), %r14
               	cmpq	%rax, %r12
               	jne	0x43e434 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x124>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43d30a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%rax, (%rbx)
               	movq	%r13, (%rbp)
               	jmp	0x43e442 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x132>
               	movq	%rax, (%rdi)
               	movq	16(%rsi), %rax
               	movq	%rdx, (%rsi)
               	movq	%rax, 16(%rdi)
               	movq	%r14, 16(%rbx)
               	movq	8(%rbp), %rax
               	movq	8(%rbx), %rdx
               	movq	%rdx, 8(%rbp)
               	movq	%rax, 8(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	testq	%rcx, %rcx
               	jne	0x43e494 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x24>
               	cmpq	%rdx, %rsi
               	jae	0x43e50b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x43e507 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x43e507 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	(%rdi), %rbp
               	movb	(%r13), %dl
               	movq	%rcx, %rbx
               	movl	$1, %r12d
               	leaq	31(%rsp), %r15
               	subq	%rbx, %r12
               	leaq	(%rbp,%rsi), %rcx
               	movb	%dl, 31(%rsp)
               	leaq	(%rbp,%rax), %rdi
               	subq	%rax, %rsi
               	movq	%rcx, 8(%rsp)
               	cmpq	%rbx, %rsi
               	jb	0x43e507 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r12, %rsi
               	movq	%r15, %rdx
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	je	0x43e507 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rax, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e4f9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%r14, %rax
               	subq	%rbp, %rax
               	jmp	0x43e50b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%r14), %rdi
               	subq	%rdi, %rsi
               	jmp	0x43e4c7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	subq	$24, %rsp
               	movb	%sil, 12(%rsp)
               	movq	8(%rdi), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x43e57d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	movq	(%rdi), %rbp
               	movq	%rdx, %rax
               	leaq	12(%rsp), %rdx
               	subq	%rax, %rsi
               	leaq	(%rbp,%rax), %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e57d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	subq	%rbp, %rax
               	movq	%rax, %rbx
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rcx
               	ja	0x43e5d9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x43e5d9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x43e5d5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x43e5b3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e588 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e588 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e63b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x43e63b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	(%rdi), %rdx
               	leaq	-1(%rax), %rcx
               	cmpb	%sil, (%rdx,%rax)
               	je	0x43e63b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	%rcx, %rax
               	jmp	0x43e623 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x17>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%r12, %r12
               	je	0x43e677 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	cmpq	8(%rbp), %rbx
               	jae	0x43e677 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%rbp), %rdx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e67b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x43e650 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e542 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e704 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x43e704 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	cmpq	%rdx, %rax
               	movq	%rsi, %r12
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e708 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e6e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x43e708 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e6b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e6b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e60c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	8(%rdi), %r12
               	movq	%rdx, %rbx
               	cmpq	%r12, %rbx
               	jae	0x43e77f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x39>
               	movq	(%rbp), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e783 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3d>
               	incq	%rbx
               	jmp	0x43e75e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e746 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e746 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	movq	%rdx, %rax
               	cmpq	%rcx, %rax
               	jae	0x43e7d2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1a>
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e7d6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x43e7bf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x7>
               	orq	$-1, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e821 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %r12
               	cmpq	%rdx, %rax
               	movq	%rsi, %rbp
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e821 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e803 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e7d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e7d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e87d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e87d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x43e86e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rbx
               	movq	8(%rsi), %rbp
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	cmpq	%rbp, %rbx
               	movq	%rbp, %rdx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e8b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	26600(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	(%r13), %rdi
               	movq	(%r14), %rsi
               	subq	%rbp, %rbx
               	cmpq	%r12, %rbx
               	cmovaq	%r12, %rbx
               	movq	8(%r14), %r12
               	movq	%rbx, %rdx
               	cmpq	%rbx, %r12
               	cmovbeq	%r12, %rdx
               	addq	%rbp, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e918 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rcx, %r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	26483(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	leaq	26461(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	movq	%r15, %rdi
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbx
               	movq	8(%rsp), %r9
               	movq	(%r15), %rsi
               	movq	(%r14), %rdi
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	8(%r15), %rbp
               	subq	%r13, %rbp
               	movq	%rbx, %rdx
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e9bb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const+0x99>
               	addq	$24, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	%rdi, %r8
               	movq	8(%rdi), %rbp
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r8), %rdi
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbx, %rbp
               	movq	%rbx, %rdx
               	cmovbeq	%rbp, %rdx
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ea0d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	26247(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbp
               	movq	%r12, %rdi
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r14), %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rsi
               	notq	%rsi
               	leaq	-1(%rsi), %rbx
               	movq	%r12, %rsi
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r13, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ea84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const+0x72>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	26138(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	pushq	%r9
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	%r12, %rdx
               	movq	(%r13), %rdi
               	movq	%r14, %rsi
               	subq	%rbp, %rbx
               	cmpq	%r15, %rbx
               	cmovaq	%r15, %rbx
               	cmpq	%r12, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%rbp, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43eaf6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x68>
               	popq	%rcx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbx), %rax
               	movb	$0, 16(%rbx)
               	movq	%rbx, %rdi
               	movq	%rax, (%rbx)
               	movq	$0, 8(%rbx)
               	movq	8(%r12), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbp
               	addq	%rbp, %rsi
               	callq	0x43d8b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e234 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e1e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	$0, 8(%rdi)
               	movb	$0, 16(%rdi)
               	movq	8(%rdx), %rax
               	leaq	1(%rax), %rsi
               	callq	0x43d8b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x43dc12 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e1e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ec26 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d4c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ebec <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ec94 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d4cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43ec5a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>
               	nop

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43ecfd <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43ecfd <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	leaq	25554(%rip), %rdi       # 0x4450ca <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x440423 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ed29 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d4c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43ecd6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x43ed50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e1e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ecd6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43edcf <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43edcf <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	leaq	25344(%rip), %rdi       # 0x4450ca <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x440423 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43edfb <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43d350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d4cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25282(%rip), %rdx       # 0x4450f4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c4b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rdi, %r8
               	orq	$-1, %rdx
               	movq	%rax, (%rdi)
               	testq	%rsi, %rsi
               	je	0x43eecc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x28>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%r8, %rdi
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	25123(%rip), %rdx       # 0x445103 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r13, %rsi
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	movq	%rsi, %rdx
               	subq	%r13, %rdx
               	addq	8(%r12), %rdx
               	popq	%rcx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25045(%rip), %rdx       # 0x445103 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	24988(%rip), %rdx       # 0x44511e <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x43d3ba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43ef1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<bool __gnu_cxx::operator==<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>:
               	testq	%rdi, %rdi
               	je	0x43efd3 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)+0xb>
               	movq	(%rdi), %rax
               	jmpq	*8(%rax)
               	retq

<execute_native_thread_routine>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	movq	%rbx, %rdi
               	callq	0x43efc8 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	popq	%rdx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43efc8 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::system_error::system_error(std::error_code, char const*)>:
               	pushq	%r15
               	movq	%rsi, %r15
               	pushq	%r14
               	movq	%rdx, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$104, %rsp
               	movq	(%rdx), %rax
               	movl	%esi, %edx
               	movq	%r14, %rsi
               	leaq	64(%rsp), %rbp
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	leaq	24829(%rip), %rdx       # 0x445133 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8a>
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x43e062 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	leaq	32(%rsp), %r12
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	callq	0x43d6c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rdx
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	callq	0x43e062 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	movq	%rsp, %r13
               	movq	%rax, %rsi
               	movq	%r13, %rdi
               	callq	0x43d6c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d264 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r13, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%r12, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	125099(%rip), %rax      # 0x45d940 <vtable for std::system_error>
               	movq	%r15, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rbx
               	movq	%r13, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43f0c3 <std::system_error::system_error(std::error_code, char const*)+0xc1>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43f0d0 <std::system_error::system_error(std::error_code, char const*)+0xce>
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::thread::_State::~_State()>:
               	retq
               	nop

<std::thread::_State::~_State()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f0e0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::thread::join()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43f10d <std::thread::join()+0x19>
               	xorl	%esi, %esi
               	callq	0x413b50 <pthread_join@plt>
               	testl	%eax, %eax
               	je	0x43f119 <std::thread::join()+0x25>
               	jmp	0x43f112 <std::thread::join()+0x1e>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::detach()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43f139 <std::thread::detach()+0x17>
               	callq	0x4139e0 <pthread_detach@plt>
               	testl	%eax, %eax
               	je	0x43f145 <std::thread::detach()+0x23>
               	jmp	0x43f13e <std::thread::detach()+0x1c>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>:
               	pushq	%rbx
               	movq	(%rsi), %rcx
               	movq	%rsi, %rbx
               	leaq	-392(%rip), %rdx        # 0x43efd4 <execute_native_thread_routine>
               	xorl	%esi, %esi
               	callq	0x413b60 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43f16e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())+0x20>
               	movl	%eax, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::thread::hardware_concurrency()>:
               	pushq	%rax
               	callq	0x413b70 <get_nprocs@plt>
               	movl	$0, %edx
               	testl	%eax, %eax
               	cmovsl	%edx, %eax
               	popq	%rdx
               	retq

<std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdi, (%rsp)
               	movq	%rsp, %rbx
               	movq	%rsi, 8(%rsp)
               	movq	%rbx, %rsi
               	movq	%rbx, %rdi
               	callq	0x413b80 <nanosleep@plt>
               	incl	%eax
               	jne	0x43f1b4 <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x2a>
               	callq	0x413820 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x43f19b <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x11>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43f21c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	126444(%rip), %rbp      # 0x45dfb8 <write+0x45dfb8>
               	testq	%rbp, %rbp
               	je	0x43f1db <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x21>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 8(%rbx)
               	jmp	0x43f1e4 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x2a>
               	movl	8(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 8(%rbx)
               	decl	%eax
               	jne	0x43f21c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	testq	%rbp, %rbp
               	je	0x43f200 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x46>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 12(%rbx)
               	jmp	0x43f209 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x4f>
               	movl	12(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 12(%rbx)
               	decl	%eax
               	jne	0x43f21c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	movq	24(%rax), %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<execute_native_thread_routine_compat>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rsp, %rbx
               	movq	%rax, (%rsp)
               	movq	16(%rdi), %rax
               	movq	$0, 16(%rdi)
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	leaq	8(%rbx), %rdi
               	callq	0x43f1ba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43f1ba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rbx
               	movq	8(%rsi), %rdx
               	movq	$0, (%rsi)
               	movq	$0, 8(%rsi)
               	leaq	8(%rsp), %r12
               	movq	8(%rbx), %rax
               	movq	%rbx, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	%rdx, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43f1ba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	xorl	%esi, %esi
               	movq	%rbx, %rcx
               	movq	%rbp, %rdi
               	leaq	-172(%rip), %rdx        # 0x43f220 <execute_native_thread_routine_compat>
               	callq	0x413b60 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43f307 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())+0x91>
               	movl	%eax, %ebp
               	movq	8(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	$0, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43f1ba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movl	%ebp, %edi
               	callq	0x43ce5a <std::__throw_system_error(int)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	cmpq	$0, 126106(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	jne	0x43f35f <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0x4f>
               	movl	$32, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	callq	0x43cdc4 <std::_V2::generic_category()>
               	leaq	24061(%rip), %rcx       # 0x445136 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8d>
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43f002 <std::system_error::system_error(std::error_code, char const*)>
               	leaq	-9886(%rip), %rdx       # 0x43ccb2 <std::system_error::~system_error()>
               	leaq	124081(%rip), %rsi      # 0x45d808 <typeinfo for std::system_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	(%rsi), %rax
               	movq	$0, (%rsi)
               	movq	%rsp, %rbx
               	xorl	%edx, %edx
               	movq	%rax, (%rsp)
               	movq	8(%rsi), %rax
               	movq	$0, 8(%rsi)
               	movq	%rbx, %rsi
               	movq	%rax, 8(%rsp)
               	callq	0x43f276 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>
               	leaq	8(%rbx), %rdi
               	callq	0x43f1ba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	jmp	0x43f3b4 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0xa4>
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43f1ba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::type_info::~type_info()>:
               	retq
               	nop

<std::type_info::__is_function_p() const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::~type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f3bc <std::type_info::~type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	movq	8(%rdi), %rdi
               	movq	8(%rsi), %rsi
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43f401 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43f401 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxa_current_exception_type>:
               	pushq	%rcx
               	callq	0x43c348 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	je	0x43f420 <__cxa_current_exception_type+0x1e>
               	movq	(%rax), %rdx
               	testb	$1, 80(%rax)
               	je	0x43f41d <__cxa_current_exception_type+0x1b>
               	leaq	-112(%rdx), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	retq

<__cxa_pure_virtual>:
               	pushq	%rax
               	movl	$27, %edx
               	movl	$2, %edi
               	leaq	23851(%rip), %rsi       # 0x44515f <typeinfo name for kotlin::gc::GCSchedulerData+0x1cb6>
               	callq	0x4138e0 <write@plt>
               	callq	0x43c2c3 <std::terminate()>

<__cxa_deleted_virtual>:
               	pushq	%rax
               	movl	$30, %edx
               	movl	$2, %edi
               	leaq	23851(%rip), %rsi       # 0x44517b <typeinfo name for kotlin::gc::GCSchedulerData+0x1cd2>
               	callq	0x4138e0 <write@plt>
               	callq	0x43c2c3 <std::terminate()>

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	leaq	124391(%rip), %rax      # 0x45da48 <vtable for __gnu_cxx::recursive_init_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f45a <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<std::logic_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::runtime_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::logic_error::~logic_error()>:
               	leaq	124591(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::domain_error::~domain_error()>:
               	leaq	124593(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f492 <std::logic_error::~logic_error()>
               	nop

<std::invalid_argument::~invalid_argument()>:
               	leaq	124613(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f492 <std::logic_error::~logic_error()>
               	nop

<std::length_error::~length_error()>:
               	leaq	124633(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f492 <std::logic_error::~logic_error()>
               	nop

<std::out_of_range::~out_of_range()>:
               	leaq	124653(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f492 <std::logic_error::~logic_error()>
               	nop

<std::runtime_error::~runtime_error()>:
               	leaq	124673(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::range_error::~range_error()>:
               	leaq	124675(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f508 <std::runtime_error::~runtime_error()>
               	nop

<std::overflow_error::~overflow_error()>:
               	leaq	124695(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f508 <std::runtime_error::~runtime_error()>
               	nop

<std::underflow_error::~underflow_error()>:
               	leaq	124715(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f508 <std::runtime_error::~runtime_error()>
               	nop

<std::logic_error::~logic_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f492 <std::logic_error::~logic_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::domain_error::~domain_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f4b8 <std::domain_error::~domain_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::invalid_argument::~invalid_argument()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f4cc <std::invalid_argument::~invalid_argument()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::length_error::~length_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f4e0 <std::length_error::~length_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::out_of_range::~out_of_range()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f4f4 <std::out_of_range::~out_of_range()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::runtime_error::~runtime_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f508 <std::runtime_error::~runtime_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::range_error::~range_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f52e <std::range_error::~range_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::overflow_error::~overflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f542 <std::overflow_error::~overflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::underflow_error::~underflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f556 <std::underflow_error::~underflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b5e5 <operator delete(void*)>

<std::logic_error::logic_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	124203(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f60c <std::logic_error::logic_error(std::string const&)>
               	leaq	124190(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f60c <std::logic_error::logic_error(std::string const&)>
               	leaq	124204(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f60c <std::logic_error::logic_error(std::string const&)>
               	leaq	124218(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f60c <std::logic_error::logic_error(std::string const&)>
               	leaq	124232(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	124245(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6aa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	124232(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6aa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	124246(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6aa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	124260(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<_txnal_cow_string_D1_commit(void*)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rsi
               	callq	0x441480 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::logic_error::logic_error(std::logic_error const&)>:
               	leaq	123905(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::logic_error::operator=(std::logic_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x4420ee <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::runtime_error::runtime_error(std::runtime_error const&)>:
               	leaq	124055(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::runtime_error::operator=(std::runtime_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x4420ee <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::logic_error::logic_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	123792(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4424a4 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::domain_error::domain_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	leaq	123772(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	leaq	123786(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	leaq	123800(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	leaq	123814(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	123824(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4424a4 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bb10 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::range_error::range_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f84c <std::runtime_error::runtime_error(char const*)>
               	leaq	123804(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f84c <std::runtime_error::runtime_error(char const*)>
               	leaq	123818(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f84c <std::runtime_error::runtime_error(char const*)>
               	leaq	123832(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::__sso_string::__sso_string(std::string const&)>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rdx
               	jmp	0x4407ca <std::__sso_string::__sso_string(char const*, unsigned long)>

<std::__cow_string::__cow_string()>:
               	leaq	238515(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::__cow_string::__cow_string(std::string const&)>:
               	jmp	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::__cow_string(char const*, unsigned long)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rcx
               	callq	0x4424ee <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq
               	nop

<std::__cow_string::__cow_string(std::__cow_string const&)>:
               	jmp	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::operator=(std::__cow_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4420ee <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cow_string::~__cow_string()>:
               	jmp	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	nop

<std::__cow_string::__cow_string(std::__cow_string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	238441(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__cow_string::operator=(std::__cow_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4412d4 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::_M_message(int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rsi), %rax
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	*24(%rax)
               	movq	8(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	-24(%rsi), %rdx
               	callq	0x4407ca <std::__sso_string::__sso_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movl	$1, %ebp
               	pushq	%rbx
               	leaq	-1(%rsi), %rbx
               	pushq	%rdx
               	leaq	(%rbx,%rbp), %rdi
               	callq	0x413b90 <_ITM_RU1@plt>
               	testb	%al, %al
               	je	0x43f9c3 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x28>
               	incq	%rbp
               	jmp	0x43f9b1 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x16>
               	leaq	24(%rbp), %rdi
               	callq	0x413ba0 <_ZGTtnam@plt>
               	leaq	-1(%rbp), %rdx
               	movl	$0, 16(%rax)
               	leaq	24(%rax), %rbx
               	movq	%r12, %rsi
               	movq	%rdx, 8(%rax)
               	movq	%rbx, %rdi
               	movq	%rdx, (%rax)
               	movq	%rbp, %rdx
               	callq	0x413bb0 <_ITM_memcpyRtWn@plt>
               	movq	%rbx, (%r13)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	callq	0x43c114 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43bfd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_txnal_cow_string_c_str(void const*)>:
               	jmp	0x413bc0 <_ITM_RU8@plt>

<_txnal_sso_string_c_str(void const*)>:
               	jmp	0x413bc0 <_ITM_RU8@plt>

<_txnal_cow_string_D1(void*)>:
               	pushq	%rax
               	callq	0x43fa19 <_txnal_cow_string_c_str(void const*)>
               	leaq	-771(%rip), %rdi        # 0x43f72d <_txnal_cow_string_D1_commit(void*)>
               	movl	$1, %esi
               	popq	%rcx
               	leaq	-24(%rax), %rdx
               	jmp	0x413bd0 <_ITM_addUserCommitAction@plt>

<_txnal_logic_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_txnal_runtime_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_ZGTtNSt11logic_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21350(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f492 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f492 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21244(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f492 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f492 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11logic_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fb28 <_ZGTtNSt11logic_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNKSt11logic_error4whatEv>:
               	pushq	%rax
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa19 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt12domain_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21079(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f7e4 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4b8 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4b8 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20973(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f7e4 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4b8 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4b8 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12domain_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fc37 <_ZGTtNSt12domain_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt16invalid_argumentC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20823(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f7fe <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4cc <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4cc <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20717(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f7fe <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4cc <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4cc <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentD2Ev>:
               	pushq	%rax
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt16invalid_argumentD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fd37 <_ZGTtNSt16invalid_argumentD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt12length_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20567(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f818 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4e0 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4e0 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20461(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f818 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4e0 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4e0 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12length_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fe37 <_ZGTtNSt12length_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt12out_of_rangeC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20311(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f832 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4f4 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4f4 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20205(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f832 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f4f4 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f4f4 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeD2Ev>:
               	pushq	%rax
               	callq	0x43fa3f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12out_of_rangeD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ff37 <_ZGTtNSt12out_of_rangeD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt13runtime_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20055(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f84c <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f508 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f508 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19949(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f84c <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f508 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f508 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt13runtime_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440037 <_ZGTtNSt13runtime_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNKSt13runtime_error4whatEv>:
               	pushq	%rax
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa19 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt11range_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19784(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f88c <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f52e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f52e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19678(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f88c <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f52e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f52e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11range_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440146 <_ZGTtNSt11range_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt14overflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19528(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f8a6 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f542 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f542 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19422(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f8a6 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f542 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f542 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt14overflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440246 <_ZGTtNSt14overflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt15underflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19272(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f8c0 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f556 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f556 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19166(%rip), %rsi       # 0x444dbb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f8c0 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fa1e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f99b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f556 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f556 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fa44 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fa23 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt15underflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440346 <_ZGTtNSt15underflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<std::__throw_bad_exception()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	119639(%rip), %rdx      # 0x45d6d0 <vtable for std::bad_exception>
               	leaq	119536(%rip), %rsi      # 0x45d670 <typeinfo for std::bad_exception>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-18559(%rip), %rdx      # 0x43bb12 <std::bad_exception::~bad_exception()>
               	callq	0x43c0c5 <__cxa_throw>

<std::__throw_bad_alloc()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	119848(%rip), %rdx      # 0x45d7d0 <vtable for std::bad_alloc>
               	leaq	119817(%rip), %rsi      # 0x45d7b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-16568(%rip), %rdx      # 0x43c308 <std::bad_alloc::~bad_alloc()>
               	callq	0x43c0c5 <__cxa_throw>

<std::__throw_bad_cast()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	121073(%rip), %rdx      # 0x45dcc8 <vtable for std::bad_cast>
               	leaq	121042(%rip), %rsi      # 0x45dcb0 <typeinfo for std::bad_cast>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9363(%rip), %rdx        # 0x442882 <std::bad_cast::~bad_cast()>
               	callq	0x43c0c5 <__cxa_throw>

<std::__throw_bad_typeid()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	leaq	121090(%rip), %rdx      # 0x45dd08 <vtable for std::bad_typeid>
               	leaq	121059(%rip), %rsi      # 0x45dcf0 <typeinfo for std::bad_typeid>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9368(%rip), %rdx        # 0x4428b6 <std::bad_typeid::~bad_typeid()>
               	callq	0x43c0c5 <__cxa_throw>

<std::__throw_logic_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f7a4 <std::logic_error::logic_error(char const*)>
               	leaq	-4022(%rip), %rdx       # 0x43f492 <std::logic_error::~logic_error()>
               	leaq	120353(%rip), %rsi      # 0x45da70 <typeinfo for std::logic_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_domain_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f7e4 <std::domain_error::domain_error(char const*)>
               	leaq	-4055(%rip), %rdx       # 0x43f4b8 <std::domain_error::~domain_error()>
               	leaq	120306(%rip), %rsi      # 0x45da88 <typeinfo for std::domain_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_invalid_argument(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f7fe <std::invalid_argument::invalid_argument(char const*)>
               	leaq	-4106(%rip), %rdx       # 0x43f4cc <std::invalid_argument::~invalid_argument()>
               	leaq	120259(%rip), %rsi      # 0x45daa0 <typeinfo for std::invalid_argument>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_length_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f818 <std::length_error::length_error(char const*)>
               	leaq	-4157(%rip), %rdx       # 0x43f4e0 <std::length_error::~length_error()>
               	leaq	120212(%rip), %rsi      # 0x45dab8 <typeinfo for std::length_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_out_of_range(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f832 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4208(%rip), %rdx       # 0x43f4f4 <std::out_of_range::~out_of_range()>
               	leaq	120165(%rip), %rsi      # 0x45dad0 <typeinfo for std::out_of_range>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_out_of_range_fmt(char const*, ...)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rsp, %rbp
               	pushq	%r12
               	pushq	%rbx
               	subq	$208, %rsp
               	movq	%rsi, -184(%rbp)
               	movq	%rdx, -176(%rbp)
               	movq	%rcx, -168(%rbp)
               	movq	%r8, -160(%rbp)
               	movq	%r9, -152(%rbp)
               	testb	%al, %al
               	je	0x4405e1 <std::__throw_out_of_range_fmt(char const*, ...)+0x5b>
               	movaps	%xmm0, -144(%rbp)
               	movaps	%xmm1, -128(%rbp)
               	movaps	%xmm2, -112(%rbp)
               	movaps	%xmm3, -96(%rbp)
               	movaps	%xmm4, -80(%rbp)
               	movaps	%xmm5, -64(%rbp)
               	movaps	%xmm6, -48(%rbp)
               	movaps	%xmm7, -32(%rbp)
               	movq	%r10, %rdi
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbp), %rax
               	movl	$8, -216(%rbp)
               	movq	%rax, -208(%rbp)
               	leaq	-192(%rbp), %rax
               	movl	$48, -212(%rbp)
               	movq	%rax, -200(%rbp)
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	leaq	511(%rdx), %rsi
               	movq	%r10, %rdx
               	addq	$534, %rcx              # imm = 0x216
               	andq	$-16, %rcx
               	subq	%rcx, %rsp
               	leaq	-216(%rbp), %rcx
               	leaq	15(%rsp), %rbx
               	andq	$-16, %rbx
               	movq	%rbx, %rdi
               	callq	0x4408d6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>
               	movl	$16, %edi
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %r12
               	callq	0x43f832 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4477(%rip), %rdx       # 0x43f4f4 <std::out_of_range::~out_of_range()>
               	leaq	119896(%rip), %rsi      # 0x45dad0 <typeinfo for std::out_of_range>
               	movq	%r12, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_runtime_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f84c <std::runtime_error::runtime_error(char const*)>
               	leaq	-4528(%rip), %rdx       # 0x43f508 <std::runtime_error::~runtime_error()>
               	leaq	119849(%rip), %rsi      # 0x45dae8 <typeinfo for std::runtime_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_range_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f88c <std::range_error::range_error(char const*)>
               	leaq	-4561(%rip), %rdx       # 0x43f52e <std::range_error::~range_error()>
               	leaq	119802(%rip), %rsi      # 0x45db00 <typeinfo for std::range_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_overflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f8a6 <std::overflow_error::overflow_error(char const*)>
               	leaq	-4612(%rip), %rdx       # 0x43f542 <std::overflow_error::~overflow_error()>
               	leaq	119755(%rip), %rsi      # 0x45db18 <typeinfo for std::overflow_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_underflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43ba4b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f8c0 <std::underflow_error::underflow_error(char const*)>
               	leaq	-4663(%rip), %rdx       # 0x43f556 <std::underflow_error::~underflow_error()>
               	leaq	119708(%rip), %rsi      # 0x45db30 <typeinfo for std::underflow_error>
               	movq	%rbx, %rdi
               	callq	0x43c0c5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ba8d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::__sso_string::__sso_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__sso_string::__sso_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43ed50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::__sso_string(char const*, unsigned long)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43eda8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__sso_string::__sso_string(std::__sso_string const&)>:
               	jmp	0x43ed50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::operator=(std::__sso_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d4fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__sso_string::~__sso_string()>:
               	jmp	0x43d394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__sso_string::__sso_string(std::__sso_string&&)>:
               	jmp	0x43d6c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__sso_string::operator=(std::__sso_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d798 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__throw_insufficient_space(char const*, char const*)>:
               	pushq	%rbp
               	movq	%rdi, %r8
               	movq	%rsi, %rdx
               	movl	$105, %ecx
               	subq	%r8, %rdx
               	leaq	18812(%rip), %rsi       # 0x44519a <typeinfo name for kotlin::gc::GCSchedulerData+0x1cf1>
               	leaq	128(%rdx), %rax
               	movq	%rsp, %rbp
               	andq	$-16, %rax
               	subq	$112, %rsp
               	subq	%rax, %rsp
               	leaq	-105(%rbp), %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	leaq	15(%rsp), %rax
               	leaq	-105(%rbp), %rsi
               	movl	$26, %ecx
               	andq	$-16, %rax
               	leaq	104(%rax), %r9
               	movq	%rax, %rdi
               	rep		movsl	(%rsi), %es:(%rdi)
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	movq	%rdx, %rcx
               	rep		movsb	(%rsi), %es:(%rdi)
               	movb	$0, 104(%rax,%rdx)
               	movq	%rax, %rdi
               	callq	0x440423 <std::__throw_logic_error(char const*)>

<__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rdx, %r9
               	movl	$10, %r11d
               	movq	%rsp, %rbp
               	pushq	%rbx
               	leaq	18815(%rip), %rbx       # 0x445203 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d5a>
               	subq	$40, %rsp
               	leaq	15(%rsp), %rdi
               	andq	$-16, %rdi
               	leaq	24(%rdi), %rcx
               	movq	%rcx, %r8
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	decq	%r8
               	divq	%r11
               	movb	(%rbx,%rdx), %dl
               	movb	%dl, (%r8)
               	cmpq	$9, %r9
               	jbe	0x4408b4 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x48>
               	movq	%rax, %r9
               	jmp	0x440898 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x2c>
               	subq	%r8, %rcx
               	orl	$-1, %eax
               	movq	%rcx, %rdx
               	cmpq	%rsi, %rcx
               	ja	0x4408d0 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x64>
               	subq	%rcx, %rdi
               	movl	%edx, %eax
               	leaq	24(%rdi), %rsi
               	movq	%r10, %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	movq	-8(%rbp), %rbx
               	leave
               	retq

<__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>:
               	pushq	%r14
               	leaq	-1(%rdi,%rsi), %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	(%rbp), %al
               	testb	%al, %al
               	je	0x4409db <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x105>
               	cmpq	%r14, %rbx
               	jae	0x4409c7 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cmpb	$37, %al
               	jne	0x4409b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movb	1(%rbp), %al
               	cmpb	$115, %al
               	je	0x440926 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x50>
               	cmpb	$122, %al
               	je	0x440966 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x90>
               	cmpb	$37, %al
               	jne	0x4409b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	incq	%rbp
               	jmp	0x4409b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x44093f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x69>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x44094d <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x77>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	(%rax), %rax
               	movb	(%rax), %dl
               	testb	%dl, %dl
               	je	0x4409d2 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xfc>
               	cmpq	%r14, %rbx
               	je	0x4409c7 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	incq	%rbx
               	incq	%rax
               	movb	%dl, -1(%rbx)
               	jmp	0x440950 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x7a>
               	cmpb	$117, 2(%rbp)
               	jne	0x4409b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x440985 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xaf>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x440993 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xbd>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	%r14, %rsi
               	movq	(%rax), %rdx
               	movq	%rbx, %rdi
               	subq	%rbx, %rsi
               	callq	0x44086c <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>
               	testl	%eax, %eax
               	jle	0x4409c7 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cltq
               	addq	$3, %rbp
               	addq	%rax, %rbx
               	jmp	0x4408ef <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movb	(%rbp), %al
               	incq	%rbx
               	incq	%rbp
               	movb	%al, -1(%rbx)
               	jmp	0x4408ef <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x440808 <__gnu_cxx::__throw_insufficient_space(char const*, char const*)>
               	addq	$2, %rbp
               	jmp	0x4408ef <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rax
               	movb	$0, (%rbx)
               	popq	%rbx
               	subq	%r13, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_data(char*)>:
               	movq	%rsi, %rax
               	movq	%rsi, (%rdi)
               	retq
               	nop

<std::string::_M_rep() const>:
               	movq	(%rdi), %rax
               	subq	$24, %rax
               	retq

<std::string::_M_ibegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_iend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::_M_check(unsigned long, char const*) const>:
               	movq	(%rdi), %rcx
               	movq	%rsi, %rax
               	movq	-24(%rcx), %rcx
               	cmpq	%rsi, %rcx
               	jae	0x440a32 <std::string::_M_check(unsigned long, char const*) const+0x24>
               	pushq	%rsi
               	leaq	17762(%rip), %rdi       # 0x444f87 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x440586 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq
               	nop

<std::string::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	addq	%rax, %rsi
               	movq	(%rdi), %rax
               	subq	-24(%rax), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x440a56 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const+0x22>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x4404f8 <std::__throw_length_error(char const*)>
               	retq
               	nop

<std::string::_M_limit(unsigned long, unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq

<std::string::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x440a7e <std::string::_M_disjunct(char const*) const+0x14>
               	addq	-24(%rdx), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::string::_M_copy(char*, char const*, unsigned long)>:
               	movq	%rdx, %rcx
               	cmpq	$1, %rdx
               	jne	0x440a8d <std::string::_M_copy(char*, char const*, unsigned long)+0xe>
               	movb	(%rsi), %dl
               	movb	%dl, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440a94 <std::string::_M_copy(char*, char const*, unsigned long)+0x15>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::string::_M_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x440aa0 <std::string::_M_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440aaa <std::string::_M_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136b0 <memmove@plt>
               	retq

<std::string::_M_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x440ab7 <std::string::_M_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x440ac0 <std::string::_M_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq

<std::string::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	jmp	0x440ac1 <std::string::_S_copy_chars(char*, char*, char*)>

<std::string::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	jmp	0x440ace <std::string::_S_copy_chars(char*, char const*, char const*)>

<std::string::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x440af9 <std::string::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq

<std::string::_S_empty_rep()>:
               	leaq	233887(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	233879(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	233857(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::string::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::end() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x440b2c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::cend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::crbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x440b2c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::size() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::length() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::max_size() const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	retq
               	nop

<std::string::capacity() const>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rax
               	retq

<std::string::empty() const>:
               	movq	(%rdi), %rax
               	cmpq	$0, -24(%rax)
               	sete	%al
               	retq

<std::string::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::at(unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x440bcf <std::string::at(unsigned long) const+0x1b>
               	pushq	%rax
               	leaq	17398(%rip), %rdi       # 0x444fbe <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440586 <std::__throw_out_of_range_fmt(char const*, ...)>
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::back() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	leaq	-1(%rax,%rdx), %rax
               	retq
               	nop

<std::string::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	17583(%rip), %rdx       # 0x4450a1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rsi
               	movq	-24(%rsi), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x440c2d <std::string::copy(char*, unsigned long, unsigned long) const+0x47>
               	addq	%rbp, %rsi
               	movq	%rbx, %rdx
               	movq	%r12, %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::string::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rsi
               	testq	%rcx, %rcx
               	jne	0x440c6b <std::string::find(char const*, unsigned long, unsigned long) const+0x27>
               	cmpq	%rdx, %rsi
               	jae	0x440cdf <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x440cdb <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x440cdb <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movb	(%r12), %dl
               	movq	%rcx, %rbp
               	leaq	(%r13,%rsi), %rcx
               	movl	$1, %r14d
               	movq	%rcx, 8(%rsp)
               	leaq	(%r13,%rax), %rdi
               	subq	%rax, %rsi
               	subq	%rbp, %r14
               	movb	%dl, 31(%rsp)
               	leaq	31(%rsp), %r15
               	cmpq	%rbp, %rsi
               	jb	0x440cdb <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x440cdb <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440ccd <std::string::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%rbx, %rax
               	subq	%r13, %rax
               	jmp	0x440cdf <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%rbx), %rdi
               	subq	%rdi, %rsi
               	jmp	0x440c9b <std::string::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::find(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440c44 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440c44 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char, unsigned long) const>:
               	pushq	%rbp
               	orq	$-1, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rbx
               	movb	%sil, 12(%rsp)
               	movq	-24(%rbx), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x440d4f <std::string::find(char, unsigned long) const+0x39>
               	movq	%rdx, %rdi
               	leaq	12(%rsp), %rdx
               	subq	%rdi, %rsi
               	addq	%rbx, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440d4f <std::string::find(char, unsigned long) const+0x39>
               	subq	%rbx, %rax
               	movq	%rax, %rbp
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	cmpq	%rax, %rcx
               	ja	0x440dab <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x440dab <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x440da7 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x440d85 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::rfind(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440d5a <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440d5a <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x440e0e <std::string::rfind(char, unsigned long) const+0x30>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x440e0e <std::string::rfind(char, unsigned long) const+0x30>
               	leaq	-1(%rax), %rdx
               	cmpb	%sil, 1(%rdi,%rdx)
               	je	0x440e0e <std::string::rfind(char, unsigned long) const+0x30>
               	movq	%rdx, %rax
               	jmp	0x440df8 <std::string::rfind(char, unsigned long) const+0x1a>
               	retq
               	nop

<std::string::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%rbp, %rbp
               	je	0x440e4b <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%r13), %rdx
               	cmpq	-24(%rdx), %rbx
               	jae	0x440e4b <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	addq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x440e4f <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x440e24 <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_first_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440e10 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440e10 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440d16 <std::string::find(char, unsigned long) const>
               	nop

<std::string::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x440ed8 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x440ed8 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x440edc <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x440eb8 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x440edc <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::find_last_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440e8c <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440e8c <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440dde <std::string::rfind(char, unsigned long) const>
               	nop

<std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbp
               	movq	%rdx, %rbx
               	movq	-24(%rbp), %r12
               	cmpq	%r12, %rbx
               	jae	0x440f51 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x37>
               	leaq	(%rbp,%rbx), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440f55 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3b>
               	incq	%rbx
               	jmp	0x440f32 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::find_first_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440f1a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440f1a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rcx
               	movq	%rdx, %rax
               	movq	-24(%rcx), %rdi
               	cmpq	%rdi, %rax
               	jae	0x440fa4 <std::string::find_first_not_of(char, unsigned long) const+0x1a>
               	cmpb	%sil, (%rcx,%rax)
               	jne	0x440fa8 <std::string::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x440f94 <std::string::find_first_not_of(char, unsigned long) const+0xa>
               	orq	$-1, %rax
               	retq
               	nop

<std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x440ff3 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d2f4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440ff3 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x440fd5 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_last_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440faa <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440faa <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x44104f <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpb	%sil, (%rdi,%rax)
               	jne	0x44104f <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x441040 <std::string::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::string::compare(std::string const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441083 <std::string::compare(std::string const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x440adb <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&) const>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	16407(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r12, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4410e9 <std::string::compare(unsigned long, unsigned long, std::string const&) const+0x61>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x440adb <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16310(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	16268(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%rbp), %rsi
               	movq	8(%rsp), %r9
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	subq	%r13, %rbp
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441188 <std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const+0x96>
               	addq	$16, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x440adb <std::string::_S_compare(unsigned long, unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r8
               	movq	%rsi, %rdi
               	movq	-24(%r8), %rbp
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4411d9 <std::string::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x440adb <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	16061(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r8
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rsi
               	movq	%r12, %rdi
               	movq	-24(%rsi), %rbp
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	leaq	(%rsi,%r13), %rdi
               	movq	%r12, %rsi
               	movq	%rbp, %rdx
               	notq	%rcx
               	leaq	-1(%rcx), %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x44124e <std::string::compare(unsigned long, unsigned long, char const*) const+0x70>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x440adb <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	15954(%rip), %rdx       # 0x4450b4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%r8, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r12, %rdi
               	callq	0x43d2e7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4412b6 <std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x60>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x440adb <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::string::_Rep::_S_empty_rep()>:
               	leaq	231893(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::string::_Rep::_M_is_leaked() const>:
               	movl	16(%rdi), %eax
               	shrl	$31, %eax
               	retq
               	nop

<std::string::swap(std::string&)>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4412cc <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	je	0x4412f7 <std::string::swap(std::string&)+0x23>
               	movq	(%rbx), %rax
               	movl	$0, -8(%rax)
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4412cc <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	movq	(%rbp), %rax
               	je	0x441313 <std::string::swap(std::string&)+0x3f>
               	movl	$0, -8(%rax)
               	movq	(%rbx), %rdx
               	movq	%rax, (%rbx)
               	movq	%rdx, (%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::operator=(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4412d4 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4412d4 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_is_shared() const>:
               	movl	16(%rdi), %eax
               	testl	%eax, %eax
               	setg	%al
               	retq
               	nop

<std::string::_Rep::_M_set_leaked()>:
               	movl	$4294967295, 16(%rdi)   # imm = 0xFFFFFFFF
               	retq

<std::string::_Rep::_M_set_sharable()>:
               	movl	$0, 16(%rdi)
               	retq

<std::string::_Rep::_M_set_length_and_sharable(unsigned long)>:
               	cmpq	117889(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x441370 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)+0x18>
               	movl	$0, 16(%rdi)
               	movq	%rsi, (%rdi)
               	movb	$0, 24(%rdi,%rsi)
               	retq
               	nop

<std::string::_Rep::_M_refdata()>:
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	pushq	%rbx
               	cmpq	%rax, %rdi
               	jbe	0x441394 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x1c>
               	leaq	15999(%rip), %rdi       # 0x44520e <typeinfo name for kotlin::gc::GCSchedulerData+0x1d65>
               	callq	0x4404f8 <std::__throw_length_error(char const*)>
               	movq	%rdi, %rbx
               	cmpq	%rsi, %rdi
               	jbe	0x4413a7 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x2f>
               	leaq	(%rsi,%rsi), %rax
               	cmpq	%rax, %rdi
               	cmovbq	%rax, %rbx
               	leaq	57(%rbx), %rax
               	cmpq	$4096, %rax             # imm = 0x1000
               	jbe	0x4413d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	cmpq	%rsi, %rbx
               	jbe	0x4413d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	andl	$4095, %eax             # imm = 0xFFF
               	addq	$4096, %rbx             # imm = 0x1000
               	subq	%rax, %rbx
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	cmpq	%rax, %rbx
               	cmovaq	%rax, %rbx
               	leaq	25(%rbx), %rdi
               	callq	0x43bf19 <operator new(unsigned long)>
               	movq	%rbx, 8(%rax)
               	movl	$0, 16(%rax)
               	popq	%rbx
               	retq

<std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	testq	%rdi, %rdi
               	je	0x441429 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x3b>
               	movl	%esi, %ebp
               	xorl	%esi, %esi
               	movq	%rdi, %rbx
               	callq	0x441378 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movsbl	%bpl, %edx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440aab <std::string::_M_assign(char*, unsigned long, char)>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x441434 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x46>
               	leaq	231536(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rdx
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	xorl	%edi, %edi
               	callq	0x4413ee <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movl	%edx, %esi
               	movsbl	%sil, %esi
               	movq	%rcx, %rdx
               	callq	0x4413ee <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)>:
               	movsbl	%sil, %esi
               	jmp	0x4413ee <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	nop

<std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
               	jmp	0x43b5e5 <operator delete(void*)>
               	nop

<std::string::_Rep::_M_dispose(std::allocator<char> const&)>:
               	cmpq	117593(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x4414af <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	cmpq	$0, 117543(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x44149d <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x1d>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 16(%rdi)
               	jmp	0x4414a6 <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x26>
               	movl	16(%rdi), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 16(%rdi)
               	testl	%eax, %eax
               	jg	0x4414af <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	jmp	0x44147a <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	subq	$24, %rsp
               	movq	(%rdi), %rdi
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441480 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::string::clear()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	movq	(%rbx), %rdi
               	testb	%al, %al
               	je	0x441503 <std::string::clear()+0x39>
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441480 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	leaq	231334(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rbx)
               	jmp	0x44150e <std::string::clear()+0x44>
               	subq	$24, %rdi
               	xorl	%esi, %esi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	subq	%rdx, %r13
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rbp
               	leaq	(%r13,%rbp), %rax
               	leaq	(%rdx,%rsi), %r13
               	movq	%rax, 8(%rsp)
               	subq	%r13, %rbp
               	cmpq	-16(%rdi), %rax
               	jbe	0x441592 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x7e>
               	leaq	47(%rsp), %rax
               	movq	8(%rsp), %rdi
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rdx
               	movq	-16(%rax), %rsi
               	callq	0x441378 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	testq	%r14, %r14
               	leaq	24(%rax), %r15
               	je	0x4415c3 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	movq	(%rbx), %rsi
               	movq	%r14, %rdx
               	movq	%r15, %rdi
               	movq	%rax, 24(%rsp)
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	24(%rsp), %rax
               	jmp	0x4415c3 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	subq	$24, %rdi
               	movq	%rdx, %r15
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x44154f <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x3b>
               	testq	%rbp, %rbp
               	je	0x4415f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	cmpq	%r15, %r12
               	je	0x4415f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	movq	(%rbx), %rdi
               	addq	%r14, %r12
               	movq	%rbp, %rdx
               	leaq	(%rdi,%r13), %rsi
               	addq	%r12, %rdi
               	callq	0x440a95 <std::string::_M_move(char*, char const*, unsigned long)>
               	jmp	0x4415f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	testq	%rbp, %rbp
               	je	0x4415de <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xca>
               	movq	(%rbx), %rsi
               	leaq	24(%r14,%r12), %rdi
               	movq	%rbp, %rdx
               	addq	%rax, %rdi
               	addq	%r13, %rsi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441480 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r15, (%rbx)
               	movq	(%rbx), %rdi
               	movq	8(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::_M_leak_hard()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	cmpq	117180(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x441647 <std::string::_M_leak_hard()+0x35>
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	je	0x44163d <std::string::_M_leak_hard()+0x2b>
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbx), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nop

<std::string::_M_leak()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	callq	0x4412cc <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	jne	0x441667 <std::string::_M_leak()+0x1d>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x441612 <std::string::_M_leak_hard()>
               	popq	%rbx
               	retq
               	nop

<std::string::begin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44164a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::rend()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44166a <std::string::begin()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::end()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44164a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44168c <std::string::end()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::operator[](unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	callq	0x44164a <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::front()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44164a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::back()>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rbx
               	callq	0x44164a <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	decq	%rbx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::string::at(unsigned long)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x441719 <std::string::at(unsigned long)+0x1f>
               	leaq	14508(%rip), %rdi       # 0x444fbe <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440586 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	%rdi, %rbx
               	movq	%rsi, 8(%rsp)
               	callq	0x44164a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14509(%rip), %rdx       # 0x445002 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	cmovbeq	%rax, %rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	xorl	%ecx, %ecx
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::pop_back()>:
               	movq	(%rdi), %rax
               	movl	$1, %edx
               	movq	-24(%rax), %rsi
               	decq	%rsi
               	jmp	0x441738 <std::string::erase(unsigned long, unsigned long)>

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	movq	%rsi, %rax
               	subq	%rsi, %rdx
               	je	0x4417e8 <std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)+0x30>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rcx
               	subq	(%rdi), %rax
               	xorl	%ecx, %ecx
               	movq	%rax, %rsi
               	movq	%rax, %rbx
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rsi
               	popq	%rbx
               	popq	%rbp
               	retq
               	retq
               	nop

<std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	14363(%rip), %rcx       # 0x445016 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%r12, %rdx
               	movq	%rsi, %rbp
               	movq	%r13, %rsi
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movl	%r8d, 12(%rsp)
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rcx
               	movq	%r13, %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	testq	%r12, %r12
               	movl	12(%rsp), %r8d
               	je	0x441844 <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x5a>
               	movq	(%rbx), %rdi
               	movsbl	%r8b, %edx
               	movq	%r12, %rsi
               	addq	%rbp, %rdi
               	callq	0x440aab <std::string::_M_assign(char*, unsigned long, char)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::assign(unsigned long, char)>:
               	movq	(%rdi), %rax
               	movq	%rsi, %rcx
               	movsbl	%dl, %r8d
               	xorl	%esi, %esi
               	movq	-24(%rax), %rax
               	movq	%rax, %rdx
               	jmp	0x4417ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::string::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x441852 <std::string::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::string::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	14241(%rip), %rdx       # 0x445033 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x4417ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x4417ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	movq	-24(%rax), %rax
               	movl	%r8d, 4(%rsp)
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14136(%rip), %rdx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x4417ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x4417ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	movq	%rsi, %rdx
               	jmp	0x44193c <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>
               	nop

<std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rcx, %r12
               	movq	%r8, %rcx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	%r8, 8(%rsp)
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	8(%rsp), %r8
               	testq	%r8, %r8
               	je	0x441996 <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)+0x3a>
               	addq	(%rbp), %rbx
               	movq	%r8, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	addq	$16, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::assign(char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	14025(%rip), %rcx       # 0x445077 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	movq	-24(%rax), %rsi
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x440a6a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x4419ec <std::string::assign(char const*, unsigned long)+0x4a>
               	movq	(%rbx), %rax
               	movq	%rbp, %r8
               	movq	%r12, %rcx
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	popq	%rbx
               	popq	%rbp
               	movq	-24(%rax), %rdx
               	popq	%r12
               	jmp	0x44195c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4419d1 <std::string::assign(char const*, unsigned long)+0x2f>
               	movq	(%rbx), %rdi
               	movq	%r12, %rax
               	subq	%rdi, %rax
               	cmpq	%rax, %rbp
               	ja	0x441a17 <std::string::assign(char const*, unsigned long)+0x75>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x441a27 <std::string::assign(char const*, unsigned long)+0x85>
               	testq	%rax, %rax
               	je	0x441a27 <std::string::assign(char const*, unsigned long)+0x85>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440a95 <std::string::_M_move(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4419a2 <std::string::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %rax
               	subq	%rdx, %rax
               	leaq	13837(%rip), %rdx       # 0x445077 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rcx
               	movq	%rcx, %rbp
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x4419a2 <std::string::assign(char const*, unsigned long)>

<std::string::assign(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x4419a2 <std::string::assign(char const*, unsigned long)>

<std::string::operator=(char const*)>:
               	jmp	0x441a8c <std::string::assign(char const*)>
               	nop

<std::string::assign(std::initializer_list<char>)>:
               	jmp	0x4419a2 <std::string::assign(char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, char const*, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	13679(%rip), %rdx       # 0x445033 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	leaq	13644(%rip), %rcx       # 0x445033 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x440a6a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441b16 <std::string::insert(unsigned long, char const*, unsigned long)+0x5e>
               	popq	%rbx
               	movq	%rbp, %r8
               	movq	%r14, %rcx
               	popq	%rbp
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	xorl	%edx, %edx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x44195c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%r12), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441afb <std::string::insert(unsigned long, char const*, unsigned long)+0x43>
               	xorl	%edx, %edx
               	movq	%r13, %rsi
               	movq	%rbp, %rcx
               	movq	%r12, %rdi
               	subq	(%r12), %r14
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%r12), %rbx
               	movq	%rbp, %rdx
               	leaq	(%rbx,%r14), %rsi
               	addq	%r13, %rbx
               	leaq	(%rsi,%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x441b5a <std::string::insert(unsigned long, char const*, unsigned long)+0xa2>
               	cmpq	%rbx, %rsi
               	jb	0x441b5f <std::string::insert(unsigned long, char const*, unsigned long)+0xa7>
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	jmp	0x441b7b <std::string::insert(unsigned long, char const*, unsigned long)+0xc3>
               	subq	%r14, %r13
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	%rbp, %rdx
               	leaq	(%rbx,%rbp), %rsi
               	leaq	(%rbx,%r13), %rdi
               	subq	%r13, %rdx
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x441ab8 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rdx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdx), %rbx
               	leaq	13442(%rip), %rdx       # 0x445033 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	movq	-24(%rbx), %rax
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, %rbp
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	popq	%r8
               	movq	%rbp, %rcx
               	movq	%r13, %rsi
               	leaq	(%rbx,%rax), %rdx
               	movq	%r12, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441ab8 <std::string::insert(unsigned long, char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, std::string const&)>:
               	movq	(%rdx), %rax
               	xorl	%ecx, %ecx
               	movq	-24(%rax), %r8
               	jmp	0x441b94 <std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>

<std::string::insert(unsigned long, char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441ab8 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::_Rep::_M_refcopy()>:
               	cmpq	115661(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x441c28 <std::string::_Rep::_M_refcopy()+0x1c>
               	cmpq	$0, 115611(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x441c25 <std::string::_Rep::_M_refcopy()+0x19>
               	lock
               	incl	16(%rdi)
               	jmp	0x441c28 <std::string::_Rep::_M_refcopy()+0x1c>
               	incl	16(%rdi)
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	addq	%rdx, %rdi
               	movq	%rsi, %rdx
               	movq	8(%rbx), %rsi
               	callq	0x441378 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	(%rbx), %rdx
               	movq	%rax, %r12
               	leaq	24(%rax), %rbp
               	testq	%rdx, %rdx
               	je	0x441c62 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)+0x34>
               	leaq	24(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::string::reserve(unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdi
               	cmpq	-16(%rdi), %rsi
               	je	0x441ccc <std::string::reserve(unsigned long)+0x56>
               	movq	(%rbp), %rdi
               	movq	%rbx, %rdx
               	movq	-24(%rdi), %rax
               	cmpq	%rax, %rbx
               	leaq	15(%rsp), %rbx
               	cmovbq	%rax, %rdx
               	movq	%rbx, %rsi
               	subq	$24, %rdi
               	subq	%rax, %rdx
               	callq	0x441c2e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	movq	%rbx, %rsi
               	movq	%rax, %r12
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441480 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbp)
               	jmp	0x441cd9 <std::string::reserve(unsigned long)+0x63>
               	subq	$24, %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441c8d <std::string::reserve(unsigned long)+0x17>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::shrink_to_fit()>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rdx
               	cmpq	%rdx, -24(%rax)
               	jae	0x441d07 <std::string::shrink_to_fit()+0x25>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43bf77 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43bfd5 <__cxa_end_catch>
               	retq

<std::string::append(std::string const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rsi), %rax
               	movq	-24(%rax), %r12
               	testq	%r12, %r12
               	je	0x441d6d <std::string::append(std::string const&)+0x65>
               	movq	(%rdi), %rdi
               	movq	%rsi, %r13
               	movq	-24(%rdi), %rbp
               	addq	%r12, %rbp
               	cmpq	-16(%rdi), %rbp
               	jbe	0x441d3e <std::string::append(std::string const&)+0x36>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	jmp	0x441d4b <std::string::append(std::string const&)+0x43>
               	subq	$24, %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441d31 <std::string::append(std::string const&)+0x29>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	%r12, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::operator+=(std::string const&)>:
               	jmp	0x441d08 <std::string::append(std::string const&)>
               	nop

<std::string::append(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	13048(%rip), %rdx       # 0x44508c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	pushq	%rbp
               	movq	%r12, %rsi
               	movq	%rdi, %rbp
               	movq	%r14, %rdi
               	pushq	%rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%r14), %rax
               	movq	-24(%rax), %rbx
               	subq	%r12, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x441e0b <std::string::append(std::string const&, unsigned long, unsigned long)+0x8d>
               	movq	(%rbp), %rdi
               	movq	-24(%rdi), %r13
               	addq	%rbx, %r13
               	cmpq	-16(%rdi), %r13
               	jbe	0x441dd8 <std::string::append(std::string const&, unsigned long, unsigned long)+0x5a>
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	jmp	0x441de5 <std::string::append(std::string const&, unsigned long, unsigned long)+0x67>
               	subq	$24, %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441dcb <std::string::append(std::string const&, unsigned long, unsigned long)+0x4d>
               	movq	(%rbp), %rdi
               	movq	(%r14), %rsi
               	movq	%rbx, %rdx
               	addq	%r12, %rsi
               	addq	-24(%rdi), %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%r13, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rbx
               	movq	%rbp, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::append(char const*, unsigned long)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rdx, %rdx
               	je	0x441eac <std::string::append(char const*, unsigned long)+0x94>
               	movq	%rsi, %rbp
               	leaq	12887(%rip), %rcx       # 0x44508c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	xorl	%esi, %esi
               	movq	%rdx, %r13
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%r13, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x441e6b <std::string::append(char const*, unsigned long)+0x53>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x440a6a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441e7a <std::string::append(char const*, unsigned long)+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	jmp	0x441e8b <std::string::append(char const*, unsigned long)+0x73>
               	subq	$24, %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441e4f <std::string::append(char const*, unsigned long)+0x37>
               	jmp	0x441e8b <std::string::append(char const*, unsigned long)+0x73>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	subq	(%rbx), %rbp
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	addq	(%rbx), %rbp
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	%r13, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::operator+=(std::initializer_list<char>)>:
               	jmp	0x441e18 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x441e18 <std::string::append(char const*, unsigned long)>

<std::string::operator+=(char const*)>:
               	jmp	0x441ebe <std::string::append(char const*)>
               	nop

<std::string::append(std::initializer_list<char>)>:
               	jmp	0x441e18 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(unsigned long, char)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rsi, %rsi
               	je	0x441f5c <std::string::append(unsigned long, char)+0x72>
               	movq	%rsi, %rbp
               	movsbl	%dl, %r13d
               	leaq	12677(%rip), %rcx       # 0x44508c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %rdx
               	xorl	%esi, %esi
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%rbp, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x441f2e <std::string::append(unsigned long, char)+0x44>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	jmp	0x441f3b <std::string::append(unsigned long, char)+0x51>
               	subq	$24, %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441f21 <std::string::append(unsigned long, char)+0x37>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movl	%r13d, %edx
               	addq	-24(%rdi), %rdi
               	callq	0x440aab <std::string::_M_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long, char)>:
               	pushq	%r13
               	leaq	12981(%rip), %rcx       # 0x445226 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d7d>
               	pushq	%r12
               	movl	%edx, %r12d
               	movq	%rsi, %rdx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	movq	(%rdi), %rax
               	movq	-24(%rax), %r13
               	movq	%r13, %rsi
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	cmpq	%r13, %rbx
               	jbe	0x441fb1 <std::string::resize(unsigned long, char)+0x49>
               	subq	%r13, %rbx
               	popq	%r8
               	movsbl	%r12b, %edx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441eea <std::string::append(unsigned long, char)>
               	jae	0x441fc9 <std::string::resize(unsigned long, char)+0x61>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	orq	$-1, %rdx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441738 <std::string::erase(unsigned long, unsigned long)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x441f68 <std::string::resize(unsigned long, char)>
               	nop

<std::string::push_back(char)>:
               	pushq	%r12
               	movl	%esi, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rax
               	leaq	1(%rax), %rbx
               	cmpq	-16(%rdi), %rbx
               	jbe	0x442002 <std::string::push_back(char)+0x28>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	jmp	0x44200f <std::string::push_back(char)+0x35>
               	subq	$24, %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441ff5 <std::string::push_back(char)+0x1b>
               	movq	(%rbp), %rax
               	movq	%rbx, %rsi
               	movq	-24(%rax), %rdx
               	movb	%r12b, (%rax,%rdx)
               	movq	(%rbp), %rdi
               	popq	%rbx
               	popq	%rbp
               	subq	$24, %rdi
               	popq	%r12
               	jmp	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	nop

<std::string::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x441fda <std::string::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rsi, 8(%rsp)
               	callq	0x4412cc <std::string::_Rep::_M_is_leaked() const>
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	jne	0x44206a <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)+0x28>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x441c0c <std::string::_Rep::_M_refcopy()>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	jmp	0x441c2e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	leaq	14(%rsp), %rax
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rax, %rsi
               	callq	0x442042 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::assign(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	cmpq	%rdi, (%rbx)
               	je	0x4420e2 <std::string::assign(std::string const&)+0x3e>
               	leaq	14(%rsp), %rbp
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rbp, %rsi
               	callq	0x442042 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rbp, %rsi
               	movq	%rax, %r12
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441480 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbx)
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::string const&)>:
               	jmp	0x4420a4 <std::string::assign(std::string const&)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	228235(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	movq	%rbp, %rdi
               	addq	$24, %rax
               	movq	%rax, (%rbp)
               	movq	(%r12), %rax
               	movq	-24(%rax), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	addq	%rbx, %rsi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441e18 <std::string::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x441d08 <std::string::append(std::string const&)>
               	popq	%rdx
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	228136(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	addq	$24, %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	(%rdx), %rax
               	movq	-24(%rax), %rsi
               	incq	%rsi
               	callq	0x441c76 <std::string::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x441eea <std::string::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441d08 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x44207a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441d08 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rdi, %rsi
               	je	0x442249 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x45>
               	movq	%rsi, %r14
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441378 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440ac1 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442254 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x50>
               	leaq	227920(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442204 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x4422ce <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x4422c2 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441378 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440ac1 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x4422d9 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	12146(%rip), %rdi       # 0x44523b <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x440423 <std::__throw_logic_error(char const*)>
               	leaq	227787(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	%r8, 8(%rsp)
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11759(%rip), %rdx       # 0x445103 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	%rbp, %rbx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	movq	%r8, %rdx
               	callq	0x442278 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442278 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	leaq	11662(%rip), %rdx       # 0x445103 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %r12
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	addq	%rbx, %r12
               	leaq	(%rbx,%rax), %rdi
               	movq	%r12, %rsi
               	callq	0x442278 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbp)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11578(%rip), %rdx       # 0x445103 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	addq	%rbp, %rbx
               	leaq	15(%rsp), %rdx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	callq	0x442278 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	11546(%rip), %rdx       # 0x44511e <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x4423a0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x44248c <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x442480 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441378 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440ace <std::string::_S_copy_chars(char*, char const*, char const*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x441358 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442497 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	11700(%rip), %rdi       # 0x44523b <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x440423 <std::__throw_logic_error(char const*)>
               	leaq	227341(%rip), %rax      # 0x479ca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	movq	%rsi, %r8
               	pushq	%rbx
               	orq	$-1, %rsi
               	movq	%rdi, %rbx
               	testq	%r8, %r8
               	je	0x4424c9 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x25>
               	xorl	%eax, %eax
               	movq	%rsi, %rcx
               	movq	%r8, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%r8,%rax), %rsi
               	movq	%r8, %rdi
               	callq	0x442436 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442436 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x442436 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	11060(%rip), %rdx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r14
               	movq	%r8, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	subq	$24, %rsp
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	movq	%r14, %rdx
               	leaq	11014(%rip), %rcx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	movq	-24(%rax), %r12
               	subq	%r13, %r12
               	cmpq	%r15, %r12
               	cmovaq	%r15, %r12
               	movq	%r12, %rsi
               	callq	0x440a34 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x440a6a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x442583 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x7b>
               	movq	%rbp, %rdi
               	movq	%r14, %r8
               	movq	%rbx, %rcx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	callq	0x44195c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%rax, %rbp
               	jmp	0x442634 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44133e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442567 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	(%rbp), %rax
               	leaq	(%rbx,%r14), %rsi
               	leaq	(%rax,%r13), %rcx
               	cmpq	%rcx, %rsi
               	jbe	0x4425ed <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	(%r13,%r12), %rdx
               	addq	%rax, %rdx
               	cmpq	%rdx, %rbx
               	jae	0x4425ed <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	8(%rsp), %r15
               	leaq	7(%rsp), %rcx
               	movq	%r14, %rdx
               	movq	%rbx, %rsi
               	movq	%r15, %rdi
               	callq	0x4424ee <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	movq	8(%rsp), %rcx
               	movq	%r14, %r8
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x44195c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%r15, %rdi
               	movq	%rax, %rbp
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	jmp	0x442634 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	subq	%rax, %rbx
               	cmpq	%rcx, %rsi
               	jbe	0x4425fb <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xf3>
               	addq	%r14, %rbx
               	subq	%r12, %rbx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movq	%r14, %rcx
               	callq	0x441514 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rdi
               	movq	%r14, %rdx
               	leaq	(%rdi,%rbx), %rsi
               	addq	%r13, %rdi
               	callq	0x440a7f <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x442634 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	%rax, %rbx
               	movq	%r15, %rdi
               	callq	0x4414b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::replace(unsigned long, unsigned long, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%r9, %r14
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	10725(%rip), %rdx       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%r8, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rcx, %rdi
               	pushq	%rbx
               	movq	(%rcx), %rbx
               	movq	-24(%rbx), %rax
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %r14
               	callq	0x440a0e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rcx
               	movq	%r14, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x4426ca <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x4426ca <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	addq	%rcx, %r8
               	jmp	0x442714 <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442508 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x442436 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<bool __gnu_cxx::operator==<char*, std::string>(__gnu_cxx::__normal_iterator<char*, std::string> const&, __gnu_cxx::__normal_iterator<char*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::random_device::_M_init(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	10986(%rip), %rsi       # 0x445272 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x441196 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x4427c0 <std::random_device::_M_init(std::string const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x4427f2 <std::random_device::_M_init(std::string const&)+0x7e>
               	testl	%eax, %eax
               	je	0x4427f2 <std::random_device::_M_init(std::string const&)+0x7e>
               	movl	$1, %eax
               	leaq	10935(%rip), %r12       # 0x445265 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x4427f9 <std::random_device::_M_init(std::string const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x442811 <std::random_device::_M_init(std::string const&)+0x9d>
               	leaq	10910(%rip), %rsi       # 0x445265 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x441196 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4427f9 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	10912(%rip), %rsi       # 0x44527a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x441196 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4427f9 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	10905(%rip), %rdi       # 0x445286 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440693 <std::__throw_runtime_error(char const*)>
               	leaq	10860(%rip), %r12       # 0x445265 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10935(%rip), %rsi       # 0x4452b7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c00 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x4427e6 <std::random_device::_M_init(std::string const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_init_pretr1(std::string const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10901(%rip), %rsi       # 0x4452ba <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x441196 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442862 <std::random_device::_M_init_pretr1(std::string const&)+0x4c>
               	movq	(%rbx), %rbx
               	xorl	%edx, %edx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413c10 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	je	0x442856 <std::random_device::_M_init_pretr1(std::string const&)+0x40>
               	movq	8(%rsp), %rdx
               	cmpb	$0, (%rdx)
               	je	0x442867 <std::random_device::_M_init_pretr1(std::string const&)+0x51>
               	leaq	10793(%rip), %rdi       # 0x445286 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440693 <std::__throw_runtime_error(char const*)>
               	movl	$5489, %eax             # imm = 0x1571
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	0x442a8c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::bad_cast::what() const>:
               	leaq	10817(%rip), %rax       # 0x4452c2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e19>
               	retq

<std::bad_cast::~bad_cast()>:
               	leaq	111679(%rip), %rax      # 0x45dcc8 <vtable for std::bad_cast>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::bad_cast::~bad_cast()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x442882 <std::bad_cast::~bad_cast()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>
               	nop

<std::bad_typeid::what() const>:
               	leaq	10779(%rip), %rax       # 0x4452d0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e27>
               	retq

<std::bad_typeid::~bad_typeid()>:
               	leaq	111691(%rip), %rax      # 0x45dd08 <vtable for std::bad_typeid>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bb10 <std::exception::~exception()>
               	nop

<std::bad_typeid::~bad_typeid()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4428b6 <std::bad_typeid::~bad_typeid()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bf14 <operator delete(void*, unsigned long)>

<std::(anonymous namespace)::__x86_rdrand()>:
               	subq	$24, %rsp
               	movl	$100, %edx
               	movl	$1, %ecx
               	rdrandl	%eax
               	movl	%eax, 12(%rsp)
               	cmovbl	%ecx, %eax
               	testl	%eax, %eax
               	jne	0x44290d <std::(anonymous namespace)::__x86_rdrand()+0x2c>
               	decl	%edx
               	jne	0x4428ef <std::(anonymous namespace)::__x86_rdrand()+0xe>
               	leaq	10712(%rip), %rdi       # 0x4452e0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e37>
               	callq	0x440693 <std::__throw_runtime_error(char const*)>
               	movl	12(%rsp), %eax
               	addq	$24, %rsp
               	retq

<std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	10568(%rip), %rsi       # 0x445272 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x43e9ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x442962 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x442994 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	testl	%eax, %eax
               	je	0x442994 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	movl	$1, %eax
               	leaq	10517(%rip), %r12       # 0x445265 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x44299b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x4429b3 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
               	leaq	10492(%rip), %rsi       # 0x445265 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x43e9ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x44299b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10494(%rip), %rsi       # 0x44527a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x43e9ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x44299b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10487(%rip), %rdi       # 0x445286 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440693 <std::__throw_runtime_error(char const*)>
               	leaq	10442(%rip), %r12       # 0x445265 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10517(%rip), %rsi       # 0x4452b7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c00 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x442988 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_fini()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4429c5 <std::random_device::_M_fini()+0xd>
               	jmp	0x413c20 <fclose@plt>
               	retq

<std::random_device::_M_getval()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpq	$0, (%rdi)
               	jne	0x4429db <std::random_device::_M_getval()+0x15>
               	callq	0x4428e1 <std::(anonymous namespace)::__x86_rdrand()>
               	jmp	0x442a2c <std::random_device::_M_getval()+0x66>
               	movq	%rdi, %r12
               	movl	$4, %ebx
               	leaq	12(%rsp), %rbp
               	movq	(%r12), %rdi
               	callq	0x413c30 <fileno@plt>
               	movq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movl	%eax, %edi
               	callq	0x413c40 <read@plt>
               	testl	%eax, %eax
               	jle	0x442a12 <std::random_device::_M_getval()+0x4c>
               	cltq
               	addq	%rax, %rbp
               	subq	%rax, %rbx
               	jne	0x4429e8 <std::random_device::_M_getval()+0x22>
               	movl	12(%rsp), %eax
               	jmp	0x442a2c <std::random_device::_M_getval()+0x66>
               	incl	%eax
               	jne	0x442a20 <std::random_device::_M_getval()+0x5a>
               	callq	0x413820 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x4429e8 <std::random_device::_M_getval()+0x22>
               	leaq	10459(%rip), %rdi       # 0x445302 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e59>
               	callq	0x440693 <std::__throw_runtime_error(char const*)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::random_device::_M_getentropy() const>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x442a87 <std::random_device::_M_getentropy() const+0x51>
               	subq	$24, %rsp
               	callq	0x413c30 <fileno@plt>
               	testl	%eax, %eax
               	jns	0x442a50 <std::random_device::_M_getentropy() const+0x1a>
               	xorps	%xmm0, %xmm0
               	jmp	0x442a82 <std::random_device::_M_getentropy() const+0x4c>
               	movl	%eax, %edi
               	leaq	12(%rsp), %rdx
               	xorl	%eax, %eax
               	movl	$2147766784, %esi       # imm = 0x80045200
               	callq	0x413c50 <ioctl@plt>
               	testl	%eax, %eax
               	js	0x442a4b <std::random_device::_M_getentropy() const+0x15>
               	movl	12(%rsp), %eax
               	testl	%eax, %eax
               	js	0x442a4b <std::random_device::_M_getentropy() const+0x15>
               	cmpl	$32, %eax
               	jle	0x442a7c <std::random_device::_M_getentropy() const+0x46>
               	movl	$32, 12(%rsp)
               	cvtsi2sdl	12(%rsp), %xmm0
               	addq	$24, %rsp
               	retq
               	xorps	%xmm0, %xmm0
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>:
               	andl	$-1, %esi
               	movl	$1, %edx
               	movq	%rsi, (%rdi)
               	movq	-8(%rdi,%rdx,8), %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	$1812433253, %rax, %rax # imm = 0x6C078965
               	addl	%edx, %eax
               	movq	%rax, (%rdi,%rdx,8)
               	incq	%rdx
               	cmpq	$624, %rdx              # imm = 0x270
               	jne	0x442a97 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0xb>
               	movq	$624, 4992(%rdi)        # imm = 0x270
               	retq
               	nop

<std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10207(%rip), %rsi       # 0x4452ba <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x43e9ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	movl	$5489, %esi             # imm = 0x1571
               	testl	%eax, %eax
               	je	0x442b20 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	movq	(%rbx), %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x413c10 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	movq	%rax, %rsi
               	je	0x442b14 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
               	movq	8(%rsp), %rax
               	cmpb	$0, (%rax)
               	je	0x442b20 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	leaq	10247(%rip), %rdi       # 0x445322 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e79>
               	callq	0x440693 <std::__throw_runtime_error(char const*)>
               	movq	%rbp, %rdi
               	callq	0x442a8c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>:
               	jmp	0x442a8c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::min()>:
               	xorl	%eax, %eax
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::max()>:
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>:
               	xorl	%eax, %eax
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	3168(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442b76 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x38>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$227, %rax
               	jne	0x442b45 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7>
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	-1824(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442bbc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7e>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$623, %rax              # imm = 0x26F
               	jne	0x442b8b <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x4d>
               	movq	4984(%rdi), %rax
               	movq	(%rdi), %rdx
               	andq	$-2147483648, %rax      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	%rdx
               	xorq	3168(%rdi), %rdx
               	andl	$1, %eax
               	je	0x442bfc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0xbe>
               	movl	$2567483615, %eax       # imm = 0x9908B0DF
               	movq	$0, 4992(%rdi)
               	xorq	%rdx, %rax
               	movq	%rax, 4984(%rdi)
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)>:
               	pushq	%r12
               	movl	$624, %r12d             # imm = 0x270
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	4992(%rbp), %rax
               	movq	%r12, %rdx
               	subq	%rax, %rdx
               	cmpq	%rbx, %rdx
               	jae	0x442c46 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x34>
               	movq	%rbp, %rdi
               	leaq	-624(%rax,%rbx), %rbx
               	callq	0x442b3e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	jmp	0x442c22 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x10>
               	addq	%rbx, %rax
               	popq	%rbx
               	movq	%rax, 4992(%rbp)
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>:
               	cmpq	$623, 4992(%rdi)        # imm = 0x26F
               	pushq	%rbx
               	movq	%rdi, %rbx
               	jbe	0x442c6c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()+0x16>
               	callq	0x442b3e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	movq	4992(%rbx), %rax
               	leaq	1(%rax), %rdx
               	movq	(%rbx,%rax,8), %rax
               	movq	%rdx, 4992(%rbx)
               	popq	%rbx
               	movq	%rax, %rcx
               	shrq	$11, %rcx
               	movl	%ecx, %edx
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$7, %rax
               	andl	$2636928640, %eax       # imm = 0x9D2C5680
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$15, %rax
               	andl	$4022730752, %eax       # imm = 0xEFC60000
               	xorq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	$18, %rdx
               	xorq	%rdx, %rax
               	retq

<std::random_device::_M_getval_pretr1()>:
               	pushq	%rax
               	callq	0x442c56 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
               	popq	%rdx
               	retq
               	nop
		...
               	addb	%al, (%rax)

<__libc_csu_init>:
               	pushq	%r15
               	movq	%rdx, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movl	%edi, %r13d
               	pushq	%r12
               	leaq	110664(%rip), %r12      # 0x45dd30 <__init_array_start>
               	pushq	%rbp
               	leaq	110728(%rip), %rbp      # 0x45dd78 <_DYNAMIC>
               	pushq	%rbx
               	subq	%r12, %rbp
               	subq	$8, %rsp
               	callq	0x413640 <_init>
               	sarq	$3, %rbp
               	je	0x442d1e <__libc_csu_init+0x4e>
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	movq	%r15, %rdx
               	movq	%r14, %rsi
               	movl	%r13d, %edi
               	callq	*(%r12,%rbx,8)
               	addq	$1, %rbx
               	cmpq	%rbx, %rbp
               	jne	0x442d08 <__libc_csu_init+0x38>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<__libc_csu_fini>:
               	retq
               	nopw	%cs:(%rax,%rax)

<atexit>:
               	leaq	112049(%rip), %rax      # 0x45e2f8 <__dso_handle>
               	xorl	%edx, %edx
               	testq	%rax, %rax
               	je	0x442d51 <atexit+0x11>
               	movq	(%rax), %rdx
               	xorl	%esi, %esi
               	jmp	0x413b00 <__cxa_atexit@plt>

<__do_global_ctors_aux>:
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%rbx
               	movl	$4548744, %ebx          # imm = 0x456888
               	pushq	%rdx
               	movq	(%rbx), %rax
               	cmpq	$-1, %rax
               	je	0x442d74 <__do_global_ctors_aux+0x1c>
               	callq	*%rax
               	subq	$8, %rbx
               	jmp	0x442d63 <__do_global_ctors_aux+0xb>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

Disassembly of section .fini:

<_fini>:
               	subq	$8, %rsp
               	callq	0x41527a <__do_global_dtors_aux>
               	addq	$8, %rsp
               	retq
