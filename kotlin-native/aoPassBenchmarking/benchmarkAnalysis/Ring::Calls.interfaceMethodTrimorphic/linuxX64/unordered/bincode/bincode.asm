
../../benchmarkAnalysis/Ring::Calls.interfaceMethodTrimorphic/linuxX64/unordered/main.kexe:	file format elf64-x86-64

Disassembly of section .init:

<_init>:
               	subq	$8, %rsp
               	movq	317797(%rip), %rax      # 0x460fb0 <write+0x460fb0>
               	testq	%rax, %rax
               	je	0x413655 <_init+0x15>
               	callq	0x413690 <__gmon_start__@plt>
               	callq	0x4152d1 <frame_dummy>
               	callq	0x442ef8 <__do_global_ctors_aux>
               	addq	$8, %rsp
               	retq

Disassembly of section .plt:

<.plt>:
               	pushq	317818(%rip)            # 0x460ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
               	jmpq	*317820(%rip)           # 0x460ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
               	nop
               	nop
               	nop
               	nop

<__libc_start_main@plt>:
               	jmpq	*317818(%rip)           # 0x461000 <_GLOBAL_OFFSET_TABLE_+0x18>
               	pushq	$0
               	jmp	0x413670 <.plt>

<__gmon_start__@plt>:
               	jmpq	*317810(%rip)           # 0x461008 <_GLOBAL_OFFSET_TABLE_+0x20>
               	pushq	$1
               	jmp	0x413670 <.plt>

<__tls_get_addr@plt>:
               	jmpq	*317802(%rip)           # 0x461010 <_GLOBAL_OFFSET_TABLE_+0x28>
               	pushq	$2
               	jmp	0x413670 <.plt>

<memmove@plt>:
               	jmpq	*317794(%rip)           # 0x461018 <_GLOBAL_OFFSET_TABLE_+0x30>
               	pushq	$3
               	jmp	0x413670 <.plt>

<calloc@plt>:
               	jmpq	*317786(%rip)           # 0x461020 <_GLOBAL_OFFSET_TABLE_+0x38>
               	pushq	$4
               	jmp	0x413670 <.plt>

<free@plt>:
               	jmpq	*317778(%rip)           # 0x461028 <_GLOBAL_OFFSET_TABLE_+0x40>
               	pushq	$5
               	jmp	0x413670 <.plt>

<strlen@plt>:
               	jmpq	*317770(%rip)           # 0x461030 <_GLOBAL_OFFSET_TABLE_+0x48>
               	pushq	$6
               	jmp	0x413670 <.plt>

<memcpy@plt>:
               	jmpq	*317762(%rip)           # 0x461038 <_GLOBAL_OFFSET_TABLE_+0x50>
               	pushq	$7
               	jmp	0x413670 <.plt>

<_Unwind_Resume@plt>:
               	jmpq	*317754(%rip)           # 0x461040 <_GLOBAL_OFFSET_TABLE_+0x58>
               	pushq	$8
               	jmp	0x413670 <.plt>

<memset@plt>:
               	jmpq	*317746(%rip)           # 0x461048 <_GLOBAL_OFFSET_TABLE_+0x60>
               	pushq	$9
               	jmp	0x413670 <.plt>

<sched_yield@plt>:
               	jmpq	*317738(%rip)           # 0x461050 <_GLOBAL_OFFSET_TABLE_+0x68>
               	pushq	$10
               	jmp	0x413670 <.plt>

<pthread_mutex_lock@plt>:
               	jmpq	*317730(%rip)           # 0x461058 <_GLOBAL_OFFSET_TABLE_+0x70>
               	pushq	$11
               	jmp	0x413670 <.plt>

<pthread_cond_timedwait@plt>:
               	jmpq	*317722(%rip)           # 0x461060 <_GLOBAL_OFFSET_TABLE_+0x78>
               	pushq	$12
               	jmp	0x413670 <.plt>

<pthread_mutex_unlock@plt>:
               	jmpq	*317714(%rip)           # 0x461068 <_GLOBAL_OFFSET_TABLE_+0x80>
               	pushq	$13
               	jmp	0x413670 <.plt>

<pthread_self@plt>:
               	jmpq	*317706(%rip)           # 0x461070 <_GLOBAL_OFFSET_TABLE_+0x88>
               	pushq	$14
               	jmp	0x413670 <.plt>

<pthread_setname_np@plt>:
               	jmpq	*317698(%rip)           # 0x461078 <_GLOBAL_OFFSET_TABLE_+0x90>
               	pushq	$15
               	jmp	0x413670 <.plt>

<memcmp@plt>:
               	jmpq	*317690(%rip)           # 0x461080 <_GLOBAL_OFFSET_TABLE_+0x98>
               	pushq	$16
               	jmp	0x413670 <.plt>

<fputs@plt>:
               	jmpq	*317682(%rip)           # 0x461088 <_GLOBAL_OFFSET_TABLE_+0xa0>
               	pushq	$17
               	jmp	0x413670 <.plt>

<clock_gettime@plt>:
               	jmpq	*317674(%rip)           # 0x461090 <_GLOBAL_OFFSET_TABLE_+0xa8>
               	pushq	$18
               	jmp	0x413670 <.plt>

<syscall@plt>:
               	jmpq	*317666(%rip)           # 0x461098 <_GLOBAL_OFFSET_TABLE_+0xb0>
               	pushq	$19
               	jmp	0x413670 <.plt>

<getrusage@plt>:
               	jmpq	*317658(%rip)           # 0x4610a0 <_GLOBAL_OFFSET_TABLE_+0xb8>
               	pushq	$20
               	jmp	0x413670 <.plt>

<snprintf@plt>:
               	jmpq	*317650(%rip)           # 0x4610a8 <_GLOBAL_OFFSET_TABLE_+0xc0>
               	pushq	$21
               	jmp	0x413670 <.plt>

<pthread_key_create@plt>:
               	jmpq	*317642(%rip)           # 0x4610b0 <_GLOBAL_OFFSET_TABLE_+0xc8>
               	pushq	$22
               	jmp	0x413670 <.plt>

<pthread_setspecific@plt>:
               	jmpq	*317634(%rip)           # 0x4610b8 <_GLOBAL_OFFSET_TABLE_+0xd0>
               	pushq	$23
               	jmp	0x413670 <.plt>

<sysconf@plt>:
               	jmpq	*317626(%rip)           # 0x4610c0 <_GLOBAL_OFFSET_TABLE_+0xd8>
               	pushq	$24
               	jmp	0x413670 <.plt>

<mmap@plt>:
               	jmpq	*317618(%rip)           # 0x4610c8 <_GLOBAL_OFFSET_TABLE_+0xe0>
               	pushq	$25
               	jmp	0x413670 <.plt>

<__errno_location@plt>:
               	jmpq	*317610(%rip)           # 0x4610d0 <_GLOBAL_OFFSET_TABLE_+0xe8>
               	pushq	$26
               	jmp	0x413670 <.plt>

<strerror@plt>:
               	jmpq	*317602(%rip)           # 0x4610d8 <_GLOBAL_OFFSET_TABLE_+0xf0>
               	pushq	$27
               	jmp	0x413670 <.plt>

<munmap@plt>:
               	jmpq	*317594(%rip)           # 0x4610e0 <_GLOBAL_OFFSET_TABLE_+0xf8>
               	pushq	$28
               	jmp	0x413670 <.plt>

<vsnprintf@plt>:
               	jmpq	*317586(%rip)           # 0x4610e8 <_GLOBAL_OFFSET_TABLE_+0x100>
               	pushq	$29
               	jmp	0x413670 <.plt>

<strncpy@plt>:
               	jmpq	*317578(%rip)           # 0x4610f0 <_GLOBAL_OFFSET_TABLE_+0x108>
               	pushq	$30
               	jmp	0x413670 <.plt>

<strncat@plt>:
               	jmpq	*317570(%rip)           # 0x4610f8 <_GLOBAL_OFFSET_TABLE_+0x110>
               	pushq	$31
               	jmp	0x413670 <.plt>

<__ctype_toupper_loc@plt>:
               	jmpq	*317562(%rip)           # 0x461100 <_GLOBAL_OFFSET_TABLE_+0x118>
               	pushq	$32
               	jmp	0x413670 <.plt>

<strstr@plt>:
               	jmpq	*317554(%rip)           # 0x461108 <_GLOBAL_OFFSET_TABLE_+0x120>
               	pushq	$33
               	jmp	0x413670 <.plt>

<strtol@plt>:
               	jmpq	*317546(%rip)           # 0x461110 <_GLOBAL_OFFSET_TABLE_+0x128>
               	pushq	$34
               	jmp	0x413670 <.plt>

<madvise@plt>:
               	jmpq	*317538(%rip)           # 0x461118 <_GLOBAL_OFFSET_TABLE_+0x130>
               	pushq	$35
               	jmp	0x413670 <.plt>

<access@plt>:
               	jmpq	*317530(%rip)           # 0x461120 <_GLOBAL_OFFSET_TABLE_+0x138>
               	pushq	$36
               	jmp	0x413670 <.plt>

<mprotect@plt>:
               	jmpq	*317522(%rip)           # 0x461128 <_GLOBAL_OFFSET_TABLE_+0x140>
               	pushq	$37
               	jmp	0x413670 <.plt>

<write@plt>:
               	jmpq	*317514(%rip)           # 0x461130 <_GLOBAL_OFFSET_TABLE_+0x148>
               	pushq	$38
               	jmp	0x413670 <.plt>

<abort@plt>:
               	jmpq	*317506(%rip)           # 0x461138 <_GLOBAL_OFFSET_TABLE_+0x150>
               	pushq	$39
               	jmp	0x413670 <.plt>

<dladdr@plt>:
               	jmpq	*317498(%rip)           # 0x461140 <_GLOBAL_OFFSET_TABLE_+0x158>
               	pushq	$40
               	jmp	0x413670 <.plt>

<strrchr@plt>:
               	jmpq	*317490(%rip)           # 0x461148 <_GLOBAL_OFFSET_TABLE_+0x160>
               	pushq	$41
               	jmp	0x413670 <.plt>

<open@plt>:
               	jmpq	*317482(%rip)           # 0x461150 <_GLOBAL_OFFSET_TABLE_+0x168>
               	pushq	$42
               	jmp	0x413670 <.plt>

<__fxstat@plt>:
               	jmpq	*317474(%rip)           # 0x461158 <_GLOBAL_OFFSET_TABLE_+0x170>
               	pushq	$43
               	jmp	0x413670 <.plt>

<_Unwind_Backtrace@plt>:
               	jmpq	*317466(%rip)           # 0x461160 <_GLOBAL_OFFSET_TABLE_+0x178>
               	pushq	$44
               	jmp	0x413670 <.plt>

<_Unwind_GetIP@plt>:
               	jmpq	*317458(%rip)           # 0x461168 <_GLOBAL_OFFSET_TABLE_+0x180>
               	pushq	$45
               	jmp	0x413670 <.plt>

<bcmp@plt>:
               	jmpq	*317450(%rip)           # 0x461170 <_GLOBAL_OFFSET_TABLE_+0x188>
               	pushq	$46
               	jmp	0x413670 <.plt>

<pthread_cond_signal@plt>:
               	jmpq	*317442(%rip)           # 0x461178 <_GLOBAL_OFFSET_TABLE_+0x190>
               	pushq	$47
               	jmp	0x413670 <.plt>

<pthread_mutex_init@plt>:
               	jmpq	*317434(%rip)           # 0x461180 <_GLOBAL_OFFSET_TABLE_+0x198>
               	pushq	$48
               	jmp	0x413670 <.plt>

<pthread_cond_init@plt>:
               	jmpq	*317426(%rip)           # 0x461188 <_GLOBAL_OFFSET_TABLE_+0x1a0>
               	pushq	$49
               	jmp	0x413670 <.plt>

<pthread_mutex_destroy@plt>:
               	jmpq	*317418(%rip)           # 0x461190 <_GLOBAL_OFFSET_TABLE_+0x1a8>
               	pushq	$50
               	jmp	0x413670 <.plt>

<pthread_cond_destroy@plt>:
               	jmpq	*317410(%rip)           # 0x461198 <_GLOBAL_OFFSET_TABLE_+0x1b0>
               	pushq	$51
               	jmp	0x413670 <.plt>

<pthread_once@plt>:
               	jmpq	*317402(%rip)           # 0x4611a0 <_GLOBAL_OFFSET_TABLE_+0x1b8>
               	pushq	$52
               	jmp	0x413670 <.plt>

<pthread_getspecific@plt>:
               	jmpq	*317394(%rip)           # 0x4611a8 <_GLOBAL_OFFSET_TABLE_+0x1c0>
               	pushq	$53
               	jmp	0x413670 <.plt>

<pthread_detach@plt>:
               	jmpq	*317386(%rip)           # 0x4611b0 <_GLOBAL_OFFSET_TABLE_+0x1c8>
               	pushq	$54
               	jmp	0x413670 <.plt>

<pthread_cond_broadcast@plt>:
               	jmpq	*317378(%rip)           # 0x4611b8 <_GLOBAL_OFFSET_TABLE_+0x1d0>
               	pushq	$55
               	jmp	0x413670 <.plt>

<sleep@plt>:
               	jmpq	*317370(%rip)           # 0x4611c0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
               	pushq	$56
               	jmp	0x413670 <.plt>

<_Exit@plt>:
               	jmpq	*317362(%rip)           # 0x4611c8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
               	pushq	$57
               	jmp	0x413670 <.plt>

<_Unwind_GetDataRelBase@plt>:
               	jmpq	*317354(%rip)           # 0x4611d0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
               	pushq	$58
               	jmp	0x413670 <.plt>

<_Unwind_GetTextRelBase@plt>:
               	jmpq	*317346(%rip)           # 0x4611d8 <_GLOBAL_OFFSET_TABLE_+0x1f0>
               	pushq	$59
               	jmp	0x413670 <.plt>

<_Unwind_GetRegionStart@plt>:
               	jmpq	*317338(%rip)           # 0x4611e0 <_GLOBAL_OFFSET_TABLE_+0x1f8>
               	pushq	$60
               	jmp	0x413670 <.plt>

<_Unwind_GetLanguageSpecificData@plt>:
               	jmpq	*317330(%rip)           # 0x4611e8 <_GLOBAL_OFFSET_TABLE_+0x200>
               	pushq	$61
               	jmp	0x413670 <.plt>

<_Unwind_GetIPInfo@plt>:
               	jmpq	*317322(%rip)           # 0x4611f0 <_GLOBAL_OFFSET_TABLE_+0x208>
               	pushq	$62
               	jmp	0x413670 <.plt>

<_Unwind_SetGR@plt>:
               	jmpq	*317314(%rip)           # 0x4611f8 <_GLOBAL_OFFSET_TABLE_+0x210>
               	pushq	$63
               	jmp	0x413670 <.plt>

<_Unwind_SetIP@plt>:
               	jmpq	*317306(%rip)           # 0x461200 <_GLOBAL_OFFSET_TABLE_+0x218>
               	pushq	$64
               	jmp	0x413670 <.plt>

<strcmp@plt>:
               	jmpq	*317298(%rip)           # 0x461208 <_GLOBAL_OFFSET_TABLE_+0x220>
               	pushq	$65
               	jmp	0x413670 <.plt>

<malloc@plt>:
               	jmpq	*317290(%rip)           # 0x461210 <_GLOBAL_OFFSET_TABLE_+0x228>
               	pushq	$66
               	jmp	0x413670 <.plt>

<_Unwind_RaiseException@plt>:
               	jmpq	*317282(%rip)           # 0x461218 <_GLOBAL_OFFSET_TABLE_+0x230>
               	pushq	$67
               	jmp	0x413670 <.plt>

<_Unwind_DeleteException@plt>:
               	jmpq	*317274(%rip)           # 0x461220 <_GLOBAL_OFFSET_TABLE_+0x238>
               	pushq	$68
               	jmp	0x413670 <.plt>

<_Unwind_Resume_or_Rethrow@plt>:
               	jmpq	*317266(%rip)           # 0x461228 <_GLOBAL_OFFSET_TABLE_+0x240>
               	pushq	$69
               	jmp	0x413670 <.plt>

<fputc@plt>:
               	jmpq	*317258(%rip)           # 0x461230 <_GLOBAL_OFFSET_TABLE_+0x248>
               	pushq	$70
               	jmp	0x413670 <.plt>

<pthread_key_delete@plt>:
               	jmpq	*317250(%rip)           # 0x461238 <_GLOBAL_OFFSET_TABLE_+0x250>
               	pushq	$71
               	jmp	0x413670 <.plt>

<__cxa_atexit@plt>:
               	jmpq	*317242(%rip)           # 0x461240 <_GLOBAL_OFFSET_TABLE_+0x258>
               	pushq	$72
               	jmp	0x413670 <.plt>

<pthread_cond_wait@plt>:
               	jmpq	*317234(%rip)           # 0x461248 <_GLOBAL_OFFSET_TABLE_+0x260>
               	pushq	$73
               	jmp	0x413670 <.plt>

<ceil@plt>:
               	jmpq	*317226(%rip)           # 0x461250 <_GLOBAL_OFFSET_TABLE_+0x268>
               	pushq	$74
               	jmp	0x413670 <.plt>

<floor@plt>:
               	jmpq	*317218(%rip)           # 0x461258 <_GLOBAL_OFFSET_TABLE_+0x270>
               	pushq	$75
               	jmp	0x413670 <.plt>

<memchr@plt>:
               	jmpq	*317210(%rip)           # 0x461260 <_GLOBAL_OFFSET_TABLE_+0x278>
               	pushq	$76
               	jmp	0x413670 <.plt>

<pthread_join@plt>:
               	jmpq	*317202(%rip)           # 0x461268 <_GLOBAL_OFFSET_TABLE_+0x280>
               	pushq	$77
               	jmp	0x413670 <.plt>

<pthread_create@plt>:
               	jmpq	*317194(%rip)           # 0x461270 <_GLOBAL_OFFSET_TABLE_+0x288>
               	pushq	$78
               	jmp	0x413670 <.plt>

<get_nprocs@plt>:
               	jmpq	*317186(%rip)           # 0x461278 <_GLOBAL_OFFSET_TABLE_+0x290>
               	pushq	$79
               	jmp	0x413670 <.plt>

<nanosleep@plt>:
               	jmpq	*317178(%rip)           # 0x461280 <_GLOBAL_OFFSET_TABLE_+0x298>
               	pushq	$80
               	jmp	0x413670 <.plt>

<_ITM_RU1@plt>:
               	jmpq	*317170(%rip)           # 0x461288 <_GLOBAL_OFFSET_TABLE_+0x2a0>
               	pushq	$81
               	jmp	0x413670 <.plt>

<_ZGTtnam@plt>:
               	jmpq	*317162(%rip)           # 0x461290 <_GLOBAL_OFFSET_TABLE_+0x2a8>
               	pushq	$82
               	jmp	0x413670 <.plt>

<_ITM_memcpyRtWn@plt>:
               	jmpq	*317154(%rip)           # 0x461298 <_GLOBAL_OFFSET_TABLE_+0x2b0>
               	pushq	$83
               	jmp	0x413670 <.plt>

<_ITM_RU8@plt>:
               	jmpq	*317146(%rip)           # 0x4612a0 <_GLOBAL_OFFSET_TABLE_+0x2b8>
               	pushq	$84
               	jmp	0x413670 <.plt>

<_ITM_addUserCommitAction@plt>:
               	jmpq	*317138(%rip)           # 0x4612a8 <_GLOBAL_OFFSET_TABLE_+0x2c0>
               	pushq	$85
               	jmp	0x413670 <.plt>

<_ITM_memcpyRnWt@plt>:
               	jmpq	*317130(%rip)           # 0x4612b0 <_GLOBAL_OFFSET_TABLE_+0x2c8>
               	pushq	$86
               	jmp	0x413670 <.plt>

<_ZGTtdlPv@plt>:
               	jmpq	*317122(%rip)           # 0x4612b8 <_GLOBAL_OFFSET_TABLE_+0x2d0>
               	pushq	$87
               	jmp	0x413670 <.plt>

<fopen@plt>:
               	jmpq	*317114(%rip)           # 0x4612c0 <_GLOBAL_OFFSET_TABLE_+0x2d8>
               	pushq	$88
               	jmp	0x413670 <.plt>

<strtoul@plt>:
               	jmpq	*317106(%rip)           # 0x4612c8 <_GLOBAL_OFFSET_TABLE_+0x2e0>
               	pushq	$89
               	jmp	0x413670 <.plt>

<fclose@plt>:
               	jmpq	*317098(%rip)           # 0x4612d0 <_GLOBAL_OFFSET_TABLE_+0x2e8>
               	pushq	$90
               	jmp	0x413670 <.plt>

<fileno@plt>:
               	jmpq	*317090(%rip)           # 0x4612d8 <_GLOBAL_OFFSET_TABLE_+0x2f0>
               	pushq	$91
               	jmp	0x413670 <.plt>

<read@plt>:
               	jmpq	*317082(%rip)           # 0x4612e0 <_GLOBAL_OFFSET_TABLE_+0x2f8>
               	pushq	$92
               	jmp	0x413670 <.plt>

<ioctl@plt>:
               	jmpq	*317074(%rip)           # 0x4612e8 <_GLOBAL_OFFSET_TABLE_+0x300>
               	pushq	$93
               	jmp	0x413670 <.plt>

Disassembly of section .text:

<_GLOBAL__sub_I_GlobalData.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 325605(%rip)     # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	movups	%xmm0, 325582(%rip)     # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	movl	$1, 325604(%rip)        # 0x463470 <kotlin::mm::GlobalData::instance_+0x38>
               	movq	$0, 325625(%rip)        # 0x463490 <kotlin::mm::GlobalData::instance_+0x58>
               	movups	%xmm0, 325590(%rip)     # 0x463474 <kotlin::mm::GlobalData::instance_+0x3c>
               	movq	$0, 325595(%rip)        # 0x463484 <kotlin::mm::GlobalData::instance_+0x4c>
               	leaq	325608(%rip), %rax      # 0x463498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 325609(%rip)      # 0x4634a0 <kotlin::mm::GlobalData::instance_+0x68>
               	movq	%rax, 325594(%rip)      # 0x463498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	$0, 325599(%rip)        # 0x4634a8 <kotlin::mm::GlobalData::instance_+0x70>
               	leaq	325600(%rip), %rax      # 0x4634b0 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	%rax, 325601(%rip)      # 0x4634b8 <kotlin::mm::GlobalData::instance_+0x80>
               	movq	%rax, 325586(%rip)      # 0x4634b0 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	$0, 325591(%rip)        # 0x4634c0 <kotlin::mm::GlobalData::instance_+0x88>
               	movb	$0, 325592(%rip)        # 0x4634c8 <kotlin::mm::GlobalData::instance_+0x90>
               	leaq	325593(%rip), %rax      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 325594(%rip)      # 0x4634d8 <kotlin::mm::GlobalData::instance_+0xa0>
               	movq	%rax, 325579(%rip)      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	$0, 325584(%rip)        # 0x4634e0 <kotlin::mm::GlobalData::instance_+0xa8>
               	leaq	325585(%rip), %rax      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%rax, 325586(%rip)      # 0x4634f0 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%rax, 325571(%rip)      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	$0, 325576(%rip)        # 0x4634f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 325577(%rip)        # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	leaq	325578(%rip), %rax      # 0x463508 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 325579(%rip)      # 0x463510 <kotlin::mm::GlobalData::instance_+0xd8>
               	movq	%rax, 325564(%rip)      # 0x463508 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	$0, 325569(%rip)        # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	leaq	325570(%rip), %rax      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%rax, 325571(%rip)      # 0x463528 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%rax, 325556(%rip)      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	$0, 325561(%rip)        # 0x463530 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 325562(%rip)        # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	movl	$1, %edi
               	movl	$512, %esi              # imm = 0x200
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	addq	$8, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%r13)
               	movups	%xmm0, 32(%r13)
               	movb	$0, 48(%r13)
               	leaq	56(%r13), %rcx
               	movl	$100000, 56(%r13)       # imm = 0x186A0
               	movq	$10240, 64(%r13)        # imm = 0x2800
               	movb	$1, 72(%r13)
               	movaps	192986(%rip), %xmm0     # 0x442fa0 <_IO_stdin_used+0x60>
               	movups	%xmm0, 80(%r13)
               	movabsq	$4602678819172646912, %rdx # imm = 0x3FE0000000000000
               	movq	%rdx, 96(%r13)
               	movaps	192976(%rip), %xmm0     # 0x442fb0 <_IO_stdin_used+0x70>
               	movups	%xmm0, 104(%r13)
               	leaq	160(%r13), %r14
               	movq	%rax, 160(%r13)
               	movq	%rcx, 168(%r13)
               	leaq	176(%r13), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 176(%r13)
               	movups	%xmm0, 192(%r13)
               	movups	%xmm0, 208(%r13)
               	movq	%rbp, 224(%r13)
               	leaq	232(%r13), %rdi
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	movq	$0, 280(%r13)
               	movq	%rbp, 288(%r13)
               	leaq	296(%r13), %rdi
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	movq	$0, 344(%r13)
               	movq	%rbp, 352(%r13)
               	leaq	360(%r13), %rdi
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	movq	$0, 408(%r13)
               	movq	%rbp, 416(%r13)
               	leaq	424(%r13), %rdi
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	movb	$0, 472(%r13)
               	movq	$0, 480(%r13)
               	movl	$1, %edi
               	movl	$312, %esi              # imm = 0x138
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	$0, 32(%rax)
               	leaq	40(%rax), %rdi
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movups	%xmm0, 88(%rbx)
               	movq	$0, 120(%rbx)
               	movq	%r14, 128(%rbx)
               	leaq	73577(%rip), %rax       # 0x425e50 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 144(%rbx)
               	leaq	73611(%rip), %rax       # 0x425e80 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>
               	movq	%rax, 152(%rbx)
               	movq	$0, 160(%rbx)
               	movw	$256, 168(%rbx)         # imm = 0x100
               	movups	%xmm0, 176(%rbx)
               	movups	%xmm0, 192(%rbx)
               	movq	$0, 208(%rbx)
               	leaq	216(%rbx), %rdi
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	movb	$0, 264(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 272(%rbx)
               	movups	%xmm0, 288(%rbx)
               	movq	$0, 304(%rbx)
               	movq	%rbx, 488(%r13)
               	leaq	329114(%rip), %rax      # 0x464500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 496(%r13)
               	movq	168(%r13), %r12
               	movq	%r14, 216(%rsp)
               	leaq	73613(%rip), %rax       # 0x425f10 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
               	movq	%rax, 240(%rsp)
               	leaq	73614(%rip), %rax       # 0x425f20 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 232(%rsp)
               	movq	232(%rsp), %rax
               	movq	240(%rsp), %rcx
               	movq	$0, 232(%rsp)
               	movups	72(%r12), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movq	216(%rsp), %rdx
               	movq	%rdx, 72(%r12)
               	movq	224(%rsp), %rdx
               	movq	%rdx, 80(%r12)
               	movdqu	88(%r12), %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	movq	%rax, 88(%r12)
               	movq	%rcx, 96(%r12)
               	movq	%xmm0, %rax
               	testq	%rax, %rax
               	je	0x41400b <_GLOBAL__sub_I_GlobalData.cpp+0x3ab>
               	leaq	48(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	$0, 200(%rsp)
               	movq	88(%r12), %rcx
               	testq	%rcx, %rcx
               	movq	%rbp, 248(%rsp)
               	movq	%r14, 256(%rsp)
               	je	0x41405d <_GLOBAL__sub_I_GlobalData.cpp+0x3fd>
               	leaq	72(%r12), %rsi
               	leaq	184(%rsp), %rdi
               	movl	$2, %edx
               	callq	*%rcx
               	movups	88(%r12), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movups	%xmm0, 200(%rsp)
               	jmp	0x41406d <_GLOBAL__sub_I_GlobalData.cpp+0x40d>
               	movups	200(%rsp), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movl	$1, %edi
               	movl	$224, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movups	184(%rsp), %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 200(%rsp)
               	movaps	128(%rsp), %xmm0
               	movaps	%xmm0, 160(%rsp)
               	leaq	309070(%rip), %rax      # 0x45f800 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rbx)
               	movq	%r12, 8(%rbx)
               	leaq	324552(%rip), %rax      # 0x463488 <kotlin::mm::GlobalData::instance_+0x50>
               	movq	%rax, 16(%rbx)
               	movq	%r12, 24(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%rbx)
               	movq	%r12, 48(%rbx)
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 56(%rbx)
               	movaps	144(%rsp), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movups	64(%rbx), %xmm1
               	movaps	%xmm1, 144(%rsp)
               	movups	%xmm0, 64(%rbx)
               	movaps	160(%rsp), %xmm0
               	movq	$0, 160(%rsp)
               	movq	88(%rbx), %rax
               	movq	%rax, 168(%rsp)
               	movups	%xmm0, 80(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 112(%rbx)
               	movups	%xmm0, 96(%rbx)
               	movq	$0, 128(%rbx)
               	leaq	136(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	callq	0x43cd00 <std::condition_variable::condition_variable()>
               	movb	$1, 184(%rbx)
               	movabsq	$9223372036854775807, %r14 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r14), %rax
               	testq	%rbp, %rbp
               	cmovnsq	%r14, %rax
               	imulq	$1000, %rbp, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r14, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	leaq	96(%rbx), %rcx
               	movq	%rax, 200(%rbx)
               	movb	$0, 208(%rbx)
               	leaq	16(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rsp)
               	movups	%xmm0, 24(%rsp)
               	movq	%rax, (%rsp)
               	movabsq	$8243114992121955143, %rax # imm = 0x72656D6954204347
               	movq	%rax, 16(%rsp)
               	movabsq	$7233174018586845298, %rax # imm = 0x6461657268742072
               	movq	%rax, 23(%rsp)
               	movq	$15, 8(%rsp)
               	movq	(%rsp), %rbp
               	movb	$0, 15(%rbp)
               	movb	$1, 32(%rsp)
               	movq	$0, 216(%rbx)
               	movq	%rbx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	leaq	61514(%rip), %rax       # 0x423260 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rax, %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	movb	$0, 112(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x414275 <_GLOBAL__sub_I_GlobalData.cpp+0x615>
               	leaq	96(%rsp), %rax
               	movq	%rax, 80(%rsp)
               	movq	8(%rsp), %r15
               	cmpq	$15, %r15
               	jbe	0x414263 <_GLOBAL__sub_I_GlobalData.cpp+0x603>
               	testq	%r15, %r15
               	js	0x41462e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
               	leaq	1(%r15), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 80(%rsp)
               	movq	%r15, 96(%rsp)
               	testq	%r15, %r15
               	je	0x41428b <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
               	cmpq	$1, %r15
               	jne	0x41427d <_GLOBAL__sub_I_GlobalData.cpp+0x61d>
               	movb	(%rbp), %cl
               	movb	%cl, (%rax)
               	jmp	0x41428b <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
               	movb	$1, %r14b
               	xorl	%r15d, %r15d
               	jmp	0x4142a5 <_GLOBAL__sub_I_GlobalData.cpp+0x645>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	movq	%r15, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r15, 88(%rsp)
               	movq	80(%rsp), %rax
               	movb	$0, (%rax,%r15)
               	movb	$1, 112(%rsp)
               	movb	$1, %r15b
               	xorl	%r14d, %r14d
               	leaq	61956(%rip), %rbp       # 0x4234b0 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rbp, 120(%rsp)
               	movl	$88, %edi
               	callq	0x43c0b9 <operator new(unsigned long)>
               	leaq	216(%rbx), %rdi
               	leaq	308591(%rip), %rcx      # 0x45f838 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rcx, (%rax)
               	movaps	48(%rsp), %xmm0
               	movups	%xmm0, 8(%rax)
               	movdqa	64(%rsp), %xmm0
               	movdqu	%xmm0, 24(%rax)
               	movb	$0, 72(%rax)
               	testb	%r14b, %r14b
               	leaq	16(%rsp), %r14
               	jne	0x41433f <_GLOBAL__sub_I_GlobalData.cpp+0x6df>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	movq	%rdx, 40(%rax)
               	movq	80(%rsp), %rsi
               	leaq	96(%rsp), %rcx
               	cmpq	%rcx, %rsi
               	je	0x414317 <_GLOBAL__sub_I_GlobalData.cpp+0x6b7>
               	movq	%rsi, 40(%rax)
               	movq	96(%rsp), %rdx
               	movq	%rdx, 56(%rax)
               	jmp	0x41431f <_GLOBAL__sub_I_GlobalData.cpp+0x6bf>
               	movdqu	(%rcx), %xmm0
               	movdqu	%xmm0, (%rdx)
               	movq	88(%rsp), %rdx
               	movq	%rdx, 48(%rax)
               	movq	%rcx, 80(%rsp)
               	movq	$0, 88(%rsp)
               	movb	$0, 96(%rsp)
               	movb	$1, 72(%rax)
               	movq	%rbp, 80(%rax)
               	movq	%rax, 40(%rsp)
               	movq	314481(%rip), %rdx      # 0x460fc0 <write+0x460fc0>
               	leaq	40(%rsp), %rsi
               	callq	0x43f2ee <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414369 <_GLOBAL__sub_I_GlobalData.cpp+0x709>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	je	0x41438d <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
               	movq	80(%rsp), %rdi
               	leaq	96(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41438d <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x4143a2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x4143a2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
               	callq	0x4136d0 <free@plt>
               	movq	160(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143c1 <_GLOBAL__sub_I_GlobalData.cpp+0x761>
               	leaq	144(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	64(%r12), %rbp
               	movq	%rbx, 64(%r12)
               	testq	%rbp, %rbp
               	je	0x4143e1 <_GLOBAL__sub_I_GlobalData.cpp+0x781>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	200(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414400 <_GLOBAL__sub_I_GlobalData.cpp+0x7a0>
               	leaq	184(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	232(%rsp), %rax
               	testq	%rax, %rax
               	je	0x41441f <_GLOBAL__sub_I_GlobalData.cpp+0x7bf>
               	leaq	216(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	movdqa	%xmm0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	movq	%r14, (%rsp)
               	movabsq	$7018141387277222727, %rax # imm = 0x6165726874204347
               	movq	%rax, 16(%rsp)
               	movw	$100, 24(%rsp)
               	movq	$9, 8(%rsp)
               	movb	$1, 32(%rsp)
               	movq	$0, 184(%rsp)
               	movq	256(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movb	$0, 88(%rsp)
               	leaq	72(%rsp), %rbp
               	movq	%rbp, 56(%rsp)
               	movq	8(%rsp), %rbx
               	cmpq	$15, %rbx
               	jbe	0x4144ba <_GLOBAL__sub_I_GlobalData.cpp+0x85a>
               	testq	%rbx, %rbx
               	js	0x41462e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
               	leaq	1(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 72(%rsp)
               	testq	%rbx, %rbx
               	jne	0x4144c2 <_GLOBAL__sub_I_GlobalData.cpp+0x862>
               	jmp	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	movq	%rbp, %rax
               	testq	%rbx, %rbx
               	je	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	cmpq	$1, %rbx
               	jne	0x4144d0 <_GLOBAL__sub_I_GlobalData.cpp+0x870>
               	movb	16(%rsp), %cl
               	movb	%cl, (%rax)
               	jmp	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r13, %r12
               	addq	$480, %r12              # imm = 0x1E0
               	movq	%rbx, 64(%rsp)
               	movq	56(%rsp), %rax
               	movb	$0, (%rax,%rbx)
               	movb	$1, 88(%rsp)
               	leaq	72270(%rip), %rbx       # 0x425f50 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
               	movq	%rbx, 96(%rsp)
               	movl	$64, %edi
               	callq	0x43c0b9 <operator new(unsigned long)>
               	leaq	308160(%rip), %rcx      # 0x45f8d8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	movq	56(%rsp), %rdx
               	cmpq	%rbp, %rdx
               	je	0x41454c <_GLOBAL__sub_I_GlobalData.cpp+0x8ec>
               	movq	%rdx, 16(%rax)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x414555 <_GLOBAL__sub_I_GlobalData.cpp+0x8f5>
               	movdqu	(%rbp), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rbp, 56(%rsp)
               	movq	$0, 64(%rsp)
               	movb	$0, 72(%rsp)
               	movb	$1, 48(%rax)
               	movq	%rbx, 56(%rax)
               	movq	%rax, 144(%rsp)
               	movq	313912(%rip), %rdx      # 0x460fc0 <write+0x460fc0>
               	leaq	184(%rsp), %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x43f2ee <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4145b0 <_GLOBAL__sub_I_GlobalData.cpp+0x950>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	je	0x4145d2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
               	movq	56(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x4145d2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, (%r12)
               	jne	0x414889 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
               	movq	184(%rsp), %rax
               	movq	%rax, (%r12)
               	movq	$0, 184(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x41460a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x41460a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
               	callq	0x4136d0 <free@plt>
               	movl	$0, 504(%r13)
               	movq	%r13, 323364(%rip)      # 0x463540 <kotlin::mm::GlobalData::instance_+0x108>
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	201499(%rip), %rdi      # 0x445950 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4363a0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	200(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414674 <_GLOBAL__sub_I_GlobalData.cpp+0xa14>
               	leaq	184(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, 128(%rsp)
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4146a7 <_GLOBAL__sub_I_GlobalData.cpp+0xa47>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	jne	0x4146c4 <_GLOBAL__sub_I_GlobalData.cpp+0xa64>
               	jmp	0x4146d3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	movq	%rax, 128(%rsp)
               	movq	56(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x4146d3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x4146e8 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x4146e8 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
               	callq	0x4136d0 <free@plt>
               	movq	488(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x41485c <_GLOBAL__sub_I_GlobalData.cpp+0xbfc>
               	leaq	88(%rbx), %rbp
               	cmpq	$0, 313524(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x414716 <_GLOBAL__sub_I_GlobalData.cpp+0xab6>
               	movq	%rbp, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x41479d <_GLOBAL__sub_I_GlobalData.cpp+0xb3d>
               	cmpq	$0, (%rbx)
               	jne	0x414734 <_GLOBAL__sub_I_GlobalData.cpp+0xad4>
               	cmpq	$0, 313492(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movq	%rbp, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movb	$1, 168(%rbx)
               	leaq	40(%rbx), %r15
               	movq	%r15, %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	cmpq	$0, 313449(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x414759 <_GLOBAL__sub_I_GlobalData.cpp+0xaf9>
               	movq	%rbp, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x43f294 <std::thread::join()>
               	movb	$0, 168(%rbx)
               	cmpq	$0, 313416(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4147a4 <_GLOBAL__sub_I_GlobalData.cpp+0xb44>
               	movq	%rbp, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x41488e <_GLOBAL__sub_I_GlobalData.cpp+0xc2e>
               	movb	$1, 169(%rbx)
               	movq	%r15, %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	cmpq	$0, 313375(%rip)        # 0x460fb8 <write+0x460fb8>
               	jne	0x41472a <_GLOBAL__sub_I_GlobalData.cpp+0xaca>
               	jmp	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movb	$1, 169(%rbx)
               	movq	%r15, %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	leaq	216(%rbx), %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	movq	144(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4147dc <_GLOBAL__sub_I_GlobalData.cpp+0xb7c>
               	leaq	128(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	leaq	40(%rbx), %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	leaq	16(%rbx), %r15
               	movq	16(%rbx), %rbp
               	movq	$0, 16(%rbx)
               	movq	%rbp, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x41482e <_GLOBAL__sub_I_GlobalData.cpp+0xbce>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	48(%rsp), %r14
               	movq	%rbp, 48(%rsp)
               	testq	%r14, %r14
               	je	0x4147fa <_GLOBAL__sub_I_GlobalData.cpp+0xb9a>
               	movq	%r14, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x4147fa <_GLOBAL__sub_I_GlobalData.cpp+0xb9a>
               	leaq	48(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r15, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpq	$0, (%rbx)
               	je	0x414854 <_GLOBAL__sub_I_GlobalData.cpp+0xbf4>
               	movq	%rbx, %rdi
               	callq	0x43f294 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x414889 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 488(%r13)
               	movq	%r12, %rdi
               	callq	0x423940 <kotlin::ScopedThread::~ScopedThread()>
               	movq	248(%rsp), %rdi
               	callq	0x427260 <GCStateHolder::~GCStateHolder()>
               	movq	128(%rsp), %rdi
               	callq	0x423250 <__clang_call_terminate>
               	callq	0x43c463 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x423930 <std::thread::~thread()>
               	movq	%rbp, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4148db <_GLOBAL__sub_I_GlobalData.cpp+0xc7b>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	movb	112(%rsp), %r15b
               	jmp	0x4148ee <_GLOBAL__sub_I_GlobalData.cpp+0xc8e>
               	movq	%rax, %rbx
               	testb	%r15b, %r15b
               	je	0x414907 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
               	movq	80(%rsp), %rdi
               	leaq	96(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414907 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x414921 <_GLOBAL__sub_I_GlobalData.cpp+0xcc1>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414921 <_GLOBAL__sub_I_GlobalData.cpp+0xcc1>
               	callq	0x4136d0 <free@plt>
               	movq	128(%rsp), %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<_GLOBAL__sub_I_CallsChecker.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	322643(%rip), %rax      # 0x4635a8 <(anonymous namespace)::checker+0x30>
               	movq	%rax, 322588(%rip)      # 0x463578 <(anonymous namespace)::checker>
               	movq	$1, 322585(%rip)        # 0x463580 <(anonymous namespace)::checker+0x8>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 322583(%rip)     # 0x463588 <(anonymous namespace)::checker+0x10>
               	movl	$1065353216, 322589(%rip) # imm = 0x3F800000
                                                # 0x463598 <(anonymous namespace)::checker+0x20>
               	leaq	322590(%rip), %rdi      # 0x4635a0 <(anonymous namespace)::checker+0x28>
               	xorl	%ebp, %ebp
               	movl	$3792, %edx             # imm = 0xED0
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movl	$237, %ebx
               	leaq	315284(%rip), %r12      # 0x461930 <Kotlin_callsCheckerGoodFunctionNames>
               	leaq	322517(%rip), %r15      # 0x463578 <(anonymous namespace)::checker>
               	jmp	0x4149d0 <_GLOBAL__sub_I_CallsChecker.cpp+0x90>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, 56(%r15,%rbp,2)
               	movq	%r14, 64(%r15,%rbp,2)
               	addq	$-1, %rbx
               	addq	$8, %rbp
               	cmpq	$1, %rbx
               	jbe	0x4149de <_GLOBAL__sub_I_CallsChecker.cpp+0x9e>
               	movq	(%rbp,%r12), %r14
               	testq	%r14, %r14
               	jne	0x4149b0 <_GLOBAL__sub_I_CallsChecker.cpp+0x70>
               	xorl	%eax, %eax
               	jmp	0x4149b8 <_GLOBAL__sub_I_CallsChecker.cpp+0x78>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414b06 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	leaq	322497(%rip), %rbx      # 0x4635b0 <(anonymous namespace)::checker+0x38>
               	leaq	326266(%rip), %rsi      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	movl	$14, %edx
               	movq	%rbx, %rdi
               	callq	0x423990 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	leaq	322486(%rip), %rax      # 0x4635c0 <(anonymous namespace)::checker+0x48>
               	leaq	322719(%rip), %rbp      # 0x4636b0 <(anonymous namespace)::checker+0x138>
               	movq	%r15, %r13
               	negq	%r13
               	jmp	0x414a8c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	nopl	(%rax)
               	testl	%eax, %eax
               	js	0x414a40 <_GLOBAL__sub_I_CallsChecker.cpp+0x100>
               	movq	%r14, %rdi
               	callq	0x423e70 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	jne	0x414a8c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	jmp	0x414ae5 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	nopl	(%rax)
               	movups	(%r14), %xmm0
               	movaps	%xmm0, (%rsp)
               	leaq	(%r14,%r13), %rax
               	addq	$-56, %rax
               	testq	%rax, %rax
               	jle	0x414a75 <_GLOBAL__sub_I_CallsChecker.cpp+0x135>
               	shrq	$4, %rax
               	addq	$1, %rax
               	movq	%r14, %rcx
               	movups	-16(%rcx), %xmm0
               	movups	%xmm0, (%rcx)
               	addq	$-16, %rcx
               	addq	$-1, %rax
               	cmpq	$1, %rax
               	jg	0x414a60 <_GLOBAL__sub_I_CallsChecker.cpp+0x120>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, 322352(%rip)     # 0x4635b0 <(anonymous namespace)::checker+0x38>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	je	0x414ae5 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	movq	%rax, %r14
               	movq	(%rax), %rdx
               	movq	322327(%rip), %rax      # 0x4635b0 <(anonymous namespace)::checker+0x38>
               	movq	%rdx, %r12
               	subq	%rax, %r12
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x414ac0 <_GLOBAL__sub_I_CallsChecker.cpp+0x180>
               	movq	322313(%rip), %rsi      # 0x4635b8 <(anonymous namespace)::checker+0x40>
               	movq	24(%rbx), %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x414a20 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	cmpq	$2147483647, %r12       # imm = 0x7FFFFFFF
               	jg	0x414a24 <_GLOBAL__sub_I_CallsChecker.cpp+0xe4>
               	cmpq	$-2147483648, %r12      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %r12d
               	movl	%r12d, %eax
               	jmp	0x414a20 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414b06 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	movl	$312, %ebx              # imm = 0x138
               	leaq	(%r15,%rbx), %rdi
               	callq	0x423e70 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	addq	$16, %rbx
               	cmpq	$3832, %rbx             # imm = 0xEF8
               	jne	0x414af0 <_GLOBAL__sub_I_CallsChecker.cpp+0x1b0>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_ThreadSuspension.cpp>:
               	leaq	322081(%rip), %rdi      # 0x463548 <(anonymous namespace)::gSuspensionCondVar>
               	jmp	0x43cd00 <std::condition_variable::condition_variable()>
               	nopl	(%rax)

<_GLOBAL__sub_I_ConcurrentMarkAndSweep.cpp>:
               	leaq	325993(%rip), %rdi      # 0x4644a0 <(anonymous namespace)::markingCondVar>
               	jmp	0x43cd00 <std::condition_variable::condition_variable()>

<_GLOBAL__sub_I_eh_alloc.cc>:
               	xorl	%eax, %eax
               	leaq	426235(%rip), %rdi      # 0x47cc40 <(anonymous namespace)::emergency_pool>
               	movl	$10, %ecx
               	pushq	%rdx
               	rep		stosl	%eax, %es:(%rdi)
               	movl	$72704, %edi            # imm = 0x11C00
               	movq	$72704, 426267(%rip)    # imm = 0x11C00
                                                # 0x47cc78 <(anonymous namespace)::emergency_pool+0x38>
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, 426247(%rip)      # 0x47cc70 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rax, %rax
               	jne	0x414b86 <_GLOBAL__sub_I_eh_alloc.cc+0x4a>
               	movq	$0, 426239(%rip)        # 0x47cc78 <(anonymous namespace)::emergency_pool+0x38>
               	movq	$0, 426212(%rip)        # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x414b9c <_GLOBAL__sub_I_eh_alloc.cc+0x60>
               	movq	%rax, 426203(%rip)      # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	movq	$72704, (%rax)          # imm = 0x11C00
               	movq	$0, 8(%rax)
               	popq	%rax
               	retq

<_GLOBAL__sub_I_system_error.cc>:
               	pushq	%rax
               	leaq	313170(%rip), %rdx      # 0x4612f8 <__dso_handle>
               	leaq	321035(%rip), %rsi      # 0x4631b8 <(anonymous namespace)::generic_category_instance>
               	leaq	164724(%rip), %rdi      # 0x43cf28 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	callq	0x413b00 <__cxa_atexit@plt>
               	leaq	313144(%rip), %rdx      # 0x4612f8 <__dso_handle>
               	leaq	321001(%rip), %rsi      # 0x4631b0 <(anonymous namespace)::system_category_instance>
               	popq	%rcx
               	leaq	164663(%rip), %rdi      # 0x43cf06 <(anonymous namespace)::system_error_category::~system_error_category()>
               	jmp	0x413b00 <__cxa_atexit@plt>

<get_available_features>:
               	btl	$27, %edi
               	pushq	%rbx
               	movl	%edx, %r11d
               	jae	0x414c06 <get_available_features+0x32>
               	xorl	%ecx, %ecx
               	xgetbv
               	movl	%eax, %edx
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x414c06 <get_available_features+0x32>
               	andl	$230, %eax
               	xorl	%r10d, %r10d
               	movl	$1, %r9d
               	cmpl	$230, %eax
               	sete	%r10b
               	jmp	0x414c0c <get_available_features+0x38>
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	movl	%esi, %r8d
               	shrl	$15, %r8d
               	andl	$1, %r8d
               	btl	$23, %esi
               	jae	0x414c21 <get_available_features+0x4d>
               	orl	$2, %r8d
               	btl	$25, %esi
               	jae	0x414c2b <get_available_features+0x57>
               	orl	$8, %r8d
               	btl	$26, %esi
               	jae	0x414c35 <get_available_features+0x61>
               	orl	$16, %r8d
               	btl	$23, %edi
               	jae	0x414c3f <get_available_features+0x6b>
               	orl	$4, %r8d
               	btl	$25, %edi
               	jae	0x414c4c <get_available_features+0x78>
               	orl	$262144, %r8d           # imm = 0x40000
               	testb	$2, %dil
               	je	0x414c59 <get_available_features+0x85>
               	orl	$524288, %r8d           # imm = 0x80000
               	testb	$1, %dil
               	je	0x414c63 <get_available_features+0x8f>
               	orl	$32, %r8d
               	btl	$9, %edi
               	jae	0x414c6d <get_available_features+0x99>
               	orl	$64, %r8d
               	btl	$19, %edi
               	jae	0x414c77 <get_available_features+0xa3>
               	orb	$-128, %r8b
               	btl	$20, %edi
               	jae	0x414c84 <get_available_features+0xb0>
               	orl	$256, %r8d              # imm = 0x100
               	testl	%r9d, %r9d
               	je	0x414ca3 <get_available_features+0xcf>
               	btl	$28, %edi
               	jae	0x414c96 <get_available_features+0xc2>
               	orl	$512, %r8d              # imm = 0x200
               	btl	$12, %edi
               	jae	0x414ca3 <get_available_features+0xcf>
               	orl	$16384, %r8d            # imm = 0x4000
               	xorl	%esi, %esi
               	cmpl	$6, %r11d
               	jle	0x414db3 <get_available_features+0x1df>
               	movl	$7, %eax
               	movl	%esi, %ecx
               	cpuid
               	testb	$8, %bl
               	je	0x414cc4 <get_available_features+0xf0>
               	orl	$65536, %r8d            # imm = 0x10000
               	testl	%r9d, %r9d
               	je	0x414cd5 <get_available_features+0x101>
               	testb	$32, %bl
               	je	0x414cd5 <get_available_features+0x101>
               	orl	$1024, %r8d             # imm = 0x400
               	btl	$8, %ebx
               	jae	0x414ce2 <get_available_features+0x10e>
               	orl	$131072, %r8d           # imm = 0x20000
               	xorl	%esi, %esi
               	testl	%r10d, %r10d
               	je	0x414db3 <get_available_features+0x1df>
               	btl	$16, %ebx
               	jae	0x414cfa <get_available_features+0x126>
               	orl	$32768, %r8d            # imm = 0x8000
               	testl	%ebx, %ebx
               	jns	0x414d05 <get_available_features+0x131>
               	orl	$1048576, %r8d          # imm = 0x100000
               	btl	$30, %ebx
               	jae	0x414d12 <get_available_features+0x13e>
               	orl	$2097152, %r8d          # imm = 0x200000
               	btl	$17, %ebx
               	jae	0x414d1f <get_available_features+0x14b>
               	orl	$4194304, %r8d          # imm = 0x400000
               	btl	$28, %ebx
               	jae	0x414d2c <get_available_features+0x158>
               	orl	$8388608, %r8d          # imm = 0x800000
               	btl	$26, %ebx
               	jae	0x414d39 <get_available_features+0x165>
               	orl	$33554432, %r8d         # imm = 0x2000000
               	btl	$27, %ebx
               	jae	0x414d46 <get_available_features+0x172>
               	orl	$16777216, %r8d         # imm = 0x1000000
               	btl	$21, %ebx
               	jae	0x414d53 <get_available_features+0x17f>
               	orl	$134217728, %r8d        # imm = 0x8000000
               	testb	$2, %cl
               	je	0x414d5f <get_available_features+0x18b>
               	orl	$67108864, %r8d         # imm = 0x4000000
               	testb	$64, %cl
               	je	0x414d6b <get_available_features+0x197>
               	orl	$2147483648, %r8d       # imm = 0x80000000
               	movl	%ecx, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	btl	$10, %ecx
               	jae	0x414d7c <get_available_features+0x1a8>
               	orl	$2, %esi
               	btl	$11, %ecx
               	jae	0x414d85 <get_available_features+0x1b1>
               	orl	$4, %esi
               	btl	$12, %ecx
               	jae	0x414d8e <get_available_features+0x1ba>
               	orl	$8, %esi
               	btl	$14, %ecx
               	jae	0x414d9b <get_available_features+0x1c7>
               	orl	$1073741824, %r8d       # imm = 0x40000000
               	testb	$4, %dl
               	je	0x414da7 <get_available_features+0x1d3>
               	orl	$268435456, %r8d        # imm = 0x10000000
               	andb	$8, %dl
               	je	0x414db3 <get_available_features+0x1df>
               	orl	$536870912, %r8d        # imm = 0x20000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cpuid
               	cmpl	$2147483648, %eax       # imm = 0x80000000
               	jbe	0x414df3 <get_available_features+0x21f>
               	movl	$2147483649, %eax       # imm = 0x80000001
               	cpuid
               	testb	$64, %cl
               	je	0x414dd4 <get_available_features+0x200>
               	orl	$2048, %r8d             # imm = 0x800
               	testl	%r9d, %r9d
               	je	0x414df3 <get_available_features+0x21f>
               	btl	$16, %ecx
               	jae	0x414de6 <get_available_features+0x212>
               	orl	$4096, %r8d             # imm = 0x1000
               	btl	$11, %ecx
               	jae	0x414df3 <get_available_features+0x21f>
               	orl	$8192, %r8d             # imm = 0x2000
               	movl	%r8d, 425682(%rip)      # 0x47cccc <__cpu_model+0xc>
               	popq	%rbx
               	movl	%esi, 425679(%rip)      # 0x47ccd0 <__cpu_features2>
               	retq

<__cpu_indicator_init>:
               	xorl	%r9d, %r9d
               	cmpl	$0, 425652(%rip)        # 0x47ccc0 <__cpu_model>
               	jne	0x4151f6 <__cpu_indicator_init+0x3f4>
               	pushq	%rbx
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414e2b <__cpu_indicator_init+0x29>
               	movl	%r9d, %eax
               	cpuid
               	movl	%ebx, %r10d
               	movl	%eax, %r8d
               	testl	%eax, %eax
               	jg	0x414e3e <__cpu_indicator_init+0x3c>
               	movl	$3, 425611(%rip)        # 0x47ccc0 <__cpu_model>
               	orl	$-1, %r9d
               	jmp	0x4151f1 <__cpu_indicator_init+0x3ef>
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414e2b <__cpu_indicator_init+0x29>
               	movl	$1, %eax
               	cpuid
               	movl	%edx, %esi
               	movl	%ecx, %edi
               	movl	%eax, %edx
               	movl	%eax, %r11d
               	shrl	$4, %edx
               	movl	%eax, %ecx
               	shrl	$8, %r11d
               	shrl	$12, %ecx
               	andl	$15, %edx
               	andl	$15, %r11d
               	andl	$240, %ecx
               	cmpl	$1970169159, %r10d      # imm = 0x756E6547
               	jne	0x4150c8 <__cpu_indicator_init+0x2c6>
               	cmpl	$6, %r11d
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	%edx, %eax
               	orl	%ecx, %eax
               	testb	%bl, %bl
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$62, %eax
               	je	0x415064 <__cpu_indicator_init+0x262>
               	ja	0x414f55 <__cpu_indicator_init+0x153>
               	cmpl	$38, %eax
               	je	0x41500a <__cpu_indicator_init+0x208>
               	ja	0x414ef9 <__cpu_indicator_init+0xf7>
               	cmpl	$28, %eax
               	je	0x41500a <__cpu_indicator_init+0x208>
               	ja	0x414ed8 <__cpu_indicator_init+0xd6>
               	cmpl	$23, %eax
               	je	0x4150a7 <__cpu_indicator_init+0x2a5>
               	cmpl	$26, %eax
               	je	0x415040 <__cpu_indicator_init+0x23e>
               	cmpl	$15, %eax
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	jmp	0x4150a7 <__cpu_indicator_init+0x2a5>
               	cmpl	$31, %eax
               	ja	0x414eeb <__cpu_indicator_init+0xe9>
               	cmpl	$30, %eax
               	jb	0x4150a7 <__cpu_indicator_init+0x2a5>
               	jmp	0x415040 <__cpu_indicator_init+0x23e>
               	cmpl	$37, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$47, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	ja	0x414f34 <__cpu_indicator_init+0x132>
               	cmpl	$44, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	ja	0x414f1d <__cpu_indicator_init+0x11b>
               	cmpl	$42, %eax
               	je	0x415058 <__cpu_indicator_init+0x256>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$45, %eax
               	je	0x415058 <__cpu_indicator_init+0x256>
               	cmpl	$46, %eax
               	je	0x415040 <__cpu_indicator_init+0x23e>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$58, %eax
               	je	0x415064 <__cpu_indicator_init+0x262>
               	ja	0x414f47 <__cpu_indicator_init+0x145>
               	cmpl	$55, %eax
               	jmp	0x414fc7 <__cpu_indicator_init+0x1c5>
               	cmpl	$60, %eax
               	je	0x415070 <__cpu_indicator_init+0x26e>
               	cmpl	$61, %eax
               	jmp	0x414f9e <__cpu_indicator_init+0x19c>
               	cmpl	$85, %eax
               	je	0x415094 <__cpu_indicator_init+0x292>
               	ja	0x414fa9 <__cpu_indicator_init+0x1a7>
               	cmpl	$71, %eax
               	je	0x41507c <__cpu_indicator_init+0x27a>
               	ja	0x414f82 <__cpu_indicator_init+0x180>
               	cmpl	$63, %eax
               	je	0x415070 <__cpu_indicator_init+0x26e>
               	cmpl	$69, %eax
               	jae	0x415070 <__cpu_indicator_init+0x26e>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$77, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	ja	0x414f92 <__cpu_indicator_init+0x190>
               	cmpl	$74, %eax
               	jmp	0x414fc7 <__cpu_indicator_init+0x1c5>
               	cmpl	$78, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	cmpl	$79, %eax
               	je	0x41507c <__cpu_indicator_init+0x27a>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$94, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	ja	0x414fce <__cpu_indicator_init+0x1cc>
               	cmpl	$87, %eax
               	je	0x415028 <__cpu_indicator_init+0x226>
               	jb	0x41507c <__cpu_indicator_init+0x27a>
               	cmpl	$90, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	cmpl	$93, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$133, %eax
               	je	0x415034 <__cpu_indicator_init+0x232>
               	ja	0x414fef <__cpu_indicator_init+0x1ed>
               	cmpl	$102, %eax
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	movabsq	$73014444035, %rax      # imm = 0x1100000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	cmpl	$142, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	cmpl	$158, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$1, 425136(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$6, 425121(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$7, 425106(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$11, 425094(%rip)       # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movabsq	$4294967299, %rax       # imm = 0x100000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$8589934595, %rax       # imm = 0x200000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$12884901891, %rax      # imm = 0x300000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$51539607555, %rax      # imm = 0xC00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$55834574851, %rax      # imm = 0xD00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$60129542147, %rax      # imm = 0xE00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$64424509443, %rax      # imm = 0xF00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$68719476739, %rax      # imm = 0x1000000003
               	movq	%rax, 424991(%rip)      # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$2, 424979(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	movl	%r8d, %edx
               	callq	0x414bd4 <get_available_features>
               	movl	$1, 424957(%rip)        # 0x47ccc0 <__cpu_model>
               	jmp	0x4151e2 <__cpu_indicator_init+0x3e0>
               	cmpl	$1752462657, %r10d      # imm = 0x68747541
               	jne	0x4151e7 <__cpu_indicator_init+0x3e5>
               	cmpl	$15, %r11d
               	jne	0x4151d0 <__cpu_indicator_init+0x3ce>
               	shrl	$20, %eax
               	orl	%ecx, %edx
               	movzbl	%al, %eax
               	decl	%eax
               	cmpl	$7, %eax
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	leaq	204719(%rip), %rcx      # 0x4470a8 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::word_size+0x8>
               	movslq	(%rcx,%rax,4), %rax
               	addq	%rcx, %rax
               	jmpq	*%rax
               	movl	$4, 424888(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	cmpl	$4, %edx
               	je	0x41512e <__cpu_indicator_init+0x32c>
               	cmpl	$8, %edx
               	je	0x41513d <__cpu_indicator_init+0x33b>
               	cmpl	$2, %edx
               	jne	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$4, 424863(%rip)        # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$5, 424848(%rip)        # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$6, 424833(%rip)        # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$8, 424814(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$5, 424802(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	cmpl	$2, %edx
               	jne	0x415173 <__cpu_indicator_init+0x371>
               	movl	$8, 424791(%rip)        # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$15, %edx
               	ja	0x415184 <__cpu_indicator_init+0x382>
               	movl	$7, 424774(%rip)        # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$47, %edx
               	jbe	0x415167 <__cpu_indicator_init+0x365>
               	cmpl	$79, %edx
               	ja	0x41519a <__cpu_indicator_init+0x398>
               	movl	$9, 424752(%rip)        # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$127, %edx
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$10, 424735(%rip)       # 0x47ccc8 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$9, 424719(%rip)        # 0x47ccc4 <__cpu_model+0x4>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$10, 424707(%rip)       # 0x47ccc4 <__cpu_model+0x4>
               	cmpl	$31, %edx
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$11, 424696(%rip)       # 0x47ccc8 <__cpu_model+0x8>
               	movl	%r8d, %edx
               	callq	0x414bd4 <get_available_features>
               	movl	$2, 424670(%rip)        # 0x47ccc0 <__cpu_model>
               	xorl	%r9d, %r9d
               	jmp	0x4151f1 <__cpu_indicator_init+0x3ef>
               	movl	$3, 424655(%rip)        # 0x47ccc0 <__cpu_model>
               	movl	%r9d, %eax
               	popq	%rbx
               	retq
               	movl	%r9d, %eax
               	retq

<_start>:
               	xorl	%ebp, %ebp
               	movq	%rdx, %r9
               	popq	%rsi
               	movq	%rsp, %rdx
               	andq	$-16, %rsp
               	pushq	%rax
               	pushq	%rsp
               	movq	$4468432, %r8           # imm = 0x442ED0
               	movq	$4468336, %rcx          # imm = 0x442E70
               	movq	$4435776, %rdi          # imm = 0x43AF40
               	callq	0x413680 <__libc_start_main@plt>
               	hlt

<deregister_tm_clones>:
               	movl	$4600256, %eax          # imm = 0x4631C0
               	cmpq	$4600256, %rax          # imm = 0x4631C0
               	je	0x415242 <deregister_tm_clones+0x1e>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x415242 <deregister_tm_clones+0x1e>
               	movl	$4600256, %edi          # imm = 0x4631C0
               	jmpq	*%rax
               	retq

<register_tm_clones>:
               	movl	$4600256, %esi          # imm = 0x4631C0
               	movl	$2, %ecx
               	subq	$4600256, %rsi          # imm = 0x4631C0
               	sarq	$3, %rsi
               	movq	%rsi, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	testq	%rax, %rax
               	je	0x415279 <register_tm_clones+0x36>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x415279 <register_tm_clones+0x36>
               	movl	$4600256, %edi          # imm = 0x4631C0
               	jmpq	*%rax
               	retq

<__do_global_dtors_aux>:
               	cmpb	$0, 319295(%rip)        # 0x4631c0 <completed.7240>
               	jne	0x4152d0 <__do_global_dtors_aux+0x56>
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%r12
               	movl	$4552216, %r12d         # imm = 0x457618
               	pushq	%rbx
               	movl	$4552224, %ebx          # imm = 0x457620
               	subq	$4552216, %rbx          # imm = 0x457618
               	sarq	$3, %rbx
               	decq	%rbx
               	movq	319262(%rip), %rax      # 0x4631c8 <dtor_idx.7242>
               	cmpq	%rbx, %rax
               	jae	0x4152bf <__do_global_dtors_aux+0x45>
               	incq	%rax
               	movq	%rax, 319247(%rip)      # 0x4631c8 <dtor_idx.7242>
               	callq	*(%r12,%rax,8)
               	jmp	0x4152a3 <__do_global_dtors_aux+0x29>
               	callq	0x415224 <deregister_tm_clones>
               	popq	%rbx
               	popq	%r12
               	movb	$1, 319218(%rip)        # 0x4631c0 <completed.7240>
               	popq	%rbp
               	retq
               	retq

<frame_dummy>:
               	jmp	0x415243 <register_tm_clones>
               	nopl	(%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	281278(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 16(%rsp)
               	movb	323887(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415372 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x92>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4154d9 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f9>
               	movq	296(%r15), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rcx)
               	movq	$0, 24(%rcx)
               	leaq	271131(%rip), %rdx      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%rax, 80(%rsp)
               	movl	8(%rbx), %edx
               	cmpl	%ebp, %edx
               	cmovlel	%edx, %ebp
               	movq	(%rbx), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41557f <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x29f>
               	movq	(%rax), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41558e <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x2ae>
               	testl	%ebp, %ebp
               	js	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	cmpl	%ebp, 8(%rbx)
               	jb	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	cmpl	%ebp, 24(%rcx)
               	jb	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	movq	(%rax), %rdx
               	testl	%ebp, %ebp
               	jle	0x4154b1 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1d1>
               	movl	%ebp, %esi
               	leaq	-1(%rsi), %rdi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$7, %rdi
               	jae	0x41542b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x14b>
               	xorl	%edi, %edi
               	jmp	0x415489 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1a9>
               	andl	$-8, %esi
               	xorl	%edi, %edi
               	movq	16(%rbx,%rdi,8), %rbp
               	movq	%rbp, 32(%rcx,%rdi,8)
               	movq	24(%rbx,%rdi,8), %rbp
               	movq	%rbp, 40(%rcx,%rdi,8)
               	movq	32(%rbx,%rdi,8), %rbp
               	movq	%rbp, 48(%rcx,%rdi,8)
               	movq	40(%rbx,%rdi,8), %rbp
               	movq	%rbp, 56(%rcx,%rdi,8)
               	movq	48(%rbx,%rdi,8), %rbp
               	movq	%rbp, 64(%rcx,%rdi,8)
               	movq	56(%rbx,%rdi,8), %rbp
               	movq	%rbp, 72(%rcx,%rdi,8)
               	movq	64(%rbx,%rdi,8), %rbp
               	movq	%rbp, 80(%rcx,%rdi,8)
               	movq	72(%rbx,%rdi,8), %rbp
               	movq	%rbp, 88(%rcx,%rdi,8)
               	addq	$8, %rdi
               	cmpq	%rdi, %rsi
               	jne	0x415430 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x150>
               	testq	%rdx, %rdx
               	je	0x4154b1 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1d1>
               	leaq	(%rbx,%rdi,8), %rsi
               	addq	$16, %rsi
               	leaq	(%rcx,%rdi,8), %rcx
               	addq	$32, %rcx
               	xorl	%edi, %edi
               	movq	(%rsi,%rdi,8), %rbp
               	movq	%rbp, (%rcx,%rdi,8)
               	addq	$1, %rdi
               	cmpq	%rdi, %rdx
               	jne	0x4154a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1c0>
               	movq	%rax, 88(%rsp)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r14
               	leaq	40(%rsp), %r12
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	301485(%rip), %rsi      # 0x45eec0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	272253(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	leaq	270666(%rip), %rsi      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	leaq	270651(%rip), %rsi      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	nopl	(%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	280570(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	323177(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415638 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x98>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4156e8 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x148>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	270711(%rip), %rcx      # 0x4577f0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415693 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	shlq	$2, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136b0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	300958(%rip), %rsi      # 0x45eec0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	271725(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	nop

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	280074(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	322681(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415828 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x98>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4158d7 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x147>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	270071(%rip), %rcx      # 0x457760 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415883 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136b0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	300463(%rip), %rsi      # 0x45eec0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	271230(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	nop

<kfun:kotlin.Any#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	322318(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415993 <kfun:kotlin.Any#hashCode(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Any#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	274907(%rip), %rax      # 0x458bc0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 128(%rsp)
               	leaq	279523(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 120(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	322130(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415a4f <kfun:kotlin.Any#toString(){}kotlin.String+0xaf>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 16(%rsp)
               	movq	8(%rsp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x415aa2 <kfun:kotlin.Any#toString(){}kotlin.String+0x102>
               	leaq	64(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419700 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	movq	%rax, 64(%rsp)
               	testq	%rax, %rax
               	leaq	300180(%rip), %r13      # 0x45ef30 <__unnamed_2>
               	cmovneq	%rax, %r13
               	jmp	0x415ab2 <kfun:kotlin.Any#toString(){}kotlin.String+0x112>
               	movq	$0, 64(%rsp)
               	leaq	300158(%rip), %r13      # 0x45ef30 <__unnamed_2>
               	leaq	72(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	288(%r14), %rcx
               	movq	%rcx, 152(%rsp)
               	leaq	144(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movabsq	$51539607552, %rcx      # imm = 0xC00000000
               	movq	%rcx, 160(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movl	%eax, %edi
               	movq	%r15, %rsi
               	callq	0x43a660 <Kotlin_Long_toStringRadix>
               	movq	%rax, %rbp
               	leaq	120(%rsp), %rbx
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	299995(%rip), %rsi      # 0x45ef50 <__unnamed_3>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	321720(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415be9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x415c09 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	movb	8(%r14), %al
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$82, 92(%rcx)
               	jne	0x415c09 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	xorb	8(%rbx), %al
               	xorb	$1, %al
               	jmp	0x415c0b <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x3b>
               	xorl	%eax, %eax
               	andb	$1, %al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	321640(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c39 <kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	299824(%rip), %rcx      # 0x45ef70 <__unnamed_4>
               	cmpb	$0, 8(%rbx)
               	leaq	299845(%rip), %rax      # 0x45ef90 <__unnamed_5>
               	cmovneq	%rcx, %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	321582(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c73 <kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movzbl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	321544(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c99 <kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Enum#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	321502(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415cc3 <kfun:kotlin.Enum#hashCode(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Enum#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	321464(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415ce9 <kfun:kotlin.Enum#toString(){}kotlin.String+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	321416(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d19 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	nopl	(%rax,%rax)

<kfun:kotlin.String#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	321368(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d49 <kfun:kotlin.String#toString(){}kotlin.String+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.String#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	321326(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d73 <kfun:kotlin.String#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$168, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	40(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rbp      # imm = 0x600000000
               	movq	%rbp, 32(%rsp)
               	movb	321192(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415df9 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x79>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, 8(%r14)
               	movq	$0, 16(%r14)
               	movq	%r15, %rdi
               	callq	0x43a750 <Kotlin_getCurrentStackTrace>
               	movq	%rax, 24(%r14)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	271830(%rip), %rcx      # 0x458410 <ktypeglobal:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 48(%rsp)
               	movq	%r14, 24(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	272621(%rip), %rax      # 0x458760 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 8(%rsp)
               	movq	%rcx, 56(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 128(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	272220(%rip), %rbp      # 0x458640 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 136(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 24(%r15)
               	movl	316182(%rip), %eax      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x415f16 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x196>
               	leaq	316170(%rip), %rdi      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	12335(%rip), %rsi       # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	movq	316099(%rip), %rbx      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 32(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	272785(%rip), %rax      # 0x458910 <ktypeglobal:kotlin.native.concurrent.Lock#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rbp, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	272093(%rip), %r13      # 0x4586d0 <ktypeglobal:kotlin.native.concurrent.AtomicInt#internal>
               	movq	%r13, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 24(%rbx)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%r13, 16(%rax)
               	movq	%rcx, 96(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 32(%rbx)
               	movq	%rbp, 40(%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 32(%r14)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$168, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable#<get-message>(){}kotlin.String?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	320536(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416089 <kfun:kotlin.Throwable#<get-message>(){}kotlin.String?+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	320488(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160b9 <kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	320440(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160e9 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	271970(%rip), %rcx      # 0x458760 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%r14, %rsi
               	cmpq	%rcx, %rax
               	je	0x41610d <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x3d>
               	callq	0x418c40 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>
               	jmp	0x416112 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x42>
               	callq	0x418900 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.Throwable#printStackTrace(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$280, %rsp              # imm = 0x118
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movups	%xmm0, 80(%rsp)
               	movups	%xmm0, 96(%rsp)
               	leaq	270888(%rip), %rax      # 0x458380 <ktypeglobal:kotlin.Throwable.ExceptionTraceBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 72(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 184(%rsp)
               	leaq	176(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbp      # imm = 0x400000000
               	movq	%rbp, 192(%rsp)
               	movb	320236(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4161b5 <kfun:kotlin.Throwable#printStackTrace(){}+0x95>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	72(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 160(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 144(%rsp)
               	movq	%rbx, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	277407(%rip), %rcx      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 152(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, 88(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	%rcx, 120(%rsp)
               	movq	$0, 8(%rax)
               	leaq	275856(%rip), %rax      # 0x459820 <ktypeglobal:kotlin.collections.HashSet#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 256(%rsp)
               	movaps	%xmm0, 240(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 248(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 256(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$96, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rcx
               	movq	%rcx, 112(%rsp)
               	movq	$0, 8(%rax)
               	leaq	274408(%rip), %rax      # 0x4592f0 <ktypeglobal:kotlin.collections.HashMap#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rcx, 264(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	267083(%rip), %rcx      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%r14, 32(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	267307(%rip), %r13      # 0x4577f0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%r13, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%rbp, 40(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%r13, 16(%rax)
               	movl	$16, 24(%rax)
               	movq	%rcx, 48(%rsp)
               	movq	%r14, 24(%rbx)
               	movq	$0, 32(%rbx)
               	movq	%rbp, 40(%rbx)
               	movq	%rcx, 48(%rbx)
               	movq	$2, 80(%rbx)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	xorps	%xmm0, %xmm0
               	movq	288(%r12), %rax
               	movq	%rax, 216(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 224(%rsp)
               	movq	48(%rbx), %rax
               	movq	%rax, 232(%rsp)
               	movl	8(%rax), %eax
               	movq	216(%rsp), %rcx
               	bsrl	%eax, %edx
               	xorl	$31, %edx
               	addl	$1, %edx
               	testl	%eax, %eax
               	movl	$33, %eax
               	cmovnel	%edx, %eax
               	movq	%rcx, 288(%r12)
               	movl	%eax, 88(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%r15)
               	movq	120(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movb	$1, 104(%rsp)
               	movq	80(%rsp), %rbx
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	leaq	294144(%rip), %rdx      # 0x45e228 <__unnamed_6>
               	leaq	72(%rsp), %rdi
               	movq	%rbx, %rsi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	testb	%al, %al
               	je	0x416565 <kfun:kotlin.Throwable#printStackTrace(){}+0x445>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x416587 <kfun:kotlin.Throwable#printStackTrace(){}+0x467>
               	movq	184(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$280, %rsp              # imm = 0x118
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	319243(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416596 <kfun:kotlin.Throwable#printStackTrace(){}+0x476>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rsp), %rsi
               	movq	%rsi, 48(%rsp)
               	leaq	297481(%rip), %rdx      # 0x45efb0 <__unnamed_7>
               	leaq	72(%rsp), %rdi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	271826(%rip), %rcx      # 0x458bc0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 64(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f80 <ThrowInvalidReceiverTypeException>

<kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	319024(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416671 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x71>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 32(%rbx)
               	jne	0x4166cd <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xcd>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	%rbx, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	testq	%r14, %r14
               	je	0x4166e4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xe4>
               	leaq	72(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*128(%rax)
               	movq	%rax, %rdi
               	jmp	0x4166eb <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xeb>
               	leaq	32(%rsp), %rdx
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e9c0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x4168e2 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2e2>
               	leaq	296789(%rip), %rdi      # 0x45ee40 <__unnamed_8>
               	callq	0x43ac10 <Kotlin_io_Console_println>
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 128(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 288(%rbp)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 64(%rsp)
               	movl	16(%r14), %r15d
               	testl	%r15d, %r15d
               	jns	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movq	8(%r14), %r12
               	movq	%r12, 120(%rsp)
               	movq	%r12, 128(%rsp)
               	movl	8(%r12), %eax
               	movl	%eax, %ebx
               	sarl	$31, %ebx
               	andl	%eax, %ebx
               	movl	8(%r12), %edx
               	movl	%r15d, %edi
               	movl	%ebx, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%r12), %rax
               	cmpl	%ebx, %r15d
               	jge	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movslq	%r15d, %r9
               	leaq	(%r12,%r9,2), %r11
               	addq	$16, %r11
               	movl	%r15d, %r10d
               	notl	%r10d
               	addl	%ebx, %r10d
               	cmpl	$15, %r10d
               	jb	0x41689c <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x29c>
               	addq	$1, %r10
               	movq	%r10, %r8
               	andq	$-16, %r8
               	leaq	-16(%r8), %rax
               	movq	%rax, %rdi
               	shrq	$4, %rdi
               	addq	$1, %rdi
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpq	$112, %rax
               	jae	0x4167d6 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1d6>
               	xorl	%eax, %eax
               	jmp	0x416861 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x261>
               	leaq	(%r12,%r9,2), %rsi
               	addq	$240, %rsi
               	andq	$-8, %rdi
               	negq	%rdi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopl	(%rax)
               	movups	%xmm0, -208(%rsi,%rcx,2)
               	movups	%xmm0, -224(%rsi,%rcx,2)
               	movups	%xmm0, -192(%rsi,%rcx,2)
               	movups	%xmm0, -176(%rsi,%rcx,2)
               	movups	%xmm0, -160(%rsi,%rcx,2)
               	movups	%xmm0, -144(%rsi,%rcx,2)
               	movups	%xmm0, -128(%rsi,%rcx,2)
               	movups	%xmm0, -112(%rsi,%rcx,2)
               	movups	%xmm0, -96(%rsi,%rcx,2)
               	movups	%xmm0, -80(%rsi,%rcx,2)
               	movups	%xmm0, -64(%rsi,%rcx,2)
               	movups	%xmm0, -48(%rsi,%rcx,2)
               	movups	%xmm0, -32(%rsi,%rcx,2)
               	movups	%xmm0, -16(%rsi,%rcx,2)
               	leaq	128(%rcx), %rax
               	movups	%xmm0, 16(%rsi,%rcx,2)
               	movups	%xmm0, (%rsi,%rcx,2)
               	movq	%rax, %rcx
               	addq	$8, %rdi
               	jne	0x4167f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1f0>
               	testq	%rdx, %rdx
               	je	0x416890 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x290>
               	addq	%r9, %r9
               	leaq	(%r9,%rax,2), %rax
               	addq	%r12, %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x416880 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x280>
               	cmpq	%r8, %r10
               	je	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	addl	%r8d, %r15d
               	leaq	(%r11,%r8,2), %r11
               	subl	%r15d, %ebx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movw	$0, (%r11,%rax,2)
               	addq	$1, %rax
               	cmpl	%eax, %ebx
               	jne	0x4168b0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2b0>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	$0, 16(%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r14, 24(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 256(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rcx, (%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$124554051584, %rax     # imm = 0x1D00000000
               	movq	%rax, 48(%rsp)
               	movb	318157(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4169d4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0xd4>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	8(%rax), %rdi
               	movq	%r14, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x416af9 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1f9>
               	leaq	120(%rsp), %rbx
               	leaq	112(%rsp), %r13
               	leaq	104(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	292896(%rip), %rsi      # 0x45e228 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	128(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	8(%r12), %rax
               	cmpq	%r14, %rax
               	movq	%r14, %rbp
               	movq	%r14, 8(%rsp)
               	je	0x416b8a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28a>
               	movq	24(%rax), %r15
               	movl	8(%r15), %ebx
               	movq	24(%rbp), %r14
               	movl	8(%r14), %ebp
               	cmpl	%ebp, %ebx
               	movl	%ebx, %edx
               	cmovgl	%ebp, %edx
               	xorl	%r13d, %r13d
               	testl	%edx, %edx
               	cmovsl	%r13d, %edx
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	movq	%r12, 24(%rsp)
               	cmpq	%r13, %rdx
               	je	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	nopl	(%rax)
               	movzbl	317937(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416abb <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1bb>
               	movq	%rdx, %r12
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdx
               	movq	24(%rsp), %r12
               	cmpl	%ebp, 8(%r14)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	cmpl	%ebx, 8(%r15)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movslq	%ebp, %rax
               	movslq	%ebx, %rcx
               	movq	16(%r15,%rcx,8), %rcx
               	cmpq	%rcx, 16(%r14,%rax,8)
               	jne	0x416b8e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>
               	addq	$1, %r13
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	cmpq	%r13, %rdx
               	jne	0x416aa0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1a0>
               	jmp	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	leaq	72(%rsp), %r13
               	leaq	64(%rsp), %rbx
               	leaq	56(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	292628(%rip), %rsi      # 0x45e228 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	296111(%rip), %rsi      # 0x45efe0 <__unnamed_9>
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	leaq	80(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	295733(%rip), %rsi      # 0x45eea0 <__unnamed_10>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	xorl	%eax, %eax
               	jmp	0x416cf3 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3f3>
               	xorl	%ebx, %ebx
               	jmp	0x416ba1 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2a1>
               	movl	%r13d, %edx
               	xorl	%eax, %eax
               	addl	$-1, %edx
               	cmovsl	%eax, %edx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rbx
               	leaq	136(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x4160d0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %eax
               	movq	%rbx, 16(%rsp)
               	subl	%ebx, %eax
               	testl	%eax, %eax
               	jle	0x416c68 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x368>
               	movl	%eax, %r14d
               	xorl	%r15d, %r15d
               	leaq	296032(%rip), %rbx      # 0x45f030 <__unnamed_11>
               	movzbl	317633(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416be0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2e0>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x4160d0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r15
               	jae	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movq	16(%rax,%r15,8), %r13
               	addq	$1, %r15
               	movq	%r13, 152(%rsp)
               	movq	16(%r12), %rbp
               	movq	%rbp, %rdi
               	leaq	292364(%rip), %rsi      # 0x45e228 <__unnamed_6>
               	leaq	160(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	168(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	leaq	176(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	cmpq	%r15, %r14
               	movq	8(%rsp), %rbp
               	jne	0x416bd0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2d0>
               	movq	16(%rsp), %r14
               	testl	%r14d, %r14d
               	je	0x416ce0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3e0>
               	leaq	192(%rsp), %r13
               	leaq	184(%rsp), %rdx
               	leaq	200(%rsp), %r15
               	movq	16(%r12), %rbx
               	leaq	292242(%rip), %rsi      # 0x45e228 <__unnamed_6>
               	movq	%rbx, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	295851(%rip), %rsi      # 0x45f050 <__unnamed_12>
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r14d, %esi
               	movq	%r15, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	295867(%rip), %rsi      # 0x45f080 <__unnamed_13>
               	movq	%rbx, %rdi
               	leaq	208(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	40(%rbp), %rcx
               	movq	%rcx, 216(%rsp)
               	movb	$1, %al
               	testq	%rcx, %rcx
               	jne	0x416d1a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x41a>
               	movq	40(%rsp), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 288(%rdx)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	(%rsp), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	269936(%rip), %rcx      # 0x458bc0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 224(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f80 <ThrowInvalidReceiverTypeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	$0, 8(%rsp)
               	leaq	269818(%rip), %rax      # 0x458bc0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 136(%rsp)
               	leaq	274435(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 32(%rsp)
               	movb	317039(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416e32 <kfun:kotlin.Throwable#toString(){}kotlin.String+0xc2>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	64(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rsp, %rdi
               	movq	%rdi, 40(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rbx, %rsi
               	callq	0x419470 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x416e7a <kfun:kotlin.Throwable#toString(){}kotlin.String+0x10a>
               	leaq	56(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x419390 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	284042(%rip), %rbx      # 0x45c400 <__unnamed_14>
               	cmovneq	%rax, %rbx
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f46 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1d6>
               	movq	%rbp, %r15
               	leaq	80(%rsp), %r13
               	leaq	128(%rsp), %rbp
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	295439(%rip), %rsi      # 0x45f0e0 <__unnamed_15>
               	movq	%rbp, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f19 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1a9>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x416f20 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1b0>
               	leaq	294688(%rip), %rsi      # 0x45ee40 <__unnamed_8>
               	movq	%r15, %rbp
               	leaq	128(%rsp), %rbx
               	movq	%rbx, %rdi
               	leaq	112(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%rbp)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	%rbx, %rax
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1624, %rsp             # imm = 0x658
               	movq	%rsi, 136(%rsp)
               	movq	%rdi, %rbx
               	movb	316678(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416f9b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x2b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 576(%rsp)
               	movaps	%xmm0, 560(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 24(%rsp)
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 568(%rsp)
               	leaq	560(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 576(%rsp)
               	movq	24(%rbx), %rcx
               	movq	%rcx, 8(%rsp)
               	movl	8(%rcx), %r13d
               	movq	-64(%rax), %rdx
               	movl	$1, %ecx
               	movl	$1, %esi
               	xchgl	%esi, 328(%rdx)
               	movl	%esi, 108(%rsp)
               	movq	$0, 120(%rsp)
               	movl	$1, 128(%rsp)
               	movb	$0, 132(%rsp)
               	movq	-64(%rax), %rax
               	testq	%rax, %rax
               	je	0x417064 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xf4>
               	xchgl	%ecx, 328(%rax)
               	movq	%rax, 120(%rsp)
               	movl	%ecx, 128(%rsp)
               	movb	$1, 132(%rsp)
               	movq	%rdx, 144(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 48(%rsp)
               	movq	48(%rsp), %rax
               	movq	32(%rsp), %r15
               	subq	%r15, %rax
               	sarq	$5, %rax
               	cmpq	%r13, %rax
               	jae	0x41717e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x20e>
               	movq	40(%rsp), %rbx
               	movq	%rbx, %r12
               	subq	%r15, %r12
               	movl	$32, %esi
               	movq	%r13, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r14
               	cmpq	%r15, %rbx
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	leaq	16(%r14), %rax
               	leaq	16(%r15), %rcx
               	jmp	0x417105 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x195>
               	nopl	(%rax,%rax)
               	movq	%rdx, -16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, (%rax)
               	movq	-8(%rcx), %rdx
               	movq	%rdx, -8(%rax)
               	movq	%rcx, -16(%rcx)
               	movq	$0, -8(%rcx)
               	movb	$0, (%rcx)
               	addq	$32, %rax
               	leaq	32(%rcx), %rdx
               	addq	$16, %rcx
               	cmpq	%rbx, %rcx
               	movq	%rdx, %rcx
               	je	0x41711a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1aa>
               	movq	%rax, -16(%rax)
               	movq	-16(%rcx), %rdx
               	cmpq	%rcx, %rdx
               	jne	0x4170d0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x160>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x4170da <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x16a>
               	cmpq	%rbx, %r15
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	movq	%r15, %rbp
               	jmp	0x417139 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c9>
               	nopl	(%rax,%rax)
               	addq	$16, %rbp
               	cmpq	%rbx, %rbp
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	movq	(%rbp), %rdi
               	addq	$16, %rbp
               	cmpq	%rbp, %rdi
               	je	0x417130 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
               	callq	0x4136d0 <free@plt>
               	jmp	0x417130 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
               	sarq	$5, %r12
               	testq	%r15, %r15
               	je	0x41715e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1ee>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, 32(%rsp)
               	shlq	$5, %r12
               	addq	%r14, %r12
               	movq	%r12, 40(%rsp)
               	movq	%r13, %rax
               	shlq	$5, %rax
               	addq	%r14, %rax
               	movq	%rax, 48(%rsp)
               	testl	%r13d, %r13d
               	je	0x417766 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
               	leaq	176(%rsp), %rax
               	movq	%rax, 160(%rsp)
               	movq	$0, 168(%rsp)
               	movb	$0, 176(%rsp)
               	movq	$-1, 192(%rsp)
               	leaq	216(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	movq	$0, 208(%rsp)
               	movb	$0, 216(%rsp)
               	movq	$-1, 232(%rsp)
               	leaq	256(%rsp), %rax
               	movq	%rax, 240(%rsp)
               	movq	$0, 248(%rsp)
               	movb	$0, 256(%rsp)
               	movq	$-1, 272(%rsp)
               	leaq	296(%rsp), %rax
               	movq	%rax, 280(%rsp)
               	movq	$0, 288(%rsp)
               	movb	$0, 296(%rsp)
               	movq	$-1, 312(%rsp)
               	leaq	336(%rsp), %rax
               	movq	%rax, 320(%rsp)
               	movq	$0, 328(%rsp)
               	movb	$0, 336(%rsp)
               	movq	$-1, 352(%rsp)
               	leaq	376(%rsp), %rax
               	movq	%rax, 360(%rsp)
               	movq	$0, 368(%rsp)
               	movb	$0, 376(%rsp)
               	movq	$-1, 392(%rsp)
               	leaq	416(%rsp), %rax
               	movq	%rax, 400(%rsp)
               	movq	$0, 408(%rsp)
               	movb	$0, 416(%rsp)
               	movq	$-1, 432(%rsp)
               	leaq	456(%rsp), %rax
               	movq	%rax, 440(%rsp)
               	movq	$0, 448(%rsp)
               	movb	$0, 456(%rsp)
               	movq	$-1, 472(%rsp)
               	leaq	496(%rsp), %rax
               	movq	%rax, 480(%rsp)
               	movq	$0, 488(%rsp)
               	movb	$0, 496(%rsp)
               	movq	$-1, 512(%rsp)
               	leaq	536(%rsp), %rax
               	movq	%rax, 520(%rsp)
               	movq	$0, 528(%rsp)
               	movb	$0, 536(%rsp)
               	movq	$-1, 552(%rsp)
               	leaq	80(%rsp), %rbp
               	leaq	592(%rsp), %r15
               	xorl	%r14d, %r14d
               	movq	8(%rsp), %rbx
               	movq	%r13, 96(%rsp)
               	jmp	0x4173d4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
               	movq	%rcx, (%r13)
               	movq	80(%rsp), %rax
               	movq	%rax, 16(%r13)
               	movq	8(%rsp), %rbx
               	movq	72(%rsp), %rax
               	movq	%rax, 8(%r13)
               	movq	%rbp, 64(%rsp)
               	movq	$0, 72(%rsp)
               	movb	$0, 80(%rsp)
               	addq	$32, %r13
               	movq	%r13, 40(%rsp)
               	movq	96(%rsp), %r13
               	leaq	592(%rsp), %r15
               	addq	$1, %r14
               	cmpq	%r13, %r14
               	je	0x417662 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6f2>
               	movq	16(%rbx,%r14,8), %rcx
               	cmpq	$2, %rcx
               	jb	0x4173c7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x457>
               	addq	$-1, %rcx
               	movq	40(%rsp), %r13
               	movq	32(%rsp), %rax
               	movq	%r13, %rbx
               	movq	%rax, 16(%rsp)
               	subq	%rax, %rbx
               	movq	%rbx, %r12
               	sarq	$5, %r12
               	leaq	189637(%rip), %rax      # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%rax, (%rsp)
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	xorl	%r8d, %r8d
               	leaq	189618(%rip), %r9       # 0x4458cc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%eax, %eax
               	callq	0x435d40 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
               	movq	%rbp, 64(%rsp)
               	movq	%r15, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rbp, %rcx
               	movq	%rax, %rbp
               	movq	%rcx, %rax
               	cmpq	$16, %rbp
               	jb	0x41745e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ee>
               	testq	%rbp, %rbp
               	js	0x417a17 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaa7>
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 64(%rsp)
               	movq	%rbp, 80(%rsp)
               	testq	%rbp, %rbp
               	je	0x417487 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
               	cmpq	$1, %rbp
               	jne	0x417474 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x504>
               	movb	592(%rsp), %cl
               	movb	%cl, (%rax)
               	jmp	0x417487 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
               	movq	%rax, %rdi
               	leaq	592(%rsp), %rsi
               	movq	%rbp, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%rbp, 72(%rsp)
               	movq	64(%rsp), %rax
               	movb	$0, (%rax,%rbp)
               	cmpq	%r13, 48(%rsp)
               	je	0x4174c3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x553>
               	leaq	16(%r13), %rax
               	movq	%rax, (%r13)
               	movq	64(%rsp), %rcx
               	leaq	80(%rsp), %rbp
               	cmpq	%rbp, %rcx
               	jne	0x417383 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x413>
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x417390 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x420>
               	testq	%rbx, %rbx
               	movq	%r12, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r12), %r15
               	movabsq	$576460752303423487, %rcx # imm = 0x7FFFFFFFFFFFFFF
               	cmpq	%rcx, %r15
               	cmovaq	%rcx, %r15
               	addq	%r12, %rax
               	cmovbq	%rcx, %r15
               	testq	%r15, %r15
               	leaq	80(%rsp), %rbx
               	je	0x417507 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x597>
               	movl	$32, %esi
               	movq	%r15, %rdi
               	callq	0x4136c0 <calloc@plt>
               	jmp	0x417509 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
               	xorl	%eax, %eax
               	shlq	$5, %r12
               	leaq	(%rax,%r12), %rdx
               	addq	$16, %rdx
               	movq	%rdx, (%rax,%r12)
               	movq	64(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	je	0x417536 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5c6>
               	leaq	(%rax,%r12), %rdx
               	movq	%rcx, (%rdx)
               	movq	80(%rsp), %rcx
               	movq	%rcx, 16(%rax,%r12)
               	jmp	0x41753c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5cc>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 8(%rax,%r12)
               	movq	%rbx, 64(%rsp)
               	movq	$0, 72(%rsp)
               	movb	$0, 80(%rsp)
               	movq	16(%rsp), %r12
               	cmpq	%r12, %r13
               	movq	%rax, 152(%rsp)
               	je	0x41760c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x69c>
               	leaq	16(%rax), %rcx
               	leaq	16(%r12), %rax
               	jmp	0x4175b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x646>
               	nopl	(%rax)
               	movq	%rcx, -16(%rbp)
               	movq	(%rax), %rcx
               	movq	%rcx, (%rbp)
               	movq	-8(%rax), %rcx
               	movq	%rcx, -8(%rbp)
               	movq	%rax, -16(%rax)
               	movq	$0, -8(%rax)
               	movb	$0, (%rax)
               	leaq	32(%rbp), %rcx
               	leaq	32(%rax), %rdx
               	addq	$16, %rax
               	cmpq	%r13, %rax
               	movq	%rdx, %rax
               	je	0x4175cf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x65f>
               	movq	%rcx, %rbp
               	movq	%rcx, -16(%rcx)
               	movq	-16(%rax), %rcx
               	cmpq	%rax, %rcx
               	jne	0x417580 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x610>
               	movups	(%rcx), %xmm0
               	movups	%xmm0, (%rbp)
               	jmp	0x41758b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x61b>
               	addq	$16, %rbp
               	addq	$32, %rbp
               	cmpq	%r12, %r13
               	je	0x417610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
               	movq	%r12, %rbx
               	jmp	0x4175f9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x689>
               	nopl	(%rax,%rax)
               	addq	$16, %rbx
               	cmpq	%r13, %rbx
               	je	0x417610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4175f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4175f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
               	leaq	32(%rax), %rbp
               	testq	%r12, %r12
               	movq	96(%rsp), %r13
               	je	0x417622 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6b2>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	152(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rbp, 40(%rsp)
               	shlq	$5, %r15
               	addq	%rax, %r15
               	movq	%r15, 48(%rsp)
               	movq	64(%rsp), %rdi
               	leaq	80(%rsp), %rbp
               	cmpq	%rbp, %rdi
               	movq	8(%rsp), %rbx
               	je	0x4173bf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4173bf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
               	movq	520(%rsp), %rdi
               	leaq	536(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41767c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x70c>
               	callq	0x43b785 <operator delete(void*)>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417696 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x726>
               	callq	0x43b785 <operator delete(void*)>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x740>
               	callq	0x43b785 <operator delete(void*)>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176ca <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x75a>
               	callq	0x43b785 <operator delete(void*)>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176e4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x774>
               	callq	0x43b785 <operator delete(void*)>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176fe <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x78e>
               	callq	0x43b785 <operator delete(void*)>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417718 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7a8>
               	callq	0x43b785 <operator delete(void*)>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417732 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7c2>
               	callq	0x43b785 <operator delete(void*)>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41774c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7dc>
               	callq	0x43b785 <operator delete(void*)>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417766 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
               	callq	0x43b785 <operator delete(void*)>
               	movq	120(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	movl	128(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	cmpl	$1, %eax
               	jne	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	movb	314634(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	addq	$328, %rdi              # imm = 0x148
               	movl	108(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	cmpl	$1, %eax
               	jne	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	movb	314575(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 616(%rsp)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 600(%rsp)
               	leaq	592(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 608(%rsp)
               	movq	40(%rsp), %rbp
               	movq	32(%rsp), %r13
               	movq	%rbp, %r14
               	subq	%r13, %r14
               	movq	%r14, %rbx
               	shrq	$5, %rbx
               	testl	%ebx, %ebx
               	movq	%r13, 16(%rsp)
               	movq	%rbp, 8(%rsp)
               	js	0x417a23 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xab3>
               	movq	296(%rax), %rdi
               	movq	%r14, %rax
               	shrq	$2, %rax
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%rax, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	261700(%rip), %rax      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%r15)
               	movl	%ebx, 24(%r15)
               	movq	%rcx, 96(%rsp)
               	movq	%rcx, 616(%rsp)
               	cmpq	%r13, %rbp
               	jne	0x4178b7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x947>
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417975 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa05>
               	sarq	$5, %r14
               	cmpq	$1, %r14
               	movl	$1, %ebp
               	cmovaq	%r14, %rbp
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	xorl	%ebx, %ebx
               	leaq	160(%rsp), %r14
               	movabsq	$4294967296, %r12       # imm = 0x100000000
               	nopl	(%rax,%rax)
               	movq	$0, 184(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 168(%rsp)
               	movq	%r14, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 176(%rsp)
               	movq	(%r13), %rdi
               	leaq	184(%rsp), %rsi
               	callq	0x4368d0 <CreateStringFromCString>
               	movq	184(%rsp), %rax
               	movq	%rbx, %rcx
               	sarq	$29, %rcx
               	movq	%rax, 32(%r15,%rcx)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	%r12, %rbx
               	addq	$32, %r13
               	addq	$-1, %rbp
               	jne	0x4178f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x980>
               	movq	96(%rsp), %r15
               	movq	%r15, 584(%rsp)
               	movq	600(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	16(%rsp), %r14
               	movq	8(%rsp), %rbp
               	cmpq	%rbp, %r14
               	je	0x4179cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa5c>
               	movq	%r14, %rbx
               	jmp	0x4179b9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa49>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%rbp, %rbx
               	je	0x4179cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa5c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4179b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa40>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4179b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa40>
               	testq	%r14, %r14
               	je	0x4179d9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa69>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	136(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	568(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$1624, %rsp             # imm = 0x658
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	188210(%rip), %rdi      # 0x445950 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4363a0 <std::__throw_length_error(char const*)>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	movq	%rax, %rbx
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417c87 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd17>
               	movq	%rax, %rbx
               	movq	520(%rsp), %rdi
               	leaq	536(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b56 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbe6>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b74 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc04>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b92 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc22>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bb0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc40>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bce <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc5e>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bec <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc7c>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c0a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc9a>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c28 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xcb8>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c46 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xcd6>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
               	callq	0x43b785 <operator delete(void*)>
               	leaq	32(%rsp), %rdi
               	callq	0x4363c0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
               	leaq	112(%rsp), %rdi
               	callq	0x436420 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	callq	0x43b785 <operator delete(void*)>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a71 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb01>
               	callq	0x43b785 <operator delete(void*)>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a8a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb1a>
               	callq	0x43b785 <operator delete(void*)>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417aa3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb33>
               	callq	0x43b785 <operator delete(void*)>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417abc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb4c>
               	callq	0x43b785 <operator delete(void*)>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417ad5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb65>
               	callq	0x43b785 <operator delete(void*)>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417aee <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb7e>
               	callq	0x43b785 <operator delete(void*)>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b07 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb97>
               	callq	0x43b785 <operator delete(void*)>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b20 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbb0>
               	callq	0x43b785 <operator delete(void*)>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b35 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbc5>
               	jmp	0x417b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
               	movq	%rax, %rbx
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	600(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	8(%rsp), %rax
               	cmpq	%rax, 16(%rsp)
               	je	0x417cc4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd54>
               	movq	16(%rsp), %rbp
               	movq	(%rbp), %rdi
               	addq	$16, %rbp
               	cmpq	%rbp, %rdi
               	je	0x417cb9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd49>
               	callq	0x4136d0 <free@plt>
               	addq	$16, %rbp
               	cmpq	8(%rsp), %rbp
               	jne	0x417ca7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd37>
               	cmpq	$0, 16(%rsp)
               	je	0x417cd6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd66>
               	movq	16(%rsp), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<checkRangeIndexes>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movl	%edi, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 192(%rsp)
               	movups	%xmm0, 8(%rsp)
               	leaq	270488(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 32(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 64(%rsp)
               	movb	313083(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417da6 <checkRangeIndexes+0xc6>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebx, %ebx
               	js	0x417dd8 <checkRangeIndexes+0xf8>
               	cmpl	%r15d, %ebp
               	jg	0x417dd8 <checkRangeIndexes+0xf8>
               	cmpl	%ebp, %ebx
               	jg	0x417eb5 <checkRangeIndexes+0x1d5>
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rsp, %rdi
               	movq	%rdi, 72(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	80(%rsp), %rdx
               	leaq	291594(%rip), %rsi      # 0x45f100 <__unnamed_16>
               	movq	%rsp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	88(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebx, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	96(%rsp), %rdx
               	leaq	291607(%rip), %rsi      # 0x45f130 <__unnamed_17>
               	movq	%rsp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	104(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebp, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	112(%rsp), %rdx
               	leaq	291620(%rip), %rsi      # 0x45f160 <__unnamed_18>
               	movq	%rsp, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	120(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%r15d, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	261546(%rip), %rcx      # 0x457c40 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 136(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 144(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	152(%rsp), %rdx
               	leaq	291365(%rip), %rsi      # 0x45f100 <__unnamed_16>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	160(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	168(%rsp), %rdx
               	leaq	291448(%rip), %rsi      # 0x45f180 <__unnamed_19>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	176(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebp, %esi
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	184(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	261494(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 192(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	312538(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417fc7 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x17>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x417ff2 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x42>
               	cmpl	%ebp, 8(%rbx)
               	jbe	0x418001 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x51>
               	movq	(%rbx), %rax
               	movslq	%ebp, %rax
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259799(%rip), %rsi      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edx, %r14d
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	312438(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41802b <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x1b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x4180b6 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa6>
               	movl	8(%rbx), %edx
               	movl	%ebp, %edi
               	movl	%r14d, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%rbx), %rax
               	cmpl	%r14d, %ebp
               	jge	0x4180b1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movslq	%ebp, %rdx
               	notl	%ebp
               	addl	%r14d, %ebp
               	je	0x418094 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x84>
               	addq	$1, %rbp
               	movq	%rbp, %rcx
               	andq	$-2, %rcx
               	leaq	(%rcx,%rdx), %rax
               	leaq	(%rbx,%rdx,8), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, (%rdx,%rsi,8)
               	addq	$2, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x418080 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x70>
               	cmpq	%rcx, %rbp
               	jne	0x418097 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x87>
               	jmp	0x4180b1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movq	%rdx, %rax
               	movl	%r14d, %ecx
               	nopw	(%rax,%rax)
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$1, %rax
               	cmpl	%eax, %ecx
               	jne	0x4180a0 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x90>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	259603(%rip), %rsi      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.MemoryModel.$init_global#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$384, %rsp              # imm = 0x180
               	leaq	88(%rsp), %rbx
               	movl	$296, %edx              # imm = 0x128
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 96(%rsp)
               	movq	%rbx, 288(%r14)
               	movabsq	$158913789952, %rax     # imm = 0x2500000000
               	movq	%rax, 104(%rsp)
               	movb	312173(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418134 <kfun:kotlin.native.MemoryModel.$init_global#internal+0x64>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	263092(%rip), %rbx      # 0x458510 <ktypeglobal:kotlin.native.MemoryModel#internal>
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 112(%rsp)
               	movq	%rcx, 120(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 128(%rsp)
               	movq	%rcx, 136(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	259277(%rip), %rbx      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 160(%rsp)
               	movq	%rcx, 168(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 176(%rsp)
               	movq	120(%rsp), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 16(%rax)
               	movq	168(%rsp), %rax
               	movq	%rax, 192(%rsp)
               	movq	136(%rsp), %rcx
               	movq	%rcx, 200(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 24(%rax)
               	movq	168(%rsp), %rax
               	movq	%rax, 208(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 216(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	168(%rsp), %rsi
               	movq	%rsi, 224(%rsp)
               	movq	%rsi, 306985(%rip)      # 0x4631d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	leaq	306978(%rip), %rdi      # 0x4631d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rsi), %rax
               	movq	%rax, 232(%rsp)
               	leaq	290543(%rip), %rcx      # 0x45f1b0 <__unnamed_20>
               	movq	%rcx, 8(%rax)
               	movl	$0, 16(%rax)
               	movq	24(%rsi), %rax
               	movq	%rax, 240(%rsp)
               	leaq	290545(%rip), %rcx      # 0x45f1d0 <__unnamed_21>
               	movq	%rcx, 8(%rax)
               	movl	$1, 16(%rax)
               	movq	16(%rsi), %rax
               	movq	%rax, 248(%rsp)
               	leaq	290547(%rip), %rcx      # 0x45f1f0 <__unnamed_22>
               	movq	%rcx, 8(%rax)
               	movl	$2, 16(%rax)
               	callq	0x424900 <InitAndRegisterGlobal>
               	movq	306876(%rip), %rax      # 0x4631d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rax), %rcx
               	movq	%rcx, 256(%rsp)
               	movq	%rcx, 264(%rsp)
               	movq	24(%rax), %rcx
               	movq	%rcx, 272(%rsp)
               	movq	%rcx, 280(%rsp)
               	movq	16(%rax), %rax
               	movq	%rax, 288(%rsp)
               	movq	%rax, 296(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 304(%rsp)
               	movq	%rcx, 312(%rsp)
               	movq	312(%rsp), %rax
               	movq	%rax, 320(%rsp)
               	movq	264(%rsp), %rcx
               	movq	%rcx, 328(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 16(%rax)
               	movq	312(%rsp), %rax
               	movq	%rax, 336(%rsp)
               	movq	280(%rsp), %rcx
               	movq	%rcx, 344(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 24(%rax)
               	movq	312(%rsp), %rax
               	movq	%rax, 352(%rsp)
               	movq	296(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	312(%rsp), %rbx
               	movq	%rbx, 368(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r15
               	movq	$0, 8(%rax)
               	leaq	270217(%rip), %rcx      # 0x45a400 <ktypeglobal:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0#internal>
               	movq	%rcx, 16(%rax)
               	movq	%r15, 24(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	269924(%rip), %rcx      # 0x45a310 <ktypeglobal:kotlin.enums.EnumEntriesList#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r15, 24(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	leaq	72(%rsp), %rsi
               	movq	288(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	%rbx, %rdi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rbx, 376(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	leaq	306371(%rip), %rdi      # 0x4631d8 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movq	%rbx, %rsi
               	callq	0x424900 <InitAndRegisterGlobal>
               	movq	96(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$384, %rsp              # imm = 0x180
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	32(%rsp), %r12
               	leaq	40(%rsp), %rbp
               	movups	%xmm0, 88(%rsp)
               	leaq	268379(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	310988(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4185d5 <kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String+0x95>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r14
               	movq	%r14, 24(%rsp)
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	0x418670 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	289812(%rip), %rsi      # 0x45f220 <__unnamed_23>
               	movq	%r14, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 56(%rsp)
               	leaq	64(%rsp), %rsi
               	callq	0x418670 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	leaq	72(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r15)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.debugString#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movups	%xmm0, 144(%rsp)
               	leaq	268078(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 136(%rsp)
               	movq	$0, 40(%rsp)
               	leaq	263410(%rip), %rax      # 0x458bc0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 64(%rsp)
               	movb	310657(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418720 <kfun:kotlin.native.concurrent.debugString#internal+0xb0>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x418885 <kfun:kotlin.native.concurrent.debugString#internal+0x215>
               	leaq	96(%rsp), %rbp
               	leaq	88(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	%r12, 72(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	32(%rsp), %rdi
               	movq	%rdi, 80(%rsp)
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rsi
               	callq	0x419470 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	289117(%rip), %rsi      # 0x45f0e0 <__unnamed_15>
               	movq	%r12, %rdi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*120(%rax)
               	movl	%eax, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 168(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 176(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbp, %rsi
               	callq	0x43a660 <Kotlin_Long_toStringRadix>
               	movq	%rax, 24(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	jmp	0x41888c <kfun:kotlin.native.concurrent.debugString#internal+0x21c>
               	leaq	288180(%rip), %rax      # 0x45ee40 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	310229(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4188cc <kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String+0x1c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	leaq	184466(%rip), %rdx      # 0x445968 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x437310 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x4368d0 <CreateStringFromCString>
               	movq	%rax, (%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 16(%rsp)
               	movb	310040(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418989 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x89>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	305266(%rip), %eax      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x4189ba <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0xba>
               	leaq	305254(%rip), %rdi      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1419(%rip), %rsi        # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 305183(%rip)      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418a57 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x157>
               	movq	24(%r12), %r15
               	movq	%r15, %rdi
               	callq	0x419140 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	movq	16(%r12), %rax
               	movq	%rax, 40(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 48(%rsp)
               	cmpq	%rbx, 305138(%rip)      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418a4f <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x14f>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	movq	8(%rax), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x418a78 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x178>
               	leaq	80(%rsp), %rsi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$89, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	callq	*(%rax)
               	movq	%rax, %rbx
               	movq	16(%r12), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rbx, 8(%rax)
               	movq	8(%r12), %rax
               	movq	%rax, 112(%rsp)
               	movq	$0, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%r15, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	309641(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418b18 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x68>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r14), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	304868(%rip), %eax      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418b48 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x98>
               	leaq	304856(%rip), %rdi      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1021(%rip), %rsi        # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 304785(%rip)      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	setne	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	309455(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x418c03 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x93>
               	movq	%r15, %rdi
               	callq	0x418ab0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	je	0x418c14 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xa4>
               	leaq	24(%rsp), %rsi
               	movq	%r15, %rdi
               	callq	0x418900 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	testq	%rax, %rax
               	je	0x418c1d <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xad>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rcx)
               	jmp	0x418c24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x418ab0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x418bd9 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x69>
               	leaq	288293(%rip), %rax      # 0x45f240 <__unnamed_24>
               	jmp	0x418c24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	leaq	287260(%rip), %rax      # 0x45ee40 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	309228(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418cb5 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x75>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %r14
               	movq	%r14, %rdi
               	callq	0x419140 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 176(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$73014444032, %rax      # imm = 0x1100000000
               	movq	%rax, 64(%rsp)
               	movq	8(%rbx), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	80(%rsp), %rbp
               	movq	%rbp, 88(%rsp)
               	movl	304328(%rip), %eax      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418d64 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x124>
               	leaq	304316(%rip), %rdi      # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	481(%rip), %rsi         # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	cmpq	304245(%rip), %rbp      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	je	0x418e06 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1c6>
               	movq	80(%rsp), %rbp
               	movq	%rbp, 96(%rsp)
               	movl	304279(%rip), %eax      # 0x463218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418d99 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x159>
               	leaq	304267(%rip), %rdi      # 0x463218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	684(%rip), %rsi         # 0x419040 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	movq	304200(%rip), %rax      # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 104(%rsp)
               	cmpq	%rax, %rbp
               	jne	0x418e78 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x238>
               	movq	8(%rbx), %rax
               	movq	304167(%rip), %rcx      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	257946(%rip), %rcx      # 0x457d80 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	287898(%rip), %rsi      # 0x45f290 <__unnamed_25>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	8(%rbx), %r13
               	movl	304136(%rip), %eax      # 0x463218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418e28 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1e8>
               	leaq	304124(%rip), %rdi      # 0x463218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	541(%rip), %rsi         # 0x419040 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	movq	304057(%rip), %rax      # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 8(%r13)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	testq	%rdi, %rdi
               	je	0x418ebc <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x27c>
               	leaq	144(%rsp), %rsi
               	callq	0x416f70 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, 80(%rsp)
               	movq	$0, 16(%rbx)
               	movq	8(%rbx), %rax
               	movq	80(%rsp), %rcx
               	movq	%rcx, 176(%rsp)
               	movq	%rcx, 8(%rax)
               	movq	80(%rsp), %rbx
               	movq	%rbx, 32(%rsp)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %r15
               	movq	%r15, 136(%rsp)
               	callq	0x43c175 <__cxa_end_catch>
               	movq	8(%rbx), %rax
               	movq	303851(%rip), %rcx      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 24(%rsp)
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%r14, %rdi
               	callq	0x419340 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	308487(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418f9a <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal+0x5a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	260142(%rip), %rdx      # 0x4587f0 <ktypeglobal:kotlin.native.concurrent.UNINITIALIZED#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 303630(%rip)      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	leaq	303623(%rip), %rdi      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	303616(%rip), %rax      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	303550(%rip), %rsi      # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	callq	0x424900 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	308231(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41909a <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal+0x5a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	260030(%rip), %rdx      # 0x458880 <ktypeglobal:kotlin.native.concurrent.INITIALIZING#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 303382(%rip)      # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	leaq	303375(%rip), %rdi      # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	303368(%rip), %rax      # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	303302(%rip), %rsi      # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	callq	0x424900 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#lock(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rdi, %rbx
               	movb	308037(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41915c <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %rcx
               	movl	-72(%rax), %ecx
               	cmpl	$2, %ecx
               	je	0x4192ce <kfun:kotlin.native.concurrent.Lock#lock(){}+0x18e>
               	cmpl	$3, %ecx
               	je	0x41932c <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1ec>
               	movl	$2, -72(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	callq	0x424cf0 <LookupTLS>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	259998(%rip), %rcx      # 0x4589a0 <ktypeglobal:kotlin.native.concurrent.CurrentThread#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	callq	0x424cf0 <LookupTLS>
               	movq	%rbp, (%rax)
               	callq	0x424cf0 <LookupTLS>
               	movq	(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	-64(%r14), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	254901(%rip), %rdx      # 0x457640 <ktypeglobal:kotlin.Any#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 8(%rbp)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x424cf0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r15)
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x424cf0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	nopl	(%rax)
               	movzbl	307617(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419300 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1c0>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	sete	%cl
               	cmpl	%ebp, %eax
               	je	0x419318 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1d8>
               	testb	%cl, %cl
               	je	0x4192f0 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1b0>
               	jmp	0x419321 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x1e1>
               	movq	16(%rbx), %rax
               	lock
               	addl	$1, 8(%rax)
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a170 <ThrowFileFailedToInitializeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#unlock(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	307534(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419353 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movl	8(%rax), %eax
               	testl	%eax, %eax
               	jle	0x419369 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x29>
               	movq	16(%rbx), %rax
               	lock
               	addl	$-1, 8(%rax)
               	popq	%rbx
               	retq
               	callq	0x424cf0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	8(%rbx), %rcx
               	xorl	%edx, %edx
               	lock
               	cmpxchgl	%edx, 8(%rcx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	307366(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x419405 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x75>
               	movq	8(%r15), %rax
               	testl	$512, 88(%rax)          # imm = 0x200
               	jne	0x419417 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x87>
               	jmp	0x419446 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	testl	$512, 88(%rax)          # imm = 0x200
               	je	0x419446 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	movq	80(%rax), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x419446 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	leaq	32(%rsp), %rdx
               	movl	$46, %esi
               	callq	0x4201a0 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	movq	%rax, %rdi
               	movl	$36, %esi
               	movq	%r14, %rdx
               	callq	0x4201a0 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	jmp	0x419448 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb8>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	264497(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	movb	307106(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4194ff <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x8f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	88(%rax), %ecx
               	testl	$256, %ecx              # imm = 0x100
               	jne	0x419531 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xc1>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	72(%rax), %r15
               	movq	%r15, 24(%rsp)
               	xorl	%ebx, %ebx
               	testq	%r15, %r15
               	je	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	andl	$512, %ecx              # imm = 0x200
               	je	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	movq	80(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	testq	%rbx, %rbx
               	je	0x41950e <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x9e>
               	cmpl	$0, 8(%r15)
               	je	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	leaq	48(%rsp), %r12
               	leaq	80(%rsp), %r13
               	movq	%r13, 40(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	286033(%rip), %rsi      # 0x45f2e0 <__unnamed_26>
               	movq	%r13, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	jmp	0x419510 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	nop

<kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	306888(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4195d9 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x419604 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x419604 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	8(%rbx), %rax
               	cmpq	%rax, 8(%r14)
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	306814(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419623 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	movl	302063(%rip), %eax      # 0x46321c <state_global$kotlin.native.internal.NativePtr>
               	cmpl	$2, %eax
               	je	0x419645 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x35>
               	leaq	302051(%rip), %rdi      # 0x46321c <state_global$kotlin.native.internal.NativePtr>
               	leaq	704(%rip), %rsi         # 0x419900 <kfun:kotlin.native.internal.NativePtr.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	xorl	%ebx, %eax
               	popq	%rbx
               	retq

<kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	306664(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4196b9 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String+0x69>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x419700 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	285778(%rip), %rsi      # 0x45f320 <__unnamed_27>
               	cmovneq	%rax, %rsi
               	leaq	285735(%rip), %rdi      # 0x45f300 <__unnamed_28>
               	movq	%r12, %rdx
               	callq	0x4370e0 <Kotlin_String_plusImpl>
               	movq	%rax, (%r12)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movups	%xmm0, 120(%rsp)
               	leaq	263841(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	306446(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419793 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x93>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	80(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	testq	%rbx, %rbx
               	je	0x419839 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x139>
               	movq	72(%rax), %r15
               	movq	%r15, 64(%rsp)
               	testq	%r15, %r15
               	je	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	movl	8(%r15), %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	cmpb	$0, 174015(%rip)        # 0x443fb8 <BOOLEAN_RANGE_TO>
               	jne	0x419840 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	testl	%ebp, %ebp
               	jne	0x419840 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	testl	%ebp, %ebp
               	movq	$0, 8(%rax)
               	leaq	254038(%rip), %rdx      # 0x457880 <ktypeglobal:kotlin.Boolean#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	sete	24(%rax)
               	jmp	0x41985a <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x15a>
               	xorl	%ebx, %ebx
               	jmp	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	xorl	%eax, %eax
               	testl	%ebp, %ebp
               	sete	%al
               	shlq	$4, %rax
               	leaq	284110(%rip), %rcx      # 0x45ee20 <BOOLEAN_CACHE>
               	addq	%rax, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	%rcx, 72(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	testq	%rcx, %rcx
               	je	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	cmpb	$0, 8(%rcx)
               	jne	0x4198d3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	leaq	88(%rsp), %r13
               	leaq	112(%rsp), %rbp
               	movq	%rbp, 80(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	285240(%rip), %rsi      # 0x45f2e0 <__unnamed_26>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.internal.NativePtr.$init_global#internal>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	305993(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419958 <kfun:kotlin.native.internal.NativePtr.$init_global#internal+0x58>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	259024(%rip), %rdx      # 0x458d50 <ktypeglobal:kotlin.native.internal.NativePtr.Companion#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 301152(%rip)      # 0x4631f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	leaq	301145(%rip), %rdi      # 0x4631f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	301138(%rip), %rax      # 0x4631f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	$0, 8(%rax)
               	movq	301123(%rip), %rsi      # 0x4631f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	callq	0x424900 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	leaq	32(%rsp), %rbx
               	movups	%xmm0, 104(%rsp)
               	leaq	263108(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	305715(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419a6e <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x9e>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	96(%rsp), %rdi
               	movq	%rdi, 24(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	leaq	284894(%rip), %rbx      # 0x45f390 <__unnamed_29>
               	movq	%rbx, %rsi
               	cmpq	%r15, %rax
               	je	0x419ae3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	testq	%rax, %rax
               	je	0x419adc <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x10c>
               	leaq	40(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x419ae3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	leaq	283485(%rip), %rsi      # 0x45ee40 <__unnamed_8>
               	movq	%rsi, 40(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	284863(%rip), %rsi      # 0x45f3c0 <__unnamed_30>
               	movq	%rbp, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*8(%rax)
               	cmpq	%r15, %rax
               	je	0x419b68 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	testq	%rax, %rax
               	je	0x419b61 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x191>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rbx
               	jmp	0x419b68 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	leaq	283352(%rip), %rbx      # 0x45ee40 <__unnamed_8>
               	leaq	80(%rsp), %rdx
               	movq	%rbx, 72(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	305364(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419bcd <kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4199d0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<ThrowNullPointerException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	305236(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419c4d <ThrowNullPointerException+0x5d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	254692(%rip), %rcx      # 0x457f60 <ktypeglobal:kotlin.NullPointerException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowArrayIndexOutOfBoundsException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	305028(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419d1d <ThrowArrayIndexOutOfBoundsException+0x5d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	254644(%rip), %rcx      # 0x458000 <ktypeglobal:kotlin.ArrayIndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowClassCastException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$176, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 160(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	257499(%rip), %rax      # 0x458bc0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 32(%rsp)
               	leaq	262118(%rip), %rcx      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 72(%rsp)
               	leaq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 80(%rsp)
               	movb	304708(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419e5d <ThrowClassCastException+0xcd>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 88(%rsp)
               	movq	%rbx, 16(%rsp)
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 96(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	112(%rsp), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	48(%rsp), %rdi
               	movq	%rdi, 104(%rsp)
               	movq	%rax, 56(%rsp)
               	callq	0x419650 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	120(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rdx
               	leaq	283932(%rip), %rsi      # 0x45f3e0 <__unnamed_31>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	136(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419650 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	144(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	152(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	254311(%rip), %rcx      # 0x4580a0 <ktypeglobal:kotlin.ClassCastException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 160(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	72(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowInvalidReceiverTypeException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	304309(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419fec <ThrowInvalidReceiverTypeException+0x6c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$27, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	leaq	32(%rsp), %rdx
               	testq	%rax, %rax
               	leaq	283728(%rip), %rsi      # 0x45f470 <__unnamed_32>
               	cmovneq	%rax, %rsi
               	leaq	283637(%rip), %rdi      # 0x45f420 <__unnamed_33>
               	callq	0x4370e0 <Kotlin_String_plusImpl>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	252734(%rip), %rcx      # 0x457ba0 <ktypeglobal:kotlin.RuntimeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 40(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax)

<ThrowIllegalArgumentException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	304036(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a0fd <ThrowIllegalArgumentException+0x5d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	252852(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowFileFailedToInitializeException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	303828(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a1cd <ThrowFileFailedToInitializeException+0x5d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	254884(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.native.FileFailedToInitializeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	leaq	283268(%rip), %rsi      # 0x45f490 <__unnamed_34>
               	movq	%rbx, %rdi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<ReportUnhandledException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %rbx
               	movq	$0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 16(%rsp)
               	movb	303621(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a29c <ReportUnhandledException+0x5c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	283229(%rip), %rdi      # 0x45f500 <__unnamed_35>
               	callq	0x43a930 <Kotlin_io_Console_print>
               	movq	%rbx, %rdi
               	callq	0x416120 <kfun:kotlin.Throwable#printStackTrace(){}>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 80(%rsp)
               	movb	303434(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a357 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x67>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256753(%rip), %rdx      # 0x458e70 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movq	%rcx, 298601(%rip)      # 0x4631f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	298594(%rip), %rax      # 0x4631f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 8(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 144(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 104(%rsp)
               	leaq	96(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%rbx, 112(%rsp)
               	movl	298485(%rip), %eax      # 0x463210 <state_global$kotlin.native.MemoryModel>
               	cmpl	$2, %eax
               	je	0x41a433 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x143>
               	leaq	298473(%rip), %rdi      # 0x463210 <state_global$kotlin.native.MemoryModel>
               	leaq	-9054(%rip), %rsi       # 0x4180d0 <kfun:kotlin.native.MemoryModel.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	movq	298390(%rip), %r13      # 0x4631d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 32(%rsp)
               	movl	8(%r13), %ebp
               	testl	%ebp, %ebp
               	js	0x41a62c <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33c>
               	movq	296(%r15), %rdi
               	leaq	31(,%rbp,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	250388(%rip), %rax      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r14, 40(%rsp)
               	movl	8(%r13), %ebp
               	xorl	%r12d, %r12d
               	testl	%ebp, %ebp
               	cmovsl	%r12d, %ebp
               	cmpl	%r12d, %ebp
               	je	0x41a51b <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x22b>
               	nop
               	movzbl	303025(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a4f0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x200>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r13,%r12,8), %rax
               	movq	%rax, 48(%rsp)
               	movl	16(%rax), %ecx
               	cmpl	%ecx, 24(%rbx)
               	jbe	0x41a627 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x337>
               	movslq	%ecx, %rcx
               	movq	16(%rbx), %rdx
               	movq	%rax, 32(%rbx,%rcx,8)
               	addq	$1, %r12
               	cmpl	%r12d, %ebp
               	jne	0x41a4e0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x1f0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x41a631 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x341>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%r14, 120(%rsp)
               	cmpl	$2, 24(%rbx)
               	jbe	0x41a627 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x337>
               	movq	48(%rbx), %rdi
               	movq	%rdi, 152(%rsp)
               	movq	104(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	298087(%rip), %rax      # 0x4631d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	16(%rax), %rsi
               	movq	%rsi, 160(%rsp)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*112(%rax)
               	movl	%eax, %ebx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	254100(%rip), %rdx      # 0x458640 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rdx, 16(%rax)
               	testb	%bl, %bl
               	je	0x41a5c6 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2d6>
               	movq	%rcx, 168(%rsp)
               	movq	$0, 24(%rax)
               	jmp	0x41a5de <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2ee>
               	movq	%rcx, 176(%rsp)
               	movq	$0, 24(%rax)
               	movq	%rcx, 184(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rcx, 8(%rax)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	297979(%rip), %rsi      # 0x4631f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	leaq	297972(%rip), %rdi      # 0x4631f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	callq	0x424900 <InitAndRegisterGlobal>
               	movq	72(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	leaq	250008(%rip), %rsi      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%r14, %rdi
               	callq	0x419d90 <ThrowClassCastException>

<kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r14d
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 144(%rsp)
               	movups	%xmm0, 184(%rsp)
               	leaq	259899(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 176(%rsp)
               	movups	%xmm0, 160(%rsp)
               	movq	%rax, 152(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 16(%rsp)
               	movb	302489(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a708 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xc8>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41a737 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%r14d, %ebx
               	jg	0x41a737 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%ebx, %ebp
               	jg	0x41a804 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x1c4>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	32(%rsp), %r12
               	leaq	176(%rsp), %r13
               	movq	%r13, 24(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	282099(%rip), %rsi      # 0x45f550 <__unnamed_36>
               	movq	%r13, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebp, %esi
               	leaq	40(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	282114(%rip), %rsi      # 0x45f580 <__unnamed_37>
               	movq	%r13, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	281023(%rip), %rsi      # 0x45f160 <__unnamed_18>
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%r14d, %esi
               	leaq	72(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	leaq	80(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	250954(%rip), %rcx      # 0x457c40 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 88(%rsp)
               	jmp	0x41a8b4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x274>
               	leaq	112(%rsp), %r14
               	leaq	104(%rsp), %r13
               	leaq	152(%rsp), %r12
               	movq	%r12, 96(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	281889(%rip), %rsi      # 0x45f550 <__unnamed_36>
               	movq	%r12, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	281954(%rip), %rsi      # 0x45f5b0 <__unnamed_38>
               	movq	%r12, %rdi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	128(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	136(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	250936(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 144(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdi, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movq	$0, 224(%rsp)
               	movups	%xmm0, 248(%rsp)
               	leaq	259268(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 240(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 200(%rsp)
               	leaq	192(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 208(%rsp)
               	movb	301863(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a97a <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0xaa>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	240(%rsp), %rbx
               	movq	%rbx, 216(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	$0, 176(%rsp)
               	leaq	144(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	288(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 128(%rsp)
               	leaq	251981(%rip), %rax      # 0x458251 <ktypeglobal:kotlin.String#internal+0x1>
               	andq	$-4, %rax
               	movq	%rax, 8(%rsp)
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	279638(%rip), %r14      # 0x45ee80 <__unnamed_39>
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r12, %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 136(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%rax, %r12
               	movl	$1, %ebp
               	leaq	32(%rsp), %r14
               	jmp	0x41aa9f <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1cf>
               	nop
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	leaq	80(%rsp), %rdx
               	callq	0x41eaa0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addl	$1, %ebp
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41acba <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3ea>
               	movzbl	301508(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aadd <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x20d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	leaq	152(%rsp), %rsi
               	callq	*8(%rax)
               	movq	%rax, %r15
               	cmpl	$2, %ebp
               	jl	0x41ab6b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x29b>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %r14
               	movq	%r13, %r12
               	leaq	279332(%rip), %r13      # 0x45ee60 <__unnamed_40>
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	movq	%r12, %r13
               	movq	%r14, %r12
               	leaq	32(%rsp), %r14
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	leaq	160(%rsp), %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r14, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	cmpq	$0, 16(%rsp)
               	je	0x41ac10 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x340>
               	movq	16(%rsp), %rcx
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	8(%rcx), %rdi
               	leaq	254485(%rip), %rcx      # 0x458de0 <ktypeglobal:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	cmpq	%rcx, %rax
               	je	0x41ac70 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3a0>
               	leaq	281477(%rip), %rsi      # 0x45f760 <__unnamed_41>
               	cmpq	%rdi, %r15
               	je	0x41ac07 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	leaq	279129(%rip), %rsi      # 0x45ee40 <__unnamed_8>
               	testq	%r15, %r15
               	je	0x41ac07 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%rsi, 64(%rsp)
               	jmp	0x41ac85 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3b5>
               	nop
               	testq	%r15, %r15
               	je	0x41aa80 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	cmpl	$25, (%rax,%rcx)
               	je	0x41aa80 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$84, 92(%rax)
               	jne	0x41ac92 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3c2>
               	movzwl	8(%r15), %esi
               	movq	%rbx, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41e9c0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x41aa90 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1c0>
               	nopw	%cs:(%rax,%rax)
               	movq	%r15, %rsi
               	leaq	56(%rsp), %rdx
               	callq	0x4199d0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, %rsi
               	movq	%rax, 56(%rsp)
               	movq	%rbx, %rdi
               	leaq	72(%rsp), %rdx
               	jmp	0x41aa8b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	leaq	104(%rsp), %rdx
               	jmp	0x41aa8b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	leaq	176(%rsp), %r14
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	278972(%rip), %rbp      # 0x45eea0 <__unnamed_10>
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 176(%rsp)
               	movq	%rbx, 224(%rsp)
               	movq	120(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	200(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	300856(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ad69 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41ae17 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc7>
               	testq	%rbx, %rbx
               	je	0x41ae10 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41ae10 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41ae10 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	16(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movb	300645(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ae3c <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x1c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	xorl	%ebp, %ebp
               	jmp	0x41af10 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xf0>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41af50 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x130>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41af54 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x134>
               	movzbl	300376(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aed0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41aed0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41af0e <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xee>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%ebp, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	300302(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41af93 <kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	300270(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afb3 <kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpl	$0, 76(%rbx)
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	300232(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afd9 <kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	movb	300159(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b022 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x22>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movl	68(%r12), %r13d
               	leal	-1(%r13), %eax
               	movslq	%eax, %rbx
               	jmp	0x41b08d <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x8d>
               	nop
               	testq	%r14, %r14
               	je	0x41b121 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x121>
               	addq	$-1, %rbx
               	testl	%ebx, %ebx
               	js	0x41b0f4 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xf4>
               	movzbl	300032(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b0a1 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xa1>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b126 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	addl	$-1, %r13d
               	cmpl	$0, 16(%rax,%rbx,4)
               	js	0x41b089 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41b12b <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x12b>
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b126 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	movq	16(%rax,%rbx,8), %rdi
               	movq	%rdi, 40(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b080 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x80>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41b089 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	jmp	0x41b0fa <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	movl	$4294967295, %r13d      # imm = 0xFFFFFFFF
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testl	%r13d, %r13d
               	setns	%al
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ebx, %r13d
               	jmp	0x41b0fa <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419bf0 <ThrowNullPointerException>

<kfun:kotlin.collections.HashMap#get(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	299786(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b197 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x67>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41b1c6 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x96>
               	movq	16(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	testq	%rcx, %rcx
               	je	0x41b1e3 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb3>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41b1e8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb8>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, (%r14)
               	jmp	0x41b1c8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x98>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	299576(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b269 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x79>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	movl	%eax, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movq	16(%r12), %rcx
               	movq	%rcx, 104(%rsp)
               	testq	%rcx, %rcx
               	jne	0x41b369 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x179>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	8(%r12), %rax
               	movq	%rax, 72(%rsp)
               	movl	8(%rax), %r13d
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%r13d, %r13d
               	js	0x41b3d4 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1e4>
               	movq	296(%rbx), %rdi
               	leaq	31(,%r13,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	246649(%rip), %rdx      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r13d, 24(%rax)
               	movq	%rcx, 120(%rsp)
               	movq	%rcx, 16(%r12)
               	movq	%rcx, 24(%rsp)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%ebp, %ebp
               	js	0x41b392 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1a2>
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3cf <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movq	(%rcx), %rax
               	movslq	%ebp, %rax
               	movq	%r15, 16(%rcx,%rax,8)
               	xorl	%eax, %eax
               	jmp	0x41b3ae <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1be>
               	notl	%ebp
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3cf <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movslq	%ebp, %rdx
               	movq	16(%rcx,%rdx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	(%rcx), %rsi
               	movq	%r15, 16(%rcx,%rdx,8)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	248036(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	277204(%rip), %rsi      # 0x45eee0 <__unnamed_42>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#remove(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	299023(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b492 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0x72>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41cd00 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x41b4ca <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xaa>
               	movq	16(%rbx), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b4eb <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xcb>
               	cmpl	%eax, 8(%rdi)
               	jbe	0x41b4f0 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xd0>
               	movslq	%eax, %rcx
               	movq	16(%rdi,%rcx,8), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	%eax, %esi
               	callq	0x417fb0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	jmp	0x41b4cc <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xac>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	298806(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b56b <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0x6b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	40(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b5b5 <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	253980(%rip), %rdx      # 0x4595c0 <ktypeglobal:kotlin.collections.HashMapKeys#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 40(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	298598(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b63b <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x6b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b685 <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	254012(%rip), %rdx      # 0x4596b0 <ktypeglobal:kotlin.collections.HashMapEntrySet#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 56(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	298466(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b6bf <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x1f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41b79f <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xff>
               	testq	%rbx, %rbx
               	je	0x41b79b <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	cmpl	$65, (%rax,%rcx)
               	jne	0x41b79b <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movl	76(%r14), %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41b7a3 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x103>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41d3c0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	movl	%eax, %ecx
               	jmp	0x41b7a5 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x105>
               	xorl	%ecx, %ecx
               	jmp	0x41b7bb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	movb	$1, %cl
               	jmp	0x41b7bb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	xorl	%ecx, %ecx
               	movq	%r15, %rax
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	298088(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b839 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x69>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d5f0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r14d, %r14d
               	leaq	32(%rsp), %r12
               	movabsq	$34359738368, %r13      # imm = 0x800000000
               	jmp	0x41b886 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xb6>
               	nop
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	xorl	%eax, %ebp
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addl	%ebp, %r14d
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	jge	0x41b96d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x19d>
               	movzbl	297979(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b8a6 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xd6>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r12, 288(%r15)
               	movq	%r13, 48(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41b990 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1c0>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rsp)
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b98b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b930 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x160>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	jmp	0x41b932 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x162>
               	nopl	(%rax)
               	xorl	%ebp, %ebp
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 80(%rsp)
               	testq	%rax, %rax
               	je	0x41b9d3 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x203>
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b98b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 88(%rsp)
               	testq	%rdi, %rdi
               	jne	0x41b860 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x90>
               	xorl	%eax, %eax
               	jmp	0x41b86d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x9d>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%r14d, %eax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	246088(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	callq	0x419bf0 <ThrowNullPointerException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, 8(%rsp)
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	48(%rsp), %rbp
               	leaq	56(%rsp), %r15
               	movups	%xmm0, 216(%rsp)
               	leaq	254903(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 208(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 32(%rsp)
               	movb	297507(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ba7e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x9e>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	leal	(%rax,%rax,2), %esi
               	addl	$2, %esi
               	leaq	208(%rsp), %r12
               	movq	%r12, 40(%rsp)
               	movq	%r12, %rdi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	276653(%rip), %rsi      # 0x45f350 <__unnamed_43>
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41d5f0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	jmp	0x41bafa <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	leaq	192(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addl	$1, %r13d
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	jge	0x41bd04 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x324>
               	movzbl	297351(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bb1a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x13a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r13d, %r13d
               	jle	0x41bb33 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x153>
               	movq	%r12, %rdi
               	leaq	275255(%rip), %rsi      # 0x45ee60 <__unnamed_40>
               	leaq	64(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 192(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 96(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41bd56 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x376>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 112(%rsp)
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd51 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x371>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %r15
               	movq	%r15, 120(%rsp)
               	testq	%r15, %r15
               	je	0x41bc10 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x230>
               	movq	8(%rbx), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bc20 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x240>
               	movq	%r12, %rdi
               	leaq	276366(%rip), %rsi      # 0x45f390 <__unnamed_29>
               	leaq	128(%rsp), %rdx
               	jmp	0x41bc49 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x269>
               	nop
               	xorl	%esi, %esi
               	jmp	0x41bc3e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x25e>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	136(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	leaq	144(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	$61, %esi
               	leaq	152(%rsp), %rdx
               	callq	0x41e9c0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 160(%rsp)
               	testq	%rax, %rax
               	je	0x41bd99 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3b9>
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd51 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x371>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 168(%rsp)
               	testq	%rbp, %rbp
               	je	0x41bad0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf0>
               	movq	8(%rbx), %rsi
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bce0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x300>
               	movq	%r12, %rdi
               	leaq	276168(%rip), %rsi      # 0x45f390 <__unnamed_29>
               	leaq	176(%rsp), %rdx
               	jmp	0x41badd <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xfd>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	leaq	184(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	jmp	0x41bad2 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf2>
               	leaq	72(%rsp), %rdx
               	leaq	276064(%rip), %rsi      # 0x45f370 <__unnamed_44>
               	leaq	208(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	8(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	245122(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	callq	0x419bf0 <ThrowNullPointerException>
               	nop

<kfun:kotlin.collections.HashMap#checkIsMutable(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	296612(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bdfd <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x5d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 80(%r14)
               	je	0x41be18 <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x78>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	245728(%rip), %rcx      # 0x457e20 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.rehash#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 144(%rsp)
               	movb	296381(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bee4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	cmpl	%eax, 68(%rbx)
               	jle	0x41c01e <kfun:kotlin.collections.HashMap.rehash#internal+0x1be>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movq	16(%rbx), %r15
               	movq	%r15, 56(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	jmp	0x41bf60 <kfun:kotlin.collections.HashMap.rehash#internal+0x100>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	movq	%rdx, 16(%r15,%rcx,8)
               	addl	$1, %r12d
               	addq	$1, %r13
               	movl	68(%rbx), %edx
               	movslq	%edx, %rax
               	cmpq	%rax, %r13
               	jge	0x41bfea <kfun:kotlin.collections.HashMap.rehash#internal+0x18a>
               	movzbl	296230(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bf7b <kfun:kotlin.collections.HashMap.rehash#internal+0x11b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %rax
               	movq	%rax, 64(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	cmpl	$0, 16(%rax,%r13,4)
               	js	0x41bf5c <kfun:kotlin.collections.HashMap.rehash#internal+0xfc>
               	movq	8(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%rax,%r13,8), %rdx
               	movq	%rdx, 88(%rsp)
               	cmpl	%r12d, %ecx
               	jbe	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	(%rax), %rcx
               	movslq	%r12d, %rcx
               	movq	%rdx, 16(%rax,%rcx,8)
               	testq	%r15, %r15
               	je	0x41bf58 <kfun:kotlin.collections.HashMap.rehash#internal+0xf8>
               	movl	8(%r15), %eax
               	cmpq	%rax, %r13
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%r15,%r13,8), %rdx
               	movq	%rdx, 96(%rsp)
               	cmpl	%r12d, %eax
               	ja	0x41bf50 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%r12d, %esi
               	callq	0x418010 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	testq	%r15, %r15
               	je	0x41c00e <kfun:kotlin.collections.HashMap.rehash#internal+0x1ae>
               	movl	68(%rbx), %edx
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x418010 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	movl	%r12d, 68(%rbx)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rdx
               	movq	%rdx, 288(%rbp)
               	movabsq	$17179869184, %r13      # imm = 0x400000000
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%r14d, %eax
               	jne	0x41c112 <kfun:kotlin.collections.HashMap.rehash#internal+0x2b2>
               	movq	32(%rbx), %r15
               	movq	%r15, 160(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdx, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r14d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	8(%r15), %edx
               	xorl	%r12d, %r12d
               	xorl	%edi, %edi
               	movl	%r14d, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%r15), %rax
               	testl	%r14d, %r14d
               	jle	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	16(%r15), %r9
               	leal	-1(%r14), %r8d
               	cmpl	$7, %r8d
               	jb	0x41c249 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e9>
               	addq	$1, %r8
               	movq	%r8, %r12
               	andq	$-8, %r12
               	leaq	-8(%r12), %rax
               	movq	%rax, %rsi
               	shrq	$3, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$56, %rax
               	jae	0x41c185 <kfun:kotlin.collections.HashMap.rehash#internal+0x325>
               	xorl	%eax, %eax
               	jmp	0x41c20e <kfun:kotlin.collections.HashMap.rehash#internal+0x3ae>
               	testl	%r14d, %r14d
               	js	0x41c482 <kfun:kotlin.collections.HashMap.rehash#internal+0x622>
               	movq	296(%rbp), %rdi
               	movl	%r14d, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	243356(%rip), %rdx      # 0x4577f0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r14d, 24(%rax)
               	movq	%rcx, 152(%rsp)
               	movq	%rcx, 32(%rbx)
               	bsrl	%r14d, %eax
               	xorl	$31, %eax
               	addl	$1, %eax
               	testl	%r14d, %r14d
               	movl	$33, %ecx
               	cmovnel	%eax, %ecx
               	movl	%ecx, 72(%rbx)
               	jmp	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	240(%r15), %rdi
               	andq	$-8, %rsi
               	negq	%rsi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopl	(%rax,%rax)
               	movups	%xmm0, -208(%rdi,%rcx,4)
               	movups	%xmm0, -224(%rdi,%rcx,4)
               	movups	%xmm0, -192(%rdi,%rcx,4)
               	movups	%xmm0, -176(%rdi,%rcx,4)
               	movups	%xmm0, -160(%rdi,%rcx,4)
               	movups	%xmm0, -144(%rdi,%rcx,4)
               	movups	%xmm0, -128(%rdi,%rcx,4)
               	movups	%xmm0, -112(%rdi,%rcx,4)
               	movups	%xmm0, -96(%rdi,%rcx,4)
               	movups	%xmm0, -80(%rdi,%rcx,4)
               	movups	%xmm0, -64(%rdi,%rcx,4)
               	movups	%xmm0, -48(%rdi,%rcx,4)
               	movups	%xmm0, -32(%rdi,%rcx,4)
               	movups	%xmm0, -16(%rdi,%rcx,4)
               	leaq	64(%rcx), %rax
               	movups	%xmm0, 16(%rdi,%rcx,4)
               	movups	%xmm0, (%rdi,%rcx,4)
               	movq	%rax, %rcx
               	addq	$8, %rsi
               	jne	0x41c1a0 <kfun:kotlin.collections.HashMap.rehash#internal+0x340>
               	testq	%rdx, %rdx
               	je	0x41c240 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e0>
               	leaq	(%r15,%rax,4), %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x41c230 <kfun:kotlin.collections.HashMap.rehash#internal+0x3d0>
               	cmpq	%r12, %r8
               	je	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	(%r9,%r12,4), %r9
               	subl	%r12d, %r14d
               	xorl	%eax, %eax
               	nop
               	movl	$0, (%r9,%rax,4)
               	addq	$1, %rax
               	cmpl	%eax, %r14d
               	jne	0x41c250 <kfun:kotlin.collections.HashMap.rehash#internal+0x3f0>
               	xorl	%r14d, %r14d
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jge	0x41c40a <kfun:kotlin.collections.HashMap.rehash#internal+0x5aa>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movb	295442(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c28f <kfun:kotlin.collections.HashMap.rehash#internal+0x42f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 48(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%rax,%r14,8), %rdi
               	movq	%rdi, 64(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c310 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %r15d # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %r15d
               	jmp	0x41c313 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b3>
               	xorl	%r15d, %r15d
               	leaq	1(%r14), %rax
               	movq	%rax, 120(%rsp)
               	movl	64(%rbx), %r12d
               	jmp	0x41c334 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addl	$-1, %r15d
               	addl	$-1, %r12d
               	movzbl	295257(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c348 <kfun:kotlin.collections.HashMap.rehash#internal+0x4e8>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	cmpl	%r15d, 8(%rax)
               	jbe	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movslq	%r15d, %rcx
               	cmpl	$0, 16(%rax,%rcx,4)
               	je	0x41c3c0 <kfun:kotlin.collections.HashMap.rehash#internal+0x560>
               	testl	%r12d, %r12d
               	js	0x41c42b <kfun:kotlin.collections.HashMap.rehash#internal+0x5cb>
               	testl	%r15d, %r15d
               	jne	0x41c330 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r15d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c330 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	movq	%rax, 80(%rsp)
               	movq	(%rax), %rdx
               	movq	120(%rsp), %rdx
               	movl	%edx, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bfe5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	(%rax), %rcx
               	movl	%r15d, 16(%rax,%r14,4)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rdx, %r14
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jl	0x41c280 <kfun:kotlin.collections.HashMap.rehash#internal+0x420>
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	244001(%rip), %rcx      # 0x457d80 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 168(%rsp)
               	leaq	274958(%rip), %rsi      # 0x45f680 <__unnamed_45>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.findKey#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 48(%rsp)
               	movb	294818(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c4ff <kfun:kotlin.collections.HashMap.findKey#internal+0x6f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41c523 <kfun:kotlin.collections.HashMap.findKey#internal+0x93>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %ebx # imm = 0x9E3779B9
               	movl	72(%r12), %ecx
               	shrl	%cl, %ebx
               	jmp	0x41c525 <kfun:kotlin.collections.HashMap.findKey#internal+0x95>
               	xorl	%ebx, %ebx
               	movl	64(%r12), %r13d
               	jmp	0x41c533 <kfun:kotlin.collections.HashMap.findKey#internal+0xa3>
               	nop
               	addl	$-1, %ebx
               	addl	$-1, %r13d
               	movzbl	294746(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c547 <kfun:kotlin.collections.HashMap.findKey#internal+0xb7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%r12), %rax
               	movq	%rax, 56(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41c638 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebx, %rcx
               	movl	16(%rax,%rcx,4), %ebp
               	testl	%ebp, %ebp
               	je	0x41c616 <kfun:kotlin.collections.HashMap.findKey#internal+0x186>
               	jle	0x41c5b5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	addl	$-1, %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41c638 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebp, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c5b0 <kfun:kotlin.collections.HashMap.findKey#internal+0x120>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41c5b5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	jmp	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testq	%r14, %r14
               	je	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	testl	%r13d, %r13d
               	js	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testl	%ebx, %ebx
               	jne	0x41c530 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ebx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	jmp	0x41c530 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%ebp, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 192(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 144(%rsp)
               	movb	294345(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6d8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x98>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	xorps	%xmm0, %xmm0
               	movq	%rbp, 40(%rsp)
               	movb	294314(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6fa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xba>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	xorl	%r15d, %r15d
               	movl	$0, %r13d
               	testq	%r14, %r14
               	je	0x41c728 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xe8>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	imull	$2654435769, %eax, %r13d # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %r13d
               	movq	%r14, %r12
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rdx
               	movq	288(%rdx), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rdx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	movq	8(%rsp), %rcx
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	movq	%rcx, 288(%rdx)
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	jmp	0x41c7a8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x168>
               	nopl	(%rax,%rax)
               	addl	$1, %r15d
               	addl	$-1, %r13d
               	movzbl	294121(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c7bb <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x17b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movq	32(%rbx), %rcx
               	movq	%rcx, 152(%rsp)
               	cmpl	%r13d, 8(%rcx)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%r13d, %rax
               	movl	16(%rcx,%rax,4), %ebp
               	testl	%ebp, %ebp
               	jle	0x41c8a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x260>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%rbp), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c830 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rsi
               	callq	*112(%rax)
               	xorps	%xmm0, %xmm0
               	testb	%al, %al
               	je	0x41c839 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f9>
               	jmp	0x41cc13 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d3>
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x41cc13 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d3>
               	cmpl	%r15d, %r14d
               	je	0x41cac0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x480>
               	testl	%r13d, %r13d
               	jne	0x41c7a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rcx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r13d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rcx)
               	jmp	0x41c7a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	nopl	(%rax)
               	movl	68(%rbx), %r8d
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	%rsp, %rdi
               	movq	%rdi, 288(%rbp)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	8(%rbx), %rdx
               	movq	%rdx, 24(%rsp)
               	movl	8(%rdx), %edx
               	movq	8(%rsp), %rsi
               	movq	%rsi, 288(%rbp)
               	cmpl	%edx, %r8d
               	jl	0x41cc3d <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5fd>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdi, 288(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	68(%rbx), %eax
               	movl	%esi, %edx
               	subl	%eax, %edx
               	testl	%edx, %edx
               	movq	%r12, %r14
               	movq	%rdi, %r12
               	movq	%rcx, %r13
               	jg	0x41c99c <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
               	movl	76(%rbx), %edx
               	subl	%edx, %esi
               	testl	%esi, %esi
               	jle	0x41c99c <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
               	subl	%edx, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	3(%rcx), %edx
               	testl	%ecx, %ecx
               	cmovnsl	%ecx, %edx
               	sarl	$2, %edx
               	cmpl	%edx, %eax
               	jge	0x41cb20 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>
               	movl	68(%rbx), %eax
               	incl	%eax
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	movabsq	$42949672960, %rcx      # imm = 0xA00000000
               	movq	%rcx, 64(%rsp)
               	js	0x41ccb5 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x675>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	cmpl	%eax, %ecx
               	jge	0x41cc02 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5c2>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	(%rcx,%rcx,2), %ecx
               	movl	%ecx, %r15d
               	shrl	$31, %r15d
               	addl	%ecx, %r15d
               	sarl	%r15d
               	cmpl	%eax, %r15d
               	cmovll	%eax, %r15d
               	movq	8(%rbx), %rdi
               	movq	%rdi, 80(%rsp)
               	movl	%r15d, %esi
               	leaq	88(%rsp), %rdx
               	callq	0x4152e0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 88(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 96(%rsp)
               	testq	%rdi, %rdi
               	je	0x41cb69 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x529>
               	movl	%r15d, %esi
               	leaq	104(%rsp), %rdx
               	callq	0x4152e0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 104(%rsp)
               	jmp	0x41cb6b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x52b>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	%r12, %r14
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	xorl	%eax, %eax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rdi
               	movq	%rdi, 112(%rsp)
               	movl	%r15d, %esi
               	leaq	120(%rsp), %rdx
               	callq	0x4155a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 24(%rbx)
               	testl	%r15d, %r15d
               	jle	0x41cba2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x562>
               	leal	(%r15,%r15,2), %eax
               	testl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	jne	0x41cbaa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x56a>
               	xorl	%esi, %esi
               	jmp	0x41cbba <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x57a>
               	movl	$3, %eax
               	xorps	%xmm0, %xmm0
               	bsrl	%eax, %ecx
               	xorl	$31, %ecx
               	xorb	$31, %cl
               	movl	$1, %esi
               	shll	%cl, %esi
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%eax, %esi
               	jle	0x41cc02 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5c2>
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	negl	%ebp
               	movq	136(%rsp), %rax
               	movq	40(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	movl	%ebp, %eax
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	68(%rbx), %ebp
               	leal	1(%rbp), %ecx
               	movl	%ecx, 68(%rbx)
               	movq	8(%rbx), %rsi
               	movq	%rsi, 160(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%ebp, %rdx
               	movq	(%rsi), %rdi
               	movq	%r12, 16(%rsi,%rdx,8)
               	movq	24(%rbx), %rsi
               	movq	%rsi, 168(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movq	(%rsi), %rdi
               	movl	%r13d, 16(%rsi,%rdx,4)
               	movq	32(%rbx), %rdx
               	movq	%rdx, 176(%rsp)
               	cmpl	%r13d, 8(%rdx)
               	jbe	0x41ccb0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movq	(%rdx), %rsi
               	movl	%ecx, 16(%rdx,%rax,4)
               	movl	76(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 76(%rbx)
               	cmpl	64(%rbx), %r15d
               	jle	0x41cc15 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
               	movl	%r15d, 64(%rbx)
               	jmp	0x41cc15 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	242787(%rip), %rcx      # 0x458140 <ktypeglobal:kotlin.OutOfMemoryError#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	292744(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cd19 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41cd3e <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x3e>
               	movl	%eax, %ebp
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	callq	0x41cd50 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	jmp	0x41cd43 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x43>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movl	%ebp, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.removeKeyAt#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movb	292571(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cdc6 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x76>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%ebp, %esi
               	callq	0x417fb0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	movq	24(%rbx), %rax
               	movq	%rax, 112(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movl	%ebp, 12(%rsp)
               	movslq	%ebp, %rcx
               	movq	%rcx, 64(%rsp)
               	movl	16(%rax,%rcx,4), %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	56(%rsp), %rsi
               	movq	288(%rsi), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 144(%rsp)
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	jmp	0x41ceee <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x19e>
               	movq	(%rax), %rcx
               	movq	72(%rsp), %rcx
               	movl	%edx, 16(%rax,%rcx,4)
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	addl	$-1, %r14d
               	js	0x41d117 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3c7>
               	movzbl	292259(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x41cf20 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1d0>
               	testl	%r12d, %r12d
               	je	0x41cf2f <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1df>
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jle	0x41cf8e <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x23e>
               	jmp	0x41d0dd <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%rsp), %rsi
               	testl	%r12d, %r12d
               	jne	0x41cefe <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1ae>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movl	8(%rax), %r12d
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jg	0x41d0dd <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	addl	$-1, %r12d
               	movq	%rax, 160(%rsp)
               	movl	8(%rax), %ecx
               	cmpl	%r12d, %ecx
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movslq	%r12d, %rdx
               	movl	16(%rax,%rdx,4), %r13d
               	testl	%r13d, %r13d
               	je	0x41d0f3 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3a3>
               	js	0x41d010 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2c0>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%r13), %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movslq	%ebp, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41d040 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	56(%rsp), %rsi
               	imull	$2654435769, %eax, %eax # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %eax
               	jmp	0x41d042 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f2>
               	nop
               	movq	%rax, 176(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	jmp	0x41cedc <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x18c>
               	nopw	(%rax,%rax)
               	xorl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	subl	%r12d, %eax
               	addl	$-1, %ecx
               	andl	%eax, %ecx
               	cmpl	%r15d, %ecx
               	jl	0x41cee4 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x194>
               	movq	32(%rbx), %rax
               	movq	%rax, 200(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	%r13d, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 208(%rsp)
               	cmpl	%ebp, 8(%rax)
               	ja	0x41ced0 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x180>
               	jmp	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	%rax, 152(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	ja	0x41d107 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3b7>
               	jmp	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	%rax, 168(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$0, 16(%rax,%rcx,4)
               	jmp	0x41d13a <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3ea>
               	movq	32(%rbx), %rax
               	movq	%rax, 216(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	12(%rsp), %ecx
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movq	24(%rbx), %rax
               	movq	%rax, 120(%rsp)
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d192 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movq	64(%rsp), %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	76(%rbx), %eax
               	addl	$-1, %eax
               	movl	%eax, 76(%rbx)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	291464(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d219 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x79>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d2b6 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x116>
               	movq	16(%r14), %rcx
               	movq	%rcx, 32(%rsp)
               	testq	%rcx, %rcx
               	je	0x41d2da <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13a>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d2df <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13f>
               	leaq	48(%rsp), %rsi
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*8(%rax)
               	testq	%rbx, %rbx
               	je	0x41d2ba <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x11a>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41d2c0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	xorl	%eax, %eax
               	jmp	0x41d2c0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	testq	%rax, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	291137(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d360 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0x70>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d394 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa4>
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d3b1 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xc1>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	jne	0x41d396 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa6>
               	callq	0x419bf0 <ThrowNullPointerException>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r12
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	290928(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d431 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x71>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r14
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41d502 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x142>
               	movzbl	290824(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d499 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xd9>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41d4fe <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	60(%rcx), %edx
               	movq	64(%rcx), %rcx
               	andl	$168, %edx
               	shlq	$4, %rdx
               	cmpl	$168, (%rcx,%rdx)
               	jne	0x41d51f <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x15f>
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41d1a0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x41d460 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xa0>
               	xorl	%eax, %eax
               	jmp	0x41d504 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x144>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	247322(%rip), %rsi      # 0x459b40 <kclass:kotlin.collections.Map.Entry>
               	movq	%rax, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	jmp	0x41d530 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x170>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43c175 <__cxa_end_catch>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$4294967165, %eax       # imm = 0xFFFFFF7D
               	cmpl	$2, %eax
               	jb	0x41d4fe <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nop

<kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	290583(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d58a <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>+0x1a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	245323(%rip), %rcx      # 0x459410 <ktypeglobal:kotlin.collections.HashMap.KeysItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	290455(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d60a <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>+0x1a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	245339(%rip), %rcx      # 0x4594a0 <ktypeglobal:kotlin.collections.HashMap.EntriesItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#initNext(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	290260(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6d9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6d9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
               	nop
               	movl	16(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 16(%rbx)
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d70e <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x9e>
               	movq	24(%rcx), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d722 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xb2>
               	cltq
               	cmpl	$0, 16(%rcx,%rax,4)
               	jns	0x41d70e <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x9e>
               	movzbl	290197(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6d0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x60>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6d0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x60>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	290142(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d743 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	setl	%al
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#remove(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	290094(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d773 <kfun:kotlin.collections.HashMap.Itr#remove(){}+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	8(%rbx), %rdi
               	movl	20(%rbx), %esi
               	callq	0x41cd50 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movl	$4294967295, 20(%rbx)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	289942(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d80b <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %ecx
               	movq	8(%r15), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41d869 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc9>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%r15)
               	movl	%ecx, 20(%r15)
               	movq	8(%rax), %rax
               	movq	%rax, 32(%rsp)
               	movl	20(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d8ad <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x10d>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	%r15, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	238190(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	289647(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d932 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %eax
               	movq	8(%r15), %r13
               	cmpl	68(%r13), %eax
               	jge	0x41d9b2 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf2>
               	leal	1(%rax), %ecx
               	movl	%ecx, 16(%r15)
               	movl	%eax, 20(%r15)
               	movl	20(%r15), %ebp
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	244664(%rip), %rcx      # 0x459530 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r13, 24(%rax)
               	movl	%ebp, 32(%rax)
               	movq	%r15, %rdi
               	callq	0x41d670 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	237861(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	289343(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41da62 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x62>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movl	16(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41da99 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x99>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	289183(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41db02 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x62>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	je	0x41db3e <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9e>
               	movl	16(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41db43 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa3>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	288989(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dbc4 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x74>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41dcab <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41dcab <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	32(%rsp), %r12
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%rax, %r15
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%r15, %r15
               	je	0x41dca6 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x156>
               	movq	(%r15), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41dcab <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41daa0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rbx, %rbx
               	je	0x41dcc7 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x177>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41dcad <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	testq	%rax, %rax
               	je	0x41dc4e <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0xfe>
               	xorl	%eax, %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%rax, %rax
               	sete	%al
               	jmp	0x41dcad <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	24(%rsp), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	288607(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dd42 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0x72>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r15
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	xorl	%ebx, %ebx
               	movl	$0, %ebp
               	testq	%rax, %rax
               	je	0x41dd70 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xa0>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebp
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41daa0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41dd92 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xc2>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebx
               	xorl	%ebx, %ebp
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movl	%ebp, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	64(%rsp), %rbp
               	movups	%xmm0, 16(%rsp)
               	leaq	245734(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 48(%rsp)
               	movb	288341(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de4c <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x9c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r13
               	leaq	88(%rsp), %r12
               	leaq	8(%rsp), %rdi
               	movq	%rdi, 56(%rsp)
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%rax, %rax
               	je	0x41de97 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe7>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41de99 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe9>
               	xorl	%esi, %esi
               	leaq	8(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	267536(%rip), %rsi      # 0x45f3c0 <__unnamed_30>
               	movq	%rbp, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rsi
               	callq	0x41daa0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41deea <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13a>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41deec <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13c>
               	xorl	%esi, %esi
               	leaq	112(%rsp), %rdx
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288094(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df43 <kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288062(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df63 <kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	288024(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df89 <kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	287956(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dfcd <kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?+0x1d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d2f0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	287833(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e048 <kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean+0x58>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	236976(%rip), %rcx      # 0x457e20 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	287736(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0a9 <kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cd00 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	287672(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0e9 <kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d570 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	287611(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e126 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x26>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbp), %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e279 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movl	%eax, %r13d
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e2a6 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1a6>
               	cmpl	%r13d, 8(%rax)
               	jbe	0x41e2ab <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r13d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e274 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x174>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e279 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	242381(%rip), %rdx      # 0x459530 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%r15)
               	movq	%r12, 24(%rax)
               	movl	%r13d, 32(%rax)
               	jmp	0x41e27b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x17b>
               	testq	%rax, %rax
               	je	0x41e234 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x134>
               	xorl	%ecx, %ecx
               	movq	%rcx, (%r15)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movq	%rcx, (%r15)
               	movq	%rcx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	287192(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2c9 <kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d5f0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	287150(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2f3 <kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	287118(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e313 <kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	287080(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e339 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e375 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e375 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d1a0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	286980(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e39d <kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?+0x1d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	*248(%rax)
               	movq	%rax, (%r15)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	286857(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e418 <kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean+0x58>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	236000(%rip), %rcx      # 0x457e20 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	286752(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e481 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x21>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e5d6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e5d6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	8(%rbp), %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e5df <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movl	%eax, %r12d
               	movq	16(%r15), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e606 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1a6>
               	cmpl	%r12d, 8(%rax)
               	jbe	0x41e60b <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r12d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e5da <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17a>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e5df <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x41cd50 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movb	$1, %cl
               	jmp	0x41e5e1 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x181>
               	xorl	%ecx, %ecx
               	jmp	0x41e5f7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x197>
               	testq	%rax, %rax
               	je	0x41e5c7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x167>
               	xorl	%ecx, %ecx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bf0 <ThrowNullPointerException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	286328(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e629 <kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d3c0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	286286(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e653 <kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	286254(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e673 <kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	286216(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e699 <kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	286148(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e6dd <kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?+0x1d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d2f0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	286088(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e719 <kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	286024(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e759 <kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cd00 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	285960(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e799 <kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d570 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	285841(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e810 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0x60>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41e871 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0xc1>
               	movq	296(%rbx), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	233236(%rip), %rdx      # 0x457760 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 8(%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	285710(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e893 <kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 16(%rsp)
               	movb	285599(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e902 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x62>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r15, 48(%rsp)
               	testl	%ebp, %ebp
               	js	0x41e96f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	cmpl	%ebp, 16(%r14)
               	jle	0x41e96f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	8(%r14), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41e9b2 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x112>
               	movslq	%ebp, %rcx
               	movzwl	16(%rax,%rcx,2), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234153(%rip), %rcx      # 0x457c40 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, 8(%rsp)
               	movl	%esi, %r15d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	285296(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ea31 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0x71>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 40(%rsp)
               	movl	16(%rbx), %r14d
               	leal	1(%r14), %r13d
               	movq	%rbx, %rdi
               	movl	%r13d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r13d, 16(%rbx)
               	cmpl	%r14d, 8(%rbp)
               	jbe	0x41ea99 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd9>
               	movslq	%r14d, %rax
               	movq	(%rbp), %rcx
               	movw	%r15w, 16(%rbp,%rax,2)
               	movq	8(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	movb	285153(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eac0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder+0x20>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	leaq	263030(%rip), %rbx      # 0x45ee40 <__unnamed_8>
               	cmovneq	%r12, %rbx
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb20 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r15, (%r14)
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%r8, 24(%rsp)
               	movl	%ecx, %ebx
               	movl	%edx, %r13d
               	movq	%rsi, %r15
               	movq	%rdi, 8(%rsp)
               	movb	285010(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eb4f <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	262887(%rip), %rbp      # 0x45ee40 <__unnamed_8>
               	cmovneq	%r15, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 16(%rsp)
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movl	%r13d, %edi
               	movl	%ebx, %esi
               	movl	%eax, %edx
               	callq	0x41a640 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
               	movl	%ebx, %r14d
               	subl	%r13d, %r14d
               	movq	8(%rsp), %r15
               	movl	16(%r15), %esi
               	addl	%r14d, %esi
               	movq	%r15, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x41ec8b <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x16b>
               	movl	16(%r15), %eax
               	movq	8(%r15), %rcx
               	movq	%rcx, 56(%rsp)
               	movslq	%eax, %r15
               	leaq	(%rcx,%r15,2), %rdi
               	addq	$16, %rdi
               	movslq	%r13d, %rax
               	leaq	16(,%rax,2), %rsi
               	addq	%rbp, %rsi
               	movslq	%r14d, %rbp
               	movq	%rbp, %rdx
               	addq	%rbp, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	addl	%r15d, %ebp
               	movq	8(%rsp), %r15
               	movq	%r15, %rdi
               	movl	%ebp, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebp, 16(%r15)
               	movq	24(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	16(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpl	%r13d, %ebx
               	cmovll	%r13d, %ebx
               	cmpl	%r13d, %ebx
               	je	0x41ec56 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
               	nopl	(%rax,%rax)
               	movzbl	284657(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ecb0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %r14
               	movq	%r14, 64(%rsp)
               	movl	16(%r15), %r12d
               	leal	1(%r12), %r15d
               	movq	8(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rsp), %rax
               	movl	%r15d, 16(%rax)
               	movq	8(%rsp), %r15
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movl	%r13d, %esi
               	callq	*8(%rax)
               	cmpl	%r12d, 8(%r14)
               	jbe	0x41ed24 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x204>
               	movslq	%r12d, %rcx
               	addl	$1, %r13d
               	movq	(%r14), %rdx
               	movw	%ax, 16(%r14,%rcx,2)
               	cmpl	%r13d, %ebx
               	jne	0x41eca0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
               	jmp	0x41ec56 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdx, 24(%rsp)
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 48(%rsp)
               	movb	284418(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ed9f <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$11, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	16(%rbx), %r15d
               	movq	8(%rbx), %r14
               	movq	%r14, 56(%rsp)
               	leaq	12(%rsp), %rbp
               	leaq	158626(%rip), %rdx      # 0x445968 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movl	$12, %esi
               	movq	%rbp, %rdi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x437310 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movb	12(%rsp), %al
               	testb	%al, %al
               	je	0x41ee06 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
               	movslq	%r15d, %rcx
               	leaq	12(%rsp), %rbp
               	leaq	(%r14,%rcx,2), %rcx
               	addq	$16, %rcx
               	movsbl	%al, %eax
               	movw	%ax, (%rcx)
               	addq	$2, %rcx
               	movzbl	1(%rbp), %eax
               	addq	$1, %rbp
               	testb	%al, %al
               	jne	0x41edf0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xc0>
               	leaq	12(%rsp), %rax
               	subl	%eax, %ebp
               	addl	%ebp, %r15d
               	movq	%rbx, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%rbx)
               	movq	24(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	284135(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eeba <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder+0x6a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	262012(%rip), %rbx      # 0x45ee40 <__unnamed_8>
               	cmovneq	%r15, %rbx
               	movl	8(%rbx), %esi
               	addl	16(%r12), %esi
               	movq	%r12, %rdi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	16(%r12), %eax
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rbx), %edx
               	movslq	%eax, %rbp
               	leaq	(%rcx,%rbp,2), %rdi
               	addq	$16, %rdi
               	addq	$16, %rbx
               	movslq	%edx, %r15
               	leaq	(%r15,%r15), %rdx
               	movq	%rbx, %rsi
               	callq	0x4136f0 <memcpy@plt>
               	addl	%ebp, %r15d
               	movq	%r12, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef40 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%r12)
               	movq	%r12, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	283890(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41efaf <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0x6f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%r14d, 8(%rax)
               	jge	0x41eff3 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0xb3>
               	leaq	48(%rsp), %rdx
               	movq	8(%rbx), %rax
               	movq	%rax, 32(%rsp)
               	movl	8(%rax), %eax
               	leal	(%rax,%rax), %esi
               	addl	$2, %esi
               	cmpl	%r14d, %esi
               	cmovll	%r14d, %esi
               	movq	8(%rbx), %rdi
               	movq	%rdi, 40(%rsp)
               	callq	0x415790 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	283690(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f077 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x67>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %r15
               	movq	%r15, 24(%rsp)
               	movl	16(%rbx), %ebp
               	testl	%ebp, %ebp
               	je	0x41f0ee <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0xde>
               	js	0x41f155 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x145>
               	movslq	%ebp, %r12
               	movq	296(%r13), %rdi
               	leaq	31(,%rbp), %rsi
               	addq	%rbp, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	233863(%rip), %rcx      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, (%r14)
               	leaq	32(%rax), %rdi
               	addq	$16, %r15
               	addq	%r12, %r12
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%rbx, (%r14)
               	jmp	0x41f134 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x124>
               	movq	$0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 48(%rsp)
               	leaq	258307(%rip), %rbx      # 0x45e228 <__unnamed_6>
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	283346(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f1cf <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x6f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41f221 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	cmpl	$18, (%rax,%rcx)
               	jne	0x41f221 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*24(%rax)
               	movl	%eax, %ecx
               	movb	$1, %al
               	testb	%cl, %cl
               	jne	0x41f2e5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f2a4 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movq	(%r12), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	*144(%rcx)
               	testb	%al, %al
               	je	0x41f2df <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x17f>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f2e3 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x183>
               	movzbl	283076(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f260 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f260 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	xorl	%eax, %eax
               	jmp	0x41f2e5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	283022(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f313 <kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testl	%eax, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	leaq	240516(%rip), %rax      # 0x459ee0 <ktypeglobal:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	282868(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f3ad <kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String+0x7d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rsp, %rsi
               	movq	%rsi, 40(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	callq	0x41a8d0 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>
               	movq	%rax, (%r14)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movb	282788(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f3fd <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%rbx, 8(%r15)
               	je	0x41f420 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x40>
               	testq	%rbx, %rbx
               	je	0x41f429 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x49>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rax)
               	jmp	0x41f430 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	262969(%rip), %rax      # 0x45f760 <__unnamed_41>
               	jmp	0x41f430 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	260624(%rip), %rax      # 0x45ee40 <__unnamed_8>
               	movq	%rax, (%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	282696(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f459 <kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	240460(%rip), %rdx      # 0x459fe0 <ktypeglobal:kotlin.collections.AbstractList.IteratorImpl#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%rbx)
               	movq	%r14, 24(%rax)
               	movq	%rcx, (%rbx)
               	movq	%rcx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r13
               	movb	282574(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f4d3 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r13, %rbx
               	je	0x41f6e8 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x238>
               	testq	%rbx, %rbx
               	je	0x41f6e4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$43, %ecx
               	shlq	$4, %rcx
               	cmpl	$43, (%rax,%rcx)
               	jne	0x41f6e4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41f6ec <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23c>
               	movq	%r14, 8(%rsp)
               	leaq	64(%rsp), %r15
               	leaq	56(%rsp), %r12
               	leaq	48(%rsp), %rbp
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	%rax, %r14
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f629 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	nopl	(%rax)
               	testq	%rax, %rax
               	jne	0x41f6e0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x230>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f6f0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x240>
               	movzbl	282171(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f666 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x1b6>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbp
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41f620 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x170>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	jne	0x41f629 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	xorl	%ecx, %ecx
               	jmp	0x41f6f2 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x242>
               	xorl	%ecx, %ecx
               	jmp	0x41f70d <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	movb	$1, %cl
               	jmp	0x41f70d <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	xorl	%ecx, %ecx
               	jmp	0x41f6f7 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x247>
               	movb	$1, %cl
               	movq	8(%rsp), %r14
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	movb	281955(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f73e <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x1e>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	movl	$1, %r12d
               	jmp	0x41f81c <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xfc>
               	nopl	(%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movl	%r12d, %ebp
               	shll	$5, %ebp
               	subl	%r12d, %ebp
               	testq	%rax, %rax
               	je	0x41f860 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x140>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movl	%ebp, %r12d
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f864 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x144>
               	movzbl	281676(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f7d0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f7d0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41f817 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xf7>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%r12d, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	281596(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f8a5 <kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal+0x15>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %ebp
               	movq	8(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*136(%rax)
               	cmpl	%eax, %ebp
               	setl	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	281455(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f932 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0x62>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testb	%al, %al
               	je	0x41f982 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0xb2>
               	movq	8(%rbx), %rdi
               	movl	16(%rbx), %esi
               	leal	1(%rsi), %eax
               	movl	%eax, 16(%rbx)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdx
               	callq	*192(%rax)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	229718(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	238551(%rip), %rax      # 0x459de0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	281160(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fa59 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0x89>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41fa7c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	cmpl	%ebx, %ebp
               	jge	0x41fa7c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r15
               	leaq	80(%rsp), %r12
               	movq	%r12, 24(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	261052(%rip), %rsi      # 0x45f660 <__unnamed_46>
               	movq	%r12, %rdi
               	movq	%r15, %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	259741(%rip), %rsi      # 0x45f160 <__unnamed_18>
               	movq	%r12, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee50 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed30 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	64(%rsp), %rsi
               	callq	0x41f010 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	229673(%rip), %rcx      # 0x457c40 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a730 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	280913(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb50 <kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	280809(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fbb8 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing+0x58>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	229152(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any>:
               	pushq	%rax
               	movb	280721(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc10 <kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x41fb60 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280686(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc33 <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fc7d <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5d>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41fc7d <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5d>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	24(%rax), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	280577(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fca0 <kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280542(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcc3 <kfun:kotlin.collections.EmptySet#toString(){}kotlin.String+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	260822(%rip), %rax      # 0x45f7a0 <__unnamed_47>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int>:
               	pushq	%rax
               	movb	280513(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fce0 <kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	280481(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd00 <kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280446(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd23 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fd32 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x22>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280398(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd53 <kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	24(%rax), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*%rax
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280334(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd93 <kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	267622(%rip), %rax      # 0x461300 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?>:
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movb	280302(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fdb3 <kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	$0, (%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rsi, %rbx
               	movb	280264(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fdd9 <kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rdi, %rbx
               	movb	280216(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe09 <kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	280177(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe30 <kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280142(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe53 <kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String+0x13>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	254070(%rip), %rax      # 0x45ded0 <__unnamed_48>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 16(%rsp)
               	movb	280021(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fecc <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x6c>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r15), %rax
               	movq	%rax, 24(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x41ff09 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0xa9>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 16(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.<get-size>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	279821(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ff94 <kfun:kotlin.enums.EnumEntriesList.<get-size>#internal+0x64>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.get#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	279668(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42002d <kfun:kotlin.enums.EnumEntriesList.get#internal+0x6d>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rax, %rbx
               	movl	8(%rax), %esi
               	movl	%r12d, %edi
               	callq	0x41f9d0 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>
               	cmpl	%r12d, 8(%rbx)
               	jbe	0x420070 <kfun:kotlin.enums.EnumEntriesList.get#internal+0xb0>
               	movslq	%r12d, %rax
               	movq	16(%rbx,%rax,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.contains#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	279478(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4200eb <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x6b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x420105 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x85>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$-86, %eax
               	cmpl	$14, %eax
               	jbe	0x420109 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x89>
               	xorl	%eax, %eax
               	jmp	0x420148 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xc8>
               	leaq	24(%rsp), %rsi
               	movq	%r14, %rdi
               	callq	0x41fe60 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	16(%r15), %ecx
               	testl	%ecx, %ecx
               	js	0x420128 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa8>
               	movl	8(%rax), %edx
               	leal	-1(%rdx), %esi
               	cmpl	%ecx, %esi
               	jge	0x42012c <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xac>
               	xorl	%eax, %eax
               	jmp	0x42013d <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xbd>
               	cmpl	%ecx, %edx
               	jbe	0x42015e <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xde>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rax, 32(%rsp)
               	cmpq	%r15, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	279320(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420189 <kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x19>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	279270(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4201bb <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x1b>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	leal	-1(%rax), %edx
               	movzwl	%bp, %esi
               	movq	%rbx, %rdi
               	callq	0x420230 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
               	cmpl	$-1, %eax
               	je	0x420216 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x76>
               	movl	8(%rbx), %edx
               	addl	$1, %eax
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	movq	%r14, %rcx
               	callq	0x4371b0 <Kotlin_String_subSequence>
               	movq	%rax, %rbx
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x420221 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x81>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	229416(%rip), %rsi      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419d90 <ThrowClassCastException>

<kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	leaq	226549(%rip), %rax      # 0x457760 <ktypeglobal:kotlin.CharArray#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movl	$1, 136(%rsp)
               	movw	$0, 144(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movb	278988(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4202d5 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xa5>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	je	0x42033c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42033c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	8(%r12), %ecx
               	testl	%ecx, %ecx
               	je	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leal	-1(%rcx), %edx
               	cmpl	%r15d, %ecx
               	cmoval	%r15d, %edx
               	testl	%edx, %edx
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%edx, %edx
               	nop
               	cmpw	%bp, 16(%r12,%rdx,2)
               	je	0x420536 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x306>
               	addq	$-1, %rdx
               	leal	1(%rdx), %ecx
               	testl	%ecx, %ecx
               	jg	0x420320 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leaq	128(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	48(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rcx
               	movw	%bp, 16(%rax)
               	movq	48(%rsp), %r14
               	movq	%r14, 64(%rsp)
               	cmpl	$1, 8(%r14)
               	jne	0x42043c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	testq	%r12, %r12
               	je	0x42043c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42043c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 112(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 96(%rsp)
               	movl	8(%r14), %eax
               	cmpl	$1, %eax
               	jne	0x42053e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x30e>
               	movzwl	16(%r14), %esi
               	movq	88(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	8(%r12), %edx
               	testl	%edx, %edx
               	je	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leal	-1(%rdx), %ecx
               	cmpl	%r15d, %edx
               	cmoval	%r15d, %ecx
               	testl	%ecx, %ecx
               	js	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ecx, %ecx
               	nopl	(%rax)
               	cmpw	%si, 16(%r12,%rcx,2)
               	je	0x42053a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x30a>
               	addq	$-1, %rcx
               	leal	1(%rcx), %edx
               	testl	%edx, %edx
               	jg	0x420420 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f0>
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	addl	$-1, %ebp
               	cmpl	%r15d, %ebp
               	cmovgl	%r15d, %ebp
               	testl	%ebp, %ebp
               	js	0x42050a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2da>
               	xorl	%r13d, %r13d
               	movq	%rbx, 8(%rsp)
               	movb	278551(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42048a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x25a>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbp), %eax
               	movl	%eax, 4(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	callq	*8(%rax)
               	movl	%eax, %ebx
               	movl	8(%r14), %r15d
               	testl	%r15d, %r15d
               	cmovsl	%r13d, %r15d
               	xorl	%r13d, %r13d
               	cmpl	%r13d, %r15d
               	je	0x4204f1 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c1>
               	movzbl	278465(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4204e0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b0>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpw	%bx, 16(%r14,%r13,2)
               	je	0x420511 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e1>
               	addq	$1, %r13
               	cmpl	%r13d, %r15d
               	jne	0x4204d0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a0>
               	testl	%ebp, %ebp
               	movl	4(%rsp), %eax
               	movl	%eax, %ebp
               	movq	8(%rsp), %rbx
               	movl	$0, %r13d
               	jg	0x42047b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x24b>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ebp, %eax
               	movq	8(%rsp), %rbx
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%edx, %eax
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ecx, %eax
               	jmp	0x420518 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	testl	%eax, %eax
               	jne	0x42057c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x34c>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	226710(%rip), %rcx      # 0x457b00 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	leaq	258150(%rip), %rsi      # 0x45f5e0 <__unnamed_49>
               	jmp	0x4205b4 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x384>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	227132(%rip), %rcx      # 0x457ce0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	258140(%rip), %rsi      # 0x45f610 <__unnamed_50>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:CallsBenchmark.B#foo(){}kotlin.Int>:
               	pushq	%rax
               	movb	278209(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4205e0 <kfun:CallsBenchmark.B#foo(){}kotlin.Int+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	$42, %eax
               	popq	%rcx
               	retq
               	nopw	(%rax,%rax)

<kfun:CallsBenchmark.C#foo(){}kotlin.Int>:
               	pushq	%rax
               	movb	278177(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420600 <kfun:CallsBenchmark.C#foo(){}kotlin.Int+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	$117, %eax
               	popq	%rcx
               	retq
               	nopw	(%rax,%rax)

<kfun:CallsBenchmark.D#foo(){}kotlin.Int>:
               	pushq	%rax
               	movb	278145(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420620 <kfun:CallsBenchmark.D#foo(){}kotlin.Int+0x10>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	$314, %eax              # imm = 0x13A
               	popq	%rcx
               	retq
               	nopw	(%rax,%rax)

<kfun:#main(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$216, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movups	%xmm0, 16(%rsp)
               	movups	%xmm0, 32(%rsp)
               	movups	%xmm0, 48(%rsp)
               	movups	%xmm0, 64(%rsp)
               	movups	%xmm0, 80(%rsp)
               	leaq	237535(%rip), %rax      # 0x45a650 <ktypeglobal:CallsBenchmark#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 128(%rsp)
               	movb	277979(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4206c6 <kfun:#main(){}+0x96>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 136(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 208(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 152(%rsp)
               	leaq	144(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 160(%rsp)
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	239558(%rip), %rdx      # 0x45af20 <ktypeglobal:CallsBenchmark.D#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 168(%rsp)
               	movq	%rcx, 16(%rsp)
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	237613(%rip), %rdx      # 0x45a7c0 <ktypeglobal:CallsBenchmark.B#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 176(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	238500(%rip), %rdx      # 0x45ab70 <ktypeglobal:CallsBenchmark.C#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 184(%rsp)
               	movq	%rcx, 32(%rsp)
               	movq	16(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 48(%rsp)
               	movq	32(%rsp), %rcx
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 64(%rsp)
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	240296(%rip), %rdx      # 0x45b2d0 <ktypeglobal:CallsBenchmark.X#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 192(%rsp)
               	movq	%rcx, 72(%rsp)
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	241183(%rip), %rdx      # 0x45b680 <ktypeglobal:CallsBenchmark.Y#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 200(%rsp)
               	movq	%rcx, 80(%rsp)
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	242070(%rip), %rdx      # 0x45ba30 <ktypeglobal:CallsBenchmark.Z#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 208(%rsp)
               	movq	%rcx, 88(%rsp)
               	movq	152(%rsp), %rax
               	movq	%rbx, 96(%rsp)
               	movq	%rax, 288(%rbx)
               	movq	48(%rsp), %r12
               	movq	56(%rsp), %rax
               	movq	%rax, 104(%rsp)
               	xorl	%r15d, %r15d
               	movl	$1000000, %ebx          # imm = 0xF4240
               	movq	64(%rsp), %r13
               	movl	$2863311531, %r14d      # imm = 0xAAAAAAAB
               	jmp	0x420903 <kfun:#main(){}+0x2d3>
               	nopw	%cs:(%rax,%rax)
               	addl	$1, %r15d
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	addl	$-1, %ebx
               	je	0x42093d <kfun:#main(){}+0x30d>
               	movl	%r15d, %eax
               	imulq	%r14, %rax
               	shrq	$33, %rax
               	leal	(%rax,%rax,2), %eax
               	movl	%r15d, %ebp
               	subl	%eax, %ebp
               	movzbl	277371(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420926 <kfun:#main(){}+0x2f6>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rax
               	cmpl	$1, %ebp
               	je	0x4208f0 <kfun:#main(){}+0x2c0>
               	movq	%r13, %rax
               	cmpl	$2, %ebp
               	jne	0x4208f0 <kfun:#main(){}+0x2c0>
               	movq	104(%rsp), %rax
               	jmp	0x4208f0 <kfun:#main(){}+0x2c0>
               	movq	120(%rsp), %rax
               	movq	96(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	addq	$216, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	277290(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420977 <kfun:#main(){}+0x347>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420986 <kfun:#main(){}+0x356>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272507(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	277226(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209b7 <kfun:#main(){}+0x387>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4209c6 <kfun:#main(){}+0x396>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272443(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	277162(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209f7 <kfun:#main(){}+0x3c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a06 <kfun:#main(){}+0x3d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272379(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	277098(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a37 <kfun:#main(){}+0x407>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a46 <kfun:#main(){}+0x416>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272315(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	277034(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a77 <kfun:#main(){}+0x447>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a86 <kfun:#main(){}+0x456>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272251(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276970(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ab7 <kfun:#main(){}+0x487>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ac6 <kfun:#main(){}+0x496>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272187(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276906(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420af7 <kfun:#main(){}+0x4c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b06 <kfun:#main(){}+0x4d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272123(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276842(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b37 <kfun:#main(){}+0x507>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b46 <kfun:#main(){}+0x516>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	272059(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276778(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b77 <kfun:#main(){}+0x547>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b86 <kfun:#main(){}+0x556>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271995(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276714(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420bb7 <kfun:#main(){}+0x587>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420bc6 <kfun:#main(){}+0x596>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271931(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276650(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420bf7 <kfun:#main(){}+0x5c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c06 <kfun:#main(){}+0x5d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271867(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276586(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c37 <kfun:#main(){}+0x607>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c46 <kfun:#main(){}+0x616>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271803(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276522(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c77 <kfun:#main(){}+0x647>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c86 <kfun:#main(){}+0x656>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271739(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276458(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cb7 <kfun:#main(){}+0x687>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420cc6 <kfun:#main(){}+0x696>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271675(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276394(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cf7 <kfun:#main(){}+0x6c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d06 <kfun:#main(){}+0x6d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271611(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276330(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d37 <kfun:#main(){}+0x707>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d46 <kfun:#main(){}+0x716>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271547(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276266(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d77 <kfun:#main(){}+0x747>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d86 <kfun:#main(){}+0x756>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271483(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276202(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420db7 <kfun:#main(){}+0x787>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420dc6 <kfun:#main(){}+0x796>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271419(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276138(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420df7 <kfun:#main(){}+0x7c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e06 <kfun:#main(){}+0x7d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271355(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276074(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e37 <kfun:#main(){}+0x807>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e46 <kfun:#main(){}+0x816>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271291(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	276010(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e77 <kfun:#main(){}+0x847>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e86 <kfun:#main(){}+0x856>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271227(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275946(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420eb7 <kfun:#main(){}+0x887>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ec6 <kfun:#main(){}+0x896>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271163(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275882(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ef7 <kfun:#main(){}+0x8c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f06 <kfun:#main(){}+0x8d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271099(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275818(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f37 <kfun:#main(){}+0x907>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f46 <kfun:#main(){}+0x916>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	271035(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275754(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f77 <kfun:#main(){}+0x947>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f86 <kfun:#main(){}+0x956>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270971(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275690(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420fb7 <kfun:#main(){}+0x987>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420fc6 <kfun:#main(){}+0x996>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270907(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275626(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ff7 <kfun:#main(){}+0x9c7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421006 <kfun:#main(){}+0x9d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270843(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275562(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421037 <kfun:#main(){}+0xa07>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421046 <kfun:#main(){}+0xa16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270779(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275498(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421077 <kfun:#main(){}+0xa47>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421086 <kfun:#main(){}+0xa56>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270715(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275434(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4210b7 <kfun:#main(){}+0xa87>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4210c6 <kfun:#main(){}+0xa96>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270651(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275370(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4210f7 <kfun:#main(){}+0xac7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421106 <kfun:#main(){}+0xad6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270587(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275306(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421137 <kfun:#main(){}+0xb07>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421146 <kfun:#main(){}+0xb16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270523(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275242(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421177 <kfun:#main(){}+0xb47>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421186 <kfun:#main(){}+0xb56>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270459(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275178(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4211b7 <kfun:#main(){}+0xb87>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4211c6 <kfun:#main(){}+0xb96>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270395(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275114(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4211f7 <kfun:#main(){}+0xbc7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421206 <kfun:#main(){}+0xbd6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270331(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275050(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421237 <kfun:#main(){}+0xc07>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421246 <kfun:#main(){}+0xc16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270267(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274986(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421277 <kfun:#main(){}+0xc47>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421286 <kfun:#main(){}+0xc56>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270203(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274922(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212b7 <kfun:#main(){}+0xc87>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4212c6 <kfun:#main(){}+0xc96>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270139(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274858(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212f7 <kfun:#main(){}+0xcc7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421306 <kfun:#main(){}+0xcd6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270075(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274794(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421337 <kfun:#main(){}+0xd07>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421346 <kfun:#main(){}+0xd16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	270011(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	274729(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421378 <kfun:#main(){}+0xd48>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4213a4 <kfun:#main(){}+0xd74>
               	testl	%ebx, %ebx
               	je	0x4213ac <kfun:#main(){}+0xd7c>
               	movq	$0, 269889(%rip)        # 0x4631d0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	$0, 269886(%rip)        # 0x4631d8 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movl	$0, 269932(%rip)        # 0x463210 <state_global$kotlin.native.MemoryModel>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	269909(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopw	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274618(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4213e7 <kfun:#main(){}+0xdb7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4213f6 <kfun:#main(){}+0xdc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269835(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274554(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421427 <kfun:#main(){}+0xdf7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421436 <kfun:#main(){}+0xe06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269771(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274490(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421467 <kfun:#main(){}+0xe37>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421476 <kfun:#main(){}+0xe46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269707(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274426(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214a7 <kfun:#main(){}+0xe77>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4214b6 <kfun:#main(){}+0xe86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269643(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	274361(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214e8 <kfun:#main(){}+0xeb8>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421509 <kfun:#main(){}+0xed9>
               	testl	%ebx, %ebx
               	je	0x421511 <kfun:#main(){}+0xee1>
               	movq	$0, 269537(%rip)        # 0x4631e0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movl	$0, 269579(%rip)        # 0x463214 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	269552(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	274265(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421548 <kfun:#main(){}+0xf18>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421569 <kfun:#main(){}+0xf39>
               	testl	%ebx, %ebx
               	je	0x421571 <kfun:#main(){}+0xf41>
               	movq	$0, 269449(%rip)        # 0x4631e8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movl	$0, 269487(%rip)        # 0x463218 <state_global$kotlin.native.concurrent.INITIALIZING>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	269456(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274170(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4215a7 <kfun:#main(){}+0xf77>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4215b6 <kfun:#main(){}+0xf86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269387(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274106(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4215e7 <kfun:#main(){}+0xfb7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4215f6 <kfun:#main(){}+0xfc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269323(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	274042(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421627 <kfun:#main(){}+0xff7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421636 <kfun:#main(){}+0x1006>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269259(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273978(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421667 <kfun:#main(){}+0x1037>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421676 <kfun:#main(){}+0x1046>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269195(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273914(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4216a7 <kfun:#main(){}+0x1077>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4216b6 <kfun:#main(){}+0x1086>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269131(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	273849(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4216e8 <kfun:#main(){}+0x10b8>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421709 <kfun:#main(){}+0x10d9>
               	testl	%ebx, %ebx
               	je	0x421711 <kfun:#main(){}+0x10e1>
               	movq	$0, 269041(%rip)        # 0x4631f0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movl	$0, 269075(%rip)        # 0x46321c <state_global$kotlin.native.internal.NativePtr>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	269040(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273754(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421747 <kfun:#main(){}+0x1117>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421756 <kfun:#main(){}+0x1126>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268971(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273690(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421787 <kfun:#main(){}+0x1157>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421796 <kfun:#main(){}+0x1166>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268907(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	273625(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217c8 <kfun:#main(){}+0x1198>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4217e9 <kfun:#main(){}+0x11b9>
               	testl	%ebx, %ebx
               	je	0x4217f1 <kfun:#main(){}+0x11c1>
               	movq	$0, 268825(%rip)        # 0x4631f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movl	$0, 268855(%rip)        # 0x463220 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	268816(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273530(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421827 <kfun:#main(){}+0x11f7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421836 <kfun:#main(){}+0x1206>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268747(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273466(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421867 <kfun:#main(){}+0x1237>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421876 <kfun:#main(){}+0x1246>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268683(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273402(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218a7 <kfun:#main(){}+0x1277>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4218b6 <kfun:#main(){}+0x1286>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268619(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273338(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218e7 <kfun:#main(){}+0x12b7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4218f6 <kfun:#main(){}+0x12c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268555(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273274(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421927 <kfun:#main(){}+0x12f7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421936 <kfun:#main(){}+0x1306>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268491(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273210(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421967 <kfun:#main(){}+0x1337>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421976 <kfun:#main(){}+0x1346>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268427(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273146(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4219a7 <kfun:#main(){}+0x1377>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4219b6 <kfun:#main(){}+0x1386>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268363(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273082(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4219e7 <kfun:#main(){}+0x13b7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4219f6 <kfun:#main(){}+0x13c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268299(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273018(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a27 <kfun:#main(){}+0x13f7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421a36 <kfun:#main(){}+0x1406>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268235(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272954(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a67 <kfun:#main(){}+0x1437>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421a76 <kfun:#main(){}+0x1446>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268171(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272890(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421aa7 <kfun:#main(){}+0x1477>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ab6 <kfun:#main(){}+0x1486>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268107(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272826(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ae7 <kfun:#main(){}+0x14b7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421af6 <kfun:#main(){}+0x14c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268043(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272762(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b27 <kfun:#main(){}+0x14f7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421b36 <kfun:#main(){}+0x1506>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267979(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272698(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b67 <kfun:#main(){}+0x1537>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421b76 <kfun:#main(){}+0x1546>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267915(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	272633(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ba8 <kfun:#main(){}+0x1578>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421bbf <kfun:#main(){}+0x158f>
               	testl	%ebx, %ebx
               	je	0x421bc7 <kfun:#main(){}+0x1597>
               	movq	$0, 259905(%rip)        # 0x461300 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	267834(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272538(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c07 <kfun:#main(){}+0x15d7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421c16 <kfun:#main(){}+0x15e6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267755(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	272473(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c48 <kfun:#main(){}+0x1618>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421c5f <kfun:#main(){}+0x162f>
               	testl	%ebx, %ebx
               	je	0x421c67 <kfun:#main(){}+0x1637>
               	movq	$0, 259753(%rip)        # 0x461308 <kvar:kotlin.collections.EmptySet.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	267674(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272378(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ca7 <kfun:#main(){}+0x1677>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421cb6 <kfun:#main(){}+0x1686>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267595(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272314(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ce7 <kfun:#main(){}+0x16b7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421cf6 <kfun:#main(){}+0x16c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267531(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	272249(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d28 <kfun:#main(){}+0x16f8>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421d3f <kfun:#main(){}+0x170f>
               	testl	%ebx, %ebx
               	je	0x421d47 <kfun:#main(){}+0x1717>
               	movq	$0, 259537(%rip)        # 0x461310 <kvar:kotlin.coroutines.EmptyCoroutineContext.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	267450(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272154(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d87 <kfun:#main(){}+0x1757>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d96 <kfun:#main(){}+0x1766>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267371(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272090(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421dc7 <kfun:#main(){}+0x1797>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421dd6 <kfun:#main(){}+0x17a6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267307(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	272025(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e08 <kfun:#main(){}+0x17d8>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421e29 <kfun:#main(){}+0x17f9>
               	testl	%ebx, %ebx
               	je	0x421e31 <kfun:#main(){}+0x1801>
               	movq	$0, 267233(%rip)        # 0x463200 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	movl	$0, 267259(%rip)        # 0x463224 <state_global$kotlin.ranges.IntRange>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	267216(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424980 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271930(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e67 <kfun:#main(){}+0x1837>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e76 <kfun:#main(){}+0x1846>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267147(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271866(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ea7 <kfun:#main(){}+0x1877>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421eb6 <kfun:#main(){}+0x1886>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267083(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271802(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ee7 <kfun:#main(){}+0x18b7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ef6 <kfun:#main(){}+0x18c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267019(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271738(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f27 <kfun:#main(){}+0x18f7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f36 <kfun:#main(){}+0x1906>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266955(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271674(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f67 <kfun:#main(){}+0x1937>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f76 <kfun:#main(){}+0x1946>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266891(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271610(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fa7 <kfun:#main(){}+0x1977>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421fb6 <kfun:#main(){}+0x1986>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266827(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271546(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fe7 <kfun:#main(){}+0x19b7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ff6 <kfun:#main(){}+0x19c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266763(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271482(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422027 <kfun:#main(){}+0x19f7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422036 <kfun:#main(){}+0x1a06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266699(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271418(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422067 <kfun:#main(){}+0x1a37>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422076 <kfun:#main(){}+0x1a46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266635(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271354(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220a7 <kfun:#main(){}+0x1a77>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220b6 <kfun:#main(){}+0x1a86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266571(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271290(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220e7 <kfun:#main(){}+0x1ab7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220f6 <kfun:#main(){}+0x1ac6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266507(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271226(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422127 <kfun:#main(){}+0x1af7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422136 <kfun:#main(){}+0x1b06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266443(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271162(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422167 <kfun:#main(){}+0x1b37>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422176 <kfun:#main(){}+0x1b46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266379(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271098(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4221a7 <kfun:#main(){}+0x1b77>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4221b6 <kfun:#main(){}+0x1b86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266315(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271034(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4221e7 <kfun:#main(){}+0x1bb7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4221f6 <kfun:#main(){}+0x1bc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266251(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270970(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422227 <kfun:#main(){}+0x1bf7>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422236 <kfun:#main(){}+0x1c06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266187(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270906(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422267 <kfun:#main(){}+0x1c37>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422276 <kfun:#main(){}+0x1c46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266123(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270842(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4222a7 <kfun:#main(){}+0x1c77>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4222b6 <kfun:#main(){}+0x1c86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266059(%rip), %rsi      # 0x463208 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$3, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424980 <AddTLSRecord>

<_Konan_constructors>:
               	cmpl	$0, 266065(%rip)        # 0x463228 <state_global$kotlin.ranges.IntRange+0x4>
               	je	0x4222e7 <_Konan_constructors+0x17>
               	cmpl	$0, 266060(%rip)        # 0x46322c <state_global$kotlin.ranges.IntRange+0x8>
               	je	0x423205 <_Konan_constructors+0xf35>
               	retq
               	movl	$1, 266039(%rip)        # 0x463228 <state_global$kotlin.ranges.IntRange+0x4>
               	movq	370992(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370948(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	leaq	370941(%rip), %rax      # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	258050(%rip), %rdx      # 0x461318 <init_node>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370952(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370945(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370901(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	258026(%rip), %rdx      # 0x461328 <init_node.16>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370912(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370905(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370861(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	258002(%rip), %rdx      # 0x461338 <init_node.17>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370872(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370865(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370821(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257978(%rip), %rdx      # 0x461348 <init_node.18>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370832(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370825(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370781(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257954(%rip), %rdx      # 0x461358 <init_node.19>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370792(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370785(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370741(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257930(%rip), %rdx      # 0x461368 <init_node.20>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370752(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370745(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370701(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257906(%rip), %rdx      # 0x461378 <init_node.21>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370712(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370705(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370661(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257882(%rip), %rdx      # 0x461388 <init_node.22>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370672(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370665(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370621(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257858(%rip), %rdx      # 0x461398 <init_node.23>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370632(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370625(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370581(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257834(%rip), %rdx      # 0x4613a8 <init_node.24>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370592(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370585(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370541(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257810(%rip), %rdx      # 0x4613b8 <init_node.25>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370552(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370545(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370501(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257786(%rip), %rdx      # 0x4613c8 <init_node.26>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370512(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370505(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370461(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257762(%rip), %rdx      # 0x4613d8 <init_node.27>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370472(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370465(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370421(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257738(%rip), %rdx      # 0x4613e8 <init_node.28>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370432(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370425(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370381(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257714(%rip), %rdx      # 0x4613f8 <init_node.29>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370392(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370385(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370341(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257690(%rip), %rdx      # 0x461408 <init_node.30>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370352(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370345(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370301(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257666(%rip), %rdx      # 0x461418 <init_node.31>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370312(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370305(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370261(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257642(%rip), %rdx      # 0x461428 <init_node.32>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370272(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370265(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370221(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257618(%rip), %rdx      # 0x461438 <init_node.33>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370232(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370225(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370181(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257594(%rip), %rdx      # 0x461448 <init_node.34>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370192(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370185(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370141(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257570(%rip), %rdx      # 0x461458 <init_node.35>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370152(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370145(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370101(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257546(%rip), %rdx      # 0x461468 <init_node.36>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370112(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370105(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370061(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257522(%rip), %rdx      # 0x461478 <init_node.37>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370072(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370065(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 370021(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257498(%rip), %rdx      # 0x461488 <init_node.38>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 370032(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	370025(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369981(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257474(%rip), %rdx      # 0x461498 <init_node.39>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369992(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369985(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369941(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257450(%rip), %rdx      # 0x4614a8 <init_node.40>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369952(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369945(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369901(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257426(%rip), %rdx      # 0x4614b8 <init_node.41>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369912(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369905(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369861(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257402(%rip), %rdx      # 0x4614c8 <init_node.42>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369872(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369865(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369821(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257378(%rip), %rdx      # 0x4614d8 <init_node.43>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369832(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369825(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369781(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257354(%rip), %rdx      # 0x4614e8 <init_node.44>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369792(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369785(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369741(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257330(%rip), %rdx      # 0x4614f8 <init_node.45>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369752(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369745(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369701(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257306(%rip), %rdx      # 0x461508 <init_node.46>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369712(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369705(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369661(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257282(%rip), %rdx      # 0x461518 <init_node.47>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369672(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369665(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369621(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257258(%rip), %rdx      # 0x461528 <init_node.48>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369632(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369625(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369581(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257234(%rip), %rdx      # 0x461538 <init_node.49>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369592(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369585(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369541(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257210(%rip), %rdx      # 0x461548 <init_node.50>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369552(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369545(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369501(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257186(%rip), %rdx      # 0x461558 <init_node.51>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369512(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369505(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369461(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257162(%rip), %rdx      # 0x461568 <init_node.52>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369472(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369465(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369421(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257138(%rip), %rdx      # 0x461578 <init_node.53>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369432(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369425(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369381(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257114(%rip), %rdx      # 0x461588 <init_node.54>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369392(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369385(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369341(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257090(%rip), %rdx      # 0x461598 <init_node.55>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369352(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369345(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369301(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257066(%rip), %rdx      # 0x4615a8 <init_node.56>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369312(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369305(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369261(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257042(%rip), %rdx      # 0x4615b8 <init_node.57>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369272(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369265(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369221(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	257018(%rip), %rdx      # 0x4615c8 <init_node.58>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369232(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369225(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369181(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256994(%rip), %rdx      # 0x4615d8 <init_node.59>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369192(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369185(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369141(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256970(%rip), %rdx      # 0x4615e8 <init_node.60>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369152(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369145(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369101(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256946(%rip), %rdx      # 0x4615f8 <init_node.61>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369112(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369105(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369061(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256922(%rip), %rdx      # 0x461608 <init_node.62>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369072(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369065(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 369021(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256898(%rip), %rdx      # 0x461618 <init_node.63>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 369032(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	369025(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368981(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256874(%rip), %rdx      # 0x461628 <init_node.64>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368992(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368985(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368941(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256850(%rip), %rdx      # 0x461638 <init_node.65>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368952(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368945(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368901(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256826(%rip), %rdx      # 0x461648 <init_node.66>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368912(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368905(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368861(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256802(%rip), %rdx      # 0x461658 <init_node.67>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368872(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368865(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368821(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256778(%rip), %rdx      # 0x461668 <init_node.68>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368832(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368825(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368781(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256754(%rip), %rdx      # 0x461678 <init_node.69>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368792(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368785(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368741(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256730(%rip), %rdx      # 0x461688 <init_node.70>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368752(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368745(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368701(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256706(%rip), %rdx      # 0x461698 <init_node.71>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368712(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368705(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368661(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256682(%rip), %rdx      # 0x4616a8 <init_node.72>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368672(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368665(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368621(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256658(%rip), %rdx      # 0x4616b8 <init_node.73>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368632(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368625(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368581(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256634(%rip), %rdx      # 0x4616c8 <init_node.74>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368592(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368585(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368541(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256610(%rip), %rdx      # 0x4616d8 <init_node.75>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368552(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368545(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368501(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256586(%rip), %rdx      # 0x4616e8 <init_node.76>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368512(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368505(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368461(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256562(%rip), %rdx      # 0x4616f8 <init_node.77>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368472(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368465(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368421(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256538(%rip), %rdx      # 0x461708 <init_node.78>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368432(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368425(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368381(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256514(%rip), %rdx      # 0x461718 <init_node.79>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368392(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368385(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368341(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256490(%rip), %rdx      # 0x461728 <init_node.80>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368352(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368345(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368301(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256466(%rip), %rdx      # 0x461738 <init_node.81>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368312(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368305(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368261(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256442(%rip), %rdx      # 0x461748 <init_node.82>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368272(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368265(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368221(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256418(%rip), %rdx      # 0x461758 <init_node.83>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368232(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368225(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368181(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256394(%rip), %rdx      # 0x461768 <init_node.84>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368192(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368185(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368141(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256370(%rip), %rdx      # 0x461778 <init_node.85>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368152(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368145(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368101(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256346(%rip), %rdx      # 0x461788 <init_node.86>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368112(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368105(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368061(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256322(%rip), %rdx      # 0x461798 <init_node.87>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368072(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368065(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 368021(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256298(%rip), %rdx      # 0x4617a8 <init_node.88>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 368032(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	368025(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367981(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256274(%rip), %rdx      # 0x4617b8 <init_node.89>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367992(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367985(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367941(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256250(%rip), %rdx      # 0x4617c8 <init_node.90>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367952(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367945(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367901(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256226(%rip), %rdx      # 0x4617d8 <init_node.91>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367912(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367905(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367861(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256202(%rip), %rdx      # 0x4617e8 <init_node.92>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367872(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367865(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367821(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256178(%rip), %rdx      # 0x4617f8 <init_node.93>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367832(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367825(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367781(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256154(%rip), %rdx      # 0x461808 <init_node.94>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367792(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367785(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367741(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256130(%rip), %rdx      # 0x461818 <init_node.95>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367752(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367745(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367701(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256106(%rip), %rdx      # 0x461828 <init_node.96>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367712(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367705(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367661(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256082(%rip), %rdx      # 0x461838 <init_node.97>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367672(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367665(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367621(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256058(%rip), %rdx      # 0x461848 <init_node.98>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367632(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367625(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367581(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256034(%rip), %rdx      # 0x461858 <init_node.99>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367592(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367585(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367541(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256010(%rip), %rdx      # 0x461868 <init_node.100>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367552(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367545(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367501(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255986(%rip), %rdx      # 0x461878 <init_node.101>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367512(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367505(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367461(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255962(%rip), %rdx      # 0x461888 <init_node.102>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367472(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367465(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367421(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255938(%rip), %rdx      # 0x461898 <init_node.103>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367432(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367425(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367381(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255914(%rip), %rdx      # 0x4618a8 <init_node.104>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367392(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367385(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367341(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255890(%rip), %rdx      # 0x4618b8 <init_node.105>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367352(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367345(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367301(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255866(%rip), %rdx      # 0x4618c8 <init_node.106>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367312(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367305(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367261(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255842(%rip), %rdx      # 0x4618d8 <init_node.107>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367272(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367265(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367221(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255818(%rip), %rdx      # 0x4618e8 <init_node.108>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367232(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367225(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367181(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255794(%rip), %rdx      # 0x4618f8 <init_node.109>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 367192(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	movq	367185(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367141(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255770(%rip), %rax      # 0x461908 <init_node.110>
               	movq	%rax, (%rcx)
               	movq	%rax, 367152(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	cmpl	$0, 262189(%rip)        # 0x46322c <state_global$kotlin.ranges.IntRange+0x8>
               	jne	0x4222e6 <_Konan_constructors+0x16>
               	movl	$1, 262173(%rip)        # 0x46322c <state_global$kotlin.ranges.IntRange+0x8>
               	leaq	367090(%rip), %rax      # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	movq	367115(%rip), %rcx      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367071(%rip)        # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255716(%rip), %rax      # 0x461918 <init_node.111>
               	movq	%rax, (%rcx)
               	movq	%rax, 367082(%rip)      # 0x47cc28 <(anonymous namespace)::initTailNode>
               	retq
               	nop

<kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>:
               	jmp	0x413720 <sched_yield@plt>
               	nopw	%cs:(%rax,%rax)

<__clang_call_terminate>:
               	pushq	%rax
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c463 <std::terminate()>
               	nopl	(%rax,%rax)

<void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, (%rsp)
               	movq	%rdi, %r13
               	cmpq	$0, 253243(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42328f <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2f>
               	movq	%r13, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x423468 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x208>
               	cmpb	$0, 88(%r13)
               	je	0x423442 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	leaq	40(%r13), %r15
               	jmp	0x4232db <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x7b>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	96(%r13), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	movabsq	$9223372036854775807, %rsi # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rsi, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 104(%r13)
               	nopl	(%rax)
               	cmpb	$0, 88(%r13)
               	je	0x423442 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	movb	$0, 112(%r13)
               	movq	104(%r13), %r14
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	cmpq	%r14, %rax
               	jge	0x42339f <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x13f>
               	xorl	%ecx, %ecx
               	cmpq	%rax, %r14
               	setns	%cl
               	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rdx, %rcx
               	movq	%r14, %rbp
               	subq	%rax, %rbp
               	cmovoq	%rcx, %rbp
               	movabsq	$86400000000000, %rax   # imm = 0x4E94914F0000
               	cmpq	%rax, %rbp
               	cmovgq	%rax, %rbp
               	callq	0x43d0a0 <std::chrono::_V2::system_clock::now()>
               	movq	%rax, %rbx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	movabsq	$1237940039285380275, %rcx # imm = 0x112E0BE826D694B3
               	imulq	%rcx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$26, %rbp
               	addq	%rax, %rbp
               	imulq	$-1000000000, %rbp, %r12 # imm = 0xC4653600
               	addq	%rbx, %r12
               	nopl	(%rax,%rax)
               	cmpb	$0, 112(%r13)
               	jne	0x4232d0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	movq	%rbp, 8(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	leaq	8(%rsp), %rdx
               	callq	0x413740 <pthread_cond_timedwait@plt>
               	callq	0x43d0a0 <std::chrono::_V2::system_clock::now()>
               	cmpq	%rbx, %rax
               	jl	0x423360 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x100>
               	cmpb	$0, 112(%r13)
               	je	0x4232e4 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x84>
               	jmp	0x4232d0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	cmpq	$0, 252945(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4233b1 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x151>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	(%rsp), %rax
               	movq	(%rax), %rbx
               	movq	16(%rbx), %rax
               	movl	(%rax), %eax
               	cmpl	$1, %eax
               	je	0x42341d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	56(%rbx), %rcx
               	movq	48(%rbx), %rdx
               	movq	24(%rdx), %rdx
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%rbp), %rsi
               	testq	%rdx, %rdx
               	cmovnsq	%rbp, %rsi
               	imulq	$1000, %rdx, %rdx       # imm = 0x3E8
               	cmovoq	%rsi, %rdx
               	xorl	%esi, %esi
               	movq	%rcx, %rdi
               	addq	%rdx, %rdi
               	setns	%sil
               	addq	%rbp, %rsi
               	addq	%rcx, %rdx
               	cmovoq	%rsi, %rdx
               	cmpq	%rdx, %rax
               	jl	0x42341d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	cmpq	$0, 80(%rbx)
               	je	0x423463 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x203>
               	leaq	64(%rbx), %rdi
               	callq	*88(%rbx)
               	cmpq	$0, 252819(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4232a0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	%r13, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x4232a0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	cmpq	$0, 252782(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x423454 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1f4>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43d112 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpq	$0, 252710(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42349c <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x23c>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x4234da <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2a>
               	movq	(%rdi), %r12
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rdi
               	addq	(%r15), %rdi
               	testb	$1, %al
               	je	0x4234f0 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	(%rdi), %rcx
               	movq	-1(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	246573(%rip), %rax      # 0x45f838 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423526 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423526 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f280 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	246525(%rip), %rax      # 0x45f838 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423556 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423556 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f280 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rcx
               	leaq	24(%rdi), %rsi
               	leaq	16(%rdi), %rdx
               	movq	80(%rdi), %r9
               	movb	$0, 40(%rsp)
               	cmpb	$0, 72(%rdi)
               	je	0x4235dc <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x6c>
               	leaq	24(%rsp), %r8
               	movq	%r8, 8(%rsp)
               	movq	40(%rdi), %rax
               	leaq	56(%rdi), %rbx
               	cmpq	%rbx, %rax
               	je	0x4235b7 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x47>
               	movq	%rax, 8(%rsp)
               	movq	56(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	jmp	0x4235be <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x4e>
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%r8)
               	movq	48(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movq	%rbx, 40(%rdi)
               	movq	$0, 48(%rdi)
               	movb	$0, 56(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%r9
               	cmpb	$0, 40(%rsp)
               	je	0x4235ff <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4235ff <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x423623 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x423623 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	246213(%rip), %rax      # 0x45f800 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x423870 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x423661 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x31>
               	addq	$64, %rbx
               	movq	%rbx, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	246149(%rip), %rax      # 0x45f800 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x423870 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42369e <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x2e>
               	leaq	64(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nop

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)>:
               	pushq	%rax
               	movq	40(%rsi), %rcx
               	lock
               	addq	%rcx, 32(%rdi)
               	movq	32(%rdi), %rcx
               	movq	40(%rdi), %rdx
               	addq	%rcx, %rdx
               	movq	24(%rdi), %rcx
               	movq	32(%rcx), %rcx
               	cmpq	%rcx, %rdx
               	jb	0x4236e3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x33>
               	movq	%rdi, %rax
               	cmpq	$0, 80(%rdi)
               	je	0x4236e5 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x35>
               	leaq	64(%rax), %rdi
               	callq	*88(%rax)
               	popq	%rax
               	retq
               	callq	0x43d112 <std::__throw_bad_function_call()>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	xorl	%eax, %eax
               	xchgq	%rax, 32(%rdi)
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	xchgq	%rax, 56(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %r15
               	leaq	96(%rbx), %r14
               	cmpq	$0, 252042(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x423740 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0x40>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4237c3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xc3>
               	movabsq	$9223372036854775807, %r12 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r12), %rax
               	testq	%r15, %r15
               	cmovnsq	%r12, %rax
               	imulq	$1000, %r15, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r12, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 200(%rbx)
               	movb	$1, 208(%rbx)
               	cmpq	$0, 251929(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4237a9 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xa9>
               	movq	%r14, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$136, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x43cd38 <std::condition_variable::notify_all()>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)>:
               	movq	%rsi, %rax
               	xchgq	%rax, 40(%rdi)
               	movq	24(%rdi), %rax
               	movb	16(%rax), %al
               	testb	$1, %al
               	je	0x423868 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	%rsi, %xmm1
               	punpckldq	128881(%rip), %xmm1 # xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
                                                # 0x442f70 <_IO_stdin_used+0x30>
               	subpd	128889(%rip), %xmm1     # 0x442f80 <_IO_stdin_used+0x40>
               	movapd	%xmm1, %xmm0
               	unpckhpd	%xmm1, %xmm0            # xmm0 = xmm0[1],xmm1[1]
               	addsd	%xmm1, %xmm0
               	movq	24(%rdi), %rax
               	movsd	40(%rax), %xmm1         # xmm1 = mem[0],zero
               	divsd	%xmm1, %xmm0
               	movapd	128872(%rip), %xmm1     # 0x442f90 <_IO_stdin_used+0x50>
               	andpd	%xmm0, %xmm1
               	ucomisd	129052(%rip), %xmm1     # 0x443050 <_IO_stdin_used+0x110>
               	je	0x423868 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	24(%rdi), %rax
               	movq	48(%rax), %rax
               	xorps	%xmm1, %xmm1
               	cvtsi2sd	%rax, %xmm1
               	movq	24(%rdi), %rax
               	movq	56(%rax), %rax
               	cvtsi2sd	%rax, %xmm2
               	maxsd	%xmm0, %xmm1
               	minsd	%xmm1, %xmm2
               	cvttsd2si	%xmm2, %rax
               	movq	24(%rdi), %rcx
               	xchgq	%rax, 32(%rcx)
               	retq
               	nopl	(%rax)

<kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	cmpq	$0, 251704(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42388e <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x1e>
               	movq	%r15, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4238ed <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x7d>
               	movb	$0, 88(%r15)
               	movb	$1, 112(%r15)
               	testq	%r15, %r15
               	je	0x4238af <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	cmpq	$0, 251667(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4238af <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	movq	%r15, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	leaq	40(%r15), %r14
               	movq	%r14, %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	leaq	120(%r15), %rbx
               	movq	%rbx, %rdi
               	callq	0x43f294 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	je	0x4238db <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x6b>
               	movq	%rbx, %rdi
               	callq	0x43f294 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x4238e8 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x78>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x43cd0a <std::condition_variable::~condition_variable()>
               	callq	0x43c463 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	jmp	0x423909 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x99>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x423930 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	120(%r15), %rdi
               	callq	0x423940 <kotlin::ScopedThread::~ScopedThread()>
               	addq	$40, %r15
               	movq	%r15, %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax)

<std::thread::~thread()>:
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	jne	0x423939 <std::thread::~thread()+0x9>
               	popq	%rax
               	retq
               	callq	0x43c463 <std::terminate()>
               	nop

<kotlin::ScopedThread::~ScopedThread()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	je	0x423958 <kotlin::ScopedThread::~ScopedThread()+0x18>
               	movq	%rdi, %rbx
               	callq	0x43f294 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x423960 <kotlin::ScopedThread::~ScopedThread()+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x43c463 <std::terminate()>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x423930 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax,%rax)
               	nopl	(%rax)
		...

<void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %rbx
               	subq	%rdi, %rbx
               	cmpq	$257, %rbx              # imm = 0x101
               	jl	0x423e5f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movq	%rdx, %r12
               	movq	%rsi, %r14
               	movq	%rdi, %rbp
               	leaq	16(%rdi), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rdi, 64(%rsp)
               	nopl	(%rax,%rax)
               	testq	%r12, %r12
               	movq	%r14, 8(%rsp)
               	je	0x423db6 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x426>
               	shrq	%rbx
               	andq	$-16, %rbx
               	leaq	(%rbx,%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	-16(%r14), %rax
               	movq	%rax, 48(%rsp)
               	movq	16(%rbp), %r15
               	movq	24(%rbp), %rdi
               	movq	(%rbp,%rbx), %r13
               	movq	8(%rbp,%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rbx
               	subq	%r13, %rbx
               	movq	%r15, %rdx
               	cmovaq	%r13, %rdx
               	testq	%rdx, %rdx
               	movq	%r12, 80(%rsp)
               	je	0x423a50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	movq	%r13, 72(%rsp)
               	movq	%rdi, %r13
               	movq	40(%rsp), %rsi
               	callq	0x413780 <memcmp@plt>
               	movq	%r13, %rdi
               	movq	72(%rsp), %r13
               	testl	%eax, %eax
               	je	0x423a50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	testl	%eax, %eax
               	jns	0x423a72 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	jmp	0x423b50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423a72 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423b50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x423ab0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423ab0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	testl	%eax, %eax
               	jns	0x423ad2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	jmp	0x423b8a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423ad2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423b8a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423b10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423b10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423b3c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	jmp	0x423c4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	nop
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423b3c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423c4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	jmp	0x423c59 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2c9>
               	nop
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423bb5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	movq	%r13, %rdx
               	movq	%rdi, %r13
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x413780 <memcmp@plt>
               	movq	%r13, %rdi
               	testl	%eax, %eax
               	je	0x423bb5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	testl	%eax, %eax
               	jns	0x423bd7 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	jmp	0x423d8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	movq	8(%rsp), %r15
               	jmp	0x423c8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423bd7 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423d8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x423c00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423c00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423c28 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	jmp	0x423c4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423c28 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423c4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	jmp	0x423c8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	48(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	32(%rsp), %r13
               	jmp	0x423c8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	nop
               	movups	(%r14), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movups	(%r15), %xmm0
               	movups	%xmm0, (%r14)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	movq	64(%rsp), %rbp
               	movq	(%rbp), %rbx
               	movq	8(%rbp), %r12
               	jmp	0x423cc2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x332>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423cf0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x360>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	16(%r14), %r13
               	testl	%eax, %eax
               	jns	0x423cf4 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x364>
               	movq	%r13, %r14
               	movq	(%r13), %rdx
               	movq	%rdx, %rbp
               	subq	%rbx, %rbp
               	cmovaq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423ca0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	movq	8(%r14), %rdi
               	movq	%r12, %rsi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423cba <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x32a>
               	jmp	0x423ca0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	nopl	(%rax)
               	leaq	16(%r14), %r13
               	addq	$-16, %r15
               	movq	%r15, %rcx
               	jmp	0x423d22 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x392>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423d50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	-16(%r15), %rcx
               	testl	%eax, %eax
               	jns	0x423d50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	movq	%rcx, %r15
               	movq	(%rcx), %rdx
               	movq	%rbx, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423d00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	movq	8(%r15), %rsi
               	movq	%r12, %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423d1a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x38a>
               	jmp	0x423d00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	cmpq	%r15, %r14
               	jb	0x423c70 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2e0>
               	movq	80(%rsp), %r12
               	addq	$-1, %r12
               	movq	%r14, %rdi
               	movq	8(%rsp), %rsi
               	movq	%r12, %rdx
               	callq	0x423990 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	movq	%r14, %rbx
               	movq	64(%rsp), %rbp
               	subq	%rbp, %rbx
               	cmpq	$256, %rbx              # imm = 0x100
               	jg	0x4239d0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
               	jmp	0x423e5f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	8(%rsp), %r15
               	jmp	0x423c68 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2d8>
               	shrq	$4, %rbx
               	leaq	-2(%rbx), %rax
               	shrq	$63, %rax
               	leaq	(%rbx,%rax), %r14
               	addq	$-2, %r14
               	sarq	%r14
               	movq	%r14, %r15
               	shlq	$4, %r15
               	movq	(%rbp,%r15), %rcx
               	movq	8(%rbp,%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x423ef0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	%rbp, %r15
               	addq	$-8, %r15
               	cmpq	$-1, %r14
               	je	0x423e23 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x493>
               	nopl	(%rax)
               	movq	-8(%r15), %rcx
               	movq	(%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x423ef0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	$-16, %r15
               	cmpq	$-1, %r14
               	jne	0x423e00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x470>
               	movq	8(%rsp), %rbx
               	addq	$-16, %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	8(%rbx), %r8
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rbx)
               	movq	%rbx, %r14
               	subq	%rbp, %r14
               	movq	%r14, %rdx
               	sarq	$4, %rdx
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x423ef0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-16, %rbx
               	cmpq	$16, %r14
               	jg	0x423e30 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4a0>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %r15
               	movq	8(%rdi), %r14
               	movl	$2147483648, %r12d      # imm = 0x80000000
               	nopl	(%rax,%rax)
               	movq	-16(%rbx), %rdx
               	movq	%r15, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%r15, %rdx
               	testq	%rdx, %rdx
               	je	0x423eb3 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x43>
               	movq	-8(%rbx), %rsi
               	movq	%r14, %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423ec9 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x59>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423eda <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	cmovlel	%r12d, %ebp
               	movl	%ebp, %eax
               	testl	%eax, %eax
               	jns	0x423eda <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	movups	-16(%rbx), %xmm0
               	movups	%xmm0, (%rbx)
               	addq	$-16, %rbx
               	jmp	0x423e90 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x20>
               	movq	%r15, (%rbx)
               	movq	%r14, 8(%rbx)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, 16(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%rdi, %r14
               	leaq	-1(%rdx), %rax
               	shrq	$63, %rax
               	movq	%rdx, 32(%rsp)
               	leaq	(%rdx,%rax), %rbx
               	addq	$-1, %rbx
               	sarq	%rbx
               	movq	%rsi, %r12
               	movq	%rsi, 8(%rsp)
               	cmpq	%rsi, %rbx
               	jle	0x423fef <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	movq	8(%rsp), %rbp
               	jmp	0x423f64 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x74>
               	nop
               	movq	%r13, %r12
               	movq	%r12, %rax
               	shlq	$4, %rax
               	shlq	$4, %rbp
               	movups	(%r14,%rax), %xmm0
               	movups	%xmm0, (%r14,%rbp)
               	movq	%r12, %rbp
               	cmpq	%rbx, %r12
               	jge	0x423fef <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	leaq	2(,%rbp), %r12
               	addq	%rbp, %r12
               	leaq	1(,%rbp), %r13
               	addq	%rbp, %r13
               	movq	%r12, %rax
               	shlq	$4, %rax
               	movq	(%r14,%rax), %rdx
               	movq	%r13, %rcx
               	shlq	$4, %rcx
               	movq	(%r14,%rcx), %rsi
               	movq	%rdx, %r15
               	subq	%rsi, %r15
               	cmovaq	%rsi, %rdx
               	testq	%rdx, %rdx
               	je	0x423fc0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	movq	8(%r14,%rcx), %rsi
               	movq	8(%r14,%rax), %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423fc0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	testl	%eax, %eax
               	js	0x423f40 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	jmp	0x423fe7 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf7>
               	nop
               	cmpq	$2147483647, %r15       # imm = 0x7FFFFFFF
               	jg	0x423f43 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x53>
               	cmpq	$-2147483648, %r15      # imm = 0x80000000
               	jg	0x423fdc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xec>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	movl	%r15d, %eax
               	testl	%eax, %eax
               	js	0x423f40 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	%r12, %r13
               	jmp	0x423f40 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	32(%rsp), %rcx
               	testb	$1, %cl
               	jne	0x424030 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	-2(%rcx), %rax
               	shrq	$63, %rax
               	addq	%rcx, %rax
               	addq	$-2, %rax
               	sarq	%rax
               	cmpq	%rax, %r12
               	jne	0x424030 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	(%r12,%r12), %rax
               	addq	$1, %rax
               	movq	%rax, %rcx
               	shlq	$4, %rcx
               	shlq	$4, %r12
               	movups	(%r14,%rcx), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%rax, %r12
               	cmpq	8(%rsp), %r12
               	jle	0x4240cc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leaq	-1(%r12), %rax
               	shrq	$63, %rax
               	leaq	(%r12,%rax), %r13
               	addq	$-1, %r13
               	sarq	%r13
               	movq	%r13, %rbp
               	shlq	$4, %rbp
               	movq	(%r14,%rbp), %rdx
               	movq	%rdx, %rbx
               	movq	24(%rsp), %rax
               	subq	%rax, %rbx
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x424096 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1a6>
               	movq	8(%r14,%rbp), %rdi
               	movq	16(%rsp), %rsi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x4240ac <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1bc>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x4240cc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	cmovlel	%r15d, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	jns	0x4240cc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	addq	%r14, %rbp
               	shlq	$4, %r12
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%r13, %r12
               	cmpq	8(%rsp), %r13
               	jg	0x424050 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x160>
               	jmp	0x4240cf <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1df>
               	movq	%r12, %r13
               	shlq	$4, %r13
               	movq	24(%rsp), %rax
               	movq	%rax, (%r14,%r13)
               	movq	16(%rsp), %rax
               	movq	%rax, 8(%r14,%r13)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	352(%rdi), %r14
               	testq	%r14, %r14
               	je	0x424123 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)+0x23>
               	movq	%r14, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	addq	$8, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424150 <kotlin::mm::ThreadData::~ThreadData()>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadData::~ThreadData()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	movq	296(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x424169 <kotlin::mm::ThreadData::~ThreadData()+0x19>
               	callq	0x4136d0 <free@plt>
               	leaq	288(%r15), %rdi
               	callq	0x427e00 <kotlin::gc::GC::ThreadData::~ThreadData()>
               	leaq	224(%r15), %rdi
               	callq	0x424300 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	leaq	256(%r15), %r14
               	movq	256(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4241b0 <kotlin::mm::ThreadData::~ThreadData()+0x60>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430500 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4241a0 <kotlin::mm::ThreadData::~ThreadData()+0x50>
               	leaq	232(%r15), %r14
               	movq	232(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4241e0 <kotlin::mm::ThreadData::~ThreadData()+0x90>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430500 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4241d0 <kotlin::mm::ThreadData::~ThreadData()+0x80>
               	leaq	168(%r15), %rdi
               	callq	0x4243c0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	200(%r15), %r14
               	movq	200(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424210 <kotlin::mm::ThreadData::~ThreadData()+0xc0>
               	nop
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424200 <kotlin::mm::ThreadData::~ThreadData()+0xb0>
               	leaq	176(%r15), %r14
               	movq	176(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424240 <kotlin::mm::ThreadData::~ThreadData()+0xf0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424230 <kotlin::mm::ThreadData::~ThreadData()+0xe0>
               	leaq	104(%r15), %r14
               	movq	104(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x424260 <kotlin::mm::ThreadData::~ThreadData()+0x110>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x424250 <kotlin::mm::ThreadData::~ThreadData()+0x100>
               	movq	88(%r15), %rdi
               	movq	96(%r15), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	88(%r15), %rdi
               	leaq	136(%r15), %rax
               	cmpq	%rdi, %rax
               	je	0x42428f <kotlin::mm::ThreadData::~ThreadData()+0x13f>
               	callq	0x4136d0 <free@plt>
               	movq	64(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x42429d <kotlin::mm::ThreadData::~ThreadData()+0x14d>
               	callq	0x4136d0 <free@plt>
               	leaq	8(%r15), %rdi
               	callq	0x424480 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	40(%r15), %r14
               	movq	40(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4242d0 <kotlin::mm::ThreadData::~ThreadData()+0x180>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4242c0 <kotlin::mm::ThreadData::~ThreadData()+0x170>
               	movq	16(%r15), %rdi
               	addq	$16, %r15
               	cmpq	%r15, %rdi
               	je	0x4242f0 <kotlin::mm::ThreadData::~ThreadData()+0x1a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r15, %rbx
               	jne	0x4242e0 <kotlin::mm::ThreadData::~ThreadData()+0x190>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42432e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 48(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x424320 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424350 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x50>
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424340 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42437e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x4243a8 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4243ee <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4243e0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424410 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x50>
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424400 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42443e <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424468 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4244ae <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4244a0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x4244d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x50>
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x4244c0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x4244fe <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424528 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movb	261960(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x424624 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	%rdi, %r14
               	movq	8(%rdi), %rax
               	movq	288(%rax), %rdi
               	addq	$72, %rdi
               	callq	0x424f30 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>
               	leaq	261882(%rip), %rax      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	movq	%rax, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 248368(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42459e <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0x5e>
               	leaq	261855(%rip), %rdi      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42462f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xef>
               	movb	$1, 16(%rsp)
               	callq	0x435970 <konan::gettid()>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movb	16(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 16(%r14)
               	andb	$1, %bpl
               	movb	261847(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4245f6 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xb6>
               	leaq	257912(%rip), %r15      # 0x463548 <(anonymous namespace)::gSuspensionCondVar>
               	leaq	8(%rsp), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cd10 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	261798(%rip), %eax      # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x4245e0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xa0>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	xchgb	%bpl, 16(%r14)
               	cmpb	$0, 16(%rsp)
               	je	0x424624 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424624 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	cmpq	$0, 248224(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42461f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xdf>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nop

<kotlin::mm::RequestThreadsSuspension()>:
               	pushq	%rbx
               	cmpq	$0, 248175(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42465b <kotlin::mm::RequestThreadsSuspension()+0x1b>
               	leaq	261662(%rip), %rdi      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424684 <kotlin::mm::RequestThreadsSuspension()+0x44>
               	movb	$1, %cl
               	xorl	%eax, %eax
               	lock
               	cmpxchgb	%cl, 261681(%rip)       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	sete	%bl
               	cmpq	$0, 248134(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x424680 <kotlin::mm::RequestThreadsSuspension()+0x40>
               	leaq	261621(%rip), %rdi      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	168(%rdi), %rax
               	movq	8(%rsi), %rcx
               	cmpq	%rcx, %rax
               	je	0x4246f8 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)+0x58>
               	leaq	200(%rbx), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c714 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	216(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 216(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%r14), %r14
               	movq	192(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 192(%rbx)
               	movq	%r14, %rdi
               	callq	0x43c72c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::SuspendIfRequestedSlowPath()>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$328, %rdi              # imm = 0x148
               	popq	%rax
               	jmp	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<ExceptionObjHolder::Throw(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movl	$16, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	0x4247a0 <(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>
               	leaq	241930(%rip), %rsi      # 0x45f890 <typeinfo for (anonymous namespace)::ExceptionObjHolderImpl>
               	leaq	163(%rip), %rdx         # 0x424830 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	leaq	241922(%rip), %rax      # 0x45f8b8 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	176(%rbx), %r13
               	leaq	184(%rbx), %r15
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c714 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	200(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 200(%rbx)
               	movq	192(%rbx), %rax
               	leaq	16(%rax), %rcx
               	movq	%rax, 32(%rax)
               	movq	%rcx, 8(%r12)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	241785(%rip), %rax      # 0x45f8b8 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	leaq	176(%r14), %rax
               	movq	8(%rbx), %rbx
               	movq	8(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x4248a6 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()+0x76>
               	leaq	208(%r14), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rbx, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c714 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	224(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 224(%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%rbx), %rbx
               	movq	200(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 200(%r14)
               	movq	%rbx, %rdi
               	callq	0x43c72c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x424830 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>
               	nopw	%cs:(%rax,%rax)

<InitAndRegisterGlobal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	16(%rbx), %r13
               	leaq	24(%rbx), %r12
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r15, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x43c714 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	32(%rbx), %rax
               	movq	%rax, 32(%rax)
               	testq	%r14, %r14
               	je	0x424968 <InitAndRegisterGlobal+0x68>
               	movq	%r14, (%r15)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<AddTLSRecord>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, (%rsp)
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	104(%rdi), %rbp
               	movq	%rsi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x4249bf <AddTLSRecord+0x3f>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rbx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x4249d5 <AddTLSRecord+0x55>
               	jmp	0x424a34 <AddTLSRecord+0xb4>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ebx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424a34 <AddTLSRecord+0xb4>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x424a2b <AddTLSRecord+0xab>
               	nop
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x424a34 <AddTLSRecord+0xb4>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424a10 <AddTLSRecord+0x90>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x424a1b <AddTLSRecord+0x9b>
               	jmp	0x424a34 <AddTLSRecord+0xb4>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x424a34 <AddTLSRecord+0xb4>
               	cmpq	%rcx, %r13
               	jne	0x4249e0 <AddTLSRecord+0x60>
               	testq	%rdi, %rdi
               	jne	0x424cce <AddTLSRecord+0x34e>
               	jmp	0x424a34 <AddTLSRecord+0xb4>
               	testq	%rsi, %rsi
               	jne	0x424cce <AddTLSRecord+0x34e>
               	movl	156(%r15), %r12d
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r13, 8(%rax)
               	movq	(%rsp), %rcx
               	shlq	$32, %rcx
               	orq	%rcx, %r12
               	movq	%r12, 16(%rax)
               	movq	%rax, %r12
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424ac9 <AddTLSRecord+0x149>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x424bca <AddTLSRecord+0x24a>
               	nopw	(%rax,%rax)
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x424ac9 <AddTLSRecord+0x149>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424ab0 <AddTLSRecord+0x130>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x424abb <AddTLSRecord+0x13b>
               	jmp	0x424ac9 <AddTLSRecord+0x149>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x424ac9 <AddTLSRecord+0x149>
               	cmpq	%rcx, %r13
               	jne	0x424a80 <AddTLSRecord+0x100>
               	testq	%rdi, %rdi
               	jne	0x424bd3 <AddTLSRecord+0x253>
               	leaq	128(%r15), %rdi
               	movq	120(%r15), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rsi
               	callq	0x43d24a <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x424afc <AddTLSRecord+0x17c>
               	movq	96(%r15), %rbp
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424c45 <AddTLSRecord+0x2c5>
               	jmp	0x424c6a <AddTLSRecord+0x2ea>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	je	0x424be0 <AddTLSRecord+0x260>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	je	0x424c07 <AddTLSRecord+0x287>
               	leaq	112(%r15), %rsi
               	xorl	%edi, %edi
               	jmp	0x424b6d <AddTLSRecord+0x1ed>
               	nopl	(%rax,%rax)
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x424c07 <AddTLSRecord+0x287>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x424ba0 <AddTLSRecord+0x220>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424b50 <AddTLSRecord+0x1d0>
               	jmp	0x424baf <AddTLSRecord+0x22f>
               	nop
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424b50 <AddTLSRecord+0x1d0>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x424b61 <AddTLSRecord+0x1e1>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x424b61 <AddTLSRecord+0x1e1>
               	testq	%rsi, %rsi
               	je	0x424ac9 <AddTLSRecord+0x149>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	jmp	0x424cbc <AddTLSRecord+0x33c>
               	leaq	144(%r15), %rbp
               	movq	$0, 144(%r15)
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	jne	0x424b40 <AddTLSRecord+0x1c0>
               	movq	96(%r15), %rdi
               	leaq	144(%r15), %rax
               	cmpq	%rax, %rdi
               	je	0x424c1c <AddTLSRecord+0x29c>
               	callq	0x4136d0 <free@plt>
               	movq	%r14, 104(%r15)
               	movq	%rbp, 96(%r15)
               	movq	%r13, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x424c56 <AddTLSRecord+0x2d6>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424c6a <AddTLSRecord+0x2ea>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rbx,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x424cb0 <AddTLSRecord+0x330>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424c45 <AddTLSRecord+0x2c5>
               	leaq	112(%r15), %rcx
               	movq	112(%r15), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 112(%r15)
               	movq	(%r12), %rax
               	testq	%rax, %rax
               	je	0x424cab <AddTLSRecord+0x32b>
               	movq	104(%r15), %rsi
               	movq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x424c9e <AddTLSRecord+0x31e>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x424ca2 <AddTLSRecord+0x322>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	96(%r15), %rbp
               	movq	%rcx, (%rbp,%rbx,8)
               	movq	120(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 120(%r15)
               	movq	(%rsp), %rax
               	addl	156(%r15), %eax
               	movl	%eax, 156(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<LookupTLS>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r9
               	leaq	255229(%rip), %r8       # 0x463208 <__KonanTlsKey>
               	cmpq	%r8, 160(%r9)
               	je	0x424d45 <LookupTLS+0x55>
               	movq	104(%r9), %r11
               	movq	%r8, %rax
               	orq	%r11, %rax
               	shrq	$32, %rax
               	je	0x424d51 <LookupTLS+0x61>
               	leaq	255197(%rip), %rax      # 0x463208 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divq	%r11
               	movq	%rdx, %r10
               	movq	96(%r9), %rax
               	movq	(%rax,%r10,8), %rax
               	testq	%rax, %rax
               	jne	0x424d6d <LookupTLS+0x7d>
               	jmp	0x424dcd <LookupTLS+0xdd>
               	movq	168(%r9), %rax
               	jmp	0x424de9 <LookupTLS+0xf9>
               	leaq	255152(%rip), %rax      # 0x463208 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divl	%r11d
               	movl	%edx, %r10d
               	movq	96(%r9), %rax
               	movq	(%rax,%r10,8), %rax
               	testq	%rax, %rax
               	je	0x424dcd <LookupTLS+0xdd>
               	movq	(%rax), %rcx
               	cmpq	%r8, 8(%rcx)
               	je	0x424dc8 <LookupTLS+0xd8>
               	nopw	(%rax,%rax)
               	movq	%rcx, %rdi
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x424dcd <LookupTLS+0xdd>
               	movq	8(%rcx), %rsi
               	movq	%rsi, %rax
               	orq	%r11, %rax
               	shrq	$32, %rax
               	je	0x424db0 <LookupTLS+0xc0>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%r11
               	cmpq	%r10, %rdx
               	je	0x424dbc <LookupTLS+0xcc>
               	jmp	0x424dcd <LookupTLS+0xdd>
               	nopl	(%rax)
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%r11d
               	cmpq	%r10, %rdx
               	jne	0x424dcd <LookupTLS+0xdd>
               	cmpq	%r8, %rsi
               	jne	0x424d80 <LookupTLS+0x90>
               	testq	%rdi, %rdi
               	jne	0x424dcf <LookupTLS+0xdf>
               	jmp	0x424dcd <LookupTLS+0xdd>
               	testq	%rcx, %rcx
               	jne	0x424dcf <LookupTLS+0xdf>
               	xorl	%ecx, %ecx
               	movq	8(%rcx), %rax
               	movq	%rax, 160(%r9)
               	movq	16(%rcx), %rax
               	movq	%rax, 168(%r9)
               	movq	16(%rcx), %rax
               	movq	72(%r9), %rcx
               	cltq
               	leaq	(%rcx,%rax,8), %rax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_processObjectInMark>:
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %r8
               	movl	40(%r8), %r9d
               	testl	%r9d, %r9d
               	jle	0x424e5e <Kotlin_processObjectInMark+0x5e>
               	xorl	%edx, %edx
               	jmp	0x424e30 <Kotlin_processObjectInMark+0x30>
               	nop
               	movl	40(%r8), %r9d
               	addq	$1, %rdx
               	movslq	%r9d, %rax
               	cmpq	%rax, %rdx
               	jge	0x424e5e <Kotlin_processObjectInMark+0x5e>
               	movq	32(%r8), %rcx
               	movslq	(%rcx,%rdx,4), %rcx
               	movq	(%rcx,%rsi), %rcx
               	testq	%rcx, %rcx
               	je	0x424e24 <Kotlin_processObjectInMark+0x24>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424e24 <Kotlin_processObjectInMark+0x24>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424e20 <Kotlin_processObjectInMark+0x20>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	jmp	0x424e20 <Kotlin_processObjectInMark+0x20>
               	retq
               	nop

<Kotlin_processArrayInMark>:
               	movl	8(%rsi), %eax
               	testl	%eax, %eax
               	je	0x424f16 <Kotlin_processArrayInMark+0xb6>
               	leaq	16(%rsi), %rcx
               	movslq	%eax, %r8
               	leaq	-8(,%r8,8), %rdx
               	testb	$8, %dl
               	jne	0x424ea6 <Kotlin_processArrayInMark+0x46>
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x424ea2 <Kotlin_processArrayInMark+0x42>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424ea2 <Kotlin_processArrayInMark+0x42>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424ea2 <Kotlin_processArrayInMark+0x42>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	leaq	24(%rsi), %rcx
               	testq	%rdx, %rdx
               	je	0x424f16 <Kotlin_processArrayInMark+0xb6>
               	leaq	(%rsi,%r8,8), %r8
               	addq	$16, %r8
               	jmp	0x424ec9 <Kotlin_processArrayInMark+0x69>
               	nopl	(%rax)
               	addq	$16, %rcx
               	cmpq	%r8, %rcx
               	je	0x424f16 <Kotlin_processArrayInMark+0xb6>
               	movq	(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x424ef0 <Kotlin_processArrayInMark+0x90>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x424ef0 <Kotlin_processArrayInMark+0x90>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x424ef0 <Kotlin_processArrayInMark+0x90>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movq	8(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x424ec0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x424ec0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x424ec0 <Kotlin_processArrayInMark+0x60>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	jmp	0x424ec0 <Kotlin_processArrayInMark+0x60>
               	retq
               	nopw	(%rax,%rax)

<Kotlin_processEmptyObjectInMark>:
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %r14
               	leaq	259468(%rip), %rax      # 0x4644d0 <(anonymous namespace)::markingMutex>
               	movq	%rax, (%rsp)
               	movb	$0, 8(%rsp)
               	cmpq	$0, 245859(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x424f6b <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x3b>
               	leaq	259442(%rip), %rdi      # 0x4644d0 <(anonymous namespace)::markingMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425087 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x157>
               	movb	$1, 8(%rsp)
               	movb	259458(%rip), %al       # 0x4644f8 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x425058 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x128>
               	movb	24(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 24(%r14)
               	movq	8(%r14), %rbx
               	leaq	8(%rbx), %rdi
               	callq	0x424480 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	168(%rbx), %rdi
               	callq	0x4243c0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	224(%rbx), %rdi
               	callq	0x424300 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	288(%rbx), %rdi
               	addq	$112, %rdi
               	callq	0x425a80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movb	259381(%rip), %al       # 0x4644f8 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x424ff6 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xc6>
               	leaq	259278(%rip), %r15      # 0x4644a0 <(anonymous namespace)::markingCondVar>
               	movq	%rsp, %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cd10 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	259334(%rip), %eax      # 0x4644f8 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	jne	0x424fe0 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xb0>
               	andb	$1, %bpl
               	cmpb	$0, 8(%rsp)
               	je	0x42508e <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x15e>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x425022 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xf2>
               	cmpq	$0, 245666(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42501d <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xed>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	259295(%rip), %rbx      # 0x464508 <(anonymous namespace)::markingEpoch (.0)>
               	leaq	259280(%rip), %rax      # 0x464500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 16(%rsp)
               	movq	8(%r14), %rdx
               	leaq	16(%rsp), %r15
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425630 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425b50 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	xchgb	%bpl, 24(%r14)
               	cmpb	$0, 8(%rsp)
               	je	0x42507c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42507c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	cmpq	$0, 245576(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x425077 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x147>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movl	$1, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	xchgb	%bpl, 24(%r14)
               	movq	%rax, %rbx
               	cmpb	$0, 8(%rsp)
               	je	0x4250c3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4250c3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	cmpq	$0, 245505(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4250be <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x18e>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	cmpq	$0, 245436(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x425112 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x32>
               	leaq	259019(%rip), %rdi      # 0x4644d0 <(anonymous namespace)::markingMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425601 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x521>
               	xorl	%eax, %eax
               	xchgb	%al, 259038(%rip)       # 0x4644f8 <(anonymous namespace)::markingRequested (.0.0)>
               	leaq	259039(%rip), %rax      # 0x464500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 336(%r15)
               	cmpq	$0, 245384(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x425146 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x66>
               	leaq	254759(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425608 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x528>
               	addq	$336, %r15              # imm = 0x150
               	movq	254716(%rip), %rbp      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	jmp	0x425167 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x87>
               	nopl	(%rax)
               	movq	352(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x4251c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xe0>
               	movq	296(%rbp), %rax
               	movzbl	96(%rax), %eax
               	testb	$1, %al
               	jne	0x425160 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	leaq	8(%rbp), %rbx
               	leaq	16(%rbp), %rdi
               	callq	0x424480 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	176(%rbp), %rdi
               	callq	0x4243c0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	232(%rbp), %rdi
               	callq	0x424300 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	callq	0x425a80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x425630 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	jmp	0x425160 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	cmpq	$0, 245232(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4251d6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xf6>
               	leaq	254607(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movb	$1, %al
               	xchgb	%al, 254749(%rip)       # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	je	0x425201 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x121>
               	nopl	(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 254723(%rip)       # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x4251f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x110>
               	leaq	8(%rsp), %r12
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	254664(%rip), %rbp      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	leaq	254657(%rip), %r13      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rbp
               	je	0x4252e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
               	movq	%rbp, %rsi
               	jmp	0x42526e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x18e>
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rbx
               	movq	254613(%rip), %rax      # 0x4634e0 <kotlin::mm::GlobalData::instance_+0xa8>
               	addq	$-1, %rax
               	movq	%rax, 254602(%rip)      # 0x4634e0 <kotlin::mm::GlobalData::instance_+0xa8>
               	movq	%rbx, %rdi
               	callq	0x43c72c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rsi
               	cmpq	%r13, %rbp
               	je	0x4252b6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1d6>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x425240 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x160>
               	cmpq	%rsi, %r12
               	je	0x425266 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	(%rsi), %rdx
               	cmpq	%r12, %rdx
               	je	0x425266 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	%r12, %rdi
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 24(%rsp)
               	movq	254543(%rip), %rax      # 0x4634f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	addq	$-1, %rax
               	movq	%rax, 254532(%rip)      # 0x4634f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	jmp	0x425266 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	254507(%rip), %rdi      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rdi
               	je	0x4252e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r13, %rbx
               	jne	0x4252d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1f0>
               	movq	8(%rsp), %rax
               	cmpq	%r12, %rax
               	je	0x425325 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x245>
               	movq	%rax, 254455(%rip)      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	16(%rsp), %rax
               	movq	%rax, 254451(%rip)      # 0x4634f0 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, (%rax)
               	movq	254433(%rip), %rax      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%r13, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x425335 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x255>
               	movq	%r13, 254404(%rip)      # 0x4634f0 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, 254389(%rip)      # 0x4634e8 <kotlin::mm::GlobalData::instance_+0xb0>
               	xorl	%eax, %eax
               	movq	%rax, 254396(%rip)      # 0x4634f8 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 254397(%rip)        # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$1, %bl
               	movb	$1, %al
               	xchgb	%al, 254331(%rip)       # 0x4634c8 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	je	0x425371 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x291>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 254299(%rip)       # 0x4634c8 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	jne	0x425360 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x280>
               	xchgb	%bl, 254345(%rip)       # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%bl, %bl
               	je	0x425391 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2b1>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 254323(%rip)       # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x425380 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2a0>
               	movq	254208(%rip), %rsi      # 0x463498 <kotlin::mm::GlobalData::instance_+0x60>
               	xorl	%eax, %eax
               	movq	254255(%rip), %rdx      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	254248(%rip), %r12      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	254185(%rip), %r13      # 0x463498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rsi, %rbx
               	movl	%eax, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %ecx
               	je	0x4253f2 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x312>
               	cmpl	$1, %ecx
               	je	0x4253d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2f0>
               	testl	%ecx, %ecx
               	jne	0x4253c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	jmp	0x4253e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x300>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x4253c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	jmp	0x4254d4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3f4>
               	nop
               	movl	$1, %eax
               	movq	%rdx, %rsi
               	cmpq	%r13, %rbx
               	je	0x4253af <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2cf>
               	jmp	0x4254d6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3f6>
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 32(%rsp)
               	movb	$0, 254205(%rip)        # 0x463500 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$0, 254142(%rip)        # 0x4634c8 <kotlin::mm::GlobalData::instance_+0x90>
               	movb	$1, %al
               	xchgb	%al, 253470(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425431 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x351>
               	nopw	(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 253443(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425420 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x340>
               	cmpb	$0, 253448(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x42545a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37a>
               	cmpq	%r14, 253431(%rip)      # 0x463238 <(anonymous namespace)::current>
               	jne	0x42545a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37a>
               	leaq	253422(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	cmpb	$0, 128(%rax)
               	je	0x42547c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	movupd	112(%rax), %xmm0
               	jmp	0x425491 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3b1>
               	cmpb	$0, 253663(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x42549c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3bc>
               	cmpq	%r14, 253646(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x42549c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3bc>
               	leaq	253637(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	cmpb	$0, 128(%rax)
               	jne	0x425453 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x373>
               	xorpd	%xmm0, %xmm0
               	movupd	%xmm0, 112(%rax)
               	movupd	%xmm0, 96(%rax)
               	movb	$1, 128(%rax)
               	paddq	32(%rsp), %xmm0
               	movdqu	%xmm0, 112(%rax)
               	movb	$0, 253325(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	leaq	258038(%rip), %rdi      # 0x4644a0 <(anonymous namespace)::markingCondVar>
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	cmpq	$0, 244481(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4254c5 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e5>
               	leaq	258064(%rip), %rdi      # 0x4644d0 <(anonymous namespace)::markingMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %ecx
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%ecx, %ecx
               	je	0x425570 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x490>
               	cmpl	$1, %ecx
               	jne	0x42560f <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x52f>
               	movq	16(%rbx), %rsi
               	movq	%r15, %rdi
               	callq	0x425a30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425524 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x444>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	movq	(%rbx), %rdx
               	movq	253858(%rip), %rax      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rdx, %rbx
               	movl	$1, %ecx
               	nopw	%cs:(%rax,%rax)
               	cmpl	$2, %ecx
               	je	0x4253fc <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x31c>
               	cmpl	$1, %ecx
               	je	0x425554 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x474>
               	testl	%ecx, %ecx
               	jne	0x425540 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x460>
               	jmp	0x425563 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x483>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x425540 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x460>
               	jmp	0x4255f7 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x517>
               	movq	%rax, %rdx
               	cmpq	%r13, %rbx
               	je	0x42552e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x44e>
               	jmp	0x4254e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movq	16(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425a30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4255a1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c1>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	movq	(%rbx), %rsi
               	xorl	%ecx, %ecx
               	movq	253731(%rip), %rax      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rsi, %rbx
               	movl	%ecx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpl	$2, %edx
               	je	0x4253fc <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x31c>
               	cmpl	$1, %edx
               	je	0x4255d4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4f4>
               	testl	%edx, %edx
               	jne	0x4255c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e0>
               	jmp	0x4255e3 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x503>
               	movl	$2, %edx
               	cmpq	%r12, %rbx
               	je	0x4255c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e0>
               	jmp	0x4254e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	$1, %ecx
               	movq	%rax, %rsi
               	cmpq	%r13, %rbx
               	je	0x4255ad <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4cd>
               	movl	%edx, %ecx
               	jmp	0x4254e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	$1, %ecx
               	jmp	0x4254e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	leaq	129432(%rip), %rdx      # 0x444fae <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435a50 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nop

<void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r12
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	288(%r12), %rax
               	movq	$0, 40(%rax)
               	movq	$0, 56(%rax)
               	movq	(%rax), %rcx
               	movq	8(%rcx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%rax), %rcx
               	movl	(%rcx), %ecx
               	movslq	%ecx, %rcx
               	movq	%rcx, 64(%rax)
               	movq	280(%r12), %r13
               	movq	%r13, 8(%rsp)
               	testq	%r13, %r13
               	je	0x425724 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf4>
               	movslq	16(%r13), %rax
               	leaq	(,%rax,8), %rcx
               	addq	%r13, %rcx
               	leaq	(,%rax,8), %rdx
               	movslq	20(%r13), %rsi
               	leaq	(%rcx,%rsi,8), %rbx
               	addq	$24, %rbx
               	subq	%rdx, %rbx
               	addq	$-24, %rbx
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	movq	%rbp, 16(%rsp)
               	movq	%rbx, 24(%rsp)
               	testq	%r13, %r13
               	je	0x42574c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	cmpq	%rbx, %rbp
               	jb	0x42574c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	nop
               	movq	8(%r13), %r13
               	testq	%r13, %r13
               	je	0x425732 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x102>
               	movslq	16(%r13), %rax
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	shlq	$3, %rax
               	movq	%rbp, 16(%rsp)
               	movslq	20(%r13), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%rbp, %rbx
               	subq	%rax, %rbx
               	movq	%rbx, 24(%rsp)
               	cmpq	%rbx, %rbp
               	jae	0x4256e0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xb0>
               	movq	%r13, 8(%rsp)
               	jmp	0x42574c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 16(%rsp)
               	xorl	%ebx, %ebx
               	jmp	0x42574a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11a>
               	movq	$0, 8(%rsp)
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 16(%rsp)
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	xorl	%ebp, %ebp
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	xorl	%esi, %esi
               	movl	%esi, %eax
               	nopw	(%rax,%rax)
               	cmpl	$2, %eax
               	je	0x425958 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x328>
               	cmpl	$1, %eax
               	je	0x425790 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x160>
               	testl	%eax, %eax
               	jne	0x425760 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x130>
               	testq	%r13, %r13
               	jne	0x42579a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
               	testq	%rbp, %rbp
               	jne	0x42579a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
               	movq	%rdx, 8(%rsp)
               	movl	$1, %esi
               	movq	%rdx, %r13
               	jmp	0x425758 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
               	nop
               	movl	$2, %esi
               	cmpq	%r13, %rcx
               	je	0x425758 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%eax, %eax
               	je	0x42584f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x21f>
               	cmpl	$1, %eax
               	jne	0x425a13 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3e3>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425a30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4257ec <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1bc>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	addq	$8, %r13
               	movq	%r13, 8(%rsp)
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	movl	$1, %eax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x425975 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	cmpl	$1, %eax
               	je	0x425824 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1f4>
               	testl	%eax, %eax
               	jne	0x425810 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
               	jmp	0x425833 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x203>
               	movl	$2, %eax
               	cmpq	%rcx, %r13
               	je	0x425810 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
               	jmp	0x42594e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x31e>
               	testq	%r13, %r13
               	jne	0x4257a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	testq	%rbp, %rbp
               	jne	0x4257a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movq	%rdx, 8(%rsp)
               	movq	%rdx, %r13
               	jmp	0x4257ff <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1cf>
               	movq	16(%rsp), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425a30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425881 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x251>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	addq	$8, %rbp
               	movq	%rbp, 16(%rsp)
               	testq	%r13, %r13
               	je	0x4258fe <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	cmpq	%rbx, %rbp
               	jb	0x4258fe <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	nopl	(%rax)
               	movq	8(%r13), %r13
               	testq	%r13, %r13
               	je	0x4258e4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2b4>
               	movslq	16(%r13), %rax
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	shlq	$3, %rax
               	movq	%rbp, 16(%rsp)
               	movslq	20(%r13), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%rbp, %rbx
               	subq	%rax, %rbx
               	movq	%rbx, 24(%rsp)
               	cmpq	%rbx, %rbp
               	jae	0x4258a0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	movq	%r13, 8(%rsp)
               	jmp	0x4258fe <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	movq	$0, 8(%rsp)
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 16(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%ebp, %ebp
               	xorl	%ebx, %ebx
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	xorl	%esi, %esi
               	movl	%esi, %eax
               	nopl	(%rax)
               	cmpl	$2, %eax
               	je	0x425975 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	cmpl	$1, %eax
               	je	0x42593f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x30f>
               	testl	%eax, %eax
               	jne	0x425910 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2e0>
               	testq	%r13, %r13
               	jne	0x4257a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	testq	%rbp, %rbp
               	jne	0x4257a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movq	%rdx, 8(%rsp)
               	movl	$1, %esi
               	movq	%rdx, %r13
               	jmp	0x42590a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
               	movl	$2, %esi
               	cmpq	%r13, %rcx
               	je	0x42590a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
               	jmp	0x4257a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movl	$1, %eax
               	jmp	0x4257a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	jmp	0x425975 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	nopw	(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 252083(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425970 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x340>
               	cmpb	$0, 252088(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x4259b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
               	cmpq	%r14, 252071(%rip)      # 0x463238 <(anonymous namespace)::current>
               	jne	0x4259b4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
               	leaq	252062(%rip), %rcx      # 0x463238 <(anonymous namespace)::current>
               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	je	0x4259e1 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3b1>
               	movupd	(%rax), %xmm1
               	jmp	0x4259f5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3c5>
               	cmpb	$0, 252293(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x4259fd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
               	cmpq	%r14, 252276(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x4259fd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
               	leaq	252267(%rip), %rcx      # 0x463338 <(anonymous namespace)::last>
               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	jne	0x4259ae <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x37e>
               	xorpd	%xmm1, %xmm1
               	movupd	%xmm1, 16(%rax)
               	movupd	%xmm1, (%rax)
               	movb	$1, 128(%rcx)
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, (%rax)
               	movb	$0, 251948(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	128404(%rip), %rdx      # 0x444fae <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435a50 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>:
               	pushq	%rbx
               	cmpq	$2, %rsi
               	jae	0x425a3d <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0xd>
               	xorl	%ebx, %ebx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	(%rsi), %rax
               	testb	$3, %al
               	je	0x425a55 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x25>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movb	$1, %bl
               	callq	*104(%rax)
               	jmp	0x425a39 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	movq	(%rdi), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	movb	$1, %bl
               	jne	0x425a39 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	cmpq	$0, 24(%rdi)
               	je	0x425b17 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x97>
               	movq	%rdi, %r15
               	movq	(%rdi), %rbx
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	je	0x425aae <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x2e>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	jne	0x425aa0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x20>
               	movq	(%r15), %rax
               	cmpq	$0, (%rax)
               	je	0x425abb <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x3b>
               	movq	8(%rax), %rax
               	movq	24(%r15), %rcx
               	movq	$0, 24(%r15)
               	movq	(%rax), %r14
               	movq	%rcx, (%rax)
               	testq	%r14, %r14
               	je	0x425ae2 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x62>
               	movq	%r14, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430500 <mi_free>
               	movq	32(%r15), %rax
               	movq	(%r15), %rcx
               	movq	%rax, 8(%rcx)
               	movq	$0, 32(%r15)
               	movdqu	40(%r15), %xmm0
               	movdqu	16(%rcx), %xmm1
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, 16(%rcx)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 40(%r15)
               	movb	$0, 32(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x425b3f <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()+0x1f>
               	movq	%rbx, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430500 <mi_free>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, 16(%rsp)
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	(%r15), %rax
               	leaq	256395(%rip), %r12      # 0x464500 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	pxor	%xmm1, %xmm1
               	jmp	0x425bc3 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
               	movl	%eax, %ebx
               	addq	$15, %rbx
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*104(%rax)
               	andq	$-8, %rbx
               	addq	$15, %rbx
               	andq	$-8, %rbx
               	addq	%rbx, %r14
               	movq	%r14, %xmm0
               	addq	$2, %r13
               	movq	%r13, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	(%r15), %rax
               	cmpq	%r12, %rax
               	je	0x425cc8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x178>
               	movq	(%rax), %rcx
               	movq	%rcx, (%r15)
               	testq	%rax, %rax
               	je	0x425cc8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x178>
               	leaq	8(%rax), %rbx
               	movq	8(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	20(%rcx), %ecx
               	testl	%ecx, %ecx
               	movdqa	%xmm1, (%rsp)
               	js	0x425c00 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
               	movl	%ecx, %ebp
               	addq	$15, %rbp
               	jmp	0x425c15 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc5>
               	nop
               	addq	$-8, %rax
               	movslq	%ecx, %rcx
               	movl	24(%rax), %ebp
               	negq	%rcx
               	imulq	%rcx, %rbp
               	addq	$31, %rbp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	*104(%rax)
               	andq	$-8, %rbp
               	addq	$15, %rbp
               	andq	$-8, %rbp
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %r14
               	addq	%rbp, %r14
               	movq	%r14, %xmm0
               	movq	%xmm1, %r13
               	leaq	1(%r13), %rax
               	movq	%rax, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	je	0x425bc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	cmpq	%rax, (%rax)
               	je	0x425bc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	16(%rax), %rsi
               	testb	$1, %sil
               	je	0x425bc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	andq	$-2, %rsi
               	je	0x425bc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	xorl	%eax, %eax
               	movl	$1, %ecx
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	jne	0x425bc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	jns	0x425b7b <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
               	cltq
               	movl	8(%rsi), %ebx
               	negq	%rax
               	imulq	%rax, %rbx
               	addq	$31, %rbx
               	jmp	0x425b81 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x31>
               	movdqa	%xmm1, (%rsp)
               	movb	$1, %al
               	xchgb	%al, 251227(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425cf1 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
               	nopl	(%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 251203(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425ce0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x190>
               	cmpb	$0, 251208(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	movq	16(%rsp), %rax
               	je	0x425d2a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	cmpq	%rax, 251186(%rip)      # 0x463238 <(anonymous namespace)::current>
               	jne	0x425d2a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	leaq	251177(%rip), %rcx      # 0x463238 <(anonymous namespace)::current>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	je	0x425d58 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x208>
               	movdqu	(%rax), %xmm0
               	jmp	0x425d67 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x217>
               	cmpb	$0, 251407(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x425d6f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	cmpq	%rax, 251390(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x425d6f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	leaq	251381(%rip), %rcx      # 0x463338 <(anonymous namespace)::last>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	jne	0x425d24 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1d4>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$1, 152(%rcx)
               	paddq	%xmm1, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$0, 251066(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::schedule()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	cmpq	$0, 242185(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x425dbd <GCStateHolder::schedule()+0x1d>
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425e08 <GCStateHolder::schedule()+0x68>
               	movq	168(%rbx), %r14
               	movq	40(%rbx), %rax
               	cmpq	%rax, %r14
               	jg	0x425deb <GCStateHolder::schedule()+0x4b>
               	addq	$1, %rax
               	movq	%rax, 168(%rbx)
               	leaq	184(%rbx), %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	movq	168(%rbx), %r14
               	cmpq	$0, 242117(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x425dfd <GCStateHolder::schedule()+0x5d>
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	nop

<kotlin::ThreadStateGuard::~ThreadStateGuard()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x425e39 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	movl	8(%rax), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x425e39 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	cmpl	$1, %eax
               	jne	0x425e39 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	movb	255587(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x425e3a <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x2a>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425e67 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425e70 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425e6d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	236275(%rip), %rax      # 0x45f958 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>
               	jmp	0x425e6a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>:
               	pushq	%rbx
               	movq	(%rsi), %rbx
               	movq	(%rdi), %rdi
               	addq	$248, %rdi
               	movq	%rbx, %rsi
               	callq	0x427480 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 250770(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425ec1 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 250739(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425eb0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x30>
               	cmpb	$0, 250744(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x425edc <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	cmpq	%rbx, 250727(%rip)      # 0x463238 <(anonymous namespace)::current>
               	jne	0x425edc <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	leaq	250718(%rip), %rbx      # 0x463238 <(anonymous namespace)::current>
               	jmp	0x425ef5 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x75>
               	cmpb	$0, 250973(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x425f02 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	cmpq	%rbx, 250956(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x425f02 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	leaq	250947(%rip), %rbx      # 0x463338 <(anonymous namespace)::last>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 80(%rbx)
               	movb	$1, 88(%rbx)
               	movb	$0, 250663(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>:
               	jmp	0x427c00 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
               	nopw	%cs:(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425f37 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425f40 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425f3d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	236051(%rip), %rax      # 0x45f948 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>
               	jmp	0x425f3a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x425f7d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %rbx
               	leaq	16(%rbx), %rsi
               	leaq	184(%rbx), %rdi
               	movq	%rdi, 208(%rsp)
               	movq	%rsi, 216(%rsp)
               	callq	0x4273d0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	cmpb	$1, 312(%rbx)
               	jne	0x425fbb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b>
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	56(%rbx), %rcx
               	movq	%rcx, 200(%rsp)
               	leaq	336(%rbx), %rcx
               	movq	%rcx, 192(%rsp)
               	leaq	104(%rsp), %r13
               	leaq	120(%rbx), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	241610(%rip), %r12      # 0x460fb8 <write+0x460fb8>
               	movq	%rbx, 72(%rsp)
               	jmp	0x426043 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf3>
               	nopl	(%rax,%rax)
               	movq	%r15, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r13, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	208(%rsp), %rdi
               	movq	216(%rsp), %rsi
               	callq	0x4273d0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	movq	72(%rsp), %rbx
               	cmpb	$1, 312(%rbx)
               	je	0x425fa9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
               	movq	(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 250338(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426071 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x121>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 250307(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426060 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x110>
               	cmpb	$0, 250312(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x426109 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1b9>
               	movl	$256, %edx              # imm = 0x100
               	leaq	250542(%rip), %rdi      # 0x463338 <(anonymous namespace)::last>
               	leaq	250279(%rip), %rsi      # 0x463238 <(anonymous namespace)::current>
               	callq	0x4136f0 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 250264(%rip)     # 0x463238 <(anonymous namespace)::current>
               	movups	%xmm0, 250273(%rip)     # 0x463248 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 250282(%rip)     # 0x463258 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 250291(%rip)     # 0x463268 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 250300(%rip)     # 0x463278 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 250309(%rip)     # 0x463288 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 250318(%rip)     # 0x463298 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 250327(%rip)     # 0x4632a8 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 250336(%rip)     # 0x4632b8 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 250345(%rip)     # 0x4632c8 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 250354(%rip)     # 0x4632d8 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 250363(%rip)     # 0x4632e8 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 250372(%rip)     # 0x4632f8 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 250381(%rip)     # 0x463308 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 250390(%rip)     # 0x463318 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 250399(%rip)     # 0x463328 <(anonymous namespace)::current+0xf0>
               	movq	%rbp, 250152(%rip)      # 0x463238 <(anonymous namespace)::current>
               	movb	$1, 250153(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 250149(%rip)      # 0x463248 <(anonymous namespace)::current+0x10>
               	movb	$1, 250150(%rip)        # 0x463250 <(anonymous namespace)::current+0x18>
               	movb	$0, 250111(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	cmpl	$0, 344(%rbx)
               	sete	%al
               	xchgb	%al, 254903(%rip)       # 0x4644f8 <(anonymous namespace)::markingRequested (.0.0)>
               	movq	%rbp, %rax
               	xchgq	%rax, 254909(%rip)      # 0x464508 <(anonymous namespace)::markingEpoch (.0)>
               	callq	0x424640 <kotlin::mm::RequestThreadsSuspension()>
               	movb	$1, %al
               	xchgb	%al, 250072(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426171 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x221>
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 250051(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426160 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x210>
               	cmpb	$0, 250056(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x42618a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x23a>
               	leaq	250039(%rip), %rbx      # 0x463238 <(anonymous namespace)::current>
               	cmpq	%rbp, 250032(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x4261a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x253>
               	cmpb	$0, 250287(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x4261b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	leaq	250270(%rip), %rbx      # 0x463338 <(anonymous namespace)::last>
               	cmpq	%rbp, 250263(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x4261b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 48(%rbx)
               	movb	$1, 56(%rbx)
               	movq	%rbp, (%rsp)
               	movb	$0, 249973(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	nopl	(%rax,%rax)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	leaq	8(%rax), %rbp
               	testq	%rax, %rax
               	cmoveq	%rax, %rbp
               	testq	%r12, %r12
               	je	0x4261fa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2aa>
               	leaq	250483(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4270cb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x117b>
               	movq	250447(%rip), %rax      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bl
               	jmp	0x426217 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c7>
               	nopl	(%rax,%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426250 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x300>
               	leaq	8(%rax), %rcx
               	cmpq	%rbp, %rcx
               	je	0x426210 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426210 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426210 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movq	296(%rax), %rcx
               	movzbl	96(%rcx), %ecx
               	testb	$1, %cl
               	jne	0x426210 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	xorl	%ebx, %ebx
               	nop
               	testq	%r12, %r12
               	je	0x426261 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x311>
               	leaq	250372(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testb	%bl, %bl
               	jne	0x426275 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x325>
               	callq	0x413720 <sched_yield@plt>
               	jmp	0x4261c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x270>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 249779(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426270 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x320>
               	cmpb	$0, 249784(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	movq	72(%rsp), %rbx
               	je	0x4262a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x353>
               	leaq	249762(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 249751(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x4262c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x370>
               	cmpb	$0, 250006(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x4262cb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	leaq	249989(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 249978(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x4262cb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	cmpb	$0, 56(%rax)
               	je	0x4262cb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movb	$0, 249694(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	8(%rbx), %r15
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*24(%rax)
               	movq	200(%rsp), %rdi
               	movq	(%rsp), %rbp
               	movq	%rbp, %rsi
               	callq	0x427480 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x4250e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
               	movq	%rbp, %rdi
               	movq	192(%rsp), %rsi
               	callq	0x425b50 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	nop
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	leaq	8(%rax), %rbx
               	testq	%rax, %rax
               	cmoveq	%rax, %rbx
               	testq	%r12, %r12
               	je	0x42633e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3ee>
               	leaq	250159(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4270d2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1182>
               	movq	250123(%rip), %rax      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bpl
               	jmp	0x426357 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x407>
               	nopl	(%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426380 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x430>
               	leaq	8(%rax), %rcx
               	cmpq	%rbx, %rcx
               	je	0x426350 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426350 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426350 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	xorl	%ebp, %ebp
               	nop
               	testq	%r12, %r12
               	je	0x426391 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x441>
               	leaq	250068(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testb	%bpl, %bpl
               	jne	0x4263a5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x455>
               	callq	0x413720 <sched_yield@plt>
               	jmp	0x426310 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3c0>
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 249475(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4263a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x450>
               	cmpb	$0, 249480(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	leaq	250209(%rip), %r14      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	je	0x4263d5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x485>
               	leaq	249456(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 249445(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x4263f7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4a7>
               	cmpb	$0, 249700(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x426410 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
               	leaq	249683(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	movl	$0, %esi
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 249667(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x426412 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
               	cmpb	$0, 152(%rax)
               	je	0x426410 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
               	movq	144(%rax), %rsi
               	jmp	0x426412 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
               	xorl	%esi, %esi
               	movb	$0, 249367(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*32(%rax)
               	movb	$1, %al
               	xchgb	%al, 250125(%rip)       # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426441 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4f1>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 250107(%rip)       # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426430 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4e0>
               	leaq	8(%rsp), %r15
               	movq	%r15, 16(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	250048(%rip), %rbp      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rbp
               	je	0x426510 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5c0>
               	movq	%rbp, %rsi
               	jmp	0x42649e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x54e>
               	nop
               	movq	40(%rax), %rbx
               	movq	250013(%rip), %rax      # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	addq	$-1, %rax
               	movq	%rax, 250002(%rip)      # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c72c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430500 <mi_free>
               	movq	%rbp, %rsi
               	cmpq	%r14, %rbp
               	je	0x4264f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5a0>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	32(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x426470 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x520>
               	cmpq	%rsi, %r15
               	je	0x426496 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	movq	(%rsi), %rdx
               	cmpq	%r15, %rdx
               	je	0x426496 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	movq	%r15, %rdi
               	callq	0x43c6ce <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 24(%rsp)
               	movq	249939(%rip), %rax      # 0x463530 <kotlin::mm::GlobalData::instance_+0xf8>
               	addq	$-1, %rax
               	movq	%rax, 249928(%rip)      # 0x463530 <kotlin::mm::GlobalData::instance_+0xf8>
               	jmp	0x426496 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	nopl	(%rax)
               	movq	249897(%rip), %rdi      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rdi
               	je	0x426510 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5c0>
               	movq	(%rdi), %rbx
               	callq	0x430500 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x426500 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5b0>
               	movq	8(%rsp), %rax
               	cmpq	%r15, %rax
               	je	0x426560 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x610>
               	movq	%rax, 249851(%rip)      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	16(%rsp), %rax
               	movq	%rax, 249847(%rip)      # 0x463528 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, (%rax)
               	movq	249829(%rip), %rax      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%r14, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r15, 16(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x426570 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
               	nopl	(%rax)
               	movq	%r14, 249793(%rip)      # 0x463528 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, 249778(%rip)      # 0x463520 <kotlin::mm::GlobalData::instance_+0xe8>
               	xorl	%eax, %eax
               	movq	%rax, 249785(%rip)      # 0x463530 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 249786(%rip)        # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	249742(%rip), %rbx      # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 248990(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	movq	(%rsp), %r14
               	je	0x4265b1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x661>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 248963(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4265a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x650>
               	cmpb	$0, 248968(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x4265ca <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x67a>
               	leaq	248951(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	cmpq	%r14, 248944(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x4265e3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x693>
               	cmpb	$0, 249199(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x42660d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	leaq	249182(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	cmpq	%r14, 249175(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x42660d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 200(%rax)
               	movq	%rbx, 184(%rax)
               	movq	%rcx, 192(%rax)
               	jne	0x42660d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	movb	$1, 200(%rax)
               	movb	$0, 248860(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movb	$1, %al
               	xchgb	%al, 249628(%rip)       # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426631 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e1>
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 249611(%rip)       # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426620 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	249552(%rip), %rbx      # 0x463508 <kotlin::mm::GlobalData::instance_+0xd0>
               	leaq	249545(%rip), %rdx      # 0x463508 <kotlin::mm::GlobalData::instance_+0xd0>
               	jmp	0x426653 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x703>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rbx
               	cmpq	%rdx, %rbx
               	je	0x426730 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7e0>
               	movl	32(%rbx), %eax
               	testb	$4, %al
               	jne	0x426650 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x426673 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x723>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%rax), %rcx
               	testb	$3, %cl
               	jne	0x426650 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	-8(%rax), %rax
               	testq	%rax, %rax
               	jne	0x426650 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4266e4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x794>
               	movq	40(%rbx), %rcx
               	testb	$1, %cl
               	je	0x42669d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x74d>
               	andq	$-2, %rcx
               	movq	8(%rcx), %rcx
               	movl	$1, %esi
               	movq	40(%rbx), %rax
               	movl	%eax, %edx
               	andl	$1, %edx
               	negq	%rdx
               	andq	%rax, %rdx
               	andq	$-2, %rdx
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	cmpl	$1, %eax
               	je	0x4266c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x770>
               	movq	$0, 8(%rdx)
               	movl	$1, %eax
               	xorl	%esi, %esi
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	xchgq	%rcx, 40(%rbx)
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4266f4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7a4>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	24(%rbx), %rcx
               	movq	%rcx, (%rax)
               	movq	(%rbx), %rbp
               	movq	249363(%rip), %rax      # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	addq	$-1, %rax
               	movq	%rax, 249352(%rip)      # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c72c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430500 <mi_free>
               	movq	%rbp, %rbx
               	jmp	0x426638 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e8>
               	nopl	(%rax,%rax)
               	movb	$0, 249345(%rip)        # 0x463538 <kotlin::mm::GlobalData::instance_+0x100>
               	movq	249306(%rip), %rbx      # 0x463518 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 248554(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426761 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x811>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 248531(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426750 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x800>
               	cmpb	$0, 248536(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x42677a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82a>
               	leaq	248519(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	cmpq	%r14, 248512(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x426793 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x843>
               	cmpb	$0, 248767(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x4267bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	leaq	248750(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	cmpq	%r14, 248743(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x4267bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 248(%rax)
               	movq	%rbx, 232(%rax)
               	movq	%rcx, 240(%rax)
               	jne	0x4267bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	movb	$1, 248(%rax)
               	movb	$0, 248428(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	72(%rsp), %rax
               	movq	(%rax), %rbx
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	je	0x4267ee <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x89e>
               	nopl	(%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	jne	0x4267e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x890>
               	testq	%r12, %r12
               	je	0x426830 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e0>
               	leaq	253042(%rip), %rdi      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4270d9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1189>
               	xorl	%eax, %eax
               	xchgb	%al, 253061(%rip)       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testq	%r12, %r12
               	je	0x426838 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e8>
               	leaq	253005(%rip), %rdi      # 0x464470 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x426838 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e8>
               	nopl	(%rax)
               	xorl	%eax, %eax
               	xchgb	%al, 253024(%rip)       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	movq	%rbx, 128(%rsp)
               	leaq	249089(%rip), %rdi      # 0x463548 <(anonymous namespace)::gSuspensionCondVar>
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	movb	$1, %al
               	xchgb	%al, 248284(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426871 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x921>
               	nopl	(%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 248259(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426860 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x910>
               	cmpb	$0, 248264(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x42688a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x93a>
               	leaq	248247(%rip), %rbx      # 0x463238 <(anonymous namespace)::current>
               	cmpq	%r14, 248240(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x4268a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x953>
               	cmpb	$0, 248495(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x4268b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	leaq	248478(%rip), %rbx      # 0x463338 <(anonymous namespace)::last>
               	cmpq	%r14, 248471(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x4268b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 64(%rbx)
               	movb	$1, 72(%rbx)
               	movb	$0, 248185(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r13)
               	movq	$0, 16(%r13)
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	248941(%rip), %rax      # 0x463540 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 248141(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426901 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9b1>
               	nopl	(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 248115(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4268f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9a0>
               	movq	128(%rsp), %rax
               	leaq	8(%rax), %r14
               	cmpb	$0, 248108(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x42692a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9da>
               	leaq	248091(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 248080(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x426947 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9f7>
               	cmpb	$0, 248335(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x42695e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
               	leaq	248318(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 248307(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x42695e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
               	cmpb	$0, 176(%rax)
               	movq	%rbx, 160(%rax)
               	movq	%rbp, 168(%rax)
               	je	0x426980 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa30>
               	movb	$0, 248011(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	jne	0x42699a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa4a>
               	jmp	0x426b40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, 176(%rax)
               	movb	$0, 247970(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x426b40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	xorl	%r13d, %r13d
               	jmp	0x4269b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	nop
               	movq	$0, 8(%rbx)
               	movq	%rbx, %r13
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x426b40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	movq	8(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x4269a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa50>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	je	0x4269cf <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa7f>
               	cmpq	%rax, (%rax)
               	jne	0x426a10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	88(%rax), %eax
               	testb	$64, %al
               	jne	0x426a10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	js	0x426af6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba6>
               	movl	%eax, %ecx
               	addq	$15, %rcx
               	jmp	0x426b06 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbb6>
               	nopw	%cs:(%rax,%rax)
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	js	0x426a2a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xada>
               	movl	%eax, %ecx
               	addq	$15, %rcx
               	jmp	0x426a3a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaea>
               	cltq
               	movl	24(%rbx), %ecx
               	negq	%rax
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427b50 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %rbx
               	movq	8(%rsp), %rax
               	movq	$0, 8(%rsp)
               	movq	%rax, 144(%rsp)
               	cmpq	$0, 104(%rsp)
               	movq	144(%rsp), %r15
               	je	0x426aad <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb5d>
               	movq	112(%rsp), %rax
               	movq	$0, 144(%rsp)
               	movq	(%rax), %rbp
               	movq	%r15, (%rax)
               	testq	%rbp, %rbp
               	je	0x426abe <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb6e>
               	movq	%rbp, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x426abe <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb6e>
               	movq	$0, 144(%rsp)
               	movq	%r15, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	movq	120(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 120(%rsp)
               	leaq	144(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	8(%rsp), %r15
               	movq	%r15, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x4269b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	jmp	0x426b40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	cltq
               	movl	24(%rbx), %ecx
               	negq	%rax
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427b50 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %rbx
               	movq	%r15, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x4269b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	nopw	%cs:(%rax,%rax)
               	movq	248313(%rip), %rax      # 0x463540 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 247513(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426b71 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc21>
               	nop
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247491(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426b60 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc10>
               	cmpb	$0, 247496(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	movq	(%rsp), %r14
               	je	0x426b8e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc3e>
               	leaq	247475(%rip), %rax      # 0x463238 <(anonymous namespace)::current>
               	cmpq	%r14, 247468(%rip)      # 0x463238 <(anonymous namespace)::current>
               	je	0x426ba7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc57>
               	cmpb	$0, 247723(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x426bc5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	leaq	247706(%rip), %rax      # 0x463338 <(anonymous namespace)::last>
               	cmpq	%r14, 247699(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x426bc5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	cmpb	$0, 224(%rax)
               	movq	%rbx, 208(%rax)
               	movq	%rbp, 216(%rax)
               	jne	0x426bc5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	movb	$1, 224(%rax)
               	movb	$0, 247396(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	184(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x427480 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 247372(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	leaq	104(%rsp), %r13
               	movq	72(%rsp), %rbx
               	je	0x426c11 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcc1>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423240 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247331(%rip)       # 0x463230 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426c00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcb0>
               	cmpb	$0, 247336(%rip)        # 0x463240 <(anonymous namespace)::current+0x8>
               	je	0x426cd0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
               	cmpq	%r14, 247315(%rip)      # 0x463238 <(anonymous namespace)::current>
               	jne	0x426cd0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 247329(%rip)      # 0x463258 <(anonymous namespace)::current+0x20>
               	movb	$1, 247330(%rip)        # 0x463260 <(anonymous namespace)::current+0x28>
               	movl	$256, %edx              # imm = 0x100
               	leaq	247534(%rip), %rdi      # 0x463338 <(anonymous namespace)::last>
               	leaq	247271(%rip), %rsi      # 0x463238 <(anonymous namespace)::current>
               	callq	0x4136f0 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 247256(%rip)     # 0x463238 <(anonymous namespace)::current>
               	movups	%xmm0, 247265(%rip)     # 0x463248 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 247274(%rip)     # 0x463258 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 247283(%rip)     # 0x463268 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 247292(%rip)     # 0x463278 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 247301(%rip)     # 0x463288 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 247310(%rip)     # 0x463298 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 247319(%rip)     # 0x4632a8 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 247328(%rip)     # 0x4632b8 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 247337(%rip)     # 0x4632c8 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 247346(%rip)     # 0x4632d8 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 247355(%rip)     # 0x4632e8 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 247364(%rip)     # 0x4632f8 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 247373(%rip)     # 0x463308 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 247382(%rip)     # 0x463318 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 247391(%rip)     # 0x463328 <(anonymous namespace)::current+0xf0>
               	jmp	0x426cf5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	nop
               	cmpb	$0, 247401(%rip)        # 0x463340 <(anonymous namespace)::last+0x8>
               	je	0x426cf5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	cmpq	%r14, 247384(%rip)      # 0x463338 <(anonymous namespace)::last>
               	jne	0x426cf5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	callq	0x43d0c0 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 247402(%rip)      # 0x463358 <(anonymous namespace)::last+0x20>
               	movb	$1, 247403(%rip)        # 0x463360 <(anonymous namespace)::last+0x28>
               	movb	$0, 247092(%rip)        # 0x463230 <(anonymous namespace)::lock>
               	movq	328(%rbx), %rbp
               	leaq	88(%rbp), %rdi
               	movq	%rdi, 80(%rsp)
               	movb	$0, 88(%rsp)
               	testq	%r12, %r12
               	je	0x426d23 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd3>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4270e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1190>
               	movb	$1, 88(%rsp)
               	movq	120(%rsp), %rax
               	testq	%rax, %rax
               	leaq	80(%rsp), %rbx
               	jne	0x426d42 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdf2>
               	cmpq	$0, (%rbp)
               	je	0x426fc8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1078>
               	movq	%rax, 224(%rsp)
               	leaq	40(%rbp), %r14
               	cmpb	$0, 169(%rbp)
               	jne	0x426d74 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe24>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cd10 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpb	$0, 169(%rbp)
               	je	0x426d60 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe10>
               	leaq	272(%rbp), %rbx
               	testq	%r12, %r12
               	je	0x426d90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe40>
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4270e7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1197>
               	cmpq	$0, (%rbp)
               	je	0x426df0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xea0>
               	testq	%r12, %r12
               	je	0x426da4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe54>
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	104(%rsp), %rax
               	testq	%rax, %rax
               	je	0x426f3e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfee>
               	cmpq	$0, 16(%rbp)
               	je	0x426f10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfc0>
               	movq	24(%rbp), %rcx
               	movq	$0, 104(%rsp)
               	movq	(%rcx), %rbx
               	movq	%rax, (%rcx)
               	testq	%rbx, %rbx
               	je	0x426f1d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfcd>
               	movq	%rbx, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x426f1d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfcd>
               	nop
               	movq	%rbx, %r13
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 168(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 144(%rsp)
               	movq	$22, 160(%rsp)
               	movups	123299(%rip), %xmm0     # 0x444fcb <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movabsq	$8245936382198116210, %rcx # imm = 0x726F737365636F72
               	movq	%rcx, 14(%rax)
               	movq	$22, 152(%rsp)
               	movq	144(%rsp), %rbx
               	movb	$0, 22(%rbx)
               	movb	$1, 176(%rsp)
               	movq	$0, 136(%rsp)
               	movq	%rbp, 8(%rsp)
               	movb	$0, 48(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 16(%rsp)
               	movq	$22, 32(%rsp)
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rax)
               	movq	14(%rbx), %rcx
               	movq	%rcx, 14(%rax)
               	movq	$22, 24(%rsp)
               	movq	16(%rsp), %rbx
               	movb	$0, 22(%rbx)
               	movb	$1, 48(%rsp)
               	leaq	1576(%rip), %rax        # 0x4274e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%rax, 56(%rsp)
               	movl	$64, %edi
               	callq	0x43c0b9 <operator new(unsigned long)>
               	leaq	232010(%rip), %rcx      # 0x45f918 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	leaq	32(%rsp), %rdx
               	cmpq	%rdx, %rbx
               	je	0x426ff0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a0>
               	movq	%rbx, 16(%rax)
               	movq	32(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x426ff6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a6>
               	nopl	(%rax)
               	movq	$0, 104(%rsp)
               	movq	%rax, 16(%rbp)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%rbp)
               	movq	224(%rsp), %rax
               	addq	32(%rbp), %rax
               	movq	%rax, 32(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%r13)
               	movq	(%rsp), %rax
               	movq	%rax, 160(%rbp)
               	movq	%r14, %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	cmpb	$0, 88(%rsp)
               	je	0x426f71 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1021>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426f71 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1021>
               	testq	%r12, %r12
               	je	0x426f6c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x101c>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	104(%rsp), %rbp
               	movq	$0, 104(%rsp)
               	movq	%rbp, 8(%rsp)
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rbp, %rbp
               	je	0x426000 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb0>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	8(%rsp), %rbx
               	movq	%rbp, 8(%rsp)
               	testq	%rbx, %rbx
               	je	0x426f90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
               	movq	%rbx, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x426f90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
               	movq	%r14, 8(%rsp)
               	cmpq	$0, 144(%rbp)
               	je	0x4270f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11a3>
               	leaq	128(%rbp), %rdi
               	movq	%r15, %rsi
               	callq	*152(%rbp)
               	jmp	0x426f51 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1001>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rcx)
               	movq	%r13, %rbx
               	movq	24(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rdx, 16(%rsp)
               	movq	$0, 24(%rsp)
               	movb	$0, 32(%rsp)
               	movb	$1, 48(%rax)
               	leaq	1216(%rip), %rcx        # 0x4274e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%rcx, 56(%rax)
               	movq	%rax, 64(%rsp)
               	leaq	136(%rsp), %rdi
               	leaq	64(%rsp), %rsi
               	movq	237443(%rip), %rdx      # 0x460fc0 <write+0x460fc0>
               	callq	0x43f2ee <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	64(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427052 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1102>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 64(%rsp)
               	cmpb	$0, 48(%rsp)
               	leaq	104(%rsp), %r13
               	je	0x42707b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
               	movq	16(%rsp), %rdi
               	leaq	32(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x42707b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, (%rbp)
               	jne	0x4270ee <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x119e>
               	movq	136(%rsp), %rax
               	movq	%rax, (%rbp)
               	movq	$0, 136(%rsp)
               	cmpb	$0, 176(%rsp)
               	je	0x426d97 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426d97 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	callq	0x4136d0 <free@plt>
               	jmp	0x426d97 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	callq	0x43c463 <std::terminate()>
               	callq	0x43d112 <std::__throw_bad_function_call()>
               	jmp	0x42711c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11cc>
               	jmp	0x427246 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f6>
               	movq	%rax, %rbx
               	jmp	0x427130 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e0>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpb	$0, 88(%rsp)
               	je	0x427130 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e0>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	jne	0x427138 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e8>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	cmpq	$0, 237176(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427147 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f7>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	64(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427167 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1217>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 64(%rsp)
               	cmpb	$0, 48(%rsp)
               	je	0x427193 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
               	movq	16(%rsp), %rbx
               	jmp	0x427181 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1231>
               	movq	%rax, %r14
               	leaq	32(%rsp), %rax
               	cmpq	%rax, %rbx
               	je	0x427193 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 176(%rsp)
               	je	0x4271b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4271b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, 237049(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427249 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f9>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	104(%rsp), %rbx
               	movq	$0, 104(%rsp)
               	movq	%rbx, 8(%rsp)
               	testq	%rbx, %rbx
               	je	0x42721e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12ce>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	8(%rsp), %rbp
               	movq	%rbx, 8(%rsp)
               	testq	%rbp, %rbp
               	je	0x4271eb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x129b>
               	movq	%rbp, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x4271eb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x129b>
               	leaq	8(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	%r14, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	%r14, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::~GCStateHolder()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	addq	$248, %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	leaq	184(%rbx), %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	leaq	120(%rbx), %rdi
               	callq	0x43cd0a <std::condition_variable::~condition_variable()>
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43cd0a <std::condition_variable::~condition_variable()>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	230957(%rip), %rax      # 0x45f8d8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x4272c6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x4272c6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f280 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	230909(%rip), %rax      # 0x45f8d8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x4272f6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x4272f6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f280 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x427373 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x42734f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427355 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x427395 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427395 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x4273b9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4273b9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	8(%rdi), %rdi
               	movq	%rdi, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 236481(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427402 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x32>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427475 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0xa5>
               	movb	$1, 16(%rsp)
               	movq	104(%rbx), %rax
               	cmpq	%rax, 168(%rbx)
               	jg	0x427448 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x78>
               	leaq	16(%r14), %r15
               	leaq	8(%rsp), %r12
               	nopl	(%rax)
               	cmpb	$0, 296(%rbx)
               	jne	0x427441 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x71>
               	movq	%r15, %rdi
               	movq	%r12, %rsi
               	callq	0x43cd10 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	104(%rbx), %rax
               	cmpq	%rax, 168(%rbx)
               	jle	0x427420 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
               	cmpb	$0, 16(%rsp)
               	je	0x427466 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427466 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
               	cmpq	$0, 236382(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427461 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x91>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	nopl	(%rax)

<GCStateHolder::ValueWithCondVar<long>::set(long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	movq	8(%rdi), %r14
               	cmpq	$0, 236321(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4274a5 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x25>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4274d6 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x56>
               	movq	%r15, (%rbx)
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	testq	%r14, %r14
               	je	0x4274d0 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	cmpq	$0, 236279(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4274d0 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413750 <pthread_mutex_unlock@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	nopl	(%rax)

<std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42750d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %r13
               	callq	0x4386a0 <Kotlin_initRuntimeIfNeeded>
               	leaq	176(%r13), %rax
               	movq	%rax, 32(%rsp)
               	cmpq	$0, 236175(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x42753d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x5d>
               	movq	32(%rsp), %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427983 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$1, 264(%r13)
               	cmpq	$0, 236139(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427559 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x79>
               	movq	32(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	leaq	216(%r13), %rdi
               	movq	%rdi, 88(%rsp)
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	leaq	88(%r13), %r14
               	leaq	40(%r13), %r15
               	leaq	24(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	128(%r13), %rax
               	movq	%rax, 112(%rsp)
               	xorl	%ebp, %ebp
               	leaq	8(%rsp), %rbx
               	movq	%r14, 104(%rsp)
               	movq	%r15, 96(%rsp)
               	jmp	0x4275a5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	nopl	(%rax)
               	movb	$0, 16(%rsp)
               	movq	%r14, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 236033(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4275c9 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xe9>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427983 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$1, 16(%rsp)
               	movq	32(%r13), %rax
               	movb	$1, %cl
               	testq	%rax, %rax
               	jne	0x427613 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x133>
               	nopl	(%rax)
               	cmpq	%rbp, 160(%r13)
               	jne	0x42760d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12d>
               	cmpb	$0, 168(%r13)
               	jne	0x4278ed <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x40d>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43cd10 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	32(%r13), %rax
               	testq	%rax, %rax
               	je	0x4275e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x100>
               	jmp	0x42760f <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12f>
               	xorl	%eax, %eax
               	movb	16(%rsp), %cl
               	movq	16(%r13), %rdx
               	movq	$0, 16(%r13)
               	movq	%rdx, 64(%rsp)
               	movq	24(%r13), %rdx
               	movq	160(%r13), %rbx
               	movq	%rax, 80(%rsp)
               	movq	%rdx, 72(%rsp)
               	movq	120(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	testb	%cl, %cl
               	je	0x427974 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x494>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42766a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x18a>
               	cmpq	$0, 235866(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427665 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x185>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 80(%rsp)
               	je	0x427820 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movq	%rbx, 144(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rbx
               	xorl	%eax, %eax
               	movq	%rcx, 128(%rsp)
               	xchgl	%eax, 328(%rcx)
               	movl	%eax, 52(%rsp)
               	cmpl	$1, %eax
               	jne	0x4276c6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1e6>
               	movb	249310(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4276c6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1e6>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 136(%rsp)
               	movq	64(%rsp), %rbx
               	testq	%rbx, %rbx
               	jne	0x42771e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
               	jmp	0x4277d0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	nopl	(%rax)
               	leaq	264(%r14), %rbp
               	movl	$24, %edi
               	callq	0x4280f0 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%r12, 16(%rax)
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x43c714 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	280(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 280(%r14)
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x4277d0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	leaq	16(%rbx), %rbp
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rsi
               	movl	88(%rsi), %eax
               	testb	$64, %al
               	je	0x42773c <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x25c>
               	movq	%rbp, %rdi
               	callq	0x437e90 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	je	0x427712 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x232>
               	cmpq	%rax, (%rax)
               	je	0x427712 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x232>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	cmpq	%rax, (%rax)
               	movl	$0, %r12d
               	cmovneq	%rax, %r12
               	movq	16(%r12), %rax
               	testb	$1, %al
               	je	0x427771 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x291>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%r12), %rcx
               	movq	%rcx, (%rax)
               	movq	%r15, %rax
               	movq	-64(%r15), %r14
               	leaq	232(%r14), %rax
               	movq	24(%r12), %rcx
               	addq	$-8, %r12
               	cmpq	%rcx, %rax
               	jne	0x4276e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x200>
               	movq	40(%r12), %rbp
               	movq	256(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 256(%r14)
               	movq	%rbp, %rdi
               	callq	0x43c72c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbp, %rdi
               	callq	0x430500 <mi_free>
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x42771e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
               	nop
               	cmpq	$0, 128(%rsp)
               	movq	104(%rsp), %r14
               	movq	96(%rsp), %r15
               	movq	144(%rsp), %rbx
               	movq	136(%rsp), %rdi
               	je	0x427820 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movl	52(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x427820 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	cmpl	$1, %eax
               	jne	0x427820 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movb	248968(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427820 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)
               	movq	%rbx, 24(%rsp)
               	cmpq	$0, 144(%r13)
               	je	0x42797e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x49e>
               	movq	%rbx, %r12
               	movq	112(%rsp), %rdi
               	leaq	24(%rsp), %rsi
               	callq	*152(%r13)
               	movq	64(%rsp), %rbx
               	movq	$0, 64(%rsp)
               	movq	%rbx, 24(%rsp)
               	nopw	(%rax,%rax)
               	testq	%rbx, %rbx
               	je	0x4278a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3c0>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	24(%rsp), %rbp
               	movq	%rbx, 24(%rsp)
               	testq	%rbp, %rbp
               	je	0x427860 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x380>
               	movq	%rbp, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x427860 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x380>
               	nop
               	leaq	24(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	64(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	leaq	8(%rsp), %rbx
               	movq	%r12, %rbp
               	je	0x4275a5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4275a5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	cmpq	$0, 235227(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4275a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc0>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4275a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc0>
               	movb	$0, 169(%r13)
               	cmpb	$0, 16(%rsp)
               	je	0x42791a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x43a>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42791a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x43a>
               	cmpq	$0, 235178(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427915 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x435>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 235158(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427950 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x470>
               	movq	32(%rsp), %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427983 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$0, 264(%r13)
               	cmpq	$0, 235126(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427958 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x478>
               	movq	32(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x427958 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x478>
               	movb	$0, 264(%r13)
               	movq	88(%rsp), %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	callq	0x43d112 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	jmp	0x42798c <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4ac>
               	movq	%rax, %r14
               	movq	64(%rsp), %rbx
               	movq	$0, 64(%rsp)
               	movq	%rbx, 40(%rsp)
               	testq	%rbx, %rbx
               	je	0x4279d5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4f5>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	40(%rsp), %rbp
               	movq	%rbx, 40(%rsp)
               	testq	%rbp, %rbp
               	je	0x4279a2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4c2>
               	movq	%rbp, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x4279a2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4c2>
               	leaq	40(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	64(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	je	0x427a0e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x52e>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427a0e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x52e>
               	cmpq	$0, 234934(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427a09 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x529>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	229101(%rip), %rax      # 0x45f918 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427a46 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427a46 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f280 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	229053(%rip), %rax      # 0x45f918 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427a76 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427a76 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f280 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x427af3 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x427acf <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427ad5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x427b15 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427b15 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x427b39 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427b39 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r12
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	movq	%rdx, %rbp
               	cmoveq	%rsi, %rbp
               	movq	(%rbp), %rcx
               	movq	$0, (%rbp)
               	movq	%rcx, (%rsp)
               	movq	(%rcx), %rax
               	movq	$0, (%rcx)
               	movq	(%rbp), %r13
               	movq	%rax, (%rbp)
               	testq	%r13, %r13
               	je	0x427bac <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
               	movq	%r13, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r13, %rdi
               	callq	0x430500 <mi_free>
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	jne	0x427bb5 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x65>
               	movq	%r12, 8(%rbx)
               	movq	16(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rax
               	subq	%r14, %rax
               	movq	%rax, 24(%rbx)
               	movq	(%rbp), %rax
               	movq	(%rsp), %rcx
               	movq	$0, (%rsp)
               	movq	%rcx, (%r15)
               	movq	%rax, 8(%r15)
               	movq	%rsp, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	testq	%r15, %r15
               	je	0x427c30 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x30>
               	xchgl	%ebp, 328(%r15)
               	jmp	0x427c33 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x33>
               	xorl	%r15d, %r15d
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x425da0 <GCStateHolder::schedule()>
               	testq	%r15, %r15
               	je	0x427c60 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427c60 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	cmpl	$1, %eax
               	jne	0x427c60 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movb	247868(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x427c6b <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x6b>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%r15, %r15
               	je	0x427cb7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427cb7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	cmpl	$1, %eax
               	jne	0x427cb7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movb	247796(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427cb7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	movl	$1, %edi
               	movl	$168, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movq	(%r12), %rax
               	leaq	56(%rax), %rcx
               	movq	%rcx, (%rsp)
               	movq	%rcx, (%rbx)
               	movaps	(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movups	8(%rbx), %xmm1
               	movaps	%xmm1, (%rsp)
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 16(%rsp)
               	leaq	166(%rip), %rcx         # 0x427dc0 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rcx, 24(%rbx)
               	movq	$0, 24(%rsp)
               	leaq	194(%rip), %rcx         # 0x427df0 <std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>
               	movq	%rcx, 32(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 40(%rbx)
               	movups	%xmm0, 56(%rbx)
               	movq	64(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movq	16(%rsp), %rax
               	testq	%rax, %rax
               	je	0x427d67 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)+0xa7>
               	movq	%rsp, %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rax
               	addq	$72, %rax
               	movq	(%r12), %rcx
               	leaq	160(%rcx), %rdx
               	movq	%rdx, 72(%rbx)
               	movq	%r15, 80(%rbx)
               	movq	%rbx, 88(%rbx)
               	addq	$16, %rcx
               	movq	%rcx, 112(%rbx)
               	movq	%rax, 128(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 136(%rbx)
               	movups	%xmm0, 152(%rbx)
               	movq	%rbx, (%r14)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x427dd7 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x427de0 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x427ddd <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	228243(%rip), %rax      # 0x45f968 <typeinfo for kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>
               	jmp	0x427dda <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>:
               	movq	(%rdi), %rax
               	movq	64(%rax), %rdi
               	movq	(%rdi), %rax
               	movq	16(%rax), %rax
               	jmpq	*%rax

<kotlin::gc::GC::ThreadData::~ThreadData()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x427e43 <kotlin::gc::GC::ThreadData::~ThreadData()+0x43>
               	leaq	112(%rbx), %rdi
               	callq	0x425a80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	leaq	136(%rbx), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x427e3b <kotlin::gc::GC::ThreadData::~ThreadData()+0x3b>
               	leaq	8(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	addq	$15, %r15
               	andq	$-8, %r15
               	movq	16(%rdi), %rax
               	movq	16(%rax), %rbx
               	movq	40(%rbx), %rax
               	addq	%r15, %rax
               	movq	%rax, 40(%rbx)
               	cmpq	48(%rbx), %rax
               	jb	0x427ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x70>
               	cmpq	$0, 24(%rbx)
               	je	0x428088 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x228>
               	leaq	8(%rbx), %rdi
               	movq	%rbx, %rsi
               	callq	*32(%rbx)
               	movq	$0, 40(%rbx)
               	movq	$0, 56(%rbx)
               	movq	(%rbx), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movb	247234(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427edf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x7f>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x4280f0 <kotlin::allocateInObjectPool(unsigned long)>
               	testq	%rax, %rax
               	jne	0x428005 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1a5>
               	movq	16(%r14), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 36(%rsp)
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movl	%ecx, 32(%rsp)
               	movq	(%rbx), %rdi
               	addq	$16, %rdi
               	callq	0x425da0 <GCStateHolder::schedule()>
               	movq	%rax, %r12
               	movq	(%rbx), %rbp
               	movq	128(%rbp), %rdi
               	movq	%rdi, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 233581(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427f5a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfa>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4280a3 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x243>
               	movb	$1, 16(%rsp)
               	cmpq	%r12, 120(%rbp)
               	jge	0x427fa1 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x141>
               	leaq	136(%rbp), %rbx
               	leaq	8(%rsp), %r13
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpb	$0, 312(%rbp)
               	jne	0x427f9a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13a>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x43cd10 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpq	%r12, 120(%rbp)
               	jl	0x427f80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
               	cmpb	$0, 16(%rsp)
               	je	0x427fbf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427fbf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
               	cmpq	$0, 233477(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x427fba <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15a>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	24(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427ff4 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movl	32(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x427ff4 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	cmpl	$1, %eax
               	jne	0x427ff4 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movb	246964(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427ff4 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x4280f0 <kotlin::allocateInObjectPool(unsigned long)>
               	testq	%rax, %rax
               	je	0x42808d <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x22d>
               	movq	$0, (%rax)
               	movq	%rax, 8(%rsp)
               	movq	8(%rsp), %rbx
               	cmpq	$0, 24(%r14)
               	je	0x428047 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1e7>
               	movq	32(%r14), %rax
               	movq	$0, 8(%rsp)
               	movq	(%rax), %r12
               	movq	%rbx, (%rax)
               	testq	%r12, %r12
               	je	0x428054 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
               	movq	%r12, %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r12, %rdi
               	callq	0x430500 <mi_free>
               	jmp	0x428054 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
               	movq	$0, 8(%rsp)
               	movq	%rbx, 24(%r14)
               	movq	%rbx, 32(%r14)
               	movq	40(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%r14)
               	addq	48(%r14), %r15
               	movq	%r15, 48(%r14)
               	leaq	8(%rsp), %rdi
               	callq	0x425b20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43d112 <std::__throw_bad_function_call()>
               	leaq	118606(%rip), %rdi      # 0x444fe2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x4358a0 <konan::consoleErrorf(char const*, ...)>
               	callq	0x435b80 <konan::abort()>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	24(%rsp), %rdi
               	callq	0x425e10 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nop

<void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>:
               	movq	$1, 241453(%rip)        # 0x463008 <options+0x78>
               	movl	$2, 241451(%rip)        # 0x463010 <options+0x80>
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::allocateInObjectPool(unsigned long)>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	js	0x4281de <kotlin::allocateInObjectPool(unsigned long)+0xee>
               	movq	%rdi, %rsi
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x428174 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	leaq	7(%rsi), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x428174 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	movl	%ebx, %ecx
               	andl	$7, %ecx
               	testq	%rcx, %rcx
               	jne	0x428174 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	movl	16(%rax), %ecx
               	addl	$1, %ecx
               	movl	%ecx, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	cmpq	$9, %rsi
               	jb	0x42815a <kotlin::allocateInObjectPool(unsigned long)+0x6a>
               	movb	7(%rax), %al
               	andb	$1, %al
               	je	0x42815a <kotlin::allocateInObjectPool(unsigned long)+0x6a>
               	movq	$0, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rbx, %rdi
               	callq	0x435570 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413710 <memset@plt>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	leaq	-8(%rsi), %rax
               	cmpq	$131064, %rax           # imm = 0x1FFF8
               	ja	0x428190 <kotlin::allocateInObjectPool(unsigned long)+0xa0>
               	movl	%esi, %eax
               	andl	$7, %eax
               	testq	%rax, %rax
               	jne	0x428190 <kotlin::allocateInObjectPool(unsigned long)+0xa0>
               	popq	%rbx
               	jmp	0x4357f0 <_mi_heap_malloc_zero>
               	addq	$7, %rsi
               	callq	0x4357f0 <_mi_heap_malloc_zero>
               	testq	%rax, %rax
               	je	0x4281de <kotlin::allocateInObjectPool(unsigned long)+0xee>
               	movq	%rax, %rbx
               	andq	$-8, %rbx
               	addq	$8, %rbx
               	testb	$7, %al
               	cmoveq	%rax, %rbx
               	cmpq	%rax, %rbx
               	je	0x4281e5 <kotlin::allocateInObjectPool(unsigned long)+0xf5>
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movq	96(%rdx), %rcx
               	shrq	%cl, %rax
               	shlq	$6, %rax
               	movb	126(%rdx,%rax), %cl
               	orb	$2, %cl
               	movb	%cl, 126(%rdx,%rax)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<_mi_process_init>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 240060(%rip)        # 0x462bb8 <_mi_heap_main+0xb28>
               	jne	0x428252 <_mi_process_init+0x62>
               	movq	%fs:0, %rax
               	movq	%rax, 240034(%rip)      # 0x462bb0 <_mi_heap_main+0xb20>
               	leaq	237179(%rip), %rbx      # 0x462090 <_mi_heap_main>
               	leaq	868(%rip), %rdi         # 0x428580 <mi_heap_main_init>
               	callq	0x4285f0 <_os_random_weak>
               	movq	%rax, 240016(%rip)      # 0x462bb8 <_mi_heap_main+0xb28>
               	leaq	240033(%rip), %rdi      # 0x462bd0 <_mi_heap_main+0xb40>
               	callq	0x428700 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 239997(%rip)      # 0x462bc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 239990(%rip)      # 0x462bc8 <_mi_heap_main+0xb38>
               	movb	$1, 247079(%rip)        # 0x464780 <os_preloading>
               	leaq	2752(%rip), %rdi        # 0x428d20 <mi_process_done>
               	callq	0x442ee0 <atexit>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 247717(%rip)      # 0x464a18 <out_len>
               	cmpq	$32768, %rax            # imm = 0x8000
               	movl	$32768, %ebx            # imm = 0x8000
               	cmovbq	%rax, %rbx
               	leaq	247703(%rip), %r14      # 0x464a20 <out_buf>
               	movb	$0, (%rbx,%r14)
               	movq	232755(%rip), %rax      # 0x460fc8 <write+0x460fc8>
               	movq	(%rax), %rsi
               	movq	%r14, %rdi
               	callq	0x413790 <fputs@plt>
               	movb	$10, (%rbx,%r14)
               	leaq	34468(%rip), %rax       # 0x430950 <mi_out_buf_stderr>
               	movq	%rax, 247645(%rip)      # 0x464a10 <mi_out_default>
               	xorl	%edi, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240863(%rip), %rsi      # 0x462fa0 <options+0x10>
               	movq	240840(%rip), %rdx      # 0x462f90 <options>
               	leaq	119563(%rip), %rbx      # 0x4455da <typeinfo name for kotlin::gc::GCSchedulerData+0x1621>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$1, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240846(%rip), %rsi      # 0x462fb8 <options+0x28>
               	movq	240823(%rip), %rdx      # 0x462fa8 <options+0x18>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$2, %edi
               	callq	0x42abb0 <mi_option_get>
               	movl	$3, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240850(%rip), %rsi      # 0x462fe8 <options+0x58>
               	movq	240827(%rip), %rdx      # 0x462fd8 <options+0x48>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$4, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240840(%rip), %rsi      # 0x463000 <options+0x70>
               	movq	240817(%rip), %rdx      # 0x462ff0 <options+0x60>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$5, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240830(%rip), %rsi      # 0x463018 <options+0x88>
               	movq	240807(%rip), %rdx      # 0x463008 <options+0x78>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$6, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240820(%rip), %rsi      # 0x463030 <options+0xa0>
               	movq	240797(%rip), %rdx      # 0x463020 <options+0x90>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$7, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240810(%rip), %rsi      # 0x463048 <options+0xb8>
               	movq	240787(%rip), %rdx      # 0x463038 <options+0xa8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$8, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240800(%rip), %rsi      # 0x463060 <options+0xd0>
               	movq	240777(%rip), %rdx      # 0x463050 <options+0xc0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$9, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240790(%rip), %rsi      # 0x463078 <options+0xe8>
               	movq	240767(%rip), %rdx      # 0x463068 <options+0xd8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240780(%rip), %rsi      # 0x463090 <options+0x100>
               	movq	240757(%rip), %rdx      # 0x463080 <options+0xf0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$11, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240770(%rip), %rsi      # 0x4630a8 <options+0x118>
               	movq	240747(%rip), %rdx      # 0x463098 <options+0x108>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$12, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240760(%rip), %rsi      # 0x4630c0 <options+0x130>
               	movq	240737(%rip), %rdx      # 0x4630b0 <options+0x120>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$13, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240750(%rip), %rsi      # 0x4630d8 <options+0x148>
               	movq	240727(%rip), %rdx      # 0x4630c8 <options+0x138>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$14, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240740(%rip), %rsi      # 0x4630f0 <options+0x160>
               	movq	240717(%rip), %rdx      # 0x4630e0 <options+0x150>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$15, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240730(%rip), %rsi      # 0x463108 <options+0x178>
               	movq	240707(%rip), %rdx      # 0x4630f8 <options+0x168>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$16, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240720(%rip), %rsi      # 0x463120 <options+0x190>
               	movq	240697(%rip), %rdx      # 0x463110 <options+0x180>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$17, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240710(%rip), %rsi      # 0x463138 <options+0x1a8>
               	movq	240687(%rip), %rdx      # 0x463128 <options+0x198>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240700(%rip), %rsi      # 0x463150 <options+0x1c0>
               	movq	240677(%rip), %rdx      # 0x463140 <options+0x1b0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$19, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	240690(%rip), %rsi      # 0x463168 <options+0x1d8>
               	movq	240667(%rip), %rdx      # 0x463158 <options+0x1c8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	%rax, 240664(%rip)      # 0x463170 <mi_max_error_count>
               	movl	$19, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	%rax, 240151(%rip)      # 0x462f80 <mi_max_warning_count>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x429460 <mi_process_init>
               	nopw	%cs:(%rax,%rax)

<mi_heap_main_init>:
               	pushq	%rbx
               	cmpq	$0, 239151(%rip)        # 0x462bb8 <_mi_heap_main+0xb28>
               	je	0x42858d <mi_heap_main_init+0xd>
               	popq	%rbx
               	retq
               	movq	%fs:0, %rax
               	movq	%rax, 239123(%rip)      # 0x462bb0 <_mi_heap_main+0xb20>
               	leaq	236268(%rip), %rbx      # 0x462090 <_mi_heap_main>
               	leaq	-43(%rip), %rdi         # 0x428580 <mi_heap_main_init>
               	callq	0x4285f0 <_os_random_weak>
               	movq	%rax, 239105(%rip)      # 0x462bb8 <_mi_heap_main+0xb28>
               	leaq	239122(%rip), %rdi      # 0x462bd0 <_mi_heap_main+0xb40>
               	callq	0x428700 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 239086(%rip)      # 0x462bc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 239079(%rip)      # 0x462bc8 <_mi_heap_main+0xb38>
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_os_random_weak>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movabsq	$-4658895280553007687, %r15 # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r14 # imm = 0x94D049BB133111EB
               	leaq	-36(%rip), %rbx         # 0x4285f0 <_os_random_weak>
               	xorq	%rdi, %rbx
               	movq	%rsp, %rsi
               	movl	$1, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	xorq	(%rsp), %rbx
               	xorq	8(%rsp), %rbx
               	movl	%ebx, %ecx
               	shrl	$17, %ecx
               	xorl	%ebx, %ecx
               	andl	$15, %ecx
               	leaq	1(%rcx), %rax
               	testq	%rcx, %rcx
               	je	0x4286bb <_os_random_weak+0xcb>
               	movl	%eax, %ecx
               	andl	$-2, %ecx
               	negq	%rcx
               	jmp	0x42867c <_os_random_weak+0x8c>
               	nopl	(%rax)
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdx
               	shrq	$27, %rdx
               	xorq	%rsi, %rdx
               	imulq	%r14, %rdx
               	movq	%rdx, %rbx
               	shrq	$31, %rbx
               	xorq	%rdx, %rbx
               	addq	$2, %rcx
               	je	0x4286bb <_os_random_weak+0xcb>
               	movl	$17, %edx
               	movl	$17, %esi
               	testq	%rbx, %rbx
               	je	0x42868e <_os_random_weak+0x9e>
               	movq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r14, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	je	0x428650 <_os_random_weak+0x60>
               	movq	%rdi, %rdx
               	jmp	0x428650 <_os_random_weak+0x60>
               	testb	$1, %al
               	je	0x4286f1 <_os_random_weak+0x101>
               	testq	%rbx, %rbx
               	movl	$17, %eax
               	cmovneq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r14, %rax
               	movq	%rax, %rbx
               	shrq	$31, %rbx
               	xorq	%rax, %rbx
               	movq	%rbx, %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<_mi_random_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdi, %r14
               	movq	%rsp, %rsi
               	movl	$318, %edi              # imm = 0x13E
               	movl	$32, %edx
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	cmpq	$32, %rax
               	jne	0x4287a7 <_mi_random_init+0xa7>
               	movb	(%rsp), %al
               	movb	1(%rsp), %r11b
               	movb	2(%rsp), %r10b
               	movb	3(%rsp), %r9b
               	movb	4(%rsp), %cl
               	movb	5(%rsp), %bpl
               	movb	6(%rsp), %r8b
               	movb	7(%rsp), %bl
               	movb	8(%rsp), %dl
               	movb	9(%rsp), %sil
               	movl	%esi, 36(%rsp)
               	movb	10(%rsp), %sil
               	movl	%esi, 48(%rsp)
               	movb	11(%rsp), %sil
               	movl	%esi, 52(%rsp)
               	movb	12(%rsp), %r12b
               	movb	13(%rsp), %sil
               	movl	%esi, 32(%rsp)
               	movb	14(%rsp), %sil
               	movl	%esi, 40(%rsp)
               	movb	15(%rsp), %sil
               	movl	%esi, 44(%rsp)
               	movb	16(%rsp), %r13b
               	movb	17(%rsp), %r15b
               	movb	18(%rsp), %dil
               	jmp	0x428aa4 <_mi_random_init+0x3a4>
               	movabsq	$-4658895280553007687, %rbx # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r15 # imm = 0x94D049BB133111EB
               	leaq	118773(%rip), %rdi      # 0x4457b7 <typeinfo name for kotlin::gc::GCSchedulerData+0x17fe>
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	leaq	56(%rsp), %rsi
               	movl	$1, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	leaq	-495(%rip), %rcx        # 0x4285f0 <_os_random_weak>
               	xorq	56(%rsp), %rcx
               	xorq	64(%rsp), %rcx
               	movl	%ecx, %edx
               	shrl	$17, %edx
               	xorl	%ecx, %edx
               	andl	$15, %edx
               	leaq	1(%rdx), %rax
               	testq	%rdx, %rdx
               	je	0x42887b <_mi_random_init+0x17b>
               	movl	%eax, %edx
               	andl	$-2, %edx
               	negq	%rdx
               	jmp	0x42883c <_mi_random_init+0x13c>
               	nopl	(%rax)
               	movq	%rsi, %rcx
               	shrq	$30, %rcx
               	xorq	%rsi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rsi
               	shrq	$27, %rsi
               	xorq	%rcx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	addq	$2, %rdx
               	je	0x42887b <_mi_random_init+0x17b>
               	movl	$17, %esi
               	movl	$17, %edi
               	testq	%rcx, %rcx
               	je	0x42884e <_mi_random_init+0x14e>
               	movq	%rcx, %rdi
               	movq	%rdi, %rcx
               	shrq	$30, %rcx
               	xorq	%rdi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rdi
               	shrq	$27, %rdi
               	xorq	%rcx, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rcx
               	shrq	$31, %rcx
               	xorq	%rdi, %rcx
               	je	0x428810 <_mi_random_init+0x110>
               	movq	%rcx, %rsi
               	jmp	0x428810 <_mi_random_init+0x110>
               	testb	$1, %al
               	je	0x4288b1 <_mi_random_init+0x1b1>
               	testq	%rcx, %rcx
               	movl	$17, %eax
               	cmovneq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	testq	%rcx, %rcx
               	movl	$17, %ebp
               	cmoveq	%rbp, %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$27, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$31, %rax
               	xorq	%rcx, %rax
               	movq	%rax, %rcx
               	cmoveq	%rbp, %rcx
               	movl	%eax, (%rsp)
               	movq	%rcx, %rdx
               	shrq	$30, %rdx
               	xorq	%rcx, %rdx
               	imulq	%rbx, %rdx
               	movq	%rdx, %rsi
               	shrq	$27, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	movl	%ecx, 4(%rsp)
               	movq	%rcx, %rdx
               	cmoveq	%rbp, %rdx
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rdx
               	shrq	$31, %rdx
               	xorq	%rdi, %rdx
               	movl	%edx, 8(%rsp)
               	movq	%rdx, %rsi
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %r12
               	shrq	$31, %r12
               	xorq	%rsi, %r12
               	movl	%r12d, 12(%rsp)
               	movq	%r12, %rsi
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %r13
               	shrq	$31, %r13
               	xorq	%rsi, %r13
               	movq	%r13, %rdi
               	cmoveq	%rbp, %rdi
               	movl	%r13d, 16(%rsp)
               	movq	%rdi, %rsi
               	shrq	$30, %rsi
               	xorq	%rdi, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$31, %rsi
               	xorq	%rdi, %rsi
               	movl	%esi, 20(%rsp)
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	movl	%edi, 24(%rsp)
               	cmoveq	%rbp, %rdi
               	movq	%rdi, %rsi
               	shrq	$30, %rsi
               	xorq	%rdi, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$31, %rsi
               	xorl	%edi, %esi
               	movl	%esi, 28(%rsp)
               	movl	%eax, %r11d
               	shrl	$8, %r11d
               	movl	%eax, %r10d
               	shrl	$16, %r10d
               	movl	%eax, %r9d
               	shrl	$24, %r9d
               	movl	%ecx, %ebp
               	shrl	$8, %ebp
               	movl	%ecx, %r8d
               	shrl	$16, %r8d
               	movl	%ecx, %ebx
               	shrl	$24, %ebx
               	movl	%edx, %esi
               	shrl	$8, %esi
               	movl	%esi, 36(%rsp)
               	movl	%edx, %esi
               	shrl	$16, %esi
               	movl	%esi, 48(%rsp)
               	movl	%edx, %esi
               	shrl	$24, %esi
               	movl	%esi, 52(%rsp)
               	movl	%r12d, %esi
               	shrl	$8, %esi
               	movl	%esi, 32(%rsp)
               	movl	%r12d, %esi
               	shrl	$16, %esi
               	movl	%esi, 40(%rsp)
               	movl	%r12d, %esi
               	shrl	$24, %esi
               	movl	%esi, 44(%rsp)
               	movl	%r13d, %r15d
               	shrl	$8, %r15d
               	movl	%r13d, %edi
               	shrl	$16, %edi
               	movzbl	%al, %eax
               	movzbl	%r11b, %esi
               	shll	$8, %esi
               	orl	%eax, %esi
               	movzbl	%r10b, %eax
               	shll	$16, %eax
               	orl	%esi, %eax
               	movzbl	%r9b, %esi
               	shll	$24, %esi
               	orl	%eax, %esi
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 108(%r14)
               	movdqu	%xmm0, 92(%r14)
               	movdqu	%xmm0, 76(%r14)
               	movdqu	%xmm0, 60(%r14)
               	movdqu	%xmm0, 44(%r14)
               	movq	$0, 124(%r14)
               	movaps	107725(%rip), %xmm1     # 0x442fc0 <_IO_stdin_used+0x80>
               	movups	%xmm1, (%r14)
               	movl	%esi, 16(%r14)
               	movzbl	%cl, %eax
               	movzbl	%bpl, %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%r8b, %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	%bl, %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 20(%r14)
               	movzbl	%r13b, %eax
               	movzbl	20(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%dl, %eax
               	movzbl	%r12b, %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm1
               	pinsrw	$1, %ecx, %xmm1
               	movzbl	%r15b, %eax
               	movzbl	21(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	36(%rsp), %eax
               	movzbl	32(%rsp), %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm2
               	pinsrw	$1, %ecx, %xmm2
               	movzbl	%dil, %eax
               	movzbl	22(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	48(%rsp), %eax
               	movzbl	40(%rsp), %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm3
               	pinsrw	$1, %ecx, %xmm3
               	punpcklbw	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
               	pslld	$8, %xmm2
               	punpcklbw	%xmm0, %xmm3    # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3],xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
               	punpcklwd	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3]
               	por	%xmm1, %xmm0
               	movzbl	44(%rsp), %eax
               	movzbl	52(%rsp), %ecx
               	movd	%ecx, %xmm1
               	pinsrw	$2, %eax, %xmm1
               	por	%xmm2, %xmm0
               	movzbl	19(%rsp), %eax
               	pinsrw	$4, %eax, %xmm1
               	movzbl	23(%rsp), %eax
               	pinsrw	$6, %eax, %xmm1
               	pslld	$24, %xmm1
               	por	%xmm0, %xmm1
               	movdqu	%xmm1, 24(%r14)
               	movzbl	24(%rsp), %eax
               	movzbl	25(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	26(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	27(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 40(%r14)
               	movzbl	28(%rsp), %eax
               	movzbl	29(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	30(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	31(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 44(%r14)
               	movq	$0, 48(%r14)
               	movl	%r14d, 56(%r14)
               	movq	%r14, %rax
               	shrq	$32, %rax
               	movl	%eax, 60(%r14)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<_mi_heap_random_next>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	leaq	2880(%rdi), %r14
               	movl	3008(%rdi), %eax
               	testl	%eax, %eax
               	jg	0x428c92 <_mi_heap_random_next+0x32>
               	movq	%r14, %rdi
               	callq	0x431a80 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	movl	$16, %ebp
               	movl	$16, %ecx
               	subl	%eax, %ecx
               	movslq	%ecx, %rax
               	movl	2944(%rbx,%rax,4), %r15d
               	movl	$0, 2944(%rbx,%rax,4)
               	movl	3008(%rbx), %ecx
               	leal	-1(%rcx), %eax
               	movl	%eax, 3008(%rbx)
               	cmpl	$1, %ecx
               	jg	0x428cdf <_mi_heap_random_next+0x7f>
               	movq	%r14, %rdi
               	callq	0x431a80 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	shlq	$32, %r15
               	subl	%eax, %ebp
               	movslq	%ebp, %rcx
               	movl	2944(%rbx,%rcx,4), %eax
               	movl	$0, 2944(%rbx,%rcx,4)
               	movl	3008(%rbx), %ecx
               	addl	$-1, %ecx
               	movl	%ecx, 3008(%rbx)
               	orq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<mi_process_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$472, %rsp              # imm = 0x1D8
               	cmpb	$0, 243676(%rip)        # 0x464514 <_mi_process_is_initialized>
               	je	0x429440 <mi_process_done+0x720>
               	cmpb	$0, 343699(%rip)        # 0x47cbd8 <mi_process_done.process_done>
               	jne	0x429440 <mi_process_done+0x720>
               	movb	$1, 343686(%rip)        # 0x47cbd8 <mi_process_done.process_done>
               	movq	$-80, %rbx
               	movq	%fs:(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x42c660 <mi_heap_collect_ex>
               	movl	$1, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x428d89 <mi_process_done+0x69>
               	movl	$2, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429424 <mi_process_done+0x704>
               	callq	0x42a9b0 <mi_thread_init>
               	movq	%fs:(%rbx), %rax
               	movq	(%rax), %rdi
               	addq	$176, %rdi
               	callq	0x42c170 <mi_stats_merge_from>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	107040(%rip), %xmm0     # 0x442fd0 <_IO_stdin_used+0x90>
               	movups	%xmm0, 40(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	leaq	116880(%rip), %rdi      # 0x445659 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a0>
               	leaq	116866(%rip), %rbp      # 0x445652 <typeinfo name for kotlin::gc::GCSchedulerData+0x1699>
               	leaq	116849(%rip), %r10      # 0x445648 <typeinfo name for kotlin::gc::GCSchedulerData+0x168f>
               	leaq	116834(%rip), %r11      # 0x445640 <typeinfo name for kotlin::gc::GCSchedulerData+0x1687>
               	leaq	116764(%rip), %rdx      # 0x445601 <typeinfo name for kotlin::gc::GCSchedulerData+0x1648>
               	leaq	116794(%rip), %rcx      # 0x445626 <typeinfo name for kotlin::gc::GCSchedulerData+0x166d>
               	leaq	116798(%rip), %r8       # 0x445631 <typeinfo name for kotlin::gc::GCSchedulerData+0x1678>
               	leaq	116798(%rip), %r9       # 0x445638 <typeinfo name for kotlin::gc::GCSchedulerData+0x167f>
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %rbx
               	movq	%rbx, %rsi
               	movl	$0, %eax
               	pushq	%rdi
               	pushq	%rbp
               	pushq	%r10
               	pushq	%r11
               	callq	0x430b40 <_mi_fprintf>
               	addq	$32, %rsp
               	leaq	243552(%rip), %rdi      # 0x464580 <_mi_stats_main+0x40>
               	leaq	116794(%rip), %rsi      # 0x445661 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a8>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243461(%rip), %rbp      # 0x464540 <_mi_stats_main>
               	leaq	243550(%rip), %rdi      # 0x4645a0 <_mi_stats_main+0x60>
               	leaq	116769(%rip), %rsi      # 0x44566a <typeinfo name for kotlin::gc::GCSchedulerData+0x16b1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243555(%rip), %rdi      # 0x4645c0 <_mi_stats_main+0x80>
               	leaq	116752(%rip), %rsi      # 0x445674 <typeinfo name for kotlin::gc::GCSchedulerData+0x16bb>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243560(%rip), %rdi      # 0x4645e0 <_mi_stats_main+0xa0>
               	leaq	116731(%rip), %rsi      # 0x44567a <typeinfo name for kotlin::gc::GCSchedulerData+0x16c1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	116719(%rip), %rsi      # 0x445682 <typeinfo name for kotlin::gc::GCSchedulerData+0x16c9>
               	movq	%rbp, %rdi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243540(%rip), %rdi      # 0x464600 <_mi_stats_main+0xc0>
               	leaq	116696(%rip), %rbp      # 0x44568b <typeinfo name for kotlin::gc::GCSchedulerData+0x16d2>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243732(%rip), %rdi      # 0x4646e0 <_mi_stats_main+0x1a0>
               	leaq	116675(%rip), %rsi      # 0x445696 <typeinfo name for kotlin::gc::GCSchedulerData+0x16dd>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243319(%rip), %rdi      # 0x464560 <_mi_stats_main+0x20>
               	leaq	116654(%rip), %rsi      # 0x44569e <typeinfo name for kotlin::gc::GCSchedulerData+0x16e5>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243482(%rip), %rdi      # 0x464620 <_mi_stats_main+0xe0>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	leaq	243681(%rip), %rdi      # 0x464700 <_mi_stats_main+0x1c0>
               	leaq	116606(%rip), %rsi      # 0x4456a4 <typeinfo name for kotlin::gc::GCSchedulerData+0x16eb>
               	movq	%rbx, %rdx
               	callq	0x431930 <mi_stat_counter_print>
               	leaq	243707(%rip), %rdi      # 0x464730 <_mi_stats_main+0x1f0>
               	leaq	116594(%rip), %rsi      # 0x4456ae <typeinfo name for kotlin::gc::GCSchedulerData+0x16f5>
               	movq	%rbx, %rdx
               	callq	0x431930 <mi_stat_counter_print>
               	leaq	243653(%rip), %rdi      # 0x464710 <_mi_stats_main+0x1d0>
               	leaq	116582(%rip), %rsi      # 0x4456b8 <typeinfo name for kotlin::gc::GCSchedulerData+0x16ff>
               	movq	%rbx, %rdx
               	callq	0x431930 <mi_stat_counter_print>
               	leaq	243647(%rip), %rdi      # 0x464720 <_mi_stats_main+0x1e0>
               	leaq	116566(%rip), %rsi      # 0x4456be <typeinfo name for kotlin::gc::GCSchedulerData+0x1705>
               	movq	%rbx, %rdx
               	callq	0x431930 <mi_stat_counter_print>
               	leaq	243401(%rip), %rdi      # 0x464640 <_mi_stats_main+0x100>
               	leaq	116552(%rip), %rsi      # 0x4456c6 <typeinfo name for kotlin::gc::GCSchedulerData+0x170d>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430c60 <mi_stat_print>
               	movq	243636(%rip), %rcx      # 0x464748 <_mi_stats_main+0x208>
               	testq	%rcx, %rcx
               	je	0x428fc4 <mi_process_done+0x2a4>
               	movq	243616(%rip), %rax      # 0x464740 <_mi_stats_main+0x200>
               	addq	%rax, %rax
               	leaq	(%rax,%rax,4), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x428fbd <mi_process_done+0x29d>
               	cqto
               	idivq	%rcx
               	movq	%rax, %r14
               	jmp	0x428fc4 <mi_process_done+0x2a4>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %r14d
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%r14, %rax
               	imulq	%rcx
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %r8
               	addq	%rax, %r8
               	leaq	(%r8,%r8), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %r14
               	leaq	116439(%rip), %rdx      # 0x4456ce <typeinfo name for kotlin::gc::GCSchedulerData+0x1715>
               	leaq	116452(%rip), %rcx      # 0x4456e2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1729>
               	leaq	16(%rsp), %rsi
               	movq	%r14, %r9
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	277060(%rip), %r8       # 0x46ca58 <_mi_numa_node_count>
               	testq	%r8, %r8
               	je	0x429452 <mi_process_done+0x732>
               	leaq	116423(%rip), %rdx      # 0x4456eb <typeinfo name for kotlin::gc::GCSchedulerData+0x1732>
               	leaq	116427(%rip), %rcx      # 0x4456f6 <typeinfo name for kotlin::gc::GCSchedulerData+0x173d>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	277071(%rip), %rbx      # 0x46ca90 <mi_process_start>
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movq	72(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	addq	276997(%rip), %rbx      # 0x46ca88 <mi_clock_diff>
               	subq	%rbx, %rbp
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137c0 <getrusage@plt>
               	movq	72(%rsp), %rax
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$2361183241434822607, %r14 # imm = 0x20C49BA5E353F7CF
               	imulq	%r14
               	movq	%rdx, %r13
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r13
               	addq	%rax, %r13
               	addq	%rcx, %r13
               	movq	88(%rsp), %rax
               	imulq	$1000, 80(%rsp), %rcx   # imm = 0x3E8
               	imulq	%r14
               	movq	%rdx, %rbx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rbx
               	addq	%rax, %rbx
               	addq	%rcx, %rbx
               	movq	136(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	242870(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	movq	%rax, 8(%rsp)
               	movq	242866(%rip), %rax      # 0x4645b8 <_mi_stats_main+0x78>
               	movq	96(%rsp), %r12
               	shlq	$10, %r12
               	movq	%rbp, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %rbp
               	leaq	116170(%rip), %rdx      # 0x445701 <typeinfo name for kotlin::gc::GCSchedulerData+0x1748>
               	leaq	116183(%rip), %rcx      # 0x445715 <typeinfo name for kotlin::gc::GCSchedulerData+0x175c>
               	movq	%r15, %rsi
               	movq	%rbp, %r9
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	%r13, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %r13
               	movq	%rbx, %rax
               	imulq	%r14
               	movq	%rdx, %rdi
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rdi
               	addq	%rax, %rdi
               	imulq	$1000, %rdi, %rax       # imm = 0x3E8
               	subq	%rax, %rbx
               	subq	$8, %rsp
               	leaq	116101(%rip), %rdx      # 0x44571d <typeinfo name for kotlin::gc::GCSchedulerData+0x1764>
               	leaq	116159(%rip), %rcx      # 0x44575e <typeinfo name for kotlin::gc::GCSchedulerData+0x17a5>
               	movq	%r15, %rsi
               	movq	%r13, %r9
               	movl	$0, %eax
               	pushq	64(%rsp)
               	pushq	%rbx
               	pushq	%rdi
               	callq	0x430b40 <_mi_fprintf>
               	addq	$32, %rsp
               	movq	%r12, %rax
               	negq	%rax
               	cmovlq	%r12, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x4291f7 <mi_process_done+0x4d7>
               	leaq	116116(%rip), %rdx      # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	116116(%rip), %r8       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	8(%rsp), %rbx
               	jmp	0x4292c5 <mi_process_done+0x5a5>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	116075(%rip), %rcx      # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	116070(%rip), %rdx      # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	116037(%rip), %r9       # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%r12, %rax
               	shrq	$32, %rax
               	je	0x429259 <mi_process_done+0x539>
               	movq	%r12, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x429262 <mi_process_done+0x542>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	8(%rsp), %rbx
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	115909(%rip), %rbp      # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	115910(%rip), %rdx      # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x4137d0 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	116224(%rip), %rdx      # 0x4458cc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	testq	%rbx, %rbx
               	je	0x429411 <mi_process_done+0x6f1>
               	leaq	115861(%rip), %rdx      # 0x445782 <typeinfo name for kotlin::gc::GCSchedulerData+0x17c9>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	%rbx, %rax
               	negq	%rax
               	cmovlq	%rbx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x429331 <mi_process_done+0x611>
               	leaq	115796(%rip), %rdx      # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	115796(%rip), %r8       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%ebx, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4293f9 <mi_process_done+0x6d9>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	115761(%rip), %rcx      # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	115756(%rip), %rdx      # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	115723(%rip), %r9       # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x429393 <mi_process_done+0x673>
               	movq	%rbx, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x42939b <mi_process_done+0x67b>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	115601(%rip), %rbp      # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	115602(%rip), %rdx      # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x4137d0 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	115916(%rip), %rdx      # 0x4458cc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	116053(%rip), %rdx      # 0x44596d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	235397(%rip), %rsi      # 0x462bb0 <_mi_heap_main+0xb20>
               	leaq	115130(%rip), %rdi      # 0x4455ec <typeinfo name for kotlin::gc::GCSchedulerData+0x1633>
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movb	$0, 242496(%rip)        # 0x464780 <os_preloading>
               	addq	$472, %rsp              # imm = 0x1D8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42bf60 <_mi_os_numa_node_count_get>
               	movq	%rax, %r8
               	jmp	0x42901d <mi_process_done+0x2fd>
               	nop

<mi_process_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	cmpb	$0, 241823(%rip)        # 0x464514 <_mi_process_is_initialized>
               	je	0x429486 <mi_process_init+0x26>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	$1, 241799(%rip)        # 0x464514 <_mi_process_is_initialized>
               	cmpb	$0, 242413(%rip)        # 0x464781 <mi_process_setup_auto_thread_done.tls_initialized>
               	jne	0x4294d9 <mi_process_init+0x79>
               	movb	$1, 242404(%rip)        # 0x464781 <mi_process_setup_auto_thread_done.tls_initialized>
               	leaq	236236(%rip), %rdi      # 0x462f70 <_mi_heap_default_key>
               	leaq	3525(%rip), %rsi        # 0x42a270 <mi_pthread_done>
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	232409(%rip), %rax      # 0x462090 <_mi_heap_main>
               	movq	$-80, %rcx
               	movq	%rax, %fs:(%rcx)
               	movl	236200(%rip), %edi      # 0x462f70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x4294d9 <mi_process_init+0x79>
               	leaq	232380(%rip), %rsi      # 0x462090 <_mi_heap_main>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	%fs:0, %rsi
               	leaq	113456(%rip), %rdi      # 0x445019 <typeinfo name for kotlin::gc::GCSchedulerData+0x1060>
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movl	$30, %edi
               	callq	0x413800 <sysconf@plt>
               	testq	%rax, %rax
               	jle	0x429506 <mi_process_init+0xa6>
               	movq	%rax, 236146(%rip)      # 0x462f78 <os_page_size>
               	movb	$1, 275739(%rip)        # 0x46ca28 <large_os_page_size>
               	cmpq	$0, 235171(%rip)        # 0x462bb8 <_mi_heap_main+0xb28>
               	jne	0x42956b <mi_process_init+0x10b>
               	movq	%fs:0, %rax
               	movq	%rax, 235145(%rip)      # 0x462bb0 <_mi_heap_main+0xb20>
               	leaq	232290(%rip), %rbx      # 0x462090 <_mi_heap_main>
               	leaq	-4021(%rip), %rdi       # 0x428580 <mi_heap_main_init>
               	callq	0x4285f0 <_os_random_weak>
               	movq	%rax, 235127(%rip)      # 0x462bb8 <_mi_heap_main+0xb28>
               	leaq	235144(%rip), %rdi      # 0x462bd0 <_mi_heap_main+0xb40>
               	callq	0x428700 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 235108(%rip)      # 0x462bc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 235101(%rip)      # 0x462bc8 <_mi_heap_main+0xb38>
               	leaq	113340(%rip), %rdi      # 0x44502e <typeinfo name for kotlin::gc::GCSchedulerData+0x1075>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	callq	0x42a9b0 <mi_thread_init>
               	callq	0x42a9b0 <mi_thread_init>
               	movq	$-80, %r14
               	movq	%fs:(%r14), %rax
               	movq	(%rax), %rdi
               	addq	$176, %rdi
               	leaq	241567(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x4295b2 <mi_process_init+0x152>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	241543(%rip), %rdi      # 0x464540 <_mi_stats_main>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	cmpq	$0, 275651(%rip)        # 0x46ca90 <mi_process_start>
               	jne	0x429698 <mi_process_init+0x238>
               	cmpq	$0, 275629(%rip)        # 0x46ca88 <mi_clock_diff>
               	jne	0x429659 <mi_process_init+0x1f9>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
               	imulq	%rcx
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 275503(%rip)      # 0x46ca88 <mi_clock_diff>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rcx, %rdx
               	movq	%rdx, 275448(%rip)      # 0x46ca90 <mi_process_start>
               	movl	$7, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a04b <mi_process_init+0xbeb>
               	movl	$7, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a04b <mi_process_init+0xbeb>
               	movq	%rax, %rbx
               	movq	275344(%rip), %rax      # 0x46ca58 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x42a264 <mi_process_init+0xe04>
               	imulq	$500, %rbx, %rcx        # imm = 0x1F4
               	testq	%rax, %rax
               	movl	$1, %esi
               	cmovneq	%rax, %rsi
               	movq	%rbx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42971d <mi_process_init+0x2bd>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	je	0x429732 <mi_process_init+0x2d2>
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429736 <mi_process_init+0x2d6>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42973c <mi_process_init+0x2dc>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	jne	0x429707 <mi_process_init+0x2a7>
               	xorl	%eax, %eax
               	jmp	0x429740 <mi_process_init+0x2e0>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	addq	$50, %rax
               	leaq	(%rax,%rax), %rcx
               	movq	%rcx, 88(%rsp)
               	movq	%rax, 32(%rsp)
               	addq	$1, %rax
               	movq	%rax, 80(%rsp)
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	xorl	%ecx, %ecx
               	movq	%rsi, 40(%rsp)
               	nopl	(%rax,%rax)
               	xorl	%r12d, %r12d
               	cmpq	56(%rsp), %rcx
               	setb	%r12b
               	addq	48(%rsp), %r12
               	je	0x429eeb <mi_process_init+0xa8b>
               	testl	%ecx, %ecx
               	movq	%rbx, 72(%rsp)
               	movq	%rcx, 64(%rsp)
               	js	0x4297c0 <mi_process_init+0x360>
               	movl	%ecx, %ebp
               	movq	275130(%rip), %rcx      # 0x46ca58 <_mi_numa_node_count>
               	testq	%rcx, %rcx
               	je	0x429f37 <mi_process_init+0xad7>
               	cmpq	%rcx, %rbp
               	jb	0x4297b4 <mi_process_init+0x354>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %ebp
               	movq	%rbp, 24(%rsp)
               	jmp	0x4297ca <mi_process_init+0x36a>
               	nop
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movq	%rax, 24(%rsp)
               	movq	%r12, %rbp
               	shlq	$30, %rbp
               	movq	275112(%rip), %rbx      # 0x46ca80 <mi_huge_start>
               	jmp	0x4297f5 <mi_process_init+0x395>
               	nopl	(%rax)
               	leaq	(%r15,%rbp), %rcx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rcx, 275088(%rip)      # 0x46ca80 <mi_huge_start>
               	movq	%rax, %rbx
               	je	0x429820 <mi_process_init+0x3c0>
               	movq	%rbx, %r15
               	testq	%rbx, %rbx
               	jne	0x4297e0 <mi_process_init+0x380>
               	movq	%fs:(%r14), %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, %r15
               	andl	$536739840, %r15d       # imm = 0x1FFE0000
               	shlq	$13, %r15
               	orq	%r13, %r15
               	jmp	0x4297e0 <mi_process_init+0x380>
               	cmpq	$0, 275040(%rip)        # 0x46ca88 <mi_clock_diff>
               	jne	0x4298a7 <mi_process_init+0x447>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
               	imulq	%rcx
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	xorl	%edi, %edi
               	movq	%r14, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	subq	%rbp, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rcx, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 274913(%rip)      # 0x46ca88 <mi_clock_diff>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	movl	$1, %eax
               	movq	24(%rsp), %rcx
               	shlq	%cl, %rax
               	movq	%rax, 96(%rsp)
               	xorl	%r13d, %r13d
               	cmpl	$64, %ecx
               	jb	0x42992c <mi_process_init+0x4cc>
               	jmp	0x429b52 <mi_process_init+0x6f2>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429f12 <mi_process_init+0xab2>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429e00 <mi_process_init+0x9a0>
               	movq	%r13, %r14
               	shlq	$30, %r14
               	addq	%r15, %r14
               	movq	274699(%rip), %rax      # 0x46ca48 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 274700(%rip)        # 0x46ca50 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x4299c7 <mi_process_init+0x567>
               	movb	$1, 274640(%rip)        # 0x46ca50 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	112551(%rip), %rdi      # 0x445135 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jb	0x429a23 <mi_process_init+0x5c3>
               	movq	%rax, %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movl	$0, (%rsp)
               	movl	$237, %edi
               	movl	$1073741824, %edx       # imm = 0x40000000
               	movl	$1, %ecx
               	movl	$64, %r9d
               	movq	%rbx, %rsi
               	leaq	8(%rsp), %r8
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	testq	%rax, %rax
               	je	0x429a23 <mi_process_init+0x5c3>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	112605(%rip), %rdi      # 0x4451f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1238>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	cmpq	%r14, %rbx
               	jne	0x429d10 <mi_process_init+0x8b0>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 240510(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	240488(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x429a60 <mi_process_init+0x600>
               	lock
               	cmpxchgq	%rcx, 240466(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x429a50 <mi_process_init+0x5f0>
               	lock
               	addq	$1073741824, 240436(%rip) # imm = 0x40000000
                                                # 0x4645a0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 240414(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	240392(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429aa0 <mi_process_init+0x640>
               	lock
               	cmpxchgq	%rcx, 240370(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x429a90 <mi_process_init+0x630>
               	lock
               	addq	$1073741824, 240340(%rip) # imm = 0x40000000
                                                # 0x464580 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x42991f <mi_process_init+0x4bf>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	274321(%rip), %rax      # 0x46ca88 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x429916 <mi_process_init+0x4b6>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429901 <mi_process_init+0x4a1>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429907 <mi_process_init+0x4a7>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429f12 <mi_process_init+0xab2>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429e00 <mi_process_init+0x9a0>
               	movq	%r13, %r14
               	shlq	$30, %r14
               	addq	%r15, %r14
               	movq	274149(%rip), %rax      # 0x46ca48 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 274150(%rip)        # 0x46ca50 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x429bee <mi_process_init+0x78e>
               	movb	$1, 274090(%rip)        # 0x46ca50 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	112001(%rip), %rdi      # 0x445135 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jae	0x429d00 <mi_process_init+0x8a0>
               	cmpq	%r14, %rbx
               	jne	0x429d10 <mi_process_init+0x8b0>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 240051(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	240029(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429c30 <mi_process_init+0x7d0>
               	lock
               	cmpxchgq	%rcx, 240002(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x429c20 <mi_process_init+0x7c0>
               	lock
               	addq	$1073741824, 239972(%rip) # imm = 0x40000000
                                                # 0x4645a0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 239950(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	239928(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429c70 <mi_process_init+0x810>
               	lock
               	cmpxchgq	%rcx, 239906(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x429c60 <mi_process_init+0x800>
               	lock
               	addq	$1073741824, 239876(%rip) # imm = 0x40000000
                                                # 0x464580 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x429b45 <mi_process_init+0x6e5>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	273857(%rip), %rax      # 0x46ca88 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x429b3c <mi_process_init+0x6dc>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429b27 <mi_process_init+0x6c7>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429b2d <mi_process_init+0x6cd>
               	nopw	(%rax,%rax)
               	movq	%rax, %rbx
               	cmpq	%r14, %rbx
               	je	0x429bf7 <mi_process_init+0x797>
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	movq	24(%rsp), %rbp
               	je	0x429e08 <mi_process_init+0x9a8>
               	leaq	111873(%rip), %rdi      # 0x445226 <typeinfo name for kotlin::gc::GCSchedulerData+0x126d>
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%rbx, %rdi
               	callq	0x413840 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 239721(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	239697(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rdx, %rax
               	jge	0x429d70 <mi_process_init+0x910>
               	lock
               	cmpxchgq	%rdx, 239682(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x429d60 <mi_process_init+0x900>
               	lock
               	addq	$1073741824, 239660(%rip) # imm = 0x40000000
                                                # 0x4645a8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 239628(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	239606(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429db0 <mi_process_init+0x950>
               	lock
               	cmpxchgq	%rdx, 239586(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x429da0 <mi_process_init+0x940>
               	lock
               	addq	$1073741824, 239564(%rip) # imm = 0x40000000
                                                # 0x464588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429e08 <mi_process_init+0x9a8>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	leaq	111282(%rip), %rdi      # 0x44508f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	jne	0x429e18 <mi_process_init+0x9b8>
               	jmp	0x429f4d <mi_process_init+0xaed>
               	nop
               	movq	%r12, %r13
               	movq	24(%rsp), %rbp
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	je	0x429f4d <mi_process_init+0xaed>
               	testq	%r13, %r13
               	je	0x429f4d <mi_process_init+0xaed>
               	leaq	111493(%rip), %rdi      # 0x4451ad <typeinfo name for kotlin::gc::GCSchedulerData+0x11f4>
               	movl	%ebp, %esi
               	movq	%r13, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	movabsq	$1099511627712, %rax    # imm = 0xFFFFFFFFC0
               	andq	%rax, %rbx
               	movq	%rbx, %rdi
               	shrq	$2, %rdi
               	addq	$64, %rdi
               	callq	0x42b810 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x429f63 <mi_process_init+0xb03>
               	movq	%rbx, 8(%rax)
               	shrq	$6, %rbx
               	movq	%rbx, 16(%rax)
               	xchgq	%r15, (%rax)
               	movl	%ebp, 24(%rax)
               	movb	$1, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	movl	$0, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	56(%rax,%rbx,8), %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 239896(%rip)      # 0x4647c0 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x429ec0 <mi_process_init+0xa60>
               	lock
               	subq	$1, 239877(%rip)        # 0x4647c0 <mi_arena_count>
               	jmp	0x429ecb <mi_process_init+0xa6b>
               	leaq	239929(%rip), %rdx      # 0x464800 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	movq	$-80, %r14
               	movq	72(%rsp), %rbx
               	movq	40(%rsp), %rsi
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	movq	64(%rsp), %rcx
               	movq	%rbx, %rax
               	movl	$0, %ebx
               	subq	%r12, %rax
               	cmovaeq	%rax, %rbx
               	jbe	0x42a04b <mi_process_init+0xbeb>
               	addq	$1, %rcx
               	cmpq	%rsi, %rcx
               	jb	0x429770 <mi_process_init+0x310>
               	jmp	0x42a04b <mi_process_init+0xbeb>
               	movq	24(%rsp), %rbp
               	leaq	111419(%rip), %rdi      # 0x445259 <typeinfo name for kotlin::gc::GCSchedulerData+0x12a0>
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	jne	0x429e18 <mi_process_init+0x9b8>
               	jmp	0x429f4d <mi_process_init+0xaed>
               	callq	0x42bf60 <_mi_os_numa_node_count_get>
               	movq	%rax, %rcx
               	cmpq	%rcx, %rbp
               	jae	0x4297ac <mi_process_init+0x34c>
               	jmp	0x4297b4 <mi_process_init+0x354>
               	leaq	111156(%rip), %rdi      # 0x445188 <typeinfo name for kotlin::gc::GCSchedulerData+0x11cf>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	jmp	0x42a04b <mi_process_init+0xbeb>
               	shlq	$30, %r13
               	je	0x42a04b <mi_process_init+0xbeb>
               	leaq	110875(%rip), %rbx      # 0x44508f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	jmp	0x429f8d <mi_process_init+0xb2d>
               	nopl	(%rax)
               	addq	$-1073741824, %r13      # imm = 0xC0000000
               	je	0x42a04b <mi_process_init+0xbeb>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	callq	0x413840 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 239118(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	239094(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429fd0 <mi_process_init+0xb70>
               	lock
               	cmpxchgq	%rdx, 239074(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x429fc0 <mi_process_init+0xb60>
               	lock
               	addq	$1073741824, 239052(%rip) # imm = 0x40000000
                                                # 0x4645a8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 239020(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	238998(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42a010 <mi_process_init+0xbb0>
               	lock
               	cmpxchgq	%rdx, 238978(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42a000 <mi_process_init+0xba0>
               	lock
               	addq	$1073741824, 238956(%rip) # imm = 0x40000000
                                                # 0x464588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429f80 <mi_process_init+0xb20>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	jmp	0x429f80 <mi_process_init+0xb20>
               	movl	$8, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429477 <mi_process_init+0x17>
               	movl	$8, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	jle	0x429477 <mi_process_init+0x17>
               	movq	%rax, %rbx
               	shlq	$10, %rbx
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42a08a <mi_process_init+0xc2a>
               	movq	233200(%rip), %rcx      # 0x462f78 <os_page_size>
               	jmp	0x42a0bb <mi_process_init+0xc5b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42a0bb <mi_process_init+0xc5b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42a0bb <mi_process_init+0xc5b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rax, %rbx
               	jae	0x42a0fd <mi_process_init+0xc9d>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42a0de <mi_process_init+0xc7e>
               	negq	%rcx
               	andq	%rcx, %rbx
               	jmp	0x42a0fd <mi_process_init+0xc9d>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42a0f4 <mi_process_init+0xc94>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42a0fa <mi_process_init+0xc9a>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	movb	$1, 8(%rsp)
               	leaq	8(%rsp), %rdx
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42afc0 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x429477 <mi_process_init+0x17>
               	movq	%rax, %r13
               	movb	8(%rsp), %al
               	movb	%al, 32(%rsp)
               	leaq	16777215(%rbx), %r12
               	movq	%r12, %r15
               	shrq	$24, %r15
               	leaq	63(%r15), %r14
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	movq	%rbp, %rdi
               	shlq	$4, %rdi
               	addq	$64, %rdi
               	callq	0x42b810 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x42a1f0 <mi_process_init+0xd90>
               	movq	%r15, 8(%rax)
               	movq	%rbp, 16(%rax)
               	xchgq	%r13, (%rax)
               	movl	$4294967295, 24(%rax)   # imm = 0xFFFFFFFF
               	movb	32(%rsp), %cl
               	movb	%cl, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	(%rax,%rbp,8), %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	andq	$-64, %r14
               	subq	%r15, %r14
               	jle	0x42a1d1 <mi_process_init+0xd71>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	shrq	$30, %r12
               	movq	$-1, %rsi
               	movq	$-1, %rdi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%r15d, %ecx
               	shlq	%cl, %rdi
               	cmpq	$63, %r14
               	cmovaq	%rsi, %rdi
               	lock
               	orq	%rdi, (%rdx,%r12,8)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 239073(%rip)      # 0x4647c0 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x42a221 <mi_process_init+0xdc1>
               	lock
               	subq	$1, 239058(%rip)        # 0x4647c0 <mi_arena_count>
               	jmp	0x42a22c <mi_process_init+0xdcc>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42b9e0 <_mi_os_free_ex>
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	leaq	110126(%rip), %rdi      # 0x445040 <typeinfo name for kotlin::gc::GCSchedulerData+0x1087>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	jmp	0x429477 <mi_process_init+0x17>
               	leaq	239064(%rip), %rdx      # 0x464800 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	cmpb	$0, 8(%rsp)
               	leaq	112264(%rip), %rax      # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	leaq	110102(%rip), %rdx      # 0x445060 <typeinfo name for kotlin::gc::GCSchedulerData+0x10a7>
               	cmoveq	%rax, %rdx
               	leaq	110112(%rip), %rdi      # 0x445075 <typeinfo name for kotlin::gc::GCSchedulerData+0x10bc>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	jmp	0x429477 <mi_process_init+0x17>
               	callq	0x42bf60 <_mi_os_numa_node_count_get>
               	jmp	0x4296d1 <mi_process_init+0x271>
               	nop

<mi_pthread_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	testq	%rdi, %rdi
               	je	0x42a348 <mi_pthread_done+0xd8>
               	movq	%rdi, %rbx
               	movq	$-1, %rcx
               	lock
               	xaddq	%rcx, 238526(%rip)      # 0x464658 <_mi_stats_main+0x118>
               	addq	$-1, %rcx
               	movq	238507(%rip), %rax      # 0x464650 <_mi_stats_main+0x110>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42a2c0 <mi_pthread_done+0x50>
               	lock
               	cmpxchgq	%rcx, 238482(%rip)      # 0x464650 <_mi_stats_main+0x110>
               	jne	0x42a2b0 <mi_pthread_done+0x40>
               	lock
               	addq	$1, 238463(%rip)        # 0x464648 <_mi_stats_main+0x108>
               	movq	2848(%rbx), %rax
               	movq	%fs:0, %rcx
               	leaq	218784(%rip), %r13      # 0x45f980 <_mi_heap_empty>
               	cmpq	%r13, %rbx
               	je	0x42a348 <mi_pthread_done+0xd8>
               	cmpq	%rcx, %rax
               	jne	0x42a348 <mi_pthread_done+0xd8>
               	leaq	228767(%rip), %rdx      # 0x462090 <_mi_heap_main>
               	movq	231608(%rip), %rcx      # 0x462bb0 <_mi_heap_main+0xb20>
               	cmpq	%rax, %rcx
               	movq	%r13, %rsi
               	cmoveq	%rdx, %rsi
               	testq	%rcx, %rcx
               	cmoveq	%rdx, %rsi
               	movq	$-80, %r12
               	movq	%rsi, %fs:(%r12)
               	movl	232533(%rip), %edi      # 0x462f70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a325 <mi_pthread_done+0xb5>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	(%rbx), %rax
               	movq	16(%rax), %r15
               	cmpq	%r13, %r15
               	je	0x42a348 <mi_pthread_done+0xd8>
               	movq	(%r15), %rax
               	movq	24(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x42a81d <mi_pthread_done+0x5ad>
               	movq	%r15, 8(%rsp)
               	jmp	0x42a369 <mi_pthread_done+0xf9>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r14, %rdi
               	callq	0x430500 <mi_free>
               	nop
               	testq	%rbx, %rbx
               	je	0x42a81d <mi_pthread_done+0x5ad>
               	movq	%rbx, %r14
               	movq	3040(%rbx), %rbx
               	cmpq	%r15, %r14
               	je	0x42a360 <mi_pthread_done+0xf0>
               	testq	%r14, %r14
               	je	0x42a360 <mi_pthread_done+0xf0>
               	cmpq	%r13, %r14
               	je	0x42a360 <mi_pthread_done+0xf0>
               	movq	%rbx, 32(%rsp)
               	movq	(%r14), %rax
               	movq	16(%rax), %rbp
               	cmpq	%r14, %rbp
               	je	0x42a78e <mi_pthread_done+0x51e>
               	cmpq	$0, 3016(%r14)
               	je	0x42a79b <mi_pthread_done+0x52b>
               	movq	2840(%r14), %rax
               	testq	%rax, %rax
               	je	0x42a3e0 <mi_pthread_done+0x170>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a3b0 <mi_pthread_done+0x140>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f550 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a3d0 <mi_pthread_done+0x160>
               	leaq	1040(%rbp), %r10
               	leaq	1016(%rbp), %r12
               	leaq	120(%rbp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	24(%rbp), %rax
               	movq	%rax, 24(%rsp)
               	xorl	%edi, %edi
               	jmp	0x42a446 <mi_pthread_done+0x1d6>
               	nopw	(%rax,%rax)
               	xorl	%edx, %edx
               	movq	3016(%rbp), %rax
               	addq	%rdx, %rax
               	movq	%rax, 3016(%rbp)
               	movq	3016(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 3016(%r14)
               	addq	$1, %rdi
               	addq	$24, %r12
               	cmpq	$75, %rdi
               	je	0x42a703 <mi_pthread_done+0x493>
               	leaq	(,%rdi,8), %rax
               	leaq	(%rax,%rax,2), %rcx
               	movq	1040(%r14,%rcx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a410 <mi_pthread_done+0x1a0>
               	leaq	(%rcx,%rbp), %r8
               	addq	$1040, %r8              # imm = 0x410
               	leaq	(%r14,%rcx), %r9
               	addq	$1040, %r9              # imm = 0x410
               	xorl	%edx, %edx
               	jmp	0x42a48d <mi_pthread_done+0x21d>
               	addq	$1, %rdx
               	movq	48(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a4c0 <mi_pthread_done+0x250>
               	movq	%rbp, 40(%rbx)
               	movq	32(%rbx), %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	je	0x42a480 <mi_pthread_done+0x210>
               	cmpl	$3, %esi
               	je	0x42a480 <mi_pthread_done+0x210>
               	cmpl	$1, %esi
               	je	0x42a4b7 <mi_pthread_done+0x247>
               	movq	%rax, %rsi
               	andq	$-4, %rsi
               	lock
               	cmpxchgq	%rsi, 32(%rbx)
               	jne	0x42a491 <mi_pthread_done+0x221>
               	jmp	0x42a480 <mi_pthread_done+0x210>
               	pause
               	jmp	0x42a491 <mi_pthread_done+0x221>
               	nop
               	leaq	(%rdi,%rdi,2), %rbx
               	leaq	1048(,%rbx,8), %rax
               	addq	%rbp, %rax
               	movq	1048(%rbp,%rbx,8), %rsi
               	movq	(%r9), %r15
               	testq	%rsi, %rsi
               	je	0x42a500 <mi_pthread_done+0x290>
               	movq	%r15, 48(%rsi)
               	movq	%rsi, 56(%r15)
               	movq	1048(%r14,%rbx,8), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x42a412 <mi_pthread_done+0x1a2>
               	nopl	(%rax,%rax)
               	movq	%r15, (%r8)
               	movq	1048(%r14,%rcx), %rsi
               	movq	%rsi, (%rax)
               	movq	1056(%rbp,%rcx), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42a412 <mi_pthread_done+0x1a2>
               	testq	%r15, %r15
               	leaq	113940(%rip), %rcx      # 0x446240 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r15, 8(%rbp,%r11,8)
               	je	0x42a412 <mi_pthread_done+0x1a2>
               	cmpq	$9, %rax
               	jae	0x42a550 <mi_pthread_done+0x2e0>
               	xorl	%ecx, %ecx
               	jmp	0x42a602 <mi_pthread_done+0x392>
               	cmpq	$64, %rax
               	ja	0x42a560 <mi_pthread_done+0x2f0>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42a57b <mi_pthread_done+0x30b>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	movq	%r12, %rsi
               	nop
               	movq	16(%rsi), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42a5e0 <mi_pthread_done+0x370>
               	cmpq	$71, %rax
               	ja	0x42a5b0 <mi_pthread_done+0x340>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42a5e0 <mi_pthread_done+0x370>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42a5e0 <mi_pthread_done+0x370>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r9
               	movl	%r9d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r9,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%r10, %rsi
               	jbe	0x42a5ee <mi_pthread_done+0x37e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r8b
               	je	0x42a580 <mi_pthread_done+0x310>
               	leaq	1(%rbx), %rcx
               	cmpq	%r11, %rbx
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42a412 <mi_pthread_done+0x1a2>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42a6f0 <mi_pthread_done+0x480>
               	movq	%r8, %r9
               	andq	$-4, %r9
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r9), %rbx
               	movq	%rbx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	cmpq	$12, %rbx
               	jae	0x42a645 <mi_pthread_done+0x3d5>
               	xorl	%ebx, %ebx
               	jmp	0x42a6a2 <mi_pthread_done+0x432>
               	movq	16(%rsp), %rbx
               	leaq	(%rbx,%rcx,8), %r13
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbx,8)
               	movdqu	%xmm0, -96(%r13,%rbx,8)
               	movdqu	%xmm0, -80(%r13,%rbx,8)
               	movdqu	%xmm0, -64(%r13,%rbx,8)
               	movdqu	%xmm0, -48(%r13,%rbx,8)
               	movdqu	%xmm0, -32(%r13,%rbx,8)
               	movdqu	%xmm0, -16(%r13,%rbx,8)
               	movdqu	%xmm0, (%r13,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42a660 <mi_pthread_done+0x3f0>
               	testq	%rsi, %rsi
               	je	0x42a6d2 <mi_pthread_done+0x462>
               	addq	%rcx, %rbx
               	movq	24(%rsp), %rax
               	leaq	(%rax,%rbx,8), %rax
               	negq	%rsi
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x42a6c0 <mi_pthread_done+0x450>
               	cmpq	%r9, %r8
               	leaq	217764(%rip), %r13      # 0x45f980 <_mi_heap_empty>
               	je	0x42a412 <mi_pthread_done+0x1a2>
               	addq	%r9, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, 8(%rbp,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42a6f0 <mi_pthread_done+0x480>
               	jmp	0x42a412 <mi_pthread_done+0x1a2>
               	movq	2840(%r14), %rax
               	movq	8(%rsp), %r15
               	movq	$-80, %r12
               	nopw	%cs:(%rax,%rax)
               	testq	%rax, %rax
               	je	0x42a750 <mi_pthread_done+0x4e0>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a720 <mi_pthread_done+0x4b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f550 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a740 <mi_pthread_done+0x4d0>
               	leaq	8(%r14), %rdi
               	movl	$1032, %edx             # imm = 0x408
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	1040(%r14), %rdi
               	movl	$1800, %edx             # imm = 0x708
               	leaq	218653(%rip), %rsi      # 0x45fd90 <_mi_heap_empty+0x410>
               	callq	0x4136f0 <memcpy@plt>
               	xorl	%eax, %eax
               	xchgq	%rax, 2840(%r14)
               	movq	$0, 3016(%r14)
               	jmp	0x42a79b <mi_pthread_done+0x52b>
               	movq	%r14, %rdi
               	movl	$2, %esi
               	callq	0x42c660 <mi_heap_collect_ex>
               	movq	(%r14), %rax
               	movq	16(%rax), %rsi
               	cmpq	%r14, %rsi
               	movq	32(%rsp), %rbx
               	je	0x42a360 <mi_pthread_done+0xf0>
               	cmpq	%r14, %fs:(%r12)
               	jne	0x42a7cf <mi_pthread_done+0x55f>
               	movq	%rsi, %fs:(%r12)
               	movl	231342(%rip), %edi      # 0x462f70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a7cc <mi_pthread_done+0x55c>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	(%r14), %rax
               	addq	$24, %rax
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	nopl	(%rax,%rax)
               	movq	%rdx, %rcx
               	movq	(%rsi), %rdx
               	cmpq	%r14, %rdx
               	je	0x42a7f7 <mi_pthread_done+0x587>
               	leaq	3040(%rdx), %rsi
               	testq	%rdx, %rdx
               	jne	0x42a7e0 <mi_pthread_done+0x570>
               	cmpq	%r14, %rdx
               	jne	0x42a357 <mi_pthread_done+0xe7>
               	leaq	3040(%rcx), %rdx
               	testq	%rcx, %rcx
               	movq	3040(%r14), %rcx
               	cmoveq	%rax, %rdx
               	movq	%rcx, (%rdx)
               	jmp	0x42a357 <mi_pthread_done+0xe7>
               	leaq	227436(%rip), %rax      # 0x462090 <_mi_heap_main>
               	cmpq	%rax, %r15
               	je	0x42a865 <mi_pthread_done+0x5f5>
               	movq	%r15, %rdi
               	movl	$2, %esi
               	callq	0x42c660 <mi_heap_collect_ex>
               	movq	(%r15), %rdi
               	addq	$176, %rdi
               	callq	0x42c170 <mi_stats_merge_from>
               	movl	$3808, %esi             # imm = 0xEE0
               	movq	%r15, %rdi
               	movl	$1, %edx
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42b9e0 <_mi_os_free_ex>
               	movq	(%r15), %rdi
               	addq	$176, %rdi
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42c170 <mi_stats_merge_from>
               	nopw	%cs:(%rax,%rax)

<_mi_verbose_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42a8dc <_mi_verbose_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	movl	$2, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a99a <_mi_verbose_message+0x10a>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42a99a <_mi_verbose_message+0x10a>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42a99a <_mi_verbose_message+0x10a>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	237724(%rip), %r12      # 0x464a08 <mi_out_arg>
               	movq	237725(%rip), %rax      # 0x464a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	5075(%rip), %rbx        # 0x42bd50 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	109301(%rip), %rdi      # 0x44547d <typeinfo name for kotlin::gc::GCSchedulerData+0x14c4>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<mi_thread_init>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	callq	0x429460 <mi_process_init>
               	movq	$-80, %r14
               	leaq	217016(%rip), %rax      # 0x45f980 <_mi_heap_empty>
               	cmpq	%rax, %fs:(%r14)
               	je	0x42a9d4 <mi_thread_init+0x24>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	229845(%rip), %rax      # 0x462bb0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42a9f2 <mi_thread_init+0x42>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42aa76 <mi_thread_init+0xc6>
               	cmpq	$0, 229822(%rip)        # 0x462bb8 <_mi_heap_main+0xb28>
               	jne	0x42aa50 <mi_thread_init+0xa0>
               	movq	%fs:0, %rax
               	movq	%rax, 229796(%rip)      # 0x462bb0 <_mi_heap_main+0xb20>
               	leaq	226941(%rip), %rbx      # 0x462090 <_mi_heap_main>
               	leaq	-9370(%rip), %rdi       # 0x428580 <mi_heap_main_init>
               	callq	0x4285f0 <_os_random_weak>
               	movq	%rax, 229778(%rip)      # 0x462bb8 <_mi_heap_main+0xb28>
               	leaq	229795(%rip), %rdi      # 0x462bd0 <_mi_heap_main+0xb40>
               	callq	0x428700 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 229759(%rip)      # 0x462bc0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 229752(%rip)      # 0x462bc8 <_mi_heap_main+0xb38>
               	leaq	226873(%rip), %rax      # 0x462090 <_mi_heap_main>
               	movq	%rax, %fs:(%r14)
               	movl	230671(%rip), %edi      # 0x462f70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42ab51 <mi_thread_init+0x1a1>
               	leaq	226847(%rip), %rsi      # 0x462090 <_mi_heap_main>
               	jmp	0x42ab4c <mi_thread_init+0x19c>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b810 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42aa9e <mi_thread_init+0xee>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b810 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x42ab8f <mi_thread_init+0x1df>
               	leaq	3056(%rbx), %r15
               	leaq	216788(%rip), %rsi      # 0x45f980 <_mi_heap_empty>
               	movl	$3056, %edx             # imm = 0xBF0
               	movq	%rbx, %rdi
               	callq	0x4136f0 <memcpy@plt>
               	movq	%fs:0, %rax
               	movq	%rax, 2848(%rbx)
               	leaq	2880(%rbx), %rdi
               	callq	0x428700 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	orq	$1, %rax
               	movq	%rax, 2856(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 2864(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	movq	%rax, 2872(%rbx)
               	movq	%r15, (%rbx)
               	movq	%rbx, 3072(%rbx)
               	movq	%rbx, 3080(%rbx)
               	leaq	3232(%rbx), %rax
               	movq	%rax, 3200(%rbx)
               	leaq	3216(%rbx), %rcx
               	movq	%rcx, 3208(%rbx)
               	movq	%rax, 3224(%rbx)
               	movq	%rbx, %fs:(%r14)
               	movl	230444(%rip), %edi      # 0x462f70 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42ab51 <mi_thread_init+0x1a1>
               	movq	%rbx, %rsi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 236281(%rip)      # 0x464658 <_mi_stats_main+0x118>
               	leaq	1(%rcx), %rdx
               	movq	236262(%rip), %rax      # 0x464650 <_mi_stats_main+0x110>
               	nopw	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jg	0x42ab80 <mi_thread_init+0x1d0>
               	lock
               	cmpxchgq	%rdx, 236242(%rip)      # 0x464650 <_mi_stats_main+0x110>
               	jne	0x42ab70 <mi_thread_init+0x1c0>
               	lock
               	addq	$1, 236215(%rip)        # 0x464640 <_mi_stats_main+0x100>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	108698(%rip), %rsi      # 0x445430 <typeinfo name for kotlin::gc::GCSchedulerData+0x1477>
               	movl	$3808, %edx             # imm = 0xEE0
               	movl	$12, %edi
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	jmp	0x42ab51 <mi_thread_init+0x1a1>
               	nopl	(%rax)

<mi_option_get>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%edi, %eax
               	leaq	(%rax,%rax,2), %rbx
               	leaq	230338(%rip), %r13      # 0x462f90 <options>
               	leaq	(,%rbx,8), %r12
               	addq	%r13, %r12
               	cmpl	$0, 8(%r13,%rbx,8)
               	je	0x42abf7 <mi_option_get+0x47>
               	movq	(%r12), %rax
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	8(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 80(%rsp)
               	leaq	108190(%rip), %rsi      # 0x4452b1 <typeinfo name for kotlin::gc::GCSchedulerData+0x12f8>
               	leaq	80(%rsp), %r14
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 144(%rsp)
               	movq	16(%r13,%rbx,8), %rsi
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413870 <strncat@plt>
               	movb	$0, 144(%rsp)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, %rcx
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x42ae10 <mi_option_get+0x260>
               	movq	222057(%rip), %rax      # 0x460fd0 <write+0x460fd0>
               	movq	(%rax), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	je	0x42ae10 <mi_option_get+0x260>
               	movb	80(%rsp), %al
               	movb	%al, 15(%rsp)
               	testb	%al, %al
               	je	0x42ad50 <mi_option_get+0x1a0>
               	xorl	%ecx, %ecx
               	jmp	0x42acb1 <mi_option_get+0x101>
               	movq	32(%rsp), %rax
               	cmpb	$61, (%rdx,%rax)
               	je	0x42ada5 <mi_option_get+0x1f5>
               	movq	56(%rsp), %rcx
               	addq	$1, %rcx
               	cmpq	$256, %rcx              # imm = 0x100
               	je	0x42ae10 <mi_option_get+0x260>
               	movq	40(%rsp), %rax
               	movq	(%rax,%rcx,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ae10 <mi_option_get+0x260>
               	movq	%rcx, 56(%rsp)
               	xorl	%r14d, %r14d
               	movb	15(%rsp), %al
               	movl	%eax, %esi
               	movq	32(%rsp), %r15
               	movq	%rdx, 64(%rsp)
               	testq	%r15, %r15
               	je	0x42ad33 <mi_option_get+0x183>
               	movzbl	(%rdx,%r14), %ebp
               	testb	%bpl, %bpl
               	je	0x42ad33 <mi_option_get+0x183>
               	movsbq	%bpl, %rax
               	movq	%rax, 72(%rsp)
               	movl	%esi, 52(%rsp)
               	callq	0x413880 <__ctype_toupper_loc@plt>
               	movl	52(%rsp), %esi
               	movq	(%rax), %rax
               	movsbq	%sil, %rcx
               	movq	72(%rsp), %rdx
               	movl	(%rax,%rdx,4), %edx
               	cmpl	%edx, (%rax,%rcx,4)
               	movq	64(%rsp), %rdx
               	jne	0x42ad42 <mi_option_get+0x192>
               	addq	$-1, %r15
               	movzbl	81(%rsp,%r14), %esi
               	addq	$1, %r14
               	testb	%sil, %sil
               	jne	0x42acdb <mi_option_get+0x12b>
               	addq	%rdx, %r14
               	xorl	%esi, %esi
               	jmp	0x42ad36 <mi_option_get+0x186>
               	addq	%rdx, %r14
               	testq	%r15, %r15
               	je	0x42ac8c <mi_option_get+0xdc>
               	movb	(%r14), %bpl
               	cmpb	%bpl, %sil
               	je	0x42ac8c <mi_option_get+0xdc>
               	jmp	0x42ac9b <mi_option_get+0xeb>
               	xorl	%eax, %eax
               	jmp	0x42ad64 <mi_option_get+0x1b4>
               	addq	$2, %rax
               	cmpq	$256, %rax              # imm = 0x100
               	je	0x42ae10 <mi_option_get+0x260>
               	movq	40(%rsp), %rcx
               	movq	(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ae10 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42ad86 <mi_option_get+0x1d6>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	je	0x42ada5 <mi_option_get+0x1f5>
               	movq	40(%rsp), %rcx
               	movq	8(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ae10 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42ad54 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	jne	0x42ad54 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rax
               	leaq	(%rdx,%rax), %rsi
               	addq	$1, %rsi
               	movb	$0, 160(%rsp)
               	leaq	160(%rsp), %r14
               	movl	$64, %r15d
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 224(%rsp)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	cmpq	$64, %rax
               	cmovbq	%rax, %r15
               	testq	%r15, %r15
               	je	0x42aebb <mi_option_get+0x30b>
               	callq	0x413880 <__ctype_toupper_loc@plt>
               	leaq	-1(%r15), %rdx
               	movl	%r15d, %r8d
               	andl	$3, %r8d
               	cmpq	$3, %rdx
               	jae	0x42ae2d <mi_option_get+0x27d>
               	xorl	%edx, %edx
               	jmp	0x42ae8a <mi_option_get+0x2da>
               	cmpb	$1, 235881(%rip)        # 0x464780 <os_preloading>
               	jne	0x42abe1 <mi_option_get+0x31>
               	movq	24(%rsp), %rax
               	movl	$1, (%rax)
               	jmp	0x42abe1 <mi_option_get+0x31>
               	movl	%r15d, %esi
               	andl	$124, %esi
               	xorl	%edx, %edx
               	movq	(%rax), %rcx
               	movsbq	160(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 80(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	161(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 81(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	162(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 82(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	163(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 83(%rsp,%rdx)
               	addq	$4, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x42ae35 <mi_option_get+0x285>
               	testq	%r8, %r8
               	je	0x42aebb <mi_option_get+0x30b>
               	leaq	(%rsp,%rdx), %rsi
               	addq	$80, %rsi
               	addq	%rsp, %rdx
               	addq	$160, %rdx
               	xorl	%edi, %edi
               	movq	(%rax), %rbp
               	movsbq	(%rdx,%rdi), %rcx
               	movl	(%rbp,%rcx,4), %ecx
               	movb	%cl, (%rsi,%rdi)
               	addq	$1, %rdi
               	cmpq	%rdi, %r8
               	jne	0x42aea3 <mi_option_get+0x2f3>
               	movb	$0, 80(%rsp,%r15)
               	cmpb	$0, 80(%rsp)
               	je	0x42aede <mi_option_get+0x32e>
               	leaq	107500(%rip), %rdi      # 0x4452bb <typeinfo name for kotlin::gc::GCSchedulerData+0x1302>
               	leaq	80(%rsp), %rsi
               	callq	0x413890 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42aef6 <mi_option_get+0x346>
               	movq	$1, (%r12)
               	movq	24(%rsp), %rax
               	movl	$2, (%rax)
               	jmp	0x42abe1 <mi_option_get+0x31>
               	leaq	107468(%rip), %rdi      # 0x4452c9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1310>
               	leaq	80(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x413890 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42af19 <mi_option_get+0x369>
               	movq	$0, (%r12)
               	jmp	0x42aee6 <mi_option_get+0x336>
               	movq	%r14, 16(%rsp)
               	leaq	16(%rsp), %rsi
               	movq	%r14, %rdi
               	movl	$10, %edx
               	callq	0x4138a0 <strtol@plt>
               	cmpl	$8, 12(%r13,%rbx,8)
               	movq	16(%rsp), %rcx
               	jne	0x42af7d <mi_option_get+0x3cd>
               	movb	(%rcx), %dl
               	cmpb	$71, %dl
               	je	0x42af5a <mi_option_get+0x3aa>
               	cmpb	$77, %dl
               	je	0x42af60 <mi_option_get+0x3b0>
               	cmpb	$75, %dl
               	je	0x42af64 <mi_option_get+0x3b4>
               	addq	$1023, %rax             # imm = 0x3FF
               	shrq	$10, %rax
               	jmp	0x42af6f <mi_option_get+0x3bf>
               	shlq	$20, %rax
               	jmp	0x42af64 <mi_option_get+0x3b4>
               	shlq	$10, %rax
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	movb	(%rcx), %dl
               	cmpb	$66, %dl
               	jne	0x42af7d <mi_option_get+0x3cd>
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	cmpb	$0, (%rcx)
               	je	0x42afaa <mi_option_get+0x3fa>
               	leaq	16(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	(%rax), %rsi
               	leaq	107329(%rip), %rdi      # 0x4452d8 <typeinfo name for kotlin::gc::GCSchedulerData+0x131f>
               	leaq	80(%rsp), %rdx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movl	$1, %eax
               	jmp	0x42afb3 <mi_option_get+0x403>
               	movq	%rax, (%r12)
               	movl	$2, %eax
               	movq	24(%rsp), %rcx
               	movl	%eax, (%rcx)
               	jmp	0x42abe1 <mi_option_get+0x31>
               	nop

<_mi_os_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42b4e6 <_mi_os_alloc_aligned+0x526>
               	movq	%rdx, %r15
               	movl	%esi, %r14d
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42afec <_mi_os_alloc_aligned+0x2c>
               	movq	229262(%rip), %rcx      # 0x462f78 <os_page_size>
               	jmp	0x42b01d <_mi_os_alloc_aligned+0x5d>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rdi          # imm = 0x200000
               	jb	0x42b01d <_mi_os_alloc_aligned+0x5d>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x42b01d <_mi_os_alloc_aligned+0x5d>
               	cmpq	$33554432, %rdi         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rdi, %rax
               	jbe	0x42b05f <_mi_os_alloc_aligned+0x9f>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rdi
               	addq	$-1, %rdi
               	testq	%rax, %rcx
               	jne	0x42b040 <_mi_os_alloc_aligned+0x80>
               	negq	%rcx
               	andq	%rcx, %rdi
               	jmp	0x42b05f <_mi_os_alloc_aligned+0x9f>
               	movq	%rdi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b056 <_mi_os_alloc_aligned+0x96>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b05c <_mi_os_alloc_aligned+0x9c>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rdi
               	movq	229138(%rip), %rcx      # 0x462f78 <os_page_size>
               	movq	%rcx, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %r8 # imm = 0x5555555555555555
               	andq	%r8, %rax
               	movq	%rcx, %rdx
               	subq	%rax, %rdx
               	movabsq	$3689348814741910323, %rbp # imm = 0x3333333333333333
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rsi
               	shrq	$4, %rsi
               	addq	%rdx, %rsi
               	movabsq	$1085102592571150095, %r9 # imm = 0xF0F0F0F0F0F0F0F
               	andq	%r9, %rsi
               	movabsq	$72340172838076673, %r10 # imm = 0x101010101010101
               	imulq	%r10, %rsi
               	shrq	$56, %rsi
               	leaq	4194303(%rcx), %r13
               	cmpq	$1, %rsi
               	ja	0x42b0ef <_mi_os_alloc_aligned+0x12f>
               	movq	%rcx, %rax
               	negq	%rax
               	andq	%rax, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	je	0x42b126 <_mi_os_alloc_aligned+0x166>
               	movb	(%r15), %al
               	movb	%al, 3(%rsp)
               	movb	$0, (%r15)
               	jmp	0x42b12d <_mi_os_alloc_aligned+0x16d>
               	movq	%r13, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b112 <_mi_os_alloc_aligned+0x152>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42b0e2 <_mi_os_alloc_aligned+0x122>
               	jmp	0x42b126 <_mi_os_alloc_aligned+0x166>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42b0e2 <_mi_os_alloc_aligned+0x122>
               	leaq	3(%rsp), %r15
               	xorl	%eax, %eax
               	testb	%al, %al
               	setne	%r12b
               	xorl	%ebx, %ebx
               	cmpq	%r13, %rcx
               	ja	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	movq	%r13, %rax
               	shrq	%rax
               	andq	%r8, %rax
               	movq	%r13, %rdx
               	subq	%rax, %rdx
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rax
               	shrq	$4, %rax
               	addq	%rdx, %rax
               	andq	%r9, %rax
               	imulq	%r10, %rax
               	shrq	$56, %rax
               	cmpl	$1, %eax
               	ja	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	leaq	-1(%rcx), %rbp
               	addq	%rdi, %rbp
               	cmpl	$1, %esi
               	ja	0x42b197 <_mi_os_alloc_aligned+0x1d7>
               	negq	%rcx
               	andq	%rcx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42b1ca <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b4e6 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b1b8 <_mi_os_alloc_aligned+0x1f8>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42b1ca <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b4e6 <_mi_os_alloc_aligned+0x526>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	je	0x42b4e6 <_mi_os_alloc_aligned+0x526>
               	andb	%r14b, %r12b
               	movzbl	%r14b, %eax
               	leal	(%rax,%rax,2), %ebx
               	cmpb	$1, 268365(%rip)        # 0x46ca28 <large_os_page_size>
               	movl	%ebx, 4(%rsp)
               	jne	0x42b220 <_mi_os_alloc_aligned+0x260>
               	movl	$6, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b220 <_mi_os_alloc_aligned+0x260>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b220 <_mi_os_alloc_aligned+0x260>
               	movl	%r12d, %eax
               	xorb	$1, %al
               	jne	0x42b220 <_mi_os_alloc_aligned+0x260>
               	movq	268350(%rip), %rax      # 0x46ca48 <mi_unix_mmap.large_page_try_ok>
               	testq	%rax, %rax
               	je	0x42b510 <_mi_os_alloc_aligned+0x550>
               	leaq	-1(%rax), %rcx
               	lock
               	cmpxchgq	%rcx, 268328(%rip)      # 0x46ca48 <mi_unix_mmap.large_page_try_ok>
               	movb	$0, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42be40 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testb	%r12b, %r12b
               	je	0x42b27a <_mi_os_alloc_aligned+0x2ba>
               	cmpb	$1, 268259(%rip)        # 0x46ca28 <large_os_page_size>
               	jne	0x42b27a <_mi_os_alloc_aligned+0x2ba>
               	movl	$6, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b27a <_mi_os_alloc_aligned+0x2ba>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b27a <_mi_os_alloc_aligned+0x2ba>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	$14, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42b27a <_mi_os_alloc_aligned+0x2ba>
               	movb	$1, (%r15)
               	testq	%rbx, %rbx
               	je	0x42b2e8 <_mi_os_alloc_aligned+0x328>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 234253(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	%rbp, %rcx
               	movq	234235(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b2b0 <_mi_os_alloc_aligned+0x2f0>
               	lock
               	cmpxchgq	%rcx, 234210(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42b2a0 <_mi_os_alloc_aligned+0x2e0>
               	testq	%rbp, %rbp
               	jle	0x42b310 <_mi_os_alloc_aligned+0x350>
               	lock
               	addq	%rbp, 234179(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	testb	%r14b, %r14b
               	jne	0x42b323 <_mi_os_alloc_aligned+0x363>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	je	0x42b36d <_mi_os_alloc_aligned+0x3ad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r13
               	testq	%rdx, %rdx
               	jne	0x42b37d <_mi_os_alloc_aligned+0x3bd>
               	jmp	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	movzbl	%r12b, %r9d
               	leaq	105939(%rip), %rdi      # 0x4450cd <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%rbp, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	jmp	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 234090(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b2c2 <_mi_os_alloc_aligned+0x302>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 234121(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	addq	%rbp, %rcx
               	movq	234103(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b350 <_mi_os_alloc_aligned+0x390>
               	lock
               	cmpxchgq	%rcx, 234082(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42b340 <_mi_os_alloc_aligned+0x380>
               	testq	%rbp, %rbp
               	jle	0x42b3cf <_mi_os_alloc_aligned+0x40f>
               	lock
               	addq	%rbp, 234051(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b2d2 <_mi_os_alloc_aligned+0x312>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r13d
               	testq	%rdx, %rdx
               	je	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbp, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b3fa <_mi_os_alloc_aligned+0x43a>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 234003(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	subq	%rbp, %rsi
               	movq	233985(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42b3c0 <_mi_os_alloc_aligned+0x400>
               	lock
               	cmpxchgq	%rsi, 233970(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42b3b0 <_mi_os_alloc_aligned+0x3f0>
               	testq	%rbp, %rbp
               	js	0x42b3f2 <_mi_os_alloc_aligned+0x432>
               	lock
               	addq	%rbp, 233947(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	jmp	0x42b3fa <_mi_os_alloc_aligned+0x43a>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 233931(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b2d2 <_mi_os_alloc_aligned+0x312>
               	jmp	0x42b36d <_mi_os_alloc_aligned+0x3ad>
               	lock
               	addq	%rdx, 233894(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 233874(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	subq	%rbp, %rsi
               	movq	233856(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b420 <_mi_os_alloc_aligned+0x460>
               	lock
               	cmpxchgq	%rsi, 233842(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42b410 <_mi_os_alloc_aligned+0x450>
               	testq	%rbp, %rbp
               	js	0x42b4fa <_mi_os_alloc_aligned+0x53a>
               	lock
               	addq	%rbp, 233815(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42b459 <_mi_os_alloc_aligned+0x499>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	105542(%rip), %rdi      # 0x44508f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	movq	%rbp, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movq	%r13, %rax
               	notq	%rax
               	cmpq	%rax, %rbp
               	jae	0x42b4e6 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %r12
               	addq	%r13, %r12
               	je	0x42b4e6 <_mi_os_alloc_aligned+0x526>
               	cmpb	$1, 267697(%rip)        # 0x46ca28 <large_os_page_size>
               	jne	0x42b483 <_mi_os_alloc_aligned+0x4c3>
               	movl	$6, %edi
               	callq	0x42abb0 <mi_option_get>
               	movb	$0, (%r15)
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42be40 <mi_unix_mmapx>
               	testq	%rax, %rax
               	je	0x42b598 <_mi_os_alloc_aligned+0x5d8>
               	movq	%rax, %r15
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 233701(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	%r12, %rcx
               	movq	233683(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b4d0 <_mi_os_alloc_aligned+0x510>
               	lock
               	cmpxchgq	%rcx, 233666(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42b4c0 <_mi_os_alloc_aligned+0x500>
               	testq	%r12, %r12
               	jle	0x42b5b8 <_mi_os_alloc_aligned+0x5f8>
               	lock
               	addq	%r12, 233631(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	jmp	0x42b5c6 <_mi_os_alloc_aligned+0x606>
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 233598(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b459 <_mi_os_alloc_aligned+0x499>
               	jmp	0x42b436 <_mi_os_alloc_aligned+0x476>
               	testl	$1073741823, %ebp       # imm = 0x3FFFFFFF
               	jne	0x42b526 <_mi_os_alloc_aligned+0x566>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	cmpb	$1, 267564(%rip)        # 0x46ca50 <mi_unix_mmap.mi_huge_pages_available>
               	jne	0x42b52b <_mi_os_alloc_aligned+0x56b>
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movb	$1, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	callq	0x42be40 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b27f <_mi_os_alloc_aligned+0x2bf>
               	movb	$1, 267521(%rip)        # 0x46ca50 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	105432(%rip), %rdi      # 0x445135 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	callq	0x42be40 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b27f <_mi_os_alloc_aligned+0x2bf>
               	movq	$10, 267449(%rip)       # 0x46ca48 <mi_unix_mmap.large_page_try_ok>
               	movl	4(%rsp), %ebx
               	jmp	0x42b220 <_mi_os_alloc_aligned+0x260>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	105255(%rip), %rdi      # 0x4450cd <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%r12, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	jmp	0x42b304 <_mi_os_alloc_aligned+0x344>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 233410(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b60e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 233441(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	addq	%r12, %rcx
               	movq	233423(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x42b5f1 <_mi_os_alloc_aligned+0x631>
               	lock
               	cmpxchgq	%rcx, 233409(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42b5e1 <_mi_os_alloc_aligned+0x621>
               	testq	%r12, %r12
               	jle	0x42b600 <_mi_os_alloc_aligned+0x640>
               	lock
               	addq	%r12, 233378(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	jmp	0x42b60e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 233370(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	leaq	(%r15,%r13), %rax
               	addq	$-1, %rax
               	negq	%r13
               	andq	%rax, %r13
               	movq	%r13, %rbx
               	subq	%r15, %rbx
               	movq	227663(%rip), %rcx      # 0x462f78 <os_page_size>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x42b641 <_mi_os_alloc_aligned+0x681>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x42b660 <_mi_os_alloc_aligned+0x6a0>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b657 <_mi_os_alloc_aligned+0x697>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b65d <_mi_os_alloc_aligned+0x69d>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	subq	%rbx, %r12
               	subq	%rbp, %r12
               	testq	%rbx, %rbx
               	je	0x42b729 <_mi_os_alloc_aligned+0x769>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b6c4 <_mi_os_alloc_aligned+0x704>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 233253(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	233235(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b6ad <_mi_os_alloc_aligned+0x6ed>
               	lock
               	cmpxchgq	%rsi, 233221(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42b69d <_mi_os_alloc_aligned+0x6dd>
               	testq	%rbx, %rbx
               	js	0x42b6bc <_mi_os_alloc_aligned+0x6fc>
               	lock
               	addq	%rbx, 233198(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	jmp	0x42b6c4 <_mi_os_alloc_aligned+0x704>
               	lock
               	addq	%rdx, 233180(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 233160(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	233142(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b6ea <_mi_os_alloc_aligned+0x72a>
               	lock
               	cmpxchgq	%rsi, 233128(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42b6da <_mi_os_alloc_aligned+0x71a>
               	testq	%rbx, %rbx
               	js	0x42b6f9 <_mi_os_alloc_aligned+0x739>
               	lock
               	addq	%rbx, 233105(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	jmp	0x42b701 <_mi_os_alloc_aligned+0x741>
               	lock
               	addq	%rdx, 233087(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b729 <_mi_os_alloc_aligned+0x769>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	104822(%rip), %rdi      # 0x44508f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	testq	%r12, %r12
               	je	0x42b7ff <_mi_os_alloc_aligned+0x83f>
               	testq	%r13, %r13
               	je	0x42b7ff <_mi_os_alloc_aligned+0x83f>
               	addq	%r13, %rbp
               	movq	%rbp, %rdi
               	movq	%r12, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%r12, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b793 <_mi_os_alloc_aligned+0x7d3>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 233046(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	subq	%r12, %rsi
               	movq	233028(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b77c <_mi_os_alloc_aligned+0x7bc>
               	lock
               	cmpxchgq	%rsi, 233014(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42b76c <_mi_os_alloc_aligned+0x7ac>
               	testq	%r12, %r12
               	js	0x42b78b <_mi_os_alloc_aligned+0x7cb>
               	lock
               	addq	%r12, 232991(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	jmp	0x42b793 <_mi_os_alloc_aligned+0x7d3>
               	lock
               	addq	%rdx, 232973(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 232953(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	subq	%r12, %rsi
               	movq	232935(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b7b9 <_mi_os_alloc_aligned+0x7f9>
               	lock
               	cmpxchgq	%rsi, 232921(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42b7a9 <_mi_os_alloc_aligned+0x7e9>
               	testq	%r12, %r12
               	js	0x42b7c8 <_mi_os_alloc_aligned+0x808>
               	lock
               	addq	%r12, 232898(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	jmp	0x42b7d0 <_mi_os_alloc_aligned+0x810>
               	lock
               	addq	%rdx, 232880(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	movq	%r13, %rbx
               	cmpl	$-1, %ecx
               	jne	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	104608(%rip), %rdi      # 0x44508f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movq	%r13, %rbx
               	jmp	0x42b4e8 <_mi_os_alloc_aligned+0x528>
               	nopw	(%rax,%rax)

<_mi_os_alloc>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42b82a <_mi_os_alloc+0x1a>
               	movq	227152(%rip), %rcx      # 0x462f78 <os_page_size>
               	jmp	0x42b85b <_mi_os_alloc+0x4b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b85b <_mi_os_alloc+0x4b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b85b <_mi_os_alloc+0x4b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42b889 <_mi_os_alloc+0x79>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b90f <_mi_os_alloc+0xff>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	je	0x42b968 <_mi_os_alloc+0x158>
               	cmpb	$1, 266648(%rip)        # 0x46ca28 <large_os_page_size>
               	jne	0x42b89c <_mi_os_alloc+0x8c>
               	movl	$6, %edi
               	callq	0x42abb0 <mi_option_get>
               	xorl	%r15d, %r15d
               	movl	$0, %edi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %r14
               	cmpq	$-1, %rax
               	cmoveq	%r15, %r14
               	testq	%r14, %r14
               	je	0x42b931 <_mi_os_alloc+0x121>
               	testq	%rbx, %rbx
               	je	0x42b9ca <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 232628(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	addq	%rbx, %rcx
               	movq	232610(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b900 <_mi_os_alloc+0xf0>
               	lock
               	cmpxchgq	%rcx, 232594(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42b8f0 <_mi_os_alloc+0xe0>
               	testq	%rbx, %rbx
               	jle	0x42b96d <_mi_os_alloc+0x15d>
               	lock
               	addq	%rbx, 232563(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	jmp	0x42b97b <_mi_os_alloc+0x16b>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b956 <_mi_os_alloc+0x146>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b889 <_mi_os_alloc+0x79>
               	jmp	0x42b968 <_mi_os_alloc+0x158>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	104334(%rip), %rdi      # 0x4450cd <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%r14d, %r14d
               	movq	%rbx, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	jmp	0x42b9ca <_mi_os_alloc+0x1ba>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b889 <_mi_os_alloc+0x79>
               	xorl	%r14d, %r14d
               	jmp	0x42b9ca <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rax
               	negq	%rax
               	lock
               	addq	%rax, 232461(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 232497(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	addq	%rbx, %rcx
               	movq	232479(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b9b0 <_mi_os_alloc+0x1a0>
               	lock
               	cmpxchgq	%rcx, 232450(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42b9a0 <_mi_os_alloc+0x190>
               	testq	%rbx, %rbx
               	jle	0x42b9bf <_mi_os_alloc+0x1af>
               	lock
               	addq	%rbx, 232419(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	jmp	0x42b9ca <_mi_os_alloc+0x1ba>
               	negq	%rbx
               	lock
               	addq	%rbx, 232414(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	movq	%r14, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_os_free_ex>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42bb42 <_mi_os_free_ex+0x162>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x42bb42 <_mi_os_free_ex+0x162>
               	movl	%edx, %ebp
               	movq	%rdi, %r14
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42ba10 <_mi_os_free_ex+0x30>
               	movq	226666(%rip), %rcx      # 0x462f78 <os_page_size>
               	jmp	0x42ba41 <_mi_os_free_ex+0x61>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42ba41 <_mi_os_free_ex+0x61>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42ba41 <_mi_os_free_ex+0x61>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42ba9f <_mi_os_free_ex+0xbf>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42ba6c <_mi_os_free_ex+0x8c>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42ba9f <_mi_os_free_ex+0xbf>
               	jmp	0x42bb42 <_mi_os_free_ex+0x162>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42ba8d <_mi_os_free_ex+0xad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42ba9f <_mi_os_free_ex+0xbf>
               	jmp	0x42bb42 <_mi_os_free_ex+0x162>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	je	0x42bb42 <_mi_os_free_ex+0x162>
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%bpl, %bpl
               	je	0x42bafc <_mi_os_free_ex+0x11c>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 232181(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	232163(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42bae0 <_mi_os_free_ex+0x100>
               	lock
               	cmpxchgq	%rsi, 232146(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42bad0 <_mi_os_free_ex+0xf0>
               	testq	%rbx, %rbx
               	js	0x42baf4 <_mi_os_free_ex+0x114>
               	lock
               	addq	%rbx, 232123(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	testq	%rbx, %rbx
               	jne	0x42bafc <_mi_os_free_ex+0x11c>
               	jmp	0x42bb3d <_mi_os_free_ex+0x15d>
               	lock
               	addq	%rdx, 232100(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 232080(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	232062(%rip), %rax      # 0x464590 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42bb30 <_mi_os_free_ex+0x150>
               	lock
               	cmpxchgq	%rsi, 232034(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	jne	0x42bb20 <_mi_os_free_ex+0x140>
               	testq	%rbx, %rbx
               	js	0x42bb47 <_mi_os_free_ex+0x167>
               	lock
               	addq	%rbx, 232011(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	je	0x42bb54 <_mi_os_free_ex+0x174>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 231985(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42bb42 <_mi_os_free_ex+0x162>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	103720(%rip), %rdi      # 0x44508f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmp	0x42bc10 <_mi_warning_message>
               	nopl	(%rax,%rax)

<_mi_stat_decrease>:
               	testq	%rsi, %rsi
               	je	0x42bbfa <_mi_stat_decrease+0x7a>
               	leaq	231856(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42bbd8 <_mi_stat_decrease+0x58>
               	leaq	232416(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42bbd8 <_mi_stat_decrease+0x58>
               	movq	%rsi, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 24(%rdi)
               	subq	%rsi, %rdx
               	movq	16(%rdi), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42bbcd <_mi_stat_decrease+0x4d>
               	lock
               	cmpxchgq	%rdx, 16(%rdi)
               	jne	0x42bbc0 <_mi_stat_decrease+0x40>
               	testq	%rsi, %rsi
               	js	0x42bbfb <_mi_stat_decrease+0x7b>
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	24(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42bbed <_mi_stat_decrease+0x6d>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	js	0x42bc00 <_mi_stat_decrease+0x80>
               	addq	8(%rdi), %rsi
               	movq	%rsi, 8(%rdi)
               	retq
               	lock
               	addq	%rcx, (%rdi)
               	retq
               	movq	(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, (%rdi)
               	retq
               	nopw	(%rax,%rax)

<_mi_warning_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42bc5c <_mi_warning_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42bc94 <_mi_warning_message+0x84>
               	movl	$2, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42bd41 <_mi_warning_message+0x131>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 232798(%rip)      # 0x464a00 <warning_count>
               	cmpq	226007(%rip), %rax      # 0x462f80 <mi_max_warning_count>
               	ja	0x42bd41 <_mi_warning_message+0x131>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42bd41 <_mi_warning_message+0x131>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42bd41 <_mi_warning_message+0x131>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	232693(%rip), %r12      # 0x464a08 <mi_out_arg>
               	movq	232694(%rip), %rax      # 0x464a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	44(%rip), %rbx          # 0x42bd50 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	103306(%rip), %rdi      # 0x4450b9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1100>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq

<mi_out_buf>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42bd87 <mi_out_buf+0x37>
               	movq	232635(%rip), %rax      # 0x464a18 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x42bd87 <mi_out_buf+0x37>
               	movq	%rdi, %rbx
               	callq	0x4136e0 <strlen@plt>
               	testq	%rax, %rax
               	je	0x42bd87 <mi_out_buf+0x37>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 232602(%rip)      # 0x464a18 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x42bd89 <mi_out_buf+0x39>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	232569(%rip), %rdi      # 0x464a20 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x4136f0 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<_mi_stat_increase>:
               	testq	%rsi, %rsi
               	je	0x42be3c <_mi_stat_increase+0x7c>
               	leaq	231284(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42be07 <_mi_stat_increase+0x47>
               	leaq	231848(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42be07 <_mi_stat_increase+0x47>
               	movq	%rsi, %rcx
               	lock
               	xaddq	%rcx, 24(%rdi)
               	addq	%rsi, %rcx
               	movq	16(%rdi), %rax
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42bdfd <_mi_stat_increase+0x3d>
               	lock
               	cmpxchgq	%rcx, 16(%rdi)
               	jne	0x42bdf0 <_mi_stat_increase+0x30>
               	testq	%rsi, %rsi
               	jle	0x42be28 <_mi_stat_increase+0x68>
               	lock
               	addq	%rsi, (%rdi)
               	retq
               	movq	24(%rdi), %rax
               	addq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42be1c <_mi_stat_increase+0x5c>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	jle	0x42be31 <_mi_stat_increase+0x71>
               	addq	(%rdi), %rsi
               	movq	%rsi, (%rdi)
               	retq
               	negq	%rsi
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 8(%rdi)
               	retq
               	nopl	(%rax)

<mi_unix_mmapx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%ecx, %r14d
               	movl	%edx, %r15d
               	movq	%rdi, %rbp
               	cmpq	$1073741824, %rdi       # imm = 0x40000000
               	ja	0x42bf33 <mi_unix_mmapx+0xf3>
               	movl	%ebp, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	testq	%rax, %rax
               	jne	0x42bf33 <mi_unix_mmapx+0xf3>
               	movq	%rsi, %r12
               	leaq	-1(%rsi), %rax
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42bf33 <mi_unix_mmapx+0xf3>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 265139(%rip)      # 0x46ca40 <aligned_base>
               	leaq	-1(%rbx), %rax
               	shrq	$41, %rax
               	cmpl	$15, %eax
               	jb	0x42bee3 <mi_unix_mmapx+0xa3>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	callq	0x428c60 <_mi_heap_random_next>
               	shlq	$5, %rax
               	movabsq	$4398042316800, %rcx    # imm = 0x3FFFFC00000
               	andq	%rax, %rcx
               	movabsq	$2199023255552, %rdx    # imm = 0x20000000000
               	addq	%rcx, %rdx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rdx, 265065(%rip)      # 0x46ca40 <aligned_base>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 265053(%rip)      # 0x46ca40 <aligned_base>
               	movq	%rbx, %rax
               	orq	%r12, %rax
               	shrq	$32, %rax
               	je	0x42befe <mi_unix_mmapx+0xbe>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r12
               	testq	%rbx, %rbx
               	jne	0x42bf0a <mi_unix_mmapx+0xca>
               	jmp	0x42bf33 <mi_unix_mmapx+0xf3>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r12d
               	testq	%rbx, %rbx
               	je	0x42bf33 <mi_unix_mmapx+0xf3>
               	testq	%rdx, %rdx
               	jne	0x42bf33 <mi_unix_mmapx+0xf3>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	cmpq	$1, %rcx
               	ja	0x42bf56 <mi_unix_mmapx+0x116>
               	xorl	%ebx, %ebx
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	$-1, %rax
               	cmoveq	%rbx, %rax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<_mi_os_numa_node_count_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$128, %rsp
               	movq	264933(%rip), %rbx      # 0x46ca58 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x42bff3 <_mi_os_numa_node_count_get+0x93>
               	movl	$15, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x42bfdb <_mi_os_numa_node_count_get+0x7b>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	103135(%rip), %r14      # 0x445279 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	movq	%rsp, %r15
               	nopl	(%rax)
               	cmpl	$255, %ebx
               	je	0x42bfd3 <_mi_os_numa_node_count_get+0x73>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x4138c0 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x42bfa0 <_mi_os_numa_node_count_get+0x40>
               	jmp	0x42bfd8 <_mi_os_numa_node_count_get+0x78>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 264822(%rip)      # 0x46ca58 <_mi_numa_node_count>
               	leaq	103088(%rip), %rdi      # 0x445299 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	movq	%rbx, %rax
               	addq	$128, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_error_message>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$720, %rsp              # imm = 0x2D0
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	testb	%al, %al
               	je	0x42c05f <_mi_error_message+0x4f>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430224, %rax     # imm = 0x3000000010
               	movq	%rax, (%rsp)
               	xorl	%edi, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42c0b7 <_mi_error_message+0xa7>
               	movl	$2, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42c13b <_mi_error_message+0x12b>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 264659(%rip)      # 0x46ca98 <error_count>
               	cmpq	225444(%rip), %rax      # 0x463170 <mi_max_error_count>
               	ja	0x42c13b <_mi_error_message+0x12b>
               	testq	%rbx, %rbx
               	je	0x42c13b <_mi_error_message+0x12b>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42c13b <_mi_error_message+0x12b>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	231675(%rip), %r12      # 0x464a08 <mi_out_arg>
               	movq	231676(%rip), %rax      # 0x464a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-974(%rip), %rbx        # 0x42bd50 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	103234(%rip), %rdi      # 0x44546b <typeinfo name for kotlin::gc::GCSchedulerData+0x14b2>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	movq	264542(%rip), %rax      # 0x46caa0 <mi_error_handler>
               	testq	%rax, %rax
               	je	0x42c159 <_mi_error_message+0x149>
               	movq	264530(%rip), %rax      # 0x46caa0 <mi_error_handler>
               	movq	264531(%rip), %rsi      # 0x46caa8 <mi_error_arg>
               	movl	%ebp, %edi
               	callq	*%rax
               	addq	$720, %rsp              # imm = 0x2D0
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<mi_stats_merge_from>:
               	leaq	230345(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x42c659 <mi_stats_merge_from+0x4e9>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c18f <mi_stats_merge_from+0x1f>
               	cmpq	$0, 8(%rdi)
               	je	0x42c1bb <mi_stats_merge_from+0x4b>
               	lock
               	addq	%rax, 230313(%rip)      # 0x464540 <_mi_stats_main>
               	movq	24(%rdi), %rax
               	lock
               	addq	%rax, 230325(%rip)      # 0x464558 <_mi_stats_main+0x18>
               	movq	8(%rdi), %rax
               	lock
               	addq	%rax, 230297(%rip)      # 0x464548 <_mi_stats_main+0x8>
               	movq	16(%rdi), %rax
               	lock
               	addq	%rax, 230293(%rip)      # 0x464550 <_mi_stats_main+0x10>
               	movq	32(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c1cb <mi_stats_merge_from+0x5b>
               	cmpq	$0, 40(%rdi)
               	je	0x42c1f7 <mi_stats_merge_from+0x87>
               	lock
               	addq	%rax, 230285(%rip)      # 0x464560 <_mi_stats_main+0x20>
               	movq	56(%rdi), %rax
               	lock
               	addq	%rax, 230297(%rip)      # 0x464578 <_mi_stats_main+0x38>
               	movq	40(%rdi), %rax
               	lock
               	addq	%rax, 230269(%rip)      # 0x464568 <_mi_stats_main+0x28>
               	movq	48(%rdi), %rax
               	lock
               	addq	%rax, 230265(%rip)      # 0x464570 <_mi_stats_main+0x30>
               	movq	64(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c207 <mi_stats_merge_from+0x97>
               	cmpq	$0, 72(%rdi)
               	je	0x42c233 <mi_stats_merge_from+0xc3>
               	lock
               	addq	%rax, 230257(%rip)      # 0x464580 <_mi_stats_main+0x40>
               	movq	88(%rdi), %rax
               	lock
               	addq	%rax, 230269(%rip)      # 0x464598 <_mi_stats_main+0x58>
               	movq	72(%rdi), %rax
               	lock
               	addq	%rax, 230241(%rip)      # 0x464588 <_mi_stats_main+0x48>
               	movq	80(%rdi), %rax
               	lock
               	addq	%rax, 230237(%rip)      # 0x464590 <_mi_stats_main+0x50>
               	movq	96(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c243 <mi_stats_merge_from+0xd3>
               	cmpq	$0, 104(%rdi)
               	je	0x42c26f <mi_stats_merge_from+0xff>
               	lock
               	addq	%rax, 230229(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	120(%rdi), %rax
               	lock
               	addq	%rax, 230241(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	movq	104(%rdi), %rax
               	lock
               	addq	%rax, 230213(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	movq	112(%rdi), %rax
               	lock
               	addq	%rax, 230209(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	movq	128(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c285 <mi_stats_merge_from+0x115>
               	cmpq	$0, 136(%rdi)
               	je	0x42c2ba <mi_stats_merge_from+0x14a>
               	lock
               	addq	%rax, 230195(%rip)      # 0x4645c0 <_mi_stats_main+0x80>
               	movq	152(%rdi), %rax
               	lock
               	addq	%rax, 230204(%rip)      # 0x4645d8 <_mi_stats_main+0x98>
               	movq	136(%rdi), %rax
               	lock
               	addq	%rax, 230173(%rip)      # 0x4645c8 <_mi_stats_main+0x88>
               	movq	144(%rdi), %rax
               	lock
               	addq	%rax, 230166(%rip)      # 0x4645d0 <_mi_stats_main+0x90>
               	movq	160(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c2d0 <mi_stats_merge_from+0x160>
               	cmpq	$0, 168(%rdi)
               	je	0x42c305 <mi_stats_merge_from+0x195>
               	lock
               	addq	%rax, 230152(%rip)      # 0x4645e0 <_mi_stats_main+0xa0>
               	movq	184(%rdi), %rax
               	lock
               	addq	%rax, 230161(%rip)      # 0x4645f8 <_mi_stats_main+0xb8>
               	movq	168(%rdi), %rax
               	lock
               	addq	%rax, 230130(%rip)      # 0x4645e8 <_mi_stats_main+0xa8>
               	movq	176(%rdi), %rax
               	lock
               	addq	%rax, 230123(%rip)      # 0x4645f0 <_mi_stats_main+0xb0>
               	movq	224(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c31b <mi_stats_merge_from+0x1ab>
               	cmpq	$0, 232(%rdi)
               	je	0x42c350 <mi_stats_merge_from+0x1e0>
               	lock
               	addq	%rax, 230141(%rip)      # 0x464620 <_mi_stats_main+0xe0>
               	movq	248(%rdi), %rax
               	lock
               	addq	%rax, 230150(%rip)      # 0x464638 <_mi_stats_main+0xf8>
               	movq	232(%rdi), %rax
               	lock
               	addq	%rax, 230119(%rip)      # 0x464628 <_mi_stats_main+0xe8>
               	movq	240(%rdi), %rax
               	lock
               	addq	%rax, 230112(%rip)      # 0x464630 <_mi_stats_main+0xf0>
               	movq	192(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c366 <mi_stats_merge_from+0x1f6>
               	cmpq	$0, 200(%rdi)
               	je	0x42c39b <mi_stats_merge_from+0x22b>
               	lock
               	addq	%rax, 230034(%rip)      # 0x464600 <_mi_stats_main+0xc0>
               	movq	216(%rdi), %rax
               	lock
               	addq	%rax, 230043(%rip)      # 0x464618 <_mi_stats_main+0xd8>
               	movq	200(%rdi), %rax
               	lock
               	addq	%rax, 230012(%rip)      # 0x464608 <_mi_stats_main+0xc8>
               	movq	208(%rdi), %rax
               	lock
               	addq	%rax, 230005(%rip)      # 0x464610 <_mi_stats_main+0xd0>
               	movq	256(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c3b1 <mi_stats_merge_from+0x241>
               	cmpq	$0, 264(%rdi)
               	je	0x42c3e6 <mi_stats_merge_from+0x276>
               	lock
               	addq	%rax, 230023(%rip)      # 0x464640 <_mi_stats_main+0x100>
               	movq	280(%rdi), %rax
               	lock
               	addq	%rax, 230032(%rip)      # 0x464658 <_mi_stats_main+0x118>
               	movq	264(%rdi), %rax
               	lock
               	addq	%rax, 230001(%rip)      # 0x464648 <_mi_stats_main+0x108>
               	movq	272(%rdi), %rax
               	lock
               	addq	%rax, 229994(%rip)      # 0x464650 <_mi_stats_main+0x110>
               	movq	384(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c3fc <mi_stats_merge_from+0x28c>
               	cmpq	$0, 392(%rdi)
               	je	0x42c431 <mi_stats_merge_from+0x2c1>
               	lock
               	addq	%rax, 230076(%rip)      # 0x4646c0 <_mi_stats_main+0x180>
               	movq	408(%rdi), %rax
               	lock
               	addq	%rax, 230085(%rip)      # 0x4646d8 <_mi_stats_main+0x198>
               	movq	392(%rdi), %rax
               	lock
               	addq	%rax, 230054(%rip)      # 0x4646c8 <_mi_stats_main+0x188>
               	movq	400(%rdi), %rax
               	lock
               	addq	%rax, 230047(%rip)      # 0x4646d0 <_mi_stats_main+0x190>
               	movq	416(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c447 <mi_stats_merge_from+0x2d7>
               	cmpq	$0, 424(%rdi)
               	je	0x42c47c <mi_stats_merge_from+0x30c>
               	lock
               	addq	%rax, 230033(%rip)      # 0x4646e0 <_mi_stats_main+0x1a0>
               	movq	440(%rdi), %rax
               	lock
               	addq	%rax, 230042(%rip)      # 0x4646f8 <_mi_stats_main+0x1b8>
               	movq	424(%rdi), %rax
               	lock
               	addq	%rax, 230011(%rip)      # 0x4646e8 <_mi_stats_main+0x1a8>
               	movq	432(%rdi), %rax
               	lock
               	addq	%rax, 230004(%rip)      # 0x4646f0 <_mi_stats_main+0x1b0>
               	movq	288(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c492 <mi_stats_merge_from+0x322>
               	cmpq	$0, 296(%rdi)
               	je	0x42c4c7 <mi_stats_merge_from+0x357>
               	lock
               	addq	%rax, 229830(%rip)      # 0x464660 <_mi_stats_main+0x120>
               	movq	312(%rdi), %rax
               	lock
               	addq	%rax, 229839(%rip)      # 0x464678 <_mi_stats_main+0x138>
               	movq	296(%rdi), %rax
               	lock
               	addq	%rax, 229808(%rip)      # 0x464668 <_mi_stats_main+0x128>
               	movq	304(%rdi), %rax
               	lock
               	addq	%rax, 229801(%rip)      # 0x464670 <_mi_stats_main+0x130>
               	movq	320(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c4dd <mi_stats_merge_from+0x36d>
               	cmpq	$0, 328(%rdi)
               	je	0x42c512 <mi_stats_merge_from+0x3a2>
               	lock
               	addq	%rax, 229787(%rip)      # 0x464680 <_mi_stats_main+0x140>
               	movq	344(%rdi), %rax
               	lock
               	addq	%rax, 229796(%rip)      # 0x464698 <_mi_stats_main+0x158>
               	movq	328(%rdi), %rax
               	lock
               	addq	%rax, 229765(%rip)      # 0x464688 <_mi_stats_main+0x148>
               	movq	336(%rdi), %rax
               	lock
               	addq	%rax, 229758(%rip)      # 0x464690 <_mi_stats_main+0x150>
               	movq	352(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c528 <mi_stats_merge_from+0x3b8>
               	cmpq	$0, 360(%rdi)
               	je	0x42c55d <mi_stats_merge_from+0x3ed>
               	lock
               	addq	%rax, 229744(%rip)      # 0x4646a0 <_mi_stats_main+0x160>
               	movq	376(%rdi), %rax
               	lock
               	addq	%rax, 229753(%rip)      # 0x4646b8 <_mi_stats_main+0x178>
               	movq	360(%rdi), %rax
               	lock
               	addq	%rax, 229722(%rip)      # 0x4646a8 <_mi_stats_main+0x168>
               	movq	368(%rdi), %rax
               	lock
               	addq	%rax, 229715(%rip)      # 0x4646b0 <_mi_stats_main+0x170>
               	movq	448(%rdi), %rax
               	lock
               	addq	%rax, 229780(%rip)      # 0x464700 <_mi_stats_main+0x1c0>
               	movq	456(%rdi), %rax
               	lock
               	addq	%rax, 229773(%rip)      # 0x464708 <_mi_stats_main+0x1c8>
               	movq	464(%rdi), %rax
               	lock
               	addq	%rax, 229766(%rip)      # 0x464710 <_mi_stats_main+0x1d0>
               	movq	472(%rdi), %rax
               	lock
               	addq	%rax, 229759(%rip)      # 0x464718 <_mi_stats_main+0x1d8>
               	movq	480(%rdi), %rax
               	lock
               	addq	%rax, 229752(%rip)      # 0x464720 <_mi_stats_main+0x1e0>
               	movq	488(%rdi), %rax
               	lock
               	addq	%rax, 229745(%rip)      # 0x464728 <_mi_stats_main+0x1e8>
               	movq	496(%rdi), %rax
               	lock
               	addq	%rax, 229738(%rip)      # 0x464730 <_mi_stats_main+0x1f0>
               	movq	504(%rdi), %rax
               	lock
               	addq	%rax, 229731(%rip)      # 0x464738 <_mi_stats_main+0x1f8>
               	movq	512(%rdi), %rax
               	lock
               	addq	%rax, 229724(%rip)      # 0x464740 <_mi_stats_main+0x200>
               	movq	520(%rdi), %rax
               	lock
               	addq	%rax, 229717(%rip)      # 0x464748 <_mi_stats_main+0x208>
               	movq	528(%rdi), %rax
               	lock
               	addq	%rax, 229710(%rip)      # 0x464750 <_mi_stats_main+0x210>
               	movq	536(%rdi), %rax
               	lock
               	addq	%rax, 229703(%rip)      # 0x464758 <_mi_stats_main+0x218>
               	movq	544(%rdi), %rax
               	lock
               	addq	%rax, 229696(%rip)      # 0x464760 <_mi_stats_main+0x220>
               	movq	552(%rdi), %rax
               	lock
               	addq	%rax, 229689(%rip)      # 0x464768 <_mi_stats_main+0x228>
               	movq	560(%rdi), %rax
               	lock
               	addq	%rax, 229682(%rip)      # 0x464770 <_mi_stats_main+0x230>
               	movq	568(%rdi), %rax
               	lock
               	addq	%rax, 229675(%rip)      # 0x464778 <_mi_stats_main+0x238>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	jmp	0x413710 <memset@plt>
               	retq
               	nopw	(%rax,%rax)

<mi_heap_collect_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	testq	%rdi, %rdi
               	je	0x42d162 <mi_heap_collect_ex+0xb02>
               	movq	%rdi, %r15
               	leaq	209663(%rip), %rax      # 0x45f980 <_mi_heap_empty>
               	cmpq	%rax, %rdi
               	je	0x42d162 <mi_heap_collect_ex+0xb02>
               	movl	%esi, %ebp
               	movq	(%r15), %rbx
               	movq	(%rbx), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rbx)
               	movq	329000(%rip), %rax      # 0x47cbc8 <deferred_free>
               	testq	%rax, %rax
               	je	0x42c6af <mi_heap_collect_ex+0x4f>
               	cmpb	$0, 8(%rbx)
               	je	0x42c849 <mi_heap_collect_ex+0x1e9>
               	cmpl	$2, %ebp
               	je	0x42c872 <mi_heap_collect_ex+0x212>
               	cmpl	$1, %ebp
               	jne	0x42c8ed <mi_heap_collect_ex+0x28d>
               	movq	222440(%rip), %rax      # 0x462bb0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42c6df <mi_heap_collect_ex+0x7f>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42c8ed <mi_heap_collect_ex+0x28d>
               	cmpq	%r15, 16(%rbx)
               	jne	0x42c8ed <mi_heap_collect_ex+0x28d>
               	cmpb	$0, 3048(%r15)
               	jne	0x42c8ed <mi_heap_collect_ex+0x28d>
               	addq	$32, %rbx
               	movq	328702(%rip), %rax      # 0x47cb00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c7cc <mi_heap_collect_ex+0x16c>
               	movq	328811(%rip), %rax      # 0x47cb80 <abandoned_visited>
               	xorl	%r14d, %r14d
               	testq	%rax, %rax
               	je	0x42c8f0 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 328790(%rip)      # 0x47cb80 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x42c8f0 <mi_heap_collect_ex+0x290>
               	movq	328646(%rip), %rax      # 0x47cb00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c760 <mi_heap_collect_ex+0x100>
               	movq	328823(%rip), %rdx      # 0x47cbc0 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 328610(%rip)      # 0x47cb00 <abandoned>
               	je	0x42c7bc <mi_heap_collect_ex+0x15c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x42c770 <mi_heap_collect_ex+0x110>
               	movq	328569(%rip), %rax      # 0x47cb00 <abandoned>
               	nopw	(%rax,%rax)
               	movq	328745(%rip), %rdx      # 0x47cbc0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 328518(%rip)      # 0x47cb00 <abandoned>
               	jne	0x42c790 <mi_heap_collect_ex+0x130>
               	lock
               	addq	%rdx, 328572(%rip)      # 0x47cb40 <abandoned_count>
               	lock
               	subq	%rdx, 328692(%rip)      # 0x47cbc0 <abandoned_visited_count>
               	lock
               	addq	$1, 328427(%rip)        # 0x47cac0 <abandoned_readers>
               	movq	328484(%rip), %rax      # 0x47cb00 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x42c8e4 <mi_heap_collect_ex+0x284>
               	movq	16(%rdi), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 328439(%rip)      # 0x47cb00 <abandoned>
               	jne	0x42c7e0 <mi_heap_collect_ex+0x180>
               	lock
               	subq	$1, 328364(%rip)        # 0x47cac0 <abandoned_readers>
               	movq	$0, 16(%rdi)
               	lock
               	subq	$1, 328475(%rip)        # 0x47cb40 <abandoned_count>
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fc30 <mi_segment_reclaim>
               	movq	328389(%rip), %rax      # 0x47cb00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	jbe	0x42c70e <mi_heap_collect_ex+0xae>
               	jmp	0x42c7cc <mi_heap_collect_ex+0x16c>
               	movb	$1, 8(%rbx)
               	movq	328564(%rip), %rax      # 0x47cbc8 <deferred_free>
               	movq	328565(%rip), %rdx      # 0x47cbd0 <deferred_arg>
               	movl	$1, %edi
               	callq	*%rax
               	movq	(%r15), %rbx
               	movb	$0, 8(%rbx)
               	cmpl	$2, %ebp
               	jne	0x42c6b8 <mi_heap_collect_ex+0x58>
               	movb	$1, %r14b
               	cmpq	$0, 3016(%r15)
               	je	0x42c8f0 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	jmp	0x42c89a <mi_heap_collect_ex+0x23a>
               	nopw	(%rax,%rax)
               	addq	$1, %rcx
               	cmpq	$75, %rcx
               	je	0x42c8f0 <mi_heap_collect_ex+0x290>
               	leaq	(%rcx,%rcx,2), %rax
               	movq	1040(%r15,%rax,8), %rdx
               	nopw	%cs:(%rax,%rax)
               	testq	%rdx, %rdx
               	je	0x42c890 <mi_heap_collect_ex+0x230>
               	movq	%rdx, %rsi
               	movq	48(%rdx), %rdx
               	movq	32(%rsi), %rax
               	movl	%eax, %edi
               	andl	$3, %edi
               	cmpl	$3, %edi
               	je	0x42c8b0 <mi_heap_collect_ex+0x250>
               	cmpl	$1, %edi
               	je	0x42c8e0 <mi_heap_collect_ex+0x280>
               	movq	%rax, %rdi
               	orq	$3, %rdi
               	lock
               	cmpxchgq	%rdi, 32(%rsi)
               	jne	0x42c8bc <mi_heap_collect_ex+0x25c>
               	jmp	0x42c8b0 <mi_heap_collect_ex+0x250>
               	pause
               	jmp	0x42c8bc <mi_heap_collect_ex+0x25c>
               	lock
               	subq	$1, 328147(%rip)        # 0x47cac0 <abandoned_readers>
               	xorl	%r14d, %r14d
               	movq	2840(%r15), %rax
               	xorl	%ecx, %ecx
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x42c930 <mi_heap_collect_ex+0x2d0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%rcx, 2840(%r15)
               	jne	0x42c900 <mi_heap_collect_ex+0x2a0>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f550 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42c920 <mi_heap_collect_ex+0x2c0>
               	movq	3024(%r15), %rbp
               	cmpq	3032(%r15), %rbp
               	jbe	0x42cd5b <mi_heap_collect_ex+0x6fb>
               	movq	$74, 3024(%r15)
               	movq	$0, 3032(%r15)
               	cmpq	$0, 3016(%r15)
               	movq	%r15, (%rsp)
               	je	0x42ce31 <mi_heap_collect_ex+0x7d1>
               	testb	%r14b, %r14b
               	je	0x42cdc4 <mi_heap_collect_ex+0x764>
               	leaq	1016(%r15), %rax
               	movq	%rax, 8(%rsp)
               	xorl	%eax, %eax
               	leaq	228278(%rip), %r13      # 0x464540 <_mi_stats_main>
               	jmp	0x42c9ad <mi_heap_collect_ex+0x34d>
               	nop
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	addq	$24, 8(%rsp)
               	cmpq	$75, %rax
               	movq	(%rsp), %r15
               	je	0x42ce31 <mi_heap_collect_ex+0x7d1>
               	movq	%rax, 16(%rsp)
               	leaq	(%rax,%rax,2), %rax
               	movq	1040(%r15,%rax,8), %r14
               	testq	%r14, %r14
               	je	0x42c990 <mi_heap_collect_ex+0x330>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42c9f5 <mi_heap_collect_ex+0x395>
               	nopl	(%rax,%rax)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d320 <_mi_page_free>
               	testq	%r14, %r14
               	je	0x42c990 <mi_heap_collect_ex+0x330>
               	movq	%r14, %rbx
               	movq	48(%r14), %r14
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42d250 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbx)
               	je	0x42c9e0 <mi_heap_collect_ex+0x380>
               	leaq	48(%rbx), %r10
               	movq	40(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	40(%rbx), %r12
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42ca2e <mi_heap_collect_ex+0x3ce>
               	movq	(%r10), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%r10), %r9
               	testq	%r9, %r9
               	je	0x42ca3a <mi_heap_collect_ex+0x3da>
               	movq	%rax, 56(%r9)
               	cmpq	%rbx, 8(%r15)
               	je	0x42ca50 <mi_heap_collect_ex+0x3f0>
               	cmpq	%rbx, (%r15)
               	jne	0x42cc60 <mi_heap_collect_ex+0x600>
               	jmp	0x42ca61 <mi_heap_collect_ex+0x401>
               	nop
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r15)
               	cmpq	%rbx, (%r15)
               	jne	0x42cc60 <mi_heap_collect_ex+0x600>
               	movq	%r9, (%r15)
               	movq	16(%r15), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42cc60 <mi_heap_collect_ex+0x600>
               	testq	%r9, %r9
               	leaq	104386(%rip), %rcx      # 0x446240 <_mi_page_empty>
               	cmoveq	%rcx, %r9
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r9, 8(%r12,%r11,8)
               	je	0x42cc60 <mi_heap_collect_ex+0x600>
               	cmpq	$9, %rax
               	jae	0x42caa2 <mi_heap_collect_ex+0x442>
               	xorl	%ecx, %ecx
               	jmp	0x42cb62 <mi_heap_collect_ex+0x502>
               	cmpq	$64, %rax
               	ja	0x42cab2 <mi_heap_collect_ex+0x452>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42cacd <mi_heap_collect_ex+0x46d>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r12), %rbp
               	movq	8(%rsp), %rdx
               	nopw	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42cb40 <mi_heap_collect_ex+0x4e0>
               	cmpq	$71, %rax
               	ja	0x42cb10 <mi_heap_collect_ex+0x4b0>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x42cb40 <mi_heap_collect_ex+0x4e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42cb40 <mi_heap_collect_ex+0x4e0>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r13
               	movl	%r13d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r13,4), %ecx
               	leaq	227843(%rip), %r13      # 0x464540 <_mi_stats_main>
               	addb	$-3, %cl
               	cmpq	%rbp, %rdx
               	jbe	0x42cb4e <mi_heap_collect_ex+0x4ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r8b
               	je	0x42cae0 <mi_heap_collect_ex+0x480>
               	leaq	1(%rdi), %rcx
               	cmpq	%r11, %rdi
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42cc60 <mi_heap_collect_ex+0x600>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42cc50 <mi_heap_collect_ex+0x5f0>
               	movq	%r8, %rdi
               	andq	$-4, %rdi
               	movq	%r9, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%rdi), %rbp
               	movq	%rbp, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rbp
               	jae	0x42cba5 <mi_heap_collect_ex+0x545>
               	xorl	%ebp, %ebp
               	jmp	0x42cc02 <mi_heap_collect_ex+0x5a2>
               	leaq	(%r12,%rcx,8), %r13
               	addq	$120, %r13
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbp,8)
               	movdqu	%xmm0, -96(%r13,%rbp,8)
               	movdqu	%xmm0, -80(%r13,%rbp,8)
               	movdqu	%xmm0, -64(%r13,%rbp,8)
               	movdqu	%xmm0, -48(%r13,%rbp,8)
               	movdqu	%xmm0, -32(%r13,%rbp,8)
               	movdqu	%xmm0, -16(%r13,%rbp,8)
               	movdqu	%xmm0, (%r13,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdx
               	jne	0x42cbc0 <mi_heap_collect_ex+0x560>
               	testq	%rax, %rax
               	je	0x42cc32 <mi_heap_collect_ex+0x5d2>
               	addq	%rcx, %rbp
               	leaq	(%r12,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	nopl	(%rax)
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42cc20 <mi_heap_collect_ex+0x5c0>
               	cmpq	%rdi, %r8
               	leaq	227588(%rip), %r13      # 0x464540 <_mi_stats_main>
               	je	0x42cc60 <mi_heap_collect_ex+0x600>
               	addq	%rdi, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r9, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42cc50 <mi_heap_collect_ex+0x5f0>
               	nop
               	movq	3016(%r12), %rax
               	addq	$-1, %rax
               	movq	%rax, 3016(%r12)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r10)
               	movb	6(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 6(%rbx)
               	movq	$0, 40(%rbx)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	144(%rsi), %rdx
               	leaq	224(%rdx), %rcx
               	cmpq	%r13, %rcx
               	jb	0x42cd10 <mi_heap_collect_ex+0x6b0>
               	leaq	228034(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42cd10 <mi_heap_collect_ex+0x6b0>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 248(%rdx)
               	leaq	1(%rdi), %rbp
               	movq	240(%rdx), %rax
               	cmpq	%rdi, %rax
               	jg	0x42ccf0 <mi_heap_collect_ex+0x690>
               	lock
               	cmpxchgq	%rbp, 240(%rdx)
               	jne	0x42cce0 <mi_heap_collect_ex+0x680>
               	lock
               	addq	$1, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42c9f0 <mi_heap_collect_ex+0x390>
               	jmp	0x42cd4a <mi_heap_collect_ex+0x6ea>
               	nopl	(%rax,%rax)
               	movq	248(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 248(%rdx)
               	cmpq	240(%rdx), %rdi
               	jl	0x42cd32 <mi_heap_collect_ex+0x6d2>
               	movq	%rax, 240(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42c9f0 <mi_heap_collect_ex+0x390>
               	addq	$32, %rsi
               	movq	%rbx, %rdi
               	callq	0x42efd0 <mi_segment_abandon>
               	jmp	0x42c9f0 <mi_heap_collect_ex+0x390>
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	leaq	(%r15,%rax,8), %rbx
               	addq	$1040, %rbx             # imm = 0x410
               	jmp	0x42cd95 <mi_heap_collect_ex+0x735>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopl	(%rax)
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r15), %rbp
               	ja	0x42c944 <mi_heap_collect_ex+0x2e4>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42cd80 <mi_heap_collect_ex+0x720>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x42cd80 <mi_heap_collect_ex+0x720>
               	cmpl	$0, 16(%rax)
               	jne	0x42cd73 <mi_heap_collect_ex+0x713>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42d320 <_mi_page_free>
               	jmp	0x42cd80 <mi_heap_collect_ex+0x720>
               	xorl	%r14d, %r14d
               	jmp	0x42cdde <mi_heap_collect_ex+0x77e>
               	nopl	(%rax)
               	addq	$1, %r14
               	cmpq	$75, %r14
               	movq	(%rsp), %r15
               	je	0x42ce31 <mi_heap_collect_ex+0x7d1>
               	leaq	(%r14,%r14,2), %rax
               	movq	1040(%r15,%rax,8), %rbp
               	testq	%rbp, %rbp
               	je	0x42cdd0 <mi_heap_collect_ex+0x770>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42ce08 <mi_heap_collect_ex+0x7a8>
               	movq	%rbx, %rbp
               	testq	%rbx, %rbx
               	je	0x42cdd0 <mi_heap_collect_ex+0x770>
               	movq	48(%rbp), %rbx
               	movq	%rbp, %rdi
               	movl	$1, %esi
               	callq	0x42d250 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbp)
               	jne	0x42ce00 <mi_heap_collect_ex+0x7a0>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d320 <_mi_page_free>
               	jmp	0x42ce00 <mi_heap_collect_ex+0x7a0>
               	movq	(%r15), %r15
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42d13b <mi_heap_collect_ex+0xadb>
               	leaq	227061(%rip), %rbx      # 0x464540 <_mi_stats_main>
               	movl	$1, %r13d
               	jmp	0x42ce8c <mi_heap_collect_ex+0x82c>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	movq	(%r14), %rdx
               	andb	$1, %r12b
               	movzbl	%al, %r8d
               	movzbl	%r12b, %ecx
               	movq	%r14, %rdi
               	callq	0x42dd60 <_mi_mem_free>
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42d13b <mi_heap_collect_ex+0xadb>
               	movq	120(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 120(%r15)
               	movq	24(%r14), %rax
               	movq	%rax, 136(%r15)
               	movq	$0, 24(%r14)
               	movq	144(%r15), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rbx, %rax
               	jb	0x42cf10 <mi_heap_collect_ex+0x8b0>
               	leaq	227511(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42cf10 <mi_heap_collect_ex+0x8b0>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42cf00 <mi_heap_collect_ex+0x8a0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42cef0 <mi_heap_collect_ex+0x890>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42cf44 <mi_heap_collect_ex+0x8e4>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42cf32 <mi_heap_collect_ex+0x8d2>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	72(%r14), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r14)
               	movq	144(%r15), %rcx
               	cmpq	%rbx, %rcx
               	setae	%dl
               	leaq	227358(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42cfb0 <mi_heap_collect_ex+0x950>
               	testb	%al, %al
               	je	0x42cff0 <mi_heap_collect_ex+0x990>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jge	0x42cf9d <mi_heap_collect_ex+0x93d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42cf90 <mi_heap_collect_ex+0x930>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42d012 <mi_heap_collect_ex+0x9b2>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42d0ff <mi_heap_collect_ex+0xa9f>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42cfdd <mi_heap_collect_ex+0x97d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42cfd0 <mi_heap_collect_ex+0x970>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42d11f <mi_heap_collect_ex+0xabf>
               	nopw	(%rax,%rax)
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42d006 <mi_heap_collect_ex+0x9a6>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	jbe	0x42d02b <mi_heap_collect_ex+0x9cb>
               	movq	%rax, 96(%r15)
               	movq	104(%r15), %rax
               	subq	%rsi, %rax
               	movq	%rax, 104(%r15)
               	cmpq	112(%r15), %rax
               	jbe	0x42d040 <mi_heap_collect_ex+0x9e0>
               	movq	%rax, 112(%r15)
               	movq	64(%r14), %r10
               	testq	%r10, %r10
               	je	0x42ce60 <mi_heap_collect_ex+0x800>
               	cmpq	$1, %r10
               	jne	0x42d060 <mi_heap_collect_ex+0xa00>
               	movb	$1, %r12b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42d0b4 <mi_heap_collect_ex+0xa54>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r14), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r12b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42d080 <mi_heap_collect_ex+0xa20>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42d0d0 <mi_heap_collect_ex+0xa70>
               	shlq	$6, %r8
               	movb	121(%r14,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r12b
               	testb	$1, %al
               	je	0x42ce63 <mi_heap_collect_ex+0x803>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42abb0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r12b, %r12d
               	movl	$0, %eax
               	cmovnel	%eax, %r12d
               	movb	$1, %al
               	jmp	0x42ce65 <mi_heap_collect_ex+0x805>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42d115 <mi_heap_collect_ex+0xab5>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	ja	0x42d027 <mi_heap_collect_ex+0x9c7>
               	jmp	0x42d02b <mi_heap_collect_ex+0x9cb>
               	movq	219758(%rip), %rax      # 0x462bb0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	movq	(%rsp), %rdx
               	je	0x42d159 <mi_heap_collect_ex+0xaf9>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42d162 <mi_heap_collect_ex+0xb02>
               	movq	(%rdx), %rax
               	cmpq	%rdx, 16(%rax)
               	je	0x42d171 <mi_heap_collect_ex+0xb11>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	260408(%rip), %r14      # 0x46cab0 <regions_count>
               	testq	%r14, %r14
               	je	0x42d162 <mi_heap_collect_ex+0xb02>
               	xorl	%ebp, %ebp
               	leaq	260410(%rip), %r15      # 0x46cac0 <regions>
               	movq	$-1, %rbx
               	jmp	0x42d1b9 <mi_heap_collect_ex+0xb59>
               	xorl	%ecx, %ecx
               	cmpq	$-1, %rax
               	sete	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	callq	0x42d5a0 <_mi_arena_free>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	addq	$1, %rbp
               	cmpq	%r14, %rbp
               	je	0x42d162 <mi_heap_collect_ex+0xb02>
               	movq	%rbp, %rcx
               	shlq	$6, %rcx
               	movq	(%rcx,%r15), %rax
               	testq	%rax, %rax
               	je	0x42d1b0 <mi_heap_collect_ex+0xb50>
               	leaq	(%r15,%rcx), %rsi
               	leaq	(%rcx,%r15), %rdx
               	addq	$16, %rdx
               	movq	16(%rcx,%r15), %rax
               	nop
               	testq	%rax, %rax
               	jne	0x42d1b0 <mi_heap_collect_ex+0xb50>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, (%rdx)
               	jne	0x42d1e0 <mi_heap_collect_ex+0xb80>
               	movq	8(%rcx,%r15), %rdi
               	movq	48(%rcx,%r15), %rdx
               	movq	32(%rcx,%r15), %rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 48(%rsi)
               	movdqa	%xmm0, 32(%rsi)
               	movdqa	%xmm0, 16(%rsi)
               	movdqa	%xmm0, (%rsi)
               	movq	$0, (%rsi)
               	testq	%rdi, %rdi
               	je	0x42d1b0 <mi_heap_collect_ex+0xb50>
               	movq	325785(%rip), %rcx      # 0x47cac0 <abandoned_readers>
               	testq	%rcx, %rcx
               	je	0x42d18f <mi_heap_collect_ex+0xb2f>
               	pause
               	movq	325767(%rip), %rcx      # 0x47cac0 <abandoned_readers>
               	testq	%rcx, %rcx
               	jne	0x42d230 <mi_heap_collect_ex+0xbd0>
               	jmp	0x42d18f <mi_heap_collect_ex+0xb2f>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free_collect>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	testl	%esi, %esi
               	jne	0x42d266 <_mi_page_free_collect+0x16>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x42d2b9 <_mi_page_free_collect+0x69>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x42d270 <_mi_page_free_collect+0x20>
               	andq	$-4, %rcx
               	je	0x42d2b9 <_mi_page_free_collect+0x69>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x42d2a2 <_mi_page_free_collect+0x52>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x42d290 <_mi_page_free_collect+0x40>
               	cmpl	%edx, %eax
               	jbe	0x42d2e6 <_mi_page_free_collect+0x96>
               	leaq	99089(%rip), %rsi       # 0x4455be <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42d2df <_mi_page_free_collect+0x8f>
               	movq	8(%rbx), %rcx
               	testq	%rcx, %rcx
               	jne	0x42d304 <_mi_page_free_collect+0xb4>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x42d2c2 <_mi_page_free_collect+0x72>
               	jmp	0x42d2df <_mi_page_free_collect+0x8f>
               	testb	%bpl, %bpl
               	je	0x42d2df <_mi_page_free_collect+0x8f>
               	movq	%rax, %rsi
               	movq	%rsi, %rdx
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	jne	0x42d30c <_mi_page_free_collect+0xbc>
               	movq	%rcx, (%rdx)
               	jmp	0x42d2cb <_mi_page_free_collect+0x7b>
               	nopl	(%rax)

<_mi_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %rax
               	movq	(%rax), %r8
               	movq	40(%rdi), %r14
               	movq	56(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x42d34c <_mi_page_free+0x2c>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rcx)
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42d359 <_mi_page_free+0x39>
               	movq	%rcx, 56(%rax)
               	cmpq	%rdi, 8(%rsi)
               	je	0x42d36e <_mi_page_free+0x4e>
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d55e <_mi_page_free+0x23e>
               	jmp	0x42d383 <_mi_page_free+0x63>
               	movq	56(%rdi), %rcx
               	movq	%rcx, 8(%rsi)
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d55e <_mi_page_free+0x23e>
               	movq	%rax, (%rsi)
               	movq	16(%rsi), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42d55e <_mi_page_free+0x23e>
               	testq	%rax, %rax
               	leaq	102047(%rip), %r10      # 0x446240 <_mi_page_empty>
               	cmovneq	%rax, %r10
               	leaq	7(%rcx), %r11
               	shrq	$3, %r11
               	cmpq	%r10, 8(%r14,%r11,8)
               	je	0x42d55e <_mi_page_free+0x23e>
               	cmpq	$9, %rcx
               	jae	0x42d3c5 <_mi_page_free+0xa5>
               	xorl	%ecx, %ecx
               	jmp	0x42d482 <_mi_page_free+0x162>
               	cmpq	$64, %rcx
               	ja	0x42d3d5 <_mi_page_free+0xb5>
               	leal	1(%r11), %r15d
               	andb	$-2, %r15b
               	jmp	0x42d3f0 <_mi_page_free+0xd0>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rbx,4), %r15d
               	addb	$-3, %r15b
               	leaq	1040(%r14), %rax
               	addq	$-24, %rsi
               	nopl	(%rax,%rax)
               	movq	16(%rsi), %rbx
               	addq	$7, %rbx
               	movq	%rbx, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rbx
               	jb	0x42d460 <_mi_page_free+0x140>
               	cmpq	$71, %rbx
               	ja	0x42d430 <_mi_page_free+0x110>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x42d460 <_mi_page_free+0x140>
               	movb	$73, %cl
               	cmpq	$2097159, %rbx          # imm = 0x200007
               	ja	0x42d460 <_mi_page_free+0x140>
               	leaq	-1(%rbp), %rbx
               	bsrq	%rbx, %r12
               	movl	%r12d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rbx
               	andl	$3, %ebx
               	leal	(%rbx,%r12,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rsi
               	jbe	0x42d46e <_mi_page_free+0x14e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r15b
               	je	0x42d400 <_mi_page_free+0xe0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r11, %rbp
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42d55e <_mi_page_free+0x23e>
               	addq	$1, %r11
               	movq	%r11, %r12
               	subq	%rcx, %r12
               	cmpq	$4, %r12
               	jb	0x42d550 <_mi_page_free+0x230>
               	movq	%r12, %r15
               	andq	$-4, %r15
               	movq	%r10, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r15), %rsi
               	movq	%rsi, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x42d4c5 <_mi_page_free+0x1a5>
               	xorl	%ebx, %ebx
               	jmp	0x42d519 <_mi_page_free+0x1f9>
               	leaq	(%r14,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42d4e0 <_mi_page_free+0x1c0>
               	testq	%rbp, %rbp
               	je	0x42d542 <_mi_page_free+0x222>
               	addq	%rcx, %rbx
               	leaq	(%r14,%rbx,8), %rax
               	addq	$24, %rax
               	negq	%rbp
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbp
               	jne	0x42d530 <_mi_page_free+0x210>
               	cmpq	%r15, %r12
               	je	0x42d55e <_mi_page_free+0x23e>
               	addq	%r15, %rcx
               	nop
               	movq	%r10, 8(%r14,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42d550 <_mi_page_free+0x230>
               	addq	$32, %r8
               	movq	3016(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 3016(%r14)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r9)
               	movb	6(%rdi), %al
               	andb	$-2, %al
               	movb	%al, 6(%rdi)
               	movq	$0, 40(%rdi)
               	movzbl	%dl, %esi
               	movq	%r8, %rdx
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e1a0 <_mi_segment_page_free>

<_mi_arena_free>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x42d656 <_mi_arena_free+0xb6>
               	movq	%rsi, %r14
               	testq	%rsi, %rsi
               	je	0x42d656 <_mi_arena_free+0xb6>
               	movq	%rdx, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	je	0x42d664 <_mi_arena_free+0xc4>
               	movzbl	%bl, %eax
               	leaq	225829(%rip), %rcx      # 0x464800 <mi_arenas>
               	movq	-8(%rcx,%rax,8), %r12
               	testq	%r12, %r12
               	je	0x42d67f <_mi_arena_free+0xdf>
               	movq	%rbx, %rax
               	shrq	$14, %rax
               	cmpq	%rax, 16(%r12)
               	jbe	0x42d688 <_mi_arena_free+0xe8>
               	shrq	$8, %rbx
               	leaq	16777215(%r14), %rsi
               	movq	%rsi, %r13
               	shrq	$24, %r13
               	cmpb	$0, 29(%r12)
               	jne	0x42d640 <_mi_arena_free+0xa0>
               	andq	$-16777216, %rsi        # imm = 0xFF000000
               	leaq	15(%rsp), %r8
               	movq	%r15, %rdi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42da50 <mi_os_commitx>
               	movq	48(%r12), %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d6e0 <_mi_bitmap_unclaim_across>
               	addq	$56, %r12
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d6e0 <_mi_bitmap_unclaim_across>
               	testb	%al, %al
               	je	0x42d6b1 <_mi_arena_free+0x111>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movzbl	%cl, %edx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42b9e0 <_mi_os_free_ex>
               	leaq	97794(%rip), %rsi       # 0x445488 <typeinfo name for kotlin::gc::GCSchedulerData+0x14cf>
               	jmp	0x42d68f <_mi_arena_free+0xef>
               	leaq	97853(%rip), %rsi       # 0x4454cc <typeinfo name for kotlin::gc::GCSchedulerData+0x1513>
               	movl	$22, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	movq	%rbx, %r8
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42c010 <_mi_error_message>
               	leaq	97886(%rip), %rsi       # 0x445516 <typeinfo name for kotlin::gc::GCSchedulerData+0x155d>
               	movl	$11, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42c010 <_mi_error_message>
               	nopw	(%rax,%rax)

<_mi_bitmap_unclaim_across>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x42d9e3 <_mi_bitmap_unclaim_across+0x303>
               	cmpq	$63, %rsi
               	jbe	0x42d70b <_mi_bitmap_unclaim_across+0x2b>
               	movq	$-1, %rbp
               	jmp	0x42d728 <_mi_bitmap_unclaim_across+0x48>
               	testq	%rsi, %rsi
               	je	0x42d9d9 <_mi_bitmap_unclaim_across+0x2f9>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r9d, %r9d
               	xorl	%r8d, %r8d
               	xorl	%ebx, %ebx
               	leaq	(%rdi,%rax,8), %r11
               	movq	%rbp, %rcx
               	notq	%rcx
               	movq	(%rdi,%rax,8), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d740 <_mi_bitmap_unclaim_across+0x60>
               	andq	%rbp, %rax
               	cmpq	%rbp, %rax
               	sete	%r10b
               	addq	$8, %r11
               	testq	%rbx, %rbx
               	je	0x42d99f <_mi_bitmap_unclaim_across+0x2bf>
               	movq	%r9, %rcx
               	notq	%rcx
               	leaq	-1(%rbx), %rdx
               	movq	%rbx, %rsi
               	andq	$3, %rsi
               	je	0x42d7b9 <_mi_bitmap_unclaim_across+0xd9>
               	xorl	%edi, %edi
               	nopl	(%rax)
               	movq	(%r11), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rbp
               	andq	%rcx, %rbp
               	lock
               	cmpxchgq	%rbp, (%r11)
               	jne	0x42d790 <_mi_bitmap_unclaim_across+0xb0>
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edi, %r10d
               	addq	$8, %r11
               	addq	$-1, %rsi
               	jne	0x42d780 <_mi_bitmap_unclaim_across+0xa0>
               	andq	$-4, %rbx
               	cmpq	$3, %rdx
               	jb	0x42d99f <_mi_bitmap_unclaim_across+0x2bf>
               	leaq	-4(%rbx), %rdi
               	testb	$4, %dil
               	jne	0x42d868 <_mi_bitmap_unclaim_across+0x188>
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d7e0 <_mi_bitmap_unclaim_across+0x100>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rbx
               	andq	%rcx, %rbx
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rbx, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d800 <_mi_bitmap_unclaim_across+0x120>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rbx
               	andq	%rcx, %rbx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rbx, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d820 <_mi_bitmap_unclaim_across+0x140>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 24(%r11)
               	jne	0x42d840 <_mi_bitmap_unclaim_across+0x160>
               	andq	%rsi, %rax
               	andq	%r9, %rax
               	xorl	%edx, %edx
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edx, %r10d
               	addq	$32, %r11
               	movq	%rdi, %rbx
               	cmpq	$4, %rdi
               	jb	0x42d99f <_mi_bitmap_unclaim_across+0x2bf>
               	xorl	%r14d, %r14d
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d890 <_mi_bitmap_unclaim_across+0x1b0>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d8b0 <_mi_bitmap_unclaim_across+0x1d0>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d8d0 <_mi_bitmap_unclaim_across+0x1f0>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rdx
               	nop
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 24(%r11)
               	movq	%rax, %rdx
               	jne	0x42d8f0 <_mi_bitmap_unclaim_across+0x210>
               	andq	%rsi, %rdx
               	movq	32(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 32(%r11)
               	movq	%rax, %rsi
               	jne	0x42d910 <_mi_bitmap_unclaim_across+0x230>
               	movq	40(%r11), %rbp
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	andq	%rcx, %rdi
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdi, 40(%r11)
               	movq	%rax, %rbp
               	jne	0x42d930 <_mi_bitmap_unclaim_across+0x250>
               	andq	%rsi, %rbp
               	movq	48(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 48(%r11)
               	movq	%rax, %rsi
               	jne	0x42d950 <_mi_bitmap_unclaim_across+0x270>
               	andq	%rbp, %rsi
               	addq	$-8, %rbx
               	movq	56(%r11), %rax
               	nop
               	movq	%rax, %rdi
               	andq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 56(%r11)
               	jne	0x42d970 <_mi_bitmap_unclaim_across+0x290>
               	andq	%rsi, %rax
               	andq	%rdx, %rax
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%r14d, %r10d
               	addq	$64, %r11
               	testq	%rbx, %rbx
               	jne	0x42d880 <_mi_bitmap_unclaim_across+0x1a0>
               	testq	%r8, %r8
               	je	0x42d9cd <_mi_bitmap_unclaim_across+0x2ed>
               	movq	%r8, %rcx
               	notq	%rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d9b0 <_mi_bitmap_unclaim_across+0x2d0>
               	andq	%r8, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%ecx, %r10d
               	andb	$1, %r10b
               	movl	%r10d, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	xorl	%r9d, %r9d
               	xorl	%ebp, %ebp
               	jmp	0x42d72b <_mi_bitmap_unclaim_across+0x4b>
               	movl	$64, %r10d
               	subq	%rdx, %r10
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r9
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r8d, %r8d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r10, %rsi
               	movq	%rsi, %rbx
               	shrq	$6, %rbx
               	andq	$63, %rsi
               	je	0x42d730 <_mi_bitmap_unclaim_across+0x50>
               	movq	$-1, %r9
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x42d730 <_mi_bitmap_unclaim_across+0x50>
               	nopl	(%rax)

<mi_os_commitx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%edx, %r14d
               	testq	%r8, %r8
               	je	0x42da64 <mi_os_commitx+0x14>
               	movb	$0, (%r8)
               	movb	$1, %r15b
               	testq	%rdi, %rdi
               	je	0x42dd48 <mi_os_commitx+0x2f8>
               	testq	%rsi, %rsi
               	je	0x42dd48 <mi_os_commitx+0x2f8>
               	movq	218360(%rip), %rbp      # 0x462f78 <os_page_size>
               	movq	%rbp, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %rdx # imm = 0x5555555555555555
               	andq	%rax, %rdx
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	movabsq	$3689348814741910323, %rdx # imm = 0x3333333333333333
               	movq	%rax, %rbx
               	andq	%rdx, %rbx
               	shrq	$2, %rax
               	andq	%rdx, %rax
               	addq	%rbx, %rax
               	movq	%rax, %rdx
               	shrq	$4, %rdx
               	addq	%rax, %rdx
               	movabsq	$1085102592571150095, %rbx # imm = 0xF0F0F0F0F0F0F0F
               	andq	%rdx, %rbx
               	movabsq	$72340172838076673, %rax # imm = 0x101010101010101
               	imulq	%rbx, %rax
               	shrq	$56, %rax
               	testb	%cl, %cl
               	je	0x42db0d <mi_os_commitx+0xbd>
               	leaq	(%rdi,%rbp), %r12
               	addq	$-1, %r12
               	cmpl	$2, %eax
               	jae	0x42db3d <mi_os_commitx+0xed>
               	negq	%rbp
               	andq	%rbp, %r12
               	addq	%rsi, %rdi
               	andq	%rbp, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42dbed <mi_os_commitx+0x19d>
               	jmp	0x42dd48 <mi_os_commitx+0x2f8>
               	cmpl	$2, %eax
               	jae	0x42db53 <mi_os_commitx+0x103>
               	movq	%rbp, %rax
               	negq	%rax
               	movq	%rax, %r12
               	andq	%rdi, %r12
               	addq	%rsi, %rdi
               	leaq	(%rdi,%rbp), %rbx
               	addq	$-1, %rbx
               	andq	%rax, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42dbed <mi_os_commitx+0x19d>
               	jmp	0x42dd48 <mi_os_commitx+0x2f8>
               	movq	%r12, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42db6c <mi_os_commitx+0x11c>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42db73 <mi_os_commitx+0x123>
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42db8f <mi_os_commitx+0x13f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rcx
               	jmp	0x42db97 <mi_os_commitx+0x147>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %r12
               	addq	%rsi, %rdi
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42dbb9 <mi_os_commitx+0x169>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42dbbf <mi_os_commitx+0x16f>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ecx
               	leaq	(%rdi,%rsi), %rax
               	leaq	(%rax,%rbp), %rbx
               	addq	$-1, %rbx
               	movq	%rbx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42dbd2 <mi_os_commitx+0x182>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42dbd8 <mi_os_commitx+0x188>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42dbed <mi_os_commitx+0x19d>
               	jmp	0x42dd48 <mi_os_commitx+0x2f8>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rcx, %rdi
               	subq	%rdx, %rbx
               	movq	%rdi, %r12
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jle	0x42dd48 <mi_os_commitx+0x2f8>
               	movq	%rsi, %rcx
               	testb	%r14b, %r14b
               	je	0x42dc54 <mi_os_commitx+0x204>
               	lock
               	xaddq	%rcx, 223670(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	addq	%rsi, %rcx
               	movq	223652(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42dc20 <mi_os_commitx+0x1d0>
               	lock
               	cmpxchgq	%rcx, 223634(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42dc10 <mi_os_commitx+0x1c0>
               	testq	%rsi, %rsi
               	jle	0x42dc8f <mi_os_commitx+0x23f>
               	lock
               	addq	%rsi, 223603(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	leaq	223500(%rip), %rax      # 0x464540 <_mi_stats_main>
               	leaq	223973(%rip), %rcx      # 0x464720 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jb	0x42dcad <mi_os_commitx+0x25d>
               	lock
               	addq	$1, 223967(%rip)        # 0x464728 <_mi_stats_main+0x1e8>
               	lock
               	addq	$1, 223950(%rip)        # 0x464720 <_mi_stats_main+0x1e0>
               	jmp	0x42dcd1 <mi_os_commitx+0x281>
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 223573(%rip)      # 0x4645b8 <_mi_stats_main+0x78>
               	subq	%rsi, %rdx
               	movq	223555(%rip), %rax      # 0x4645b0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42dc80 <mi_os_commitx+0x230>
               	lock
               	cmpxchgq	%rdx, 223538(%rip)      # 0x4645b0 <_mi_stats_main+0x70>
               	jne	0x42dc70 <mi_os_commitx+0x220>
               	testq	%rsi, %rsi
               	js	0x42dce7 <mi_os_commitx+0x297>
               	lock
               	addq	%rsi, 223515(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	jmp	0x42dcef <mi_os_commitx+0x29f>
               	negq	%rsi
               	lock
               	addq	%rsi, 223502(%rip)      # 0x4645a8 <_mi_stats_main+0x68>
               	leaq	223391(%rip), %rax      # 0x464540 <_mi_stats_main>
               	leaq	223864(%rip), %rcx      # 0x464720 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jae	0x42dc40 <mi_os_commitx+0x1f0>
               	movq	223860(%rip), %rax      # 0x464728 <_mi_stats_main+0x1e8>
               	addq	$1, %rax
               	movq	%rax, 223849(%rip)      # 0x464728 <_mi_stats_main+0x1e8>
               	movq	223834(%rip), %rax      # 0x464720 <_mi_stats_main+0x1e0>
               	addq	$1, %rax
               	movq	%rax, 223823(%rip)      # 0x464720 <_mi_stats_main+0x1e0>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	0x4138d0 <mprotect@plt>
               	testl	%eax, %eax
               	jne	0x42dd0f <mi_os_commitx+0x2bf>
               	jmp	0x42dd48 <mi_os_commitx+0x2f8>
               	lock
               	addq	%rcx, 223409(%rip)      # 0x4645a0 <_mi_stats_main+0x60>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	$16434, %ecx            # imm = 0x4032
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	%r12, %rax
               	je	0x42dd48 <mi_os_commitx+0x2f8>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %r8d
               	testl	%r8d, %r8d
               	je	0x42dd48 <mi_os_commitx+0x2f8>
               	leaq	96296(%rip), %rax       # 0x44554b <typeinfo name for kotlin::gc::GCSchedulerData+0x1592>
               	leaq	96296(%rip), %rsi       # 0x445552 <typeinfo name for kotlin::gc::GCSchedulerData+0x1599>
               	testb	%r14b, %r14b
               	cmovneq	%rax, %rsi
               	leaq	96291(%rip), %rdi       # 0x44555b <typeinfo name for kotlin::gc::GCSchedulerData+0x15a2>
               	xorl	%r15d, %r15d
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movl	%r15d, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_mem_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42ded7 <_mi_mem_free+0x177>
               	testq	%rsi, %rsi
               	je	0x42ded7 <_mi_mem_free+0x177>
               	movq	%rdx, %rbx
               	movq	%rdi, %r14
               	movq	217582(%rip), %rdi      # 0x462f78 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%rsi,%rdi), %r15
               	addq	$-1, %r15
               	testq	%rax, %rdi
               	jne	0x42ddcb <_mi_mem_free+0x6b>
               	negq	%rdi
               	andq	%rdi, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	je	0x42ddf6 <_mi_mem_free+0x96>
               	movzbl	%cl, %ecx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42d5a0 <_mi_arena_free>
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x42dde1 <_mi_mem_free+0x81>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x42dde8 <_mi_mem_free+0x88>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rdx, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	jne	0x42ddac <_mi_mem_free+0x4c>
               	cmpq	$67108864, %r15         # imm = 0x4000000
               	ja	0x42ded7 <_mi_mem_free+0x177>
               	shrq	$7, %rbx
               	andl	$63, %r12d
               	leaq	4194303(%r15), %rbp
               	movq	%rbp, %r13
               	shrq	$22, %r13
               	shlq	$6, %rbx
               	leaq	257180(%rip), %rdi      # 0x46cac0 <regions>
               	movq	(%rbx,%rdi), %rax
               	movq	8(%rbx,%rdi), %rdx
               	leaq	(%r12,%r13), %rsi
               	cmpq	$64, %rsi
               	ja	0x42ded7 <_mi_mem_free+0x177>
               	movq	%r12, %rsi
               	shlq	$22, %rsi
               	addq	%rsi, %rdx
               	cmpq	%r14, %rdx
               	jne	0x42ded7 <_mi_mem_free+0x177>
               	testl	$4194303, %r15d         # imm = 0x3FFFFF
               	jne	0x42de7e <_mi_mem_free+0x11e>
               	testb	%cl, %cl
               	je	0x42de7e <_mi_mem_free+0x11e>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 32(%rbx,%rdi)
               	testb	%r8b, %r8b
               	je	0x42dea6 <_mi_mem_free+0x146>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 40(%rbx,%rdi)
               	testl	$768, %eax              # imm = 0x300
               	je	0x42dee6 <_mi_mem_free+0x186>
               	leaq	(%rbx,%rdi), %rax
               	addq	$16, %rax
               	movq	$-1, %rdx
               	testq	%r13, %r13
               	je	0x42ded3 <_mi_mem_free+0x173>
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	lock
               	andq	%rdx, (%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$12, %edi
               	callq	0x42abb0 <mi_option_get>
               	leaq	256969(%rip), %rdi      # 0x46cac0 <regions>
               	testq	%rax, %rax
               	je	0x42dead <_mi_mem_free+0x14d>
               	movl	$3, %edi
               	callq	0x42abb0 <mi_option_get>
               	leaq	256947(%rip), %rdi      # 0x46cac0 <regions>
               	testq	%rax, %rax
               	jne	0x42df28 <_mi_mem_free+0x1c8>
               	movl	$5, %edi
               	callq	0x42abb0 <mi_option_get>
               	leaq	256925(%rip), %rdi      # 0x46cac0 <regions>
               	testq	%rax, %rax
               	je	0x42dead <_mi_mem_free+0x14d>
               	leaq	(%rbx,%rdi), %rsi
               	addq	$40, %rsi
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	movq	40(%rbx,%rdi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdx, %rcx
               	lock
               	cmpxchgq	%rcx, (%rsi)
               	jne	0x42df60 <_mi_mem_free+0x200>
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	je	0x42dead <_mi_mem_free+0x14d>
               	movq	322368(%rip), %rax      # 0x47cac0 <abandoned_readers>
               	testq	%rax, %rax
               	je	0x42df93 <_mi_mem_free+0x233>
               	pause
               	movq	322354(%rip), %rax      # 0x47cac0 <abandoned_readers>
               	testq	%rax, %rax
               	jne	0x42df85 <_mi_mem_free+0x225>
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%r14, %rdi
               	movq	%rbp, %rsi
               	callq	0x42dfd0 <_mi_os_reset>
               	leaq	256788(%rip), %rax      # 0x46cac0 <regions>
               	addq	%rbx, %rax
               	addq	$16, %rax
               	cmpq	$264241152, %r15        # imm = 0xFC00000
               	jbe	0x42deb5 <_mi_mem_free+0x155>
               	xorl	%edx, %edx
               	jmp	0x42ded3 <_mi_mem_free+0x173>
               	nopw	(%rax,%rax)

<_mi_os_reset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	movl	$5, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e010 <_mi_os_reset+0x40>
               	leaq	7(%rsp), %r8
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42da50 <mi_os_commitx>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%r12, %r12
               	je	0x42e004 <_mi_os_reset+0x34>
               	testq	%r15, %r15
               	je	0x42e004 <_mi_os_reset+0x34>
               	movq	216919(%rip), %rsi      # 0x462f78 <os_page_size>
               	leaq	-1(%rsi), %rax
               	leaq	(%r12,%rsi), %r14
               	addq	$-1, %r14
               	testq	%rax, %rsi
               	jne	0x42e048 <_mi_os_reset+0x78>
               	negq	%rsi
               	andq	%rsi, %r14
               	addq	%r15, %r12
               	andq	%rsi, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jg	0x42e09c <_mi_os_reset+0xcc>
               	jmp	0x42e004 <_mi_os_reset+0x34>
               	movq	%r14, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42e061 <_mi_os_reset+0x91>
               	movq	%r14, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rcx
               	jmp	0x42e06a <_mi_os_reset+0x9a>
               	movl	%r14d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ecx
               	addq	%r15, %r12
               	movq	%r12, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42e083 <_mi_os_reset+0xb3>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42e08a <_mi_os_reset+0xba>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	subq	%rcx, %r14
               	subq	%rdx, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jle	0x42e004 <_mi_os_reset+0x34>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 222512(%rip)      # 0x4645d8 <_mi_stats_main+0x98>
               	addq	%r12, %rcx
               	movq	222494(%rip), %rax      # 0x4645d0 <_mi_stats_main+0x90>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42e0d0 <_mi_os_reset+0x100>
               	lock
               	cmpxchgq	%rcx, 222466(%rip)      # 0x4645d0 <_mi_stats_main+0x90>
               	jne	0x42e0c0 <_mi_os_reset+0xf0>
               	testq	%r12, %r12
               	jle	0x42e0df <_mi_os_reset+0x10f>
               	lock
               	addq	%r12, 222435(%rip)      # 0x4645c0 <_mi_stats_main+0x80>
               	jmp	0x42e0ed <_mi_os_reset+0x11d>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 222427(%rip)      # 0x4645c8 <_mi_stats_main+0x88>
               	movq	217220(%rip), %r15      # 0x463178 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42e004 <_mi_os_reset+0x34>
               	callq	0x413820 <__errno_location@plt>
               	movq	%rax, %rbx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movl	(%rbx), %ecx
               	cmpl	$11, %ecx
               	jne	0x42e144 <_mi_os_reset+0x174>
               	movl	$0, (%rbx)
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42e120 <_mi_os_reset+0x150>
               	jmp	0x42e004 <_mi_os_reset+0x34>
               	cmpl	$8, %r15d
               	jne	0x42e174 <_mi_os_reset+0x1a4>
               	cmpl	$22, %ecx
               	jne	0x42e174 <_mi_os_reset+0x1a4>
               	movq	$4, 217118(%rip)        # 0x463178 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	$4, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42e004 <_mi_os_reset+0x34>
               	movl	(%rbx), %ecx
               	leaq	95243(%rip), %rdi       # 0x445586 <typeinfo name for kotlin::gc::GCSchedulerData+0x15cd>
               	movq	%r14, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42bc10 <_mi_warning_message>
               	nopw	%cs:(%rax,%rax)

<_mi_segment_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebx
               	movq	%rdi, %r12
               	movq	%rdi, %r13
               	andq	$-4194304, %r13         # imm = 0xFFC00000
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e2de <_mi_segment_page_free+0x13e>
               	movl	%ebx, 4(%rsp)
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	40(%r14), %r15
               	testq	%r15, %r15
               	je	0x42e2c4 <_mi_segment_page_free+0x124>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x42e237 <_mi_segment_page_free+0x97>
               	nop
               	movl	$0, 16(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbp)
               	testq	%r15, %r15
               	je	0x42e2c4 <_mi_segment_page_free+0x124>
               	movq	%r15, %rbp
               	cmpl	%ebx, 16(%r15)
               	jg	0x42e2ce <_mi_segment_page_free+0x12e>
               	movq	56(%rbp), %r15
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e220 <_mi_segment_page_free+0x80>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42e220 <_mi_segment_page_free+0x80>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e220 <_mi_segment_page_free+0x80>
               	cmpl	$3, 112(%rdx)
               	jne	0x42e281 <_mi_segment_page_free+0xe1>
               	movq	72(%rdx), %rsi
               	jmp	0x42e28d <_mi_segment_page_free+0xed>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x42e2ac <_mi_segment_page_free+0x10c>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x42e220 <_mi_segment_page_free+0x80>
               	callq	0x42dfd0 <_mi_os_reset>
               	jmp	0x42e220 <_mi_segment_page_free+0x80>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	jmp	0x42e2da <_mi_segment_page_free+0x13a>
               	movq	%rbp, 40(%r14)
               	movq	$0, 48(%rbp)
               	movl	4(%rsp), %ebx
               	movq	%r13, %rdi
               	movq	%r12, %rsi
               	movq	%r14, %rdx
               	callq	0x42e390 <mi_segment_page_clear>
               	movq	56(%r13), %rax
               	testq	%rax, %rax
               	je	0x42e314 <_mi_segment_page_free+0x174>
               	cmpq	40(%r13), %rax
               	jne	0x42e330 <_mi_segment_page_free+0x190>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42efd0 <mi_segment_abandon>
               	movzbl	%bl, %esi
               	movq	%r13, %rdi
               	movq	%r14, %rdx
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e600 <mi_segment_free>
               	addq	$1, %rax
               	cmpq	64(%r13), %rax
               	jne	0x42e372 <_mi_segment_page_free+0x1d2>
               	movl	112(%r13), %eax
               	cmpl	$1, %eax
               	je	0x42e34c <_mi_segment_page_free+0x1ac>
               	testl	%eax, %eax
               	je	0x42e350 <_mi_segment_page_free+0x1b0>
               	xorl	%r14d, %r14d
               	jmp	0x42e350 <_mi_segment_page_free+0x1b0>
               	addq	$16, %r14
               	movq	$0, 24(%r13)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r13)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r13, (%rcx)
               	movq	%r13, 8(%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_segment_page_clear>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movzwl	2(%rsi), %edi
               	movl	20(%rsi), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x42e58d <mi_segment_page_clear+0x1fd>
               	imulq	%rdi, %rsi
               	movq	112(%r15), %rdi
               	addq	$160, %rdi
               	callq	0x42bb80 <_mi_stat_decrease>
               	movq	112(%r15), %rcx
               	leaq	32(%rcx), %rax
               	leaq	221544(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42e415 <mi_segment_page_clear+0x85>
               	leaq	222108(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e415 <mi_segment_page_clear+0x85>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 56(%rcx)
               	addq	$-1, %rdx
               	movq	48(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e40d <mi_segment_page_clear+0x7d>
               	lock
               	cmpxchgq	%rdx, 48(%rcx)
               	jne	0x42e400 <mi_segment_page_clear+0x70>
               	lock
               	addq	$1, 40(%rcx)
               	jmp	0x42e437 <mi_segment_page_clear+0xa7>
               	movq	56(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%rcx)
               	cmpq	48(%rcx), %rax
               	jle	0x42e42b <mi_segment_page_clear+0x9b>
               	movq	%rax, 48(%rcx)
               	movq	40(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rcx)
               	movb	1(%rbx), %al
               	andb	$-10, %al
               	movb	%al, 1(%rbx)
               	movl	20(%rbx), %eax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 22(%rbx)
               	movups	%xmm0, 6(%rbx)
               	movups	%xmm0, 48(%rbx)
               	movups	%xmm0, 38(%rbx)
               	movl	%eax, 20(%rbx)
               	movq	56(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%r14)
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e512 <mi_segment_page_clear+0x182>
               	cmpb	$0, 8(%r14)
               	jne	0x42e512 <mi_segment_page_clear+0x182>
               	movb	1(%rbx), %al
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e512 <mi_segment_page_clear+0x182>
               	movl	$14, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e523 <mi_segment_page_clear+0x193>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	(%rsp), %rax
               	imull	$1000, %eax, %ecx       # imm = 0x3E8
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %r14
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %r14
               	addl	%eax, %r14d
               	addl	%ecx, %r14d
               	movl	$14, %edi
               	callq	0x42abb0 <mi_option_get>
               	addl	%r14d, %eax
               	movl	%eax, 16(%rbx)
               	movq	32(%r15), %rax
               	movq	%rax, 48(%rbx)
               	movq	$0, 56(%rbx)
               	leaq	56(%rax), %rcx
               	leaq	40(%r15), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%rbx, (%rcx)
               	movq	%rbx, 32(%r15)
               	movl	$0, 2(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e512 <mi_segment_page_clear+0x182>
               	cmpb	$0, 8(%r14)
               	jne	0x42e512 <mi_segment_page_clear+0x182>
               	movb	1(%rbx), %al
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e512 <mi_segment_page_clear+0x182>
               	cmpl	$3, 112(%r14)
               	jne	0x42e553 <mi_segment_page_clear+0x1c3>
               	movq	72(%r14), %rsi
               	jmp	0x42e55f <mi_segment_page_clear+0x1cf>
               	movq	96(%r14), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movb	(%rbx), %cl
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r14, %rdi
               	testb	%cl, %cl
               	jne	0x42e57c <mi_segment_page_clear+0x1ec>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e512 <mi_segment_page_clear+0x182>
               	callq	0x42dfd0 <_mi_os_reset>
               	jmp	0x42e512 <mi_segment_page_clear+0x182>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x42e5a4 <mi_segment_page_clear+0x214>
               	movq	72(%rax), %r8
               	jmp	0x42e5b1 <mi_segment_page_clear+0x221>
               	movq	96(%rax), %rcx
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	cmpb	$0, (%rbx)
               	jne	0x42e5eb <mi_segment_page_clear+0x25b>
               	movq	80(%rax), %rcx
               	subq	%rcx, %r8
               	cmpl	$1, %edx
               	ja	0x42e5eb <mi_segment_page_clear+0x25b>
               	addq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x42e5d5 <mi_segment_page_clear+0x245>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42e5d9 <mi_segment_page_clear+0x249>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rsi
               	jmp	0x42e3b5 <mi_segment_page_clear+0x25>
               	nopw	%cs:(%rax,%rax)

<mi_segment_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%sil, %sil
               	movq	%rdi, (%rsp)
               	je	0x42e64a <mi_segment_free+0x4a>
               	movl	$11, %edi
               	callq	0x42abb0 <mi_option_get>
               	cmpb	$0, 8(%r14)
               	je	0x42e674 <mi_segment_free+0x74>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e829 <mi_segment_free+0x229>
               	cmpl	$1, %eax
               	jne	0x42e89f <mi_segment_free+0x29f>
               	leaq	16(%r12), %rax
               	jmp	0x42e831 <mi_segment_free+0x231>
               	cmpb	$0, 8(%r14)
               	je	0x42e78f <mi_segment_free+0x18f>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e849 <mi_segment_free+0x249>
               	cmpl	$1, %eax
               	jne	0x42e8eb <mi_segment_free+0x2eb>
               	leaq	16(%r12), %rax
               	jmp	0x42e855 <mi_segment_free+0x255>
               	movq	64(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x42e62b <mi_segment_free+0x2b>
               	testq	%rax, %rax
               	je	0x42eeea <mi_segment_free+0x8ea>
               	leaq	120(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x42e6a1 <mi_segment_free+0xa1>
               	nop
               	movq	64(%r14), %rcx
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	%rcx, %rbp
               	jae	0x42e62b <mi_segment_free+0x2b>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e694 <mi_segment_free+0x94>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42e6bf <mi_segment_free+0xbf>
               	testq	%rcx, %rcx
               	jne	0x42e6c4 <mi_segment_free+0xc4>
               	jmp	0x42e6d1 <mi_segment_free+0xd1>
               	testq	%rcx, %rcx
               	je	0x42e73d <mi_segment_free+0x13d>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42e6d5 <mi_segment_free+0xd5>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r12), %rbx
               	je	0x42e726 <mi_segment_free+0x126>
               	cmpq	32(%r12), %rbx
               	je	0x42e736 <mi_segment_free+0x136>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e690 <mi_segment_free+0x90>
               	cmpb	$0, 8(%r14)
               	jne	0x42e690 <mi_segment_free+0x90>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e690 <mi_segment_free+0x90>
               	cmpl	$3, 112(%r14)
               	jne	0x42e74d <mi_segment_free+0x14d>
               	movq	72(%r14), %rsi
               	jmp	0x42e759 <mi_segment_free+0x159>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r12)
               	cmpq	32(%r12), %rbx
               	jne	0x42e6e3 <mi_segment_free+0xe3>
               	movq	%rax, 32(%r12)
               	jmp	0x42e6e3 <mi_segment_free+0xe3>
               	cmpq	32(%r12), %rbx
               	je	0x42e6d5 <mi_segment_free+0xd5>
               	cmpq	40(%r12), %rbx
               	jne	0x42e6f1 <mi_segment_free+0xf1>
               	jmp	0x42e6d5 <mi_segment_free+0xd5>
               	movq	96(%r14), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r14, %rdi
               	testb	%cl, %cl
               	jne	0x42e777 <mi_segment_free+0x177>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e690 <mi_segment_free+0x90>
               	callq	0x42dfd0 <_mi_os_reset>
               	jmp	0x42e690 <mi_segment_free+0x90>
               	movq	64(%r14), %rax
               	testq	%rax, %rax
               	je	0x42e655 <mi_segment_free+0x55>
               	leaq	120(%r14), %rcx
               	xorps	%xmm0, %xmm0
               	jmp	0x42e7ce <mi_segment_free+0x1ce>
               	movq	56(%rcx), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rcx
               	je	0x42e812 <mi_segment_free+0x212>
               	movl	$0, 16(%rcx)
               	movups	%xmm0, 48(%rcx)
               	addq	$64, %rcx
               	addq	$-1, %rax
               	je	0x42e655 <mi_segment_free+0x55>
               	movzbl	1(%rcx), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42e7c0 <mi_segment_free+0x1c0>
               	movq	48(%rcx), %rdx
               	movq	56(%rcx), %rsi
               	testq	%rdx, %rdx
               	je	0x42e7ee <mi_segment_free+0x1ee>
               	testq	%rsi, %rsi
               	jne	0x42e7f3 <mi_segment_free+0x1f3>
               	jmp	0x42e800 <mi_segment_free+0x200>
               	testq	%rsi, %rsi
               	je	0x42e819 <mi_segment_free+0x219>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e804 <mi_segment_free+0x204>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rcx
               	je	0x42e7a5 <mi_segment_free+0x1a5>
               	cmpq	32(%r12), %rcx
               	jne	0x42e7b5 <mi_segment_free+0x1b5>
               	movq	%rdx, 32(%r12)
               	jmp	0x42e7b5 <mi_segment_free+0x1b5>
               	cmpq	32(%r12), %rcx
               	je	0x42e804 <mi_segment_free+0x204>
               	cmpq	40(%r12), %rcx
               	jne	0x42e7c0 <mi_segment_free+0x1c0>
               	jmp	0x42e804 <mi_segment_free+0x204>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e89f <mi_segment_free+0x29f>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e86d <mi_segment_free+0x26d>
               	testq	%rsi, %rsi
               	jne	0x42e876 <mi_segment_free+0x276>
               	jmp	0x42e882 <mi_segment_free+0x282>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e8eb <mi_segment_free+0x2eb>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e8b9 <mi_segment_free+0x2b9>
               	testq	%rsi, %rsi
               	jne	0x42e8c2 <mi_segment_free+0x2c2>
               	jmp	0x42e8ce <mi_segment_free+0x2ce>
               	testq	%rsi, %rsi
               	je	0x42ef77 <mi_segment_free+0x977>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e886 <mi_segment_free+0x286>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42ee37 <mi_segment_free+0x837>
               	cmpq	%r14, 8(%rax)
               	je	0x42ee44 <mi_segment_free+0x844>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r12), %rdi
               	addq	$160, %rdi
               	movq	80(%r14), %rsi
               	callq	0x42bb80 <_mi_stat_decrease>
               	jmp	0x42ec2e <mi_segment_free+0x62e>
               	testq	%rsi, %rsi
               	je	0x42ef85 <mi_segment_free+0x985>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e8d2 <mi_segment_free+0x2d2>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42ee51 <mi_segment_free+0x851>
               	cmpq	%r14, 8(%rax)
               	je	0x42ee5e <mi_segment_free+0x85e>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r12), %rdi
               	addq	$160, %rdi
               	movq	80(%r14), %rsi
               	callq	0x42bb80 <_mi_stat_decrease>
               	cmpq	$4194304, 72(%r14)      # imm = 0x400000
               	jne	0x42ec2e <mi_segment_free+0x62e>
               	movl	$9, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	%rax, %rbx
               	movq	88(%r12), %rax
               	cmpq	%rbx, %rax
               	jae	0x42e937 <mi_segment_free+0x337>
               	movq	64(%r12), %rcx
               	shrq	$3, %rcx
               	cmpq	%rcx, %rax
               	jbe	0x42ee6b <mi_segment_free+0x86b>
               	cmpq	%rbx, %rax
               	jbe	0x42ec2e <mi_segment_free+0x62e>
               	leaq	220153(%rip), %rdi      # 0x464540 <_mi_stats_main>
               	movl	$1, %r14d
               	jmp	0x42e982 <mi_segment_free+0x382>
               	nop
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	movq	(%r13), %rdx
               	andb	$1, %r15b
               	movzbl	%al, %r8d
               	movzbl	%r15b, %ecx
               	movq	%r13, %rdi
               	callq	0x42dd60 <_mi_mem_free>
               	movq	88(%r12), %rax
               	leaq	220103(%rip), %rdi      # 0x464540 <_mi_stats_main>
               	cmpq	%rbx, %rax
               	jbe	0x42ec2e <mi_segment_free+0x62e>
               	movq	104(%r12), %r13
               	testq	%r13, %r13
               	je	0x42e979 <mi_segment_free+0x379>
               	addq	$-1, %rax
               	movq	%rax, 88(%r12)
               	movq	24(%r13), %rax
               	movq	%rax, 104(%r12)
               	movq	$0, 24(%r13)
               	movq	112(%r12), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rdi, %rax
               	jb	0x42ea00 <mi_segment_free+0x400>
               	leaq	220610(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42ea00 <mi_segment_free+0x400>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e9f0 <mi_segment_free+0x3f0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42e9e0 <mi_segment_free+0x3e0>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42ea34 <mi_segment_free+0x434>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42ea22 <mi_segment_free+0x422>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	72(%r13), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	cmpq	%rdi, %rcx
               	setae	%dl
               	leaq	220464(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42eaa0 <mi_segment_free+0x4a0>
               	testb	%al, %al
               	je	0x42ead7 <mi_segment_free+0x4d7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ea8d <mi_segment_free+0x48d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42ea80 <mi_segment_free+0x480>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42eaf9 <mi_segment_free+0x4f9>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42ebef <mi_segment_free+0x5ef>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42eacd <mi_segment_free+0x4cd>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42eac0 <mi_segment_free+0x4c0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ec0f <mi_segment_free+0x60f>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42eaed <mi_segment_free+0x4ed>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42eb16 <mi_segment_free+0x516>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%rsi, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42eb2f <mi_segment_free+0x52f>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r10
               	testq	%r10, %r10
               	je	0x42e950 <mi_segment_free+0x350>
               	cmpq	$1, %r10
               	jne	0x42eb4c <mi_segment_free+0x54c>
               	movb	$1, %r15b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42eba4 <mi_segment_free+0x5a4>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	nopl	(%rax,%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r15b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42eb70 <mi_segment_free+0x570>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42ebc0 <mi_segment_free+0x5c0>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r15b
               	testb	$1, %al
               	je	0x42e953 <mi_segment_free+0x353>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42abb0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r15b, %r15d
               	movl	$0, %eax
               	cmovnel	%eax, %r15d
               	movb	$1, %al
               	jmp	0x42e955 <mi_segment_free+0x355>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42ec05 <mi_segment_free+0x605>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42eb11 <mi_segment_free+0x511>
               	jmp	0x42eb16 <mi_segment_free+0x516>
               	movq	(%rsp), %r13
               	movq	72(%r13), %r15
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	leaq	219384(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	219947(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%r15, %r15
               	jle	0x42ec95 <mi_segment_free+0x695>
               	testb	%al, %al
               	je	0x42ecc7 <mi_segment_free+0x6c7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ec8d <mi_segment_free+0x68d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42ec80 <mi_segment_free+0x680>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42ece9 <mi_segment_free+0x6e9>
               	testb	%al, %al
               	je	0x42edf8 <mi_segment_free+0x7f8>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jg	0x42ecbd <mi_segment_free+0x6bd>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42ecb0 <mi_segment_free+0x6b0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ee18 <mi_segment_free+0x818>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42ecdd <mi_segment_free+0x6dd>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42ed06 <mi_segment_free+0x706>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%r15, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42ed1f <mi_segment_free+0x71f>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r9
               	testq	%r9, %r9
               	je	0x42ed38 <mi_segment_free+0x738>
               	cmpq	$1, %r9
               	jne	0x42ed42 <mi_segment_free+0x742>
               	movb	$1, %r14b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42ed8f <mi_segment_free+0x78f>
               	movb	$1, %r14b
               	xorl	%ebp, %ebp
               	jmp	0x42edcf <mi_segment_free+0x7cf>
               	movq	%r9, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rsi
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r14b
               	xorl	%eax, %eax
               	movl	$1, %ebp
               	movzbl	-64(%rsi), %ecx
               	movzbl	(%rsi), %ebx
               	movl	%ebx, %edx
               	andb	%cl, %dl
               	shlb	$5, %dl
               	sarb	$7, %dl
               	andb	%dl, %r14b
               	orb	%cl, %bl
               	testb	$2, %bl
               	movzbl	%al, %eax
               	cmovnel	%ebp, %eax
               	subq	$-128, %rsi
               	addq	$2, %rdi
               	jne	0x42ed60 <mi_segment_free+0x760>
               	testb	$1, %r9b
               	je	0x42edaf <mi_segment_free+0x7af>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %edx
               	movl	$1, %eax
               	cmovel	%edx, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r14b
               	xorl	%ebp, %ebp
               	testb	$1, %al
               	je	0x42edcf <mi_segment_free+0x7cf>
               	movl	$5, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	movzbl	%r14b, %eax
               	cmovel	%eax, %ebp
               	movl	%ebp, %r14d
               	movb	$1, %bpl
               	movq	(%r13), %rdx
               	andb	$1, %r14b
               	movzbl	%bpl, %r8d
               	movzbl	%r14b, %ecx
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42dd60 <_mi_mem_free>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42ee0e <mi_segment_free+0x80e>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42ed01 <mi_segment_free+0x701>
               	jmp	0x42ed06 <mi_segment_free+0x706>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e899 <mi_segment_free+0x299>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e899 <mi_segment_free+0x299>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e8e5 <mi_segment_free+0x2e5>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e8e5 <mi_segment_free+0x2e5>
               	movq	104(%r12), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 24(%rdx)
               	movq	%rdx, 104(%r12)
               	addq	$1, %rax
               	movq	%rax, 88(%r12)
               	movq	112(%r12), %rdx
               	leaq	416(%rdx), %rcx
               	leaq	218791(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x42ef93 <mi_segment_free+0x993>
               	leaq	219351(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42ef93 <mi_segment_free+0x993>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 440(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	432(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x42eee0 <mi_segment_free+0x8e0>
               	lock
               	cmpxchgq	%rdi, 432(%rdx)
               	jne	0x42eed0 <mi_segment_free+0x8d0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42efbf <mi_segment_free+0x9bf>
               	leaq	120(%r14), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42ef1c <mi_segment_free+0x91c>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rax
               	je	0x42ef60 <mi_segment_free+0x960>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42e62b <mi_segment_free+0x2b>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42ef0e <mi_segment_free+0x90e>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42ef3c <mi_segment_free+0x93c>
               	testq	%rsi, %rsi
               	jne	0x42ef41 <mi_segment_free+0x941>
               	jmp	0x42ef4e <mi_segment_free+0x94e>
               	testq	%rsi, %rsi
               	je	0x42ef67 <mi_segment_free+0x967>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42ef52 <mi_segment_free+0x952>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rax
               	je	0x42eef3 <mi_segment_free+0x8f3>
               	cmpq	32(%r12), %rax
               	jne	0x42ef03 <mi_segment_free+0x903>
               	movq	%rdx, 32(%r12)
               	jmp	0x42ef03 <mi_segment_free+0x903>
               	cmpq	32(%r12), %rax
               	je	0x42ef52 <mi_segment_free+0x952>
               	cmpq	40(%r12), %rax
               	jne	0x42ef0e <mi_segment_free+0x90e>
               	jmp	0x42ef52 <mi_segment_free+0x952>
               	cmpq	%r14, (%rax)
               	jne	0x42e89f <mi_segment_free+0x29f>
               	jmp	0x42e886 <mi_segment_free+0x286>
               	cmpq	%r14, (%rax)
               	jne	0x42e8eb <mi_segment_free+0x2eb>
               	jmp	0x42e8d2 <mi_segment_free+0x2d2>
               	movq	440(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 440(%rdx)
               	cmpq	432(%rdx), %rsi
               	jl	0x42efb5 <mi_segment_free+0x9b5>
               	movq	%rax, 432(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_segment_abandon>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f0eb <mi_segment_abandon+0x11b>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	40(%r14), %rbp
               	testq	%rbp, %rbp
               	je	0x42f0e3 <mi_segment_abandon+0x113>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %r12d      # imm = 0x3E8
               	addl	%edx, %r12d
               	jmp	0x42f057 <mi_segment_abandon+0x87>
               	nop
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	testq	%rbp, %rbp
               	je	0x42f0e3 <mi_segment_abandon+0x113>
               	movq	%rbp, %rbx
               	cmpl	%r12d, 16(%rbp)
               	jg	0x42f32b <mi_segment_abandon+0x35b>
               	movq	56(%rbx), %rbp
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f040 <mi_segment_abandon+0x70>
               	movq	%rbx, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42f040 <mi_segment_abandon+0x70>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f040 <mi_segment_abandon+0x70>
               	cmpl	$3, 112(%rdx)
               	jne	0x42f0a1 <mi_segment_abandon+0xd1>
               	movq	72(%rdx), %rsi
               	jmp	0x42f0ad <mi_segment_abandon+0xdd>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x42f0cb <mi_segment_abandon+0xfb>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f040 <mi_segment_abandon+0x70>
               	callq	0x42dfd0 <_mi_os_reset>
               	jmp	0x42f040 <mi_segment_abandon+0x70>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	movl	$11, %edi
               	callq	0x42abb0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	je	0x42f34c <mi_segment_abandon+0x37c>
               	movl	112(%r15), %eax
               	testl	%eax, %eax
               	je	0x42f113 <mi_segment_abandon+0x143>
               	cmpl	$1, %eax
               	jne	0x42f169 <mi_segment_abandon+0x199>
               	leaq	16(%r14), %rax
               	jmp	0x42f11b <mi_segment_abandon+0x14b>
               	movq	%r14, %rax
               	testq	%r14, %r14
               	je	0x42f169 <mi_segment_abandon+0x199>
               	leaq	24(%r15), %rcx
               	movq	24(%r15), %rdx
               	movq	32(%r15), %rsi
               	testq	%rdx, %rdx
               	je	0x42f133 <mi_segment_abandon+0x163>
               	testq	%rsi, %rsi
               	jne	0x42f13c <mi_segment_abandon+0x16c>
               	jmp	0x42f148 <mi_segment_abandon+0x178>
               	testq	%rsi, %rsi
               	je	0x42f540 <mi_segment_abandon+0x570>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42f14c <mi_segment_abandon+0x17c>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r15, (%rax)
               	je	0x42f46c <mi_segment_abandon+0x49c>
               	cmpq	%r15, 8(%rax)
               	jne	0x42f163 <mi_segment_abandon+0x193>
               	movq	32(%r15), %rdx
               	movq	%rdx, 8(%rax)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r14), %rcx
               	leaq	192(%rcx), %rdx
               	leaq	218053(%rip), %rsi      # 0x464540 <_mi_stats_main>
               	cmpq	%rsi, %rdx
               	jb	0x42f1cb <mi_segment_abandon+0x1fb>
               	leaq	218613(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rdx
               	jae	0x42f1cb <mi_segment_abandon+0x1fb>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 216(%rcx)
               	leaq	1(%rdi), %rbp
               	movq	208(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x42f1c0 <mi_segment_abandon+0x1f0>
               	lock
               	cmpxchgq	%rbp, 208(%rcx)
               	jne	0x42f1b0 <mi_segment_abandon+0x1e0>
               	lock
               	addq	$1, (%rdx)
               	movq	112(%r14), %rcx
               	jmp	0x42f1f7 <mi_segment_abandon+0x227>
               	movq	216(%rcx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 216(%rcx)
               	cmpq	208(%rcx), %rdi
               	jl	0x42f1ed <mi_segment_abandon+0x21d>
               	movq	%rax, 208(%rcx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movq	72(%r15), %rdx
               	cmpq	%rsi, %rcx
               	setae	%bl
               	leaq	218488(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%bl, %al
               	testq	%rdx, %rdx
               	jle	0x42f245 <mi_segment_abandon+0x275>
               	testb	%al, %al
               	je	0x42f277 <mi_segment_abandon+0x2a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	addq	$-1, %rsi
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42f23d <mi_segment_abandon+0x26d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42f230 <mi_segment_abandon+0x260>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42f299 <mi_segment_abandon+0x2c9>
               	testb	%al, %al
               	je	0x42f47e <mi_segment_abandon+0x4ae>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jg	0x42f26d <mi_segment_abandon+0x29d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42f260 <mi_segment_abandon+0x290>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42f49e <mi_segment_abandon+0x4ce>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42f28d <mi_segment_abandon+0x2bd>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42f2b2 <mi_segment_abandon+0x2e2>
               	movq	%rax, 64(%r14)
               	movq	72(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 72(%r14)
               	cmpq	80(%r14), %rax
               	jbe	0x42f2c7 <mi_segment_abandon+0x2f7>
               	movq	%rax, 80(%r14)
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	$0, 16(%r15)
               	movq	317468(%rip), %rax      # 0x47cb00 <abandoned>
               	nopw	%cs:(%rax,%rax)
               	nop
               	leal	1(%rax), %ecx
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	movq	%rdx, 16(%r15)
               	andl	$4194303, %ecx          # imm = 0x3FFFFF
               	orq	%r15, %rcx
               	lock
               	cmpxchgq	%rcx, 317421(%rip)      # 0x47cb00 <abandoned>
               	jne	0x42f2f0 <mi_segment_abandon+0x320>
               	lock
               	addq	$1, 317474(%rip)        # 0x47cb40 <abandoned_count>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, 40(%r14)
               	movq	$0, 48(%rbx)
               	movl	$11, %edi
               	callq	0x42abb0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	jne	0x42f100 <mi_segment_abandon+0x130>
               	movq	64(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42f100 <mi_segment_abandon+0x130>
               	testq	%rax, %rax
               	je	0x42f4ba <mi_segment_abandon+0x4ea>
               	leaq	120(%r15), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x42f385 <mi_segment_abandon+0x3b5>
               	nop
               	movq	64(%r15), %rcx
               	addq	$1, %r12
               	addq	$64, %rbx
               	cmpq	%rcx, %r12
               	jae	0x42f100 <mi_segment_abandon+0x130>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42f374 <mi_segment_abandon+0x3a4>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42f3a3 <mi_segment_abandon+0x3d3>
               	testq	%rcx, %rcx
               	jne	0x42f3a8 <mi_segment_abandon+0x3d8>
               	jmp	0x42f3b5 <mi_segment_abandon+0x3e5>
               	testq	%rcx, %rcx
               	je	0x42f41c <mi_segment_abandon+0x44c>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42f3b9 <mi_segment_abandon+0x3e9>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x42f408 <mi_segment_abandon+0x438>
               	cmpq	32(%r14), %rbx
               	je	0x42f416 <mi_segment_abandon+0x446>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f370 <mi_segment_abandon+0x3a0>
               	cmpb	$0, 8(%r15)
               	jne	0x42f370 <mi_segment_abandon+0x3a0>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f370 <mi_segment_abandon+0x3a0>
               	cmpl	$3, 112(%r15)
               	jne	0x42f42a <mi_segment_abandon+0x45a>
               	movq	72(%r15), %rsi
               	jmp	0x42f436 <mi_segment_abandon+0x466>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x42f3c5 <mi_segment_abandon+0x3f5>
               	movq	%rax, 32(%r14)
               	jmp	0x42f3c5 <mi_segment_abandon+0x3f5>
               	cmpq	32(%r14), %rbx
               	je	0x42f3b9 <mi_segment_abandon+0x3e9>
               	cmpq	40(%r14), %rbx
               	jne	0x42f3d3 <mi_segment_abandon+0x403>
               	jmp	0x42f3b9 <mi_segment_abandon+0x3e9>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%cl, %cl
               	jne	0x42f454 <mi_segment_abandon+0x484>
               	movq	80(%r15), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f370 <mi_segment_abandon+0x3a0>
               	callq	0x42dfd0 <_mi_os_reset>
               	jmp	0x42f370 <mi_segment_abandon+0x3a0>
               	movq	%rdx, (%rax)
               	cmpq	%r15, 8(%rax)
               	jne	0x42f163 <mi_segment_abandon+0x193>
               	jmp	0x42f15b <mi_segment_abandon+0x18b>
               	movq	24(%rcx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rsi
               	jl	0x42f494 <mi_segment_abandon+0x4c4>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	ja	0x42f2ae <mi_segment_abandon+0x2de>
               	jmp	0x42f2b2 <mi_segment_abandon+0x2e2>
               	leaq	120(%r15), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42f4ea <mi_segment_abandon+0x51a>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r14)
               	cmpq	32(%r14), %rax
               	je	0x42f52c <mi_segment_abandon+0x55c>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42f100 <mi_segment_abandon+0x130>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42f4dc <mi_segment_abandon+0x50c>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42f50a <mi_segment_abandon+0x53a>
               	testq	%rsi, %rsi
               	jne	0x42f50f <mi_segment_abandon+0x53f>
               	jmp	0x42f51c <mi_segment_abandon+0x54c>
               	testq	%rsi, %rsi
               	je	0x42f532 <mi_segment_abandon+0x562>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42f520 <mi_segment_abandon+0x550>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r14), %rax
               	je	0x42f4c3 <mi_segment_abandon+0x4f3>
               	cmpq	32(%r14), %rax
               	jne	0x42f4d1 <mi_segment_abandon+0x501>
               	movq	%rdx, 32(%r14)
               	jmp	0x42f4d1 <mi_segment_abandon+0x501>
               	cmpq	32(%r14), %rax
               	je	0x42f520 <mi_segment_abandon+0x550>
               	cmpq	40(%r14), %rax
               	jne	0x42f4dc <mi_segment_abandon+0x50c>
               	jmp	0x42f520 <mi_segment_abandon+0x550>
               	cmpq	%r15, (%rax)
               	jne	0x42f169 <mi_segment_abandon+0x199>
               	jmp	0x42f14c <mi_segment_abandon+0x17c>
               	nop

<_mi_free_delayed_block>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r15
               	movq	%rdi, %r12
               	andq	$-4194304, %r12         # imm = 0xFFC00000
               	movl	%r15d, %ebx
               	andl	$4194303, %ebx          # imm = 0x3FFFFF
               	movq	96(%r12), %rcx
               	shrq	%cl, %rbx
               	shlq	$6, %rbx
               	leaq	(%r12,%rbx), %r14
               	addq	$120, %r14
               	movq	32(%r14), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42f5ac <_mi_free_delayed_block+0x5c>
               	cmpl	$3, %ecx
               	je	0x42f5ac <_mi_free_delayed_block+0x5c>
               	cmpl	$1, %ecx
               	je	0x42f5a8 <_mi_free_delayed_block+0x58>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x42f582 <_mi_free_delayed_block+0x32>
               	jmp	0x42f5ac <_mi_free_delayed_block+0x5c>
               	pause
               	jmp	0x42f582 <_mi_free_delayed_block+0x32>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d250 <_mi_page_free_collect>
               	movq	144(%r12,%rbx), %rax
               	movq	%rax, (%r15)
               	movq	%r15, 144(%r12,%rbx)
               	movl	136(%r12,%rbx), %eax
               	addl	$-1, %eax
               	movl	%eax, 136(%r12,%rbx)
               	je	0x42f5f2 <_mi_free_delayed_block+0xa2>
               	testb	$1, 126(%r12,%rbx)
               	jne	0x42f605 <_mi_free_delayed_block+0xb5>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f620 <_mi_page_retire>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f730 <_mi_page_unfull>
               	nopl	(%rax,%rax)

<_mi_page_retire>:
               	movb	6(%rdi), %dl
               	movl	%edx, %eax
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movl	20(%rdi), %r8d
               	movl	$74, %eax
               	testb	$1, %dl
               	jne	0x42f68c <_mi_page_retire+0x6c>
               	movl	$1, %ecx
               	cmpl	$9, %r8d
               	jb	0x42f689 <_mi_page_retire+0x69>
               	leaq	7(%r8), %rsi
               	shrq	$3, %rsi
               	cmpl	$64, %r8d
               	ja	0x42f65f <_mi_page_retire+0x3f>
               	addl	$1, %esi
               	andl	$254, %esi
               	movq	%rsi, %rcx
               	jmp	0x42f689 <_mi_page_retire+0x69>
               	movl	$73, %ecx
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f689 <_mi_page_retire+0x69>
               	addq	$-1, %rsi
               	bsrq	%rsi, %rax
               	movl	%eax, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%rax,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	movq	40(%rdi), %rcx
               	leaq	(%rax,%rax,2), %rax
               	leaq	(%rcx,%rax,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	testb	$1, %dl
               	jne	0x42f6bc <_mi_page_retire+0x9c>
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f6bc <_mi_page_retire+0x9c>
               	cmpq	%rdi, 1048(%rcx,%rax,8)
               	jne	0x42f6bc <_mi_page_retire+0x9c>
               	cmpq	%rdi, (%rsi)
               	je	0x42f6c3 <_mi_page_retire+0xa3>
               	xorl	%edx, %edx
               	jmp	0x42d320 <_mi_page_free>
               	cmpl	$16385, %r8d            # imm = 0x4001
               	movl	$16, %eax
               	movl	$4, %ecx
               	cmovbl	%eax, %ecx
               	movb	7(%rdi), %al
               	andb	$1, %al
               	orb	%cl, %al
               	movb	%al, 7(%rdi)
               	movq	40(%rdi), %rax
               	subq	%rax, %rsi
               	addq	$-1040, %rsi            # imm = 0xFBF0
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rsi, %rcx
               	cmpq	3024(%rax), %rcx
               	jb	0x42f714 <_mi_page_retire+0xf4>
               	cmpq	3032(%rax), %rcx
               	ja	0x42f724 <_mi_page_retire+0x104>
               	retq
               	movq	%rcx, 3024(%rax)
               	cmpq	3032(%rax), %rcx
               	jbe	0x42f713 <_mi_page_retire+0xf3>
               	movq	%rcx, 3032(%rax)
               	retq
               	nopl	(%rax)

<_mi_page_unfull>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	testb	$1, %al
               	je	0x42fc23 <_mi_page_unfull+0x4f3>
               	movq	40(%rdi), %r12
               	movl	%eax, %ecx
               	andb	$-2, %cl
               	movb	%cl, 6(%rdi)
               	movl	20(%rdi), %esi
               	movl	$1, %ecx
               	cmpl	$9, %esi
               	jb	0x42f79f <_mi_page_unfull+0x6f>
               	leaq	7(%rsi), %rdx
               	shrq	$3, %rdx
               	cmpl	$64, %esi
               	ja	0x42f776 <_mi_page_unfull+0x46>
               	addl	$1, %edx
               	andl	$254, %edx
               	movq	%rdx, %rcx
               	jmp	0x42f79f <_mi_page_unfull+0x6f>
               	movl	$73, %ecx
               	cmpl	$2097152, %esi          # imm = 0x200000
               	ja	0x42f79f <_mi_page_unfull+0x6f>
               	addq	$-1, %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %ecx
               	addl	$253, %ecx
               	orb	$1, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %r9
               	movq	56(%rdi), %rdx
               	testq	%rdx, %rdx
               	je	0x42f7b9 <_mi_page_unfull+0x89>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rdx)
               	movzbl	%cl, %ecx
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42f7c9 <_mi_page_unfull+0x99>
               	movq	%rdx, 56(%rax)
               	cmpq	%rdi, 2824(%r12)
               	je	0x42f7e7 <_mi_page_unfull+0xb7>
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f9ee <_mi_page_unfull+0x2be>
               	jmp	0x42f805 <_mi_page_unfull+0xd5>
               	movq	56(%rdi), %rdx
               	movq	%rdx, 2824(%r12)
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f9ee <_mi_page_unfull+0x2be>
               	movq	%rax, 2816(%r12)
               	movq	2832(%r12), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42f9ee <_mi_page_unfull+0x2be>
               	testq	%rax, %rax
               	leaq	92692(%rip), %r8        # 0x446240 <_mi_page_empty>
               	cmovneq	%rax, %r8
               	leaq	7(%rcx), %r14
               	shrq	$3, %r14
               	cmpq	%r8, 8(%r9,%r14,8)
               	je	0x42f9ee <_mi_page_unfull+0x2be>
               	cmpq	$9, %rcx
               	jae	0x42f850 <_mi_page_unfull+0x120>
               	xorl	%ecx, %ecx
               	jmp	0x42f912 <_mi_page_unfull+0x1e2>
               	cmpq	$64, %rcx
               	ja	0x42f860 <_mi_page_unfull+0x130>
               	leal	1(%r14), %r10d
               	andb	$-2, %r10b
               	jmp	0x42f87b <_mi_page_unfull+0x14b>
               	leaq	-1(%r14), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r10d
               	addb	$-3, %r10b
               	leaq	1040(%r9), %rbx
               	leaq	2792(%r12), %rsi
               	nopw	(%rax,%rax)
               	movq	16(%rsi), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rax
               	shrq	$3, %rax
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x42f8f0 <_mi_page_unfull+0x1c0>
               	cmpq	$71, %rdx
               	ja	0x42f8c0 <_mi_page_unfull+0x190>
               	leal	1(%rax), %ecx
               	andb	$-2, %cl
               	jmp	0x42f8f0 <_mi_page_unfull+0x1c0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x42f8f0 <_mi_page_unfull+0x1c0>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rbx, %rsi
               	jbe	0x42f8fe <_mi_page_unfull+0x1ce>
               	addq	$-24, %rsi
               	cmpb	%cl, %r10b
               	je	0x42f890 <_mi_page_unfull+0x160>
               	leaq	1(%rax), %rcx
               	cmpq	%r14, %rax
               	cmovaeq	%r14, %rcx
               	cmpq	%r14, %rcx
               	ja	0x42f9ee <_mi_page_unfull+0x2be>
               	addq	$1, %r14
               	movq	%r14, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x42f9e0 <_mi_page_unfull+0x2b0>
               	movq	%r10, %r11
               	andq	$-4, %r11
               	movq	%r8, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x42f955 <_mi_page_unfull+0x225>
               	xorl	%esi, %esi
               	jmp	0x42f9a9 <_mi_page_unfull+0x279>
               	leaq	(%r9,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rsi,8)
               	movdqu	%xmm0, -96(%rbx,%rsi,8)
               	movdqu	%xmm0, -80(%rbx,%rsi,8)
               	movdqu	%xmm0, -64(%rbx,%rsi,8)
               	movdqu	%xmm0, -48(%rbx,%rsi,8)
               	movdqu	%xmm0, -32(%rbx,%rsi,8)
               	movdqu	%xmm0, -16(%rbx,%rsi,8)
               	movdqu	%xmm0, (%rbx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x42f970 <_mi_page_unfull+0x240>
               	testq	%rax, %rax
               	je	0x42f9d2 <_mi_page_unfull+0x2a2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42f9c0 <_mi_page_unfull+0x290>
               	cmpq	%r11, %r10
               	je	0x42f9ee <_mi_page_unfull+0x2be>
               	addq	%r11, %rcx
               	nop
               	movq	%r8, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r14
               	jne	0x42f9e0 <_mi_page_unfull+0x2b0>
               	leaq	(%r12,%r15,8), %rax
               	addq	$1048, %rax             # imm = 0x418
               	movq	1048(%r12,%r15,8), %rcx
               	movq	%rcx, 56(%rdi)
               	movq	$0, 48(%rdi)
               	testq	%rcx, %rcx
               	je	0x42fa25 <_mi_page_unfull+0x2f5>
               	movq	%rdi, 48(%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	jmp	0x42fc0e <_mi_page_unfull+0x4de>
               	leaq	(%r12,%r15,8), %rcx
               	addq	$1040, %rcx             # imm = 0x410
               	movq	%rdi, (%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x42fc0e <_mi_page_unfull+0x4de>
               	leaq	7(%r8), %r10
               	shrq	$3, %r10
               	cmpq	%rdi, 8(%r9,%r10,8)
               	je	0x42fc0e <_mi_page_unfull+0x4de>
               	cmpq	$9, %r8
               	jae	0x42fa6b <_mi_page_unfull+0x33b>
               	xorl	%ecx, %ecx
               	jmp	0x42fb32 <_mi_page_unfull+0x402>
               	cmpq	$64, %r8
               	ja	0x42fa7b <_mi_page_unfull+0x34b>
               	leal	1(%r10), %r11d
               	andb	$-2, %r11b
               	jmp	0x42fa96 <_mi_page_unfull+0x366>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r11d
               	addb	$-3, %r11b
               	leaq	1040(%r9), %rsi
               	leaq	(%r12,%r15,8), %rdx
               	addq	$1016, %rdx             # imm = 0x3F8
               	nopl	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42fb10 <_mi_page_unfull+0x3e0>
               	cmpq	$71, %rax
               	ja	0x42fae0 <_mi_page_unfull+0x3b0>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42fb10 <_mi_page_unfull+0x3e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42fb10 <_mi_page_unfull+0x3e0>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r14
               	movl	%r14d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r14,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x42fb1e <_mi_page_unfull+0x3ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r11b
               	je	0x42fab0 <_mi_page_unfull+0x380>
               	leaq	1(%rbx), %rcx
               	cmpq	%r10, %rbx
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x42fc0e <_mi_page_unfull+0x4de>
               	addq	$1, %r10
               	movq	%r10, %r14
               	subq	%rcx, %r14
               	cmpq	$4, %r14
               	jb	0x42fc00 <_mi_page_unfull+0x4d0>
               	movq	%r14, %r11
               	andq	$-4, %r11
               	movq	%rdi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x42fb75 <_mi_page_unfull+0x445>
               	xorl	%esi, %esi
               	jmp	0x42fbc9 <_mi_page_unfull+0x499>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rsi,8)
               	movdqu	%xmm0, -96(%rdx,%rsi,8)
               	movdqu	%xmm0, -80(%rdx,%rsi,8)
               	movdqu	%xmm0, -64(%rdx,%rsi,8)
               	movdqu	%xmm0, -48(%rdx,%rsi,8)
               	movdqu	%xmm0, -32(%rdx,%rsi,8)
               	movdqu	%xmm0, -16(%rdx,%rsi,8)
               	movdqu	%xmm0, (%rdx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rax
               	jne	0x42fb90 <_mi_page_unfull+0x460>
               	testq	%rbx, %rbx
               	je	0x42fbf2 <_mi_page_unfull+0x4c2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rax
               	addq	$24, %rax
               	negq	%rbx
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbx
               	jne	0x42fbe0 <_mi_page_unfull+0x4b0>
               	cmpq	%r11, %r14
               	je	0x42fc0e <_mi_page_unfull+0x4de>
               	addq	%r11, %rcx
               	nop
               	movq	%rdi, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x42fc00 <_mi_page_unfull+0x4d0>
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rdi), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<mi_segment_reclaim>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r8, %r14
               	movq	%rdx, 8(%rsp)
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	testq	%rcx, %rcx
               	je	0x42fc54 <mi_segment_reclaim+0x24>
               	movb	$0, (%rcx)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	72(%r15), %rbp
               	movq	112(%r14), %rdx
               	leaq	215240(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	215803(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rbp, %rbp
               	js	0x42fcc4 <mi_segment_reclaim+0x94>
               	testb	%al, %al
               	je	0x42fd08 <mi_segment_reclaim+0xd8>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jg	0x42fcbd <mi_segment_reclaim+0x8d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x42fcb0 <mi_segment_reclaim+0x80>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x42fd28 <mi_segment_reclaim+0xf8>
               	testb	%al, %al
               	je	0x430158 <mi_segment_reclaim+0x528>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jge	0x42fcfd <mi_segment_reclaim+0xcd>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x42fcf0 <mi_segment_reclaim+0xc0>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x43017a <mi_segment_reclaim+0x54a>
               	movq	24(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rsi
               	jl	0x42fd1e <mi_segment_reclaim+0xee>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fd3f <mi_segment_reclaim+0x10f>
               	movq	%rax, 64(%r14)
               	addq	72(%r14), %rbp
               	movq	%rbp, 72(%r14)
               	cmpq	80(%r14), %rbp
               	jbe	0x42fd51 <mi_segment_reclaim+0x121>
               	movq	%rbp, 80(%r14)
               	movq	112(%r14), %rsi
               	leaq	192(%rsi), %rax
               	leaq	215005(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42ff56 <mi_segment_reclaim+0x326>
               	leaq	215565(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42ff56 <mi_segment_reclaim+0x326>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 216(%rsi)
               	addq	$-1, %rdx
               	movq	208(%rsi), %rax
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42fdb0 <mi_segment_reclaim+0x180>
               	lock
               	cmpxchgq	%rdx, 208(%rsi)
               	jne	0x42fda0 <mi_segment_reclaim+0x170>
               	lock
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	je	0x42ff95 <mi_segment_reclaim+0x365>
               	testq	%rcx, %rcx
               	je	0x42ffe4 <mi_segment_reclaim+0x3b4>
               	movq	%rcx, 16(%rsp)
               	xorl	%r13d, %r13d
               	jmp	0x42fe01 <mi_segment_reclaim+0x1d1>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	movq	%r14, %rdx
               	callq	0x42e390 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %r13
               	movq	64(%r15), %rax
               	cmpq	%rax, %r13
               	jae	0x42ff97 <mi_segment_reclaim+0x367>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	testb	$1, 121(%r15,%rbx)
               	je	0x42fdf0 <mi_segment_reclaim+0x1c0>
               	movq	40(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	214802(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fe80 <mi_segment_reclaim+0x250>
               	leaq	215366(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fe80 <mi_segment_reclaim+0x250>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42fe70 <mi_segment_reclaim+0x240>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42fe60 <mi_segment_reclaim+0x230>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42feb4 <mi_segment_reclaim+0x284>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42fea2 <mi_segment_reclaim+0x272>
               	movq	%rax, 240(%rcx)
               	movq	232(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 232(%rcx)
               	leaq	(%r15,%rbx), %rbp
               	addq	$120, %rbp
               	movq	%r12, 160(%r15,%rbx)
               	movq	32(%rbp), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42fef0 <mi_segment_reclaim+0x2c0>
               	cmpl	$1, %ecx
               	je	0x42fee5 <mi_segment_reclaim+0x2b5>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%rbp)
               	jne	0x42fec4 <mi_segment_reclaim+0x294>
               	jmp	0x42fef0 <mi_segment_reclaim+0x2c0>
               	pause
               	jmp	0x42fec4 <mi_segment_reclaim+0x294>
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x42d250 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbx)
               	je	0x42fdd7 <mi_segment_reclaim+0x1a7>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x4301d0 <_mi_page_reclaim>
               	movl	140(%r15,%rbx), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42fdf0 <mi_segment_reclaim+0x1c0>
               	leaq	(%r15,%rbx), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbx), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42ff49 <mi_segment_reclaim+0x319>
               	movq	32(%rbp), %rax
               	cmpq	$4, %rax
               	jb	0x42fdf0 <mi_segment_reclaim+0x1c0>
               	movq	16(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x42fdf0 <mi_segment_reclaim+0x1c0>
               	movq	216(%rsi), %rax
               	addq	$-1, %rax
               	movq	%rax, 216(%rsi)
               	cmpq	208(%rsi), %rax
               	jle	0x42ff78 <mi_segment_reclaim+0x348>
               	movq	%rax, 208(%rsi)
               	movq	200(%rsi), %rax
               	addq	$1, %rax
               	movq	%rax, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	jne	0x42fdc4 <mi_segment_reclaim+0x194>
               	xorl	%eax, %eax
               	movq	56(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42ffcf <mi_segment_reclaim+0x39f>
               	cmpq	%rax, %rcx
               	jae	0x4301be <mi_segment_reclaim+0x58e>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4301be <mi_segment_reclaim+0x58e>
               	cmpl	$1, %eax
               	je	0x430198 <mi_segment_reclaim+0x568>
               	testl	%eax, %eax
               	je	0x43019c <mi_segment_reclaim+0x56c>
               	xorl	%r14d, %r14d
               	jmp	0x43019c <mi_segment_reclaim+0x56c>
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x42e600 <mi_segment_free>
               	xorl	%r15d, %r15d
               	jmp	0x4301be <mi_segment_reclaim+0x58e>
               	xorl	%ebx, %ebx
               	jmp	0x43000d <mi_segment_reclaim+0x3dd>
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	callq	0x42e390 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbx
               	movq	64(%r15), %rax
               	cmpq	%rax, %rbx
               	jae	0x42ff97 <mi_segment_reclaim+0x367>
               	movq	%rbx, %rbp
               	shlq	$6, %rbp
               	testb	$1, 121(%r15,%rbp)
               	je	0x430000 <mi_segment_reclaim+0x3d0>
               	movq	40(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	214278(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x430090 <mi_segment_reclaim+0x460>
               	leaq	214838(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x430090 <mi_segment_reclaim+0x460>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x430080 <mi_segment_reclaim+0x450>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x430070 <mi_segment_reclaim+0x440>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x4300c4 <mi_segment_reclaim+0x494>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x4300b2 <mi_segment_reclaim+0x482>
               	movq	%rax, 240(%rcx)
               	movq	232(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 232(%rcx)
               	leaq	(%r15,%rbp), %r13
               	addq	$120, %r13
               	movq	%r12, 160(%r15,%rbp)
               	movq	32(%r13), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x430100 <mi_segment_reclaim+0x4d0>
               	cmpl	$1, %ecx
               	je	0x4300f5 <mi_segment_reclaim+0x4c5>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r13)
               	jne	0x4300d4 <mi_segment_reclaim+0x4a4>
               	jmp	0x430100 <mi_segment_reclaim+0x4d0>
               	pause
               	jmp	0x4300d4 <mi_segment_reclaim+0x4a4>
               	nopl	(%rax)
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x42d250 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbp)
               	je	0x42ffe8 <mi_segment_reclaim+0x3b8>
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	callq	0x4301d0 <_mi_page_reclaim>
               	movl	140(%r15,%rbp), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x430000 <mi_segment_reclaim+0x3d0>
               	leaq	(%r15,%rbp), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbp), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x430000 <mi_segment_reclaim+0x3d0>
               	movq	32(%r13), %rax
               	jmp	0x430000 <mi_segment_reclaim+0x3d0>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43016e <mi_segment_reclaim+0x53e>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fd3f <mi_segment_reclaim+0x10f>
               	jmp	0x42fd3b <mi_segment_reclaim+0x10b>
               	addq	$16, %r14
               	movq	$0, 24(%r15)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r15)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, 8(%r14)
               	movq	%r15, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<_mi_page_reclaim>:
               	pushq	%rbx
               	movl	20(%rsi), %r8d
               	cmpl	$67108864, %r8d         # imm = 0x4000000
               	jae	0x430472 <_mi_page_reclaim+0x2a2>
               	addq	$7, %r8
               	movl	$1, %ecx
               	cmpq	$16, %r8
               	jb	0x430235 <_mi_page_reclaim+0x65>
               	movq	%r8, %rax
               	shrq	$3, %rax
               	cmpq	$71, %r8
               	ja	0x43020b <_mi_page_reclaim+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	movq	%rax, %rcx
               	jmp	0x430235 <_mi_page_reclaim+0x65>
               	movl	$73, %ecx
               	cmpq	$2097159, %r8           # imm = 0x200007
               	ja	0x430235 <_mi_page_reclaim+0x65>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	leaq	(%rax,%rax,2), %rax
               	cmpq	$2097168, 1056(%rdi,%rax,8) # imm = 0x200010
               	sete	%cl
               	movb	6(%rsi), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 6(%rsi)
               	movq	1040(%rdi,%rax,8), %rcx
               	movq	%rcx, 48(%rsi)
               	movq	$0, 56(%rsi)
               	leaq	56(%rcx), %rdx
               	testq	%rcx, %rcx
               	leaq	1048(%rdi,%rax,8), %rcx
               	cmovneq	%rdx, %rcx
               	movq	%rsi, (%rcx)
               	movq	%rsi, 1040(%rdi,%rax,8)
               	movq	1056(%rdi,%rax,8), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43045e <_mi_page_reclaim+0x28e>
               	leaq	7(%rcx), %r9
               	shrq	$3, %r9
               	cmpq	%rsi, 8(%rdi,%r9,8)
               	je	0x43045e <_mi_page_reclaim+0x28e>
               	cmpq	$9, %rcx
               	jae	0x4302bd <_mi_page_reclaim+0xed>
               	xorl	%ecx, %ecx
               	jmp	0x430382 <_mi_page_reclaim+0x1b2>
               	cmpq	$64, %rcx
               	ja	0x4302cd <_mi_page_reclaim+0xfd>
               	leal	1(%r9), %r8d
               	andb	$-2, %r8b
               	jmp	0x4302e8 <_mi_page_reclaim+0x118>
               	leaq	-1(%r9), %rdx
               	bsrq	%rdx, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rbx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%rdi), %r10
               	leaq	(%rdi,%rax,8), %rax
               	addq	$1016, %rax             # imm = 0x3F8
               	nopl	(%rax)
               	movq	16(%rax), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x430360 <_mi_page_reclaim+0x190>
               	cmpq	$71, %rdx
               	ja	0x430330 <_mi_page_reclaim+0x160>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x430360 <_mi_page_reclaim+0x190>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x430360 <_mi_page_reclaim+0x190>
               	leaq	-1(%rbx), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%r10, %rax
               	jbe	0x43036e <_mi_page_reclaim+0x19e>
               	addq	$-24, %rax
               	cmpb	%cl, %r8b
               	je	0x430300 <_mi_page_reclaim+0x130>
               	leaq	1(%rbx), %rcx
               	cmpq	%r9, %rbx
               	cmovaeq	%r9, %rcx
               	cmpq	%r9, %rcx
               	ja	0x43045e <_mi_page_reclaim+0x28e>
               	addq	$1, %r9
               	movq	%r9, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x430450 <_mi_page_reclaim+0x280>
               	movq	%r10, %r8
               	andq	$-4, %r8
               	movq	%rsi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %r11d
               	andl	$3, %r11d
               	cmpq	$12, %rdx
               	jae	0x4303c7 <_mi_page_reclaim+0x1f7>
               	xorl	%edx, %edx
               	jmp	0x430419 <_mi_page_reclaim+0x249>
               	leaq	(%rdi,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%edx, %edx
               	nopl	(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rdx,8)
               	movdqu	%xmm0, -96(%rbx,%rdx,8)
               	movdqu	%xmm0, -80(%rbx,%rdx,8)
               	movdqu	%xmm0, -64(%rbx,%rdx,8)
               	movdqu	%xmm0, -48(%rbx,%rdx,8)
               	movdqu	%xmm0, -32(%rbx,%rdx,8)
               	movdqu	%xmm0, -16(%rbx,%rdx,8)
               	movdqu	%xmm0, (%rbx,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rax
               	jne	0x4303e0 <_mi_page_reclaim+0x210>
               	testq	%r11, %r11
               	je	0x430442 <_mi_page_reclaim+0x272>
               	addq	%rcx, %rdx
               	leaq	(%rdi,%rdx,8), %rax
               	addq	$24, %rax
               	negq	%r11
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%r11
               	jne	0x430430 <_mi_page_reclaim+0x260>
               	cmpq	%r8, %r10
               	je	0x43045e <_mi_page_reclaim+0x28e>
               	addq	%r8, %rcx
               	nop
               	movq	%rsi, 8(%rdi,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r9
               	jne	0x430450 <_mi_page_reclaim+0x280>
               	movq	3016(%rdi), %rax
               	addq	$1, %rax
               	movq	%rax, 3016(%rdi)
               	popq	%rbx
               	retq
               	movq	%rsi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebx
               	cmpl	$3, %ebx
               	jne	0x430489 <_mi_page_reclaim+0x2b9>
               	movq	72(%rax), %rdx
               	jmp	0x430495 <_mi_page_reclaim+0x2c5>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%rsi), %cl
               	testb	%cl, %cl
               	je	0x4304a3 <_mi_page_reclaim+0x2d3>
               	movq	%rdx, %r8
               	jmp	0x4301e2 <_mi_page_reclaim+0x12>
               	movq	80(%rax), %r9
               	movq	%rdx, %r10
               	subq	%r9, %r10
               	cmpl	$1, %ebx
               	ja	0x4304eb <_mi_page_reclaim+0x31b>
               	testl	%r8d, %r8d
               	je	0x4304eb <_mi_page_reclaim+0x31b>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4304d4 <_mi_page_reclaim+0x304>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x4304d9 <_mi_page_reclaim+0x309>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r10
               	movq	%r10, %r8
               	jmp	0x4301e2 <_mi_page_reclaim+0x12>
               	nopw	%cs:(%rax,%rax)

<mi_free>:
               	movq	%rdi, %rdx
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x43055d <mi_free+0x5d>
               	movq	%fs:0, %r8
               	movl	%edx, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movq	96(%rdi), %rcx
               	shrq	%cl, %rax
               	movq	104(%rdi), %rcx
               	cmpq	%r8, %rcx
               	jne	0x43055e <mi_free+0x5e>
               	shlq	$6, %rax
               	cmpb	$0, 126(%rdi,%rax)
               	jne	0x43055e <mi_free+0x5e>
               	movq	144(%rdi,%rax), %rcx
               	movq	%rcx, (%rdx)
               	movq	%rdx, 144(%rdi,%rax)
               	movl	136(%rdi,%rax), %ecx
               	addl	$-1, %ecx
               	movl	%ecx, 136(%rdi,%rax)
               	je	0x430570 <mi_free+0x70>
               	retq
               	movq	104(%rdi), %rax
               	xorl	%esi, %esi
               	cmpq	%r8, %rax
               	sete	%sil
               	jmp	0x430580 <mi_free_generic>
               	addq	%rax, %rdi
               	addq	$120, %rdi
               	jmp	0x42f620 <_mi_page_retire>
               	nopl	(%rax)

<mi_free_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r8
               	movq	%rdx, %r11
               	subq	%rdi, %r11
               	movq	96(%rdi), %rcx
               	shrq	%cl, %r11
               	shlq	$6, %r11
               	leaq	(%rdi,%r11), %r9
               	addq	$120, %r9
               	testb	$2, 126(%rdi,%r11)
               	je	0x430646 <mi_free_generic+0xc6>
               	movl	140(%rdi,%r11), %r14d
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x4305c4 <mi_free_generic+0x44>
               	movq	72(%rdi), %r10
               	jmp	0x4305cd <mi_free_generic+0x4d>
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	movb	(%r9), %cl
               	movzbl	%cl, %ebx
               	imulq	%rbx, %r10
               	addq	%rdi, %r10
               	testb	%bl, %bl
               	jne	0x430618 <mi_free_generic+0x98>
               	addq	80(%rdi), %r10
               	cmpl	$1, %eax
               	ja	0x430618 <mi_free_generic+0x98>
               	testl	%r14d, %r14d
               	je	0x430618 <mi_free_generic+0x98>
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x4305ff <mi_free_generic+0x7f>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430607 <mi_free_generic+0x87>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	leaq	(%r10,%rax), %rcx
               	cmpq	%r14, %rax
               	cmovbq	%rcx, %r10
               	cmpl	$67108864, %r14d        # imm = 0x4000000
               	jae	0x4306b4 <mi_free_generic+0x134>
               	movq	%r8, %rax
               	subq	%r10, %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x43063e <mi_free_generic+0xbe>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430643 <mi_free_generic+0xc3>
               	xorl	%edx, %edx
               	divl	%r14d
               	subq	%rdx, %r8
               	testb	%sil, %sil
               	je	0x430687 <mi_free_generic+0x107>
               	movq	144(%rdi,%r11), %rax
               	movq	%rax, (%r8)
               	movq	%r8, 144(%rdi,%r11)
               	movl	136(%rdi,%r11), %eax
               	addl	$-1, %eax
               	movl	%eax, 136(%rdi,%r11)
               	je	0x430698 <mi_free_generic+0x118>
               	leaq	(%rdi,%r11), %rax
               	addq	$126, %rax
               	testb	$1, (%rax)
               	jne	0x4306a6 <mi_free_generic+0x126>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x430730 <_mi_free_block_mt>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f620 <_mi_page_retire>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f730 <_mi_page_unfull>
               	movq	%r9, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebp
               	cmpl	$3, %ebp
               	jne	0x4306cb <mi_free_generic+0x14b>
               	movq	72(%rax), %rdx
               	jmp	0x4306d7 <mi_free_generic+0x157>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	testb	%bl, %bl
               	je	0x4306e3 <mi_free_generic+0x163>
               	movq	%rdx, %r14
               	jmp	0x430625 <mi_free_generic+0xa5>
               	movq	80(%rax), %r15
               	movq	%rdx, %rcx
               	subq	%r15, %rcx
               	cmpl	$1, %ebp
               	ja	0x430728 <mi_free_generic+0x1a8>
               	testl	%r14d, %r14d
               	je	0x430728 <mi_free_generic+0x1a8>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430711 <mi_free_generic+0x191>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430716 <mi_free_generic+0x196>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%r14, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r14
               	jmp	0x430625 <mi_free_generic+0xa5>

<_mi_free_block_mt>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	%rdi, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	cmpl	$3, 112(%r15)
               	jne	0x430807 <_mi_free_block_mt+0xd7>
               	callq	0x42a9b0 <mi_thread_init>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rcx
               	movq	2848(%rcx), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, 104(%r15)
               	jne	0x430871 <_mi_free_block_mt+0x141>
               	movq	8(%r14), %rax
               	movq	%rax, (%rbx)
               	movq	%rbx, 8(%r14)
               	movl	16(%r14), %eax
               	addl	$-1, %eax
               	movl	%eax, 16(%r14)
               	movb	7(%r14), %al
               	andb	$-2, %al
               	movb	%al, 7(%r14)
               	movq	(%rcx), %rcx
               	movq	72(%r15), %rsi
               	movq	144(%rcx), %rdx
               	leaq	212374(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	212937(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rsi, %rsi
               	js	0x430877 <_mi_free_block_mt+0x147>
               	testb	%al, %al
               	je	0x4308b8 <_mi_free_block_mt+0x188>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	leaq	1(%rdi), %rbx
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x4307fd <_mi_free_block_mt+0xcd>
               	lock
               	cmpxchgq	%rbx, 16(%rdx)
               	jne	0x4307f0 <_mi_free_block_mt+0xc0>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x4308d8 <_mi_free_block_mt+0x1a8>
               	movq	32(%r14), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	movq	%rax, %rdx
               	andq	$3, %rdx
               	je	0x430830 <_mi_free_block_mt+0x100>
               	movq	%rcx, (%rbx)
               	orq	%rbx, %rdx
               	lock
               	cmpxchgq	%rdx, 32(%r14)
               	jne	0x430810 <_mi_free_block_mt+0xe0>
               	jmp	0x430871 <_mi_free_block_mt+0x141>
               	orq	$1, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x430810 <_mi_free_block_mt+0xe0>
               	movq	40(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x43085a <_mi_free_block_mt+0x12a>
               	movq	2840(%rcx), %rax
               	movq	%rax, (%rbx)
               	lock
               	cmpxchgq	%rbx, 2840(%rcx)
               	jne	0x43084c <_mi_free_block_mt+0x11c>
               	movq	32(%r14), %rax
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	orq	$2, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x43085e <_mi_free_block_mt+0x12e>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	testb	%al, %al
               	je	0x430917 <_mi_free_block_mt+0x1e7>
               	movq	$-1, %rdi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	addq	$-1, %rdi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rdi, %rax
               	jge	0x4308ad <_mi_free_block_mt+0x17d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x4308a0 <_mi_free_block_mt+0x170>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x430939 <_mi_free_block_mt+0x209>
               	movq	24(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rdi
               	jl	0x4308ce <_mi_free_block_mt+0x19e>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x4308ef <_mi_free_block_mt+0x1bf>
               	movq	%rax, 96(%rcx)
               	addq	104(%rcx), %rsi
               	leaq	32(%rcx), %rdx
               	movq	%rsi, 104(%rcx)
               	cmpq	112(%rcx), %rsi
               	jbe	0x430905 <_mi_free_block_mt+0x1d5>
               	movq	%rsi, 112(%rcx)
               	movq	%r14, %rdi
               	movl	$1, %esi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42e1a0 <_mi_segment_page_free>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43092d <_mi_free_block_mt+0x1fd>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x4308ef <_mi_free_block_mt+0x1bf>
               	jmp	0x4308eb <_mi_free_block_mt+0x1bb>

<mi_out_buf_stderr>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	198253(%rip), %rax      # 0x460fc8 <write+0x460fc8>
               	movq	(%rax), %rsi
               	callq	0x413790 <fputs@plt>
               	testq	%rbx, %rbx
               	je	0x430999 <mi_out_buf_stderr+0x49>
               	movq	213161(%rip), %rax      # 0x464a18 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x430999 <mi_out_buf_stderr+0x49>
               	movq	%rbx, %rdi
               	callq	0x4136e0 <strlen@plt>
               	testq	%rax, %rax
               	je	0x430999 <mi_out_buf_stderr+0x49>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 213128(%rip)      # 0x464a18 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x43099b <mi_out_buf_stderr+0x4b>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	213095(%rip), %rdi      # 0x464a20 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x4136f0 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<mi_buffered_out>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x430b23 <mi_buffered_out+0x153>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x430b23 <mi_buffered_out+0x153>
               	movq	%rdi, %r14
               	movb	(%rdi), %r12b
               	testb	%r12b, %r12b
               	je	0x430b23 <mi_buffered_out+0x153>
               	addq	$1, %r14
               	movq	$-56, %r15
               	movq	198087(%rip), %r13      # 0x460fd8 <write+0x460fd8>
               	movq	198064(%rip), %rbp      # 0x460fc8 <write+0x460fc8>
               	jmp	0x430a39 <mi_buffered_out+0x69>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	movq	$0, 24(%rbx)
               	movzbl	(%r14), %r12d
               	addq	$1, %r14
               	testb	%r12b, %r12b
               	je	0x430b23 <mi_buffered_out+0x153>
               	movq	24(%rbx), %rax
               	cmpq	32(%rbx), %rax
               	jb	0x430aa9 <mi_buffered_out+0xd9>
               	movq	16(%rbx), %rcx
               	movb	$0, (%rcx,%rax)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x430a70 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%r13)
               	je	0x430a70 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%rbp)
               	je	0x430a70 <mi_buffered_out+0xa0>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	jmp	0x430a9f <mi_buffered_out+0xcf>
               	nop
               	cmpb	$0, %fs:(%r15)
               	jne	0x430a9f <mi_buffered_out+0xcf>
               	movb	$1, %fs:(%r15)
               	movq	212869(%rip), %rsi      # 0x464a08 <mi_out_arg>
               	movq	212870(%rip), %rax      # 0x464a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19780(%rip), %rcx      # 0x42bd50 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	movq	$0, 24(%rbx)
               	xorl	%eax, %eax
               	movq	16(%rbx), %rcx
               	leaq	1(%rax), %rdx
               	movq	%rdx, 24(%rbx)
               	movb	%r12b, (%rcx,%rax)
               	cmpb	$10, %r12b
               	jne	0x430a28 <mi_buffered_out+0x58>
               	movq	16(%rbx), %rax
               	movq	24(%rbx), %rcx
               	movb	$0, (%rax,%rcx)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x430aeb <mi_buffered_out+0x11b>
               	cmpq	%rax, (%r13)
               	je	0x430aeb <mi_buffered_out+0x11b>
               	cmpq	%rax, (%rbp)
               	jne	0x430a1a <mi_buffered_out+0x4a>
               	cmpb	$0, %fs:(%r15)
               	jne	0x430a20 <mi_buffered_out+0x50>
               	movb	$1, %fs:(%r15)
               	movq	212742(%rip), %rsi      # 0x464a08 <mi_out_arg>
               	movq	212743(%rip), %rax      # 0x464a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19907(%rip), %rcx      # 0x42bd50 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	jmp	0x430a20 <mi_buffered_out+0x50>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_fprintf>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rsi, %r14
               	testb	%al, %al
               	je	0x430b88 <_mi_fprintf+0x48>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	752(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rdx, %rdx
               	je	0x430c1a <_mi_fprintf+0xda>
               	movq	$-56, %rbx
               	cmpb	$0, %fs:(%rbx)
               	jne	0x430c1a <_mi_fprintf+0xda>
               	movb	$1, %fs:(%rbx)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	callq	0x413850 <vsnprintf@plt>
               	movb	$0, %fs:(%rbx)
               	movq	197606(%rip), %rcx      # 0x460fd8 <write+0x460fd8>
               	leaq	-553(%rip), %rax        # 0x4309d0 <mi_buffered_out>
               	cmpq	%rax, (%rcx)
               	je	0x430c25 <_mi_fprintf+0xe5>
               	movq	197571(%rip), %rcx      # 0x460fc8 <write+0x460fc8>
               	cmpq	%rax, (%rcx)
               	je	0x430c25 <_mi_fprintf+0xe5>
               	leaq	208(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x4309d0 <mi_buffered_out>
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	movb	$1, %fs:(%rbx)
               	movq	212440(%rip), %rsi      # 0x464a08 <mi_out_arg>
               	movq	212441(%rip), %rax      # 0x464a10 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-20209(%rip), %rcx      # 0x42bd50 <mi_out_buf>
               	cmovneq	%rax, %rcx
               	leaq	208(%rsp), %rdi
               	callq	*%rcx
               	movb	$0, %fs:(%rbx)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<mi_stat_print>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rcx, %r15
               	movq	%rdx, %rbx
               	movq	%rsi, %rcx
               	movq	%rdi, %r14
               	leaq	84751(%rip), %rdx       # 0x44578d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	testq	%rbx, %rbx
               	jle	0x430cca <mi_stat_print+0x6a>
               	movq	16(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430d11 <mi_stat_print+0xb1>
               	leaq	84667(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	84667(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430e70 <mi_stat_print+0x210>
               	movq	16(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	testq	%rbx, %rbx
               	js	0x430d78 <mi_stat_print+0x118>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x430da8 <mi_stat_print+0x148>
               	leaq	84594(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	84594(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4312ef <mi_stat_print+0x68f>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	84560(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	84555(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	84522(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430e11 <mi_stat_print+0x1b1>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430e17 <mi_stat_print+0x1b7>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431225 <mi_stat_print+0x5c5>
               	leaq	84443(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	84481(%rip), %r8        # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4315bd <mi_stat_print+0x95d>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	84410(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	84405(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	84372(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43128e <mi_stat_print+0x62e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431296 <mi_stat_print+0x636>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	84249(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	84246(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	84254(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430ec2 <mi_stat_print+0x262>
               	leaq	84163(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	84163(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430f81 <mi_stat_print+0x321>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	84127(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	84122(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	84089(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430f22 <mi_stat_print+0x2c2>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430f28 <mi_stat_print+0x2c8>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	83976(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	83973(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	83981(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	8(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430fd4 <mi_stat_print+0x374>
               	leaq	83889(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	83889(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431093 <mi_stat_print+0x433>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	83853(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	83848(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	83815(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431034 <mi_stat_print+0x3d4>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x43103a <mi_stat_print+0x3da>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	83702(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	83699(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	83707(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x4310e6 <mi_stat_print+0x486>
               	leaq	83615(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	83615(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4311a5 <mi_stat_print+0x545>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	83579(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	83574(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	83541(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431146 <mi_stat_print+0x4e6>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x43114c <mi_stat_print+0x4ec>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	83428(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	83425(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	83433(%rip), %r12       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rbx
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	83358(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	83358(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movl	$32, %esi
               	movq	%rbx, %rdi
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	83353(%rip), %rcx       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	8(%r14), %rax
               	cmpq	%rax, (%r14)
               	leaq	83333(%rip), %rax       # 0x44579a <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
               	leaq	83344(%rip), %rdx       # 0x4457ac <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>
               	cmovgq	%rax, %rdx
               	jmp	0x431546 <mi_stat_print+0x8e6>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	83261(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	83256(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	83223(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43155c <mi_stat_print+0x8fc>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431564 <mi_stat_print+0x904>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	83098(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	83095(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	83103(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431341 <mi_stat_print+0x6e1>
               	leaq	83012(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	83012(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431400 <mi_stat_print+0x7a0>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	82976(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82971(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	82938(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4313a1 <mi_stat_print+0x741>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4313a7 <mi_stat_print+0x747>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	82825(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	82822(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	82830(%rip), %rbx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	82803(%rip), %rcx       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43146a <mi_stat_print+0x80a>
               	leaq	82715(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82715(%rip), %r8        # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431529 <mi_stat_print+0x8c9>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	82679(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82674(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	82641(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4314ca <mi_stat_print+0x86a>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4314d0 <mi_stat_print+0x870>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	82528(%rip), %rax       # 0x44576d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	82525(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	82533(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	82983(%rip), %rdx       # 0x44596d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	82418(%rip), %rax       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	82377(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	82385(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43160c <mi_stat_print+0x9ac>
               	leaq	82295(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82333(%rip), %r8        # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4316cf <mi_stat_print+0xa6f>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	82262(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82257(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	82224(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43166e <mi_stat_print+0xa0e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431676 <mi_stat_print+0xa16>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	82144(%rip), %rax       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	82103(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	82111(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	8(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43171f <mi_stat_print+0xabf>
               	leaq	82020(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82058(%rip), %r8        # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4317e2 <mi_stat_print+0xb82>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	81987(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81982(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	81949(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x431781 <mi_stat_print+0xb21>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431789 <mi_stat_print+0xb29>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81869(%rip), %rax       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	81828(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81836(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	24(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431832 <mi_stat_print+0xbd2>
               	leaq	81745(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81783(%rip), %r8        # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4318f5 <mi_stat_print+0xc95>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	81712(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81707(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	81674(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x431894 <mi_stat_print+0xc34>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x43189c <mi_stat_print+0xc3c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81594(%rip), %rax       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	81553(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81561(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	81568(%rip), %rdx       # 0x4457b2 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f9>
               	leaq	81842(%rip), %rcx       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%r15, %rsi
               	jmp	0x431200 <mi_stat_print+0x5a0>
               	nopw	%cs:(%rax,%rax)

<mi_stat_counter_print>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %rcx
               	movq	%rdi, %rbx
               	leaq	81478(%rip), %rdx       # 0x44578d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	movq	(%rbx), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43198d <mi_stat_counter_print+0x5d>
               	leaq	81400(%rip), %rdx       # 0x445766 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81438(%rip), %r8        # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431a4c <mi_stat_counter_print+0x11c>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81364(%rip), %rdx       # 0x44576f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81359(%rip), %rsi       # 0x445771 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81326(%rip), %r9        # 0x445773 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4319ed <mi_stat_counter_print+0xbd>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4319f3 <mi_stat_counter_print+0xc3>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81251(%rip), %rax       # 0x445793 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	81210(%rip), %rdx       # 0x445775 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81218(%rip), %rdx       # 0x445795 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	leaq	81668(%rip), %rdx       # 0x44596d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430b40 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<chacha_block>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movl	(%rdi), %r13d
               	movl	4(%rdi), %eax
               	movl	%eax, -24(%rsp)
               	movl	8(%rdi), %r12d
               	movl	12(%rdi), %r8d
               	movl	16(%rdi), %r9d
               	movl	20(%rdi), %eax
               	movl	24(%rdi), %ebx
               	movl	28(%rdi), %ebp
               	movl	32(%rdi), %ecx
               	movl	%ecx, -32(%rsp)
               	movl	36(%rdi), %ecx
               	movl	%ecx, -28(%rsp)
               	movl	40(%rdi), %ecx
               	movl	%ecx, -20(%rsp)
               	movl	44(%rdi), %r14d
               	movl	48(%rdi), %esi
               	movl	52(%rdi), %edx
               	movl	56(%rdi), %r15d
               	movq	%rdi, -8(%rsp)
               	movl	60(%rdi), %r11d
               	movq	$-2, -16(%rsp)
               	nop
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$16, %esi
               	movl	-32(%rsp), %ecx
               	addl	%esi, %ecx
               	xorl	%ecx, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$8, %esi
               	addl	%esi, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %r9d
               	roll	$7, %r9d
               	movl	-24(%rsp), %edi
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$16, %edx
               	movl	-28(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %eax
               	roll	$12, %eax
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -28(%rsp)
               	xorl	%ecx, %eax
               	roll	$7, %eax
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$16, %r15d
               	movl	-20(%rsp), %r10d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$7, %ebp
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r10d
               	xorl	%r10d, %eax
               	roll	$12, %eax
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r10d
               	movl	%r10d, -20(%rsp)
               	xorl	%r10d, %eax
               	roll	$7, %eax
               	addl	%ebx, %edi
               	xorl	%edi, %esi
               	roll	$16, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %edi
               	movl	%edi, -24(%rsp)
               	xorl	%edi, %esi
               	roll	$8, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$16, %edx
               	movl	-32(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %ebp
               	roll	$7, %ebp
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$16, %r15d
               	movl	-28(%rsp), %edi
               	addl	%r15d, %edi
               	xorl	%edi, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %edi
               	movl	%edi, -28(%rsp)
               	xorl	%edi, %r9d
               	roll	$7, %r9d
               	movq	-16(%rsp), %r10
               	addq	$2, %r10
               	movq	%r10, -16(%rsp)
               	cmpq	$18, %r10
               	jb	0x431ae0 <chacha_block+0x60>
               	movq	-8(%rsp), %rdi
               	addl	(%rdi), %r13d
               	movl	%r13d, 64(%rdi)
               	movd	%r9d, %xmm0
               	movd	%r8d, %xmm1
               	movd	%r12d, %xmm2
               	movd	-24(%rsp), %xmm3        # xmm3 = mem[0],zero,zero,zero
               	movd	-32(%rsp), %xmm4        # xmm4 = mem[0],zero,zero,zero
               	movd	%ebp, %xmm5
               	movd	%ebx, %xmm6
               	movd	%eax, %xmm7
               	punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
               	punpckldq	%xmm2, %xmm3    # xmm3 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
               	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
               	movdqu	4(%rdi), %xmm0
               	paddd	%xmm3, %xmm0
               	movdqu	20(%rdi), %xmm1
               	movdqu	%xmm0, 68(%rdi)
               	punpckldq	%xmm4, %xmm5    # xmm5 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
               	punpckldq	%xmm6, %xmm7    # xmm7 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
               	punpcklqdq	%xmm5, %xmm7    # xmm7 = xmm7[0],xmm5[0]
               	paddd	%xmm1, %xmm7
               	movdqu	%xmm7, 84(%rdi)
               	movl	-28(%rsp), %r10d
               	addl	36(%rdi), %r10d
               	movl	%r10d, 100(%rdi)
               	movl	-20(%rsp), %eax
               	addl	40(%rdi), %eax
               	movl	%eax, 104(%rdi)
               	addl	44(%rdi), %r14d
               	movl	%r14d, 108(%rdi)
               	movl	48(%rdi), %ebp
               	addl	%ebp, %esi
               	movl	%esi, 112(%rdi)
               	movl	52(%rdi), %esi
               	addl	%esi, %edx
               	movl	%edx, 116(%rdi)
               	movl	56(%rdi), %eax
               	addl	%eax, %r15d
               	movl	%r15d, 120(%rdi)
               	addl	60(%rdi), %r11d
               	movl	%r11d, 124(%rdi)
               	movl	$16, 128(%rdi)
               	incl	%ebp
               	movl	%ebp, 48(%rdi)
               	jne	0x431d0a <chacha_block+0x28a>
               	incl	%esi
               	movl	%esi, 52(%rdi)
               	jne	0x431d0a <chacha_block+0x28a>
               	addl	$1, %eax
               	movl	%eax, 56(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_malloc_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	187464(%rip), %r12      # 0x45f980 <_mi_heap_empty>
               	movq	$-80, %r13
               	xorl	%r15d, %r15d
               	cmpq	%r12, %rbx
               	je	0x431dde <_mi_malloc_generic+0xbe>
               	movq	(%rbx), %rax
               	movq	(%rax), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rax)
               	movq	306793(%rip), %rcx      # 0x47cbc8 <deferred_free>
               	testq	%rcx, %rcx
               	je	0x431d87 <_mi_malloc_generic+0x67>
               	cmpb	$0, 8(%rax)
               	jne	0x431d87 <_mi_malloc_generic+0x67>
               	movb	$1, 8(%rax)
               	movq	306771(%rip), %rax      # 0x47cbc8 <deferred_free>
               	movq	306772(%rip), %rdx      # 0x47cbd0 <deferred_arg>
               	xorl	%edi, %edi
               	callq	*%rax
               	movq	(%rbx), %rax
               	movb	$0, 8(%rax)
               	movq	2840(%rbx), %rax
               	nop
               	testq	%rax, %rax
               	je	0x431dc0 <_mi_malloc_generic+0xa0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%r15, 2840(%rbx)
               	jne	0x431d90 <_mi_malloc_generic+0x70>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x42f550 <_mi_free_delayed_block>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x431db0 <_mi_malloc_generic+0x90>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431e50 <mi_find_page>
               	testq	%rax, %rax
               	je	0x431df3 <_mi_malloc_generic+0xd3>
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	jne	0x431e2b <_mi_malloc_generic+0x10b>
               	jmp	0x431d42 <_mi_malloc_generic+0x22>
               	callq	0x42a9b0 <mi_thread_init>
               	movq	%fs:(%r13), %rbx
               	cmpq	%r12, %rbx
               	jne	0x431d4b <_mi_malloc_generic+0x2b>
               	jmp	0x431e3e <_mi_malloc_generic+0x11e>
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42c660 <mi_heap_collect_ex>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431e50 <mi_find_page>
               	testq	%rax, %rax
               	jne	0x431dd0 <_mi_malloc_generic+0xb0>
               	leaq	80321(%rip), %rsi       # 0x4457d8 <typeinfo name for kotlin::gc::GCSchedulerData+0x181f>
               	xorl	%r15d, %r15d
               	movl	$12, %edi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	jmp	0x431e3e <_mi_malloc_generic+0x11e>
               	movl	16(%rax), %edx
               	addl	$1, %edx
               	movl	%edx, 16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, %r15
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<mi_find_page>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %r15
               	cmpq	$2097153, %rsi          # imm = 0x200001
               	jae	0x431f94 <mi_find_page+0x144>
               	movl	$1, %eax
               	cmpq	$9, %rdx
               	jb	0x431ea6 <mi_find_page+0x56>
               	leaq	7(%rdx), %rax
               	shrq	$3, %rax
               	cmpq	$64, %rdx
               	ja	0x431e8b <mi_find_page+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	jmp	0x431ea6 <mi_find_page+0x56>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %eax
               	addl	$253, %eax
               	movzbl	%al, %eax
               	leaq	(%rax,%rax,2), %r14
               	movq	1040(%r15,%r14,8), %rbx
               	testq	%rbx, %rbx
               	je	0x431f77 <mi_find_page+0x127>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x431f19 <mi_find_page+0xc9>
               	movq	32(%rbx), %rax
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x431ed0 <mi_find_page+0x80>
               	andq	$-4, %rcx
               	je	0x431f19 <mi_find_page+0xc9>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x431f02 <mi_find_page+0xb2>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x431ef0 <mi_find_page+0xa0>
               	cmpl	%edx, %eax
               	jbe	0x431f41 <mi_find_page+0xf1>
               	leaq	79537(%rip), %rsi       # 0x4455be <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	movq	24(%rbx), %rax
               	movq	8(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x431f61 <mi_find_page+0x111>
               	testq	%rcx, %rcx
               	jne	0x431f66 <mi_find_page+0x116>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	jmp	0x431f66 <mi_find_page+0x116>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	movq	8(%rbx), %rcx
               	testq	%rax, %rax
               	jne	0x431f26 <mi_find_page+0xd6>
               	testq	%rcx, %rcx
               	je	0x431f77 <mi_find_page+0x127>
               	movb	7(%rbx), %al
               	andb	$1, %al
               	movb	%al, 7(%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	(%r15,%r14,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	movq	%r15, %rdi
               	movl	$1, %edx
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4329b0 <mi_page_queue_find_free_ex>
               	testq	%rdx, %rdx
               	js	0x4320f8 <mi_find_page+0x2a8>
               	cmpq	$33554432, %rdx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	cmpq	$8388608, %rdx          # imm = 0x800000
               	movl	$262144, %eax           # imm = 0x40000
               	cmovaeq	%rcx, %rax
               	movq	%rax, %rcx
               	notq	%rcx
               	cmpq	%rdx, %rcx
               	seta	%cl
               	testb	$1, %cl
               	je	0x431fe4 <mi_find_page+0x194>
               	leaq	(%rdx,%rax), %rcx
               	addq	$-1, %rcx
               	negq	%rax
               	andq	%rcx, %rax
               	movq	%rax, %rdx
               	xorl	%ebx, %ebx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x4321a0 <mi_page_fresh_alloc>
               	testq	%rax, %rax
               	je	0x431f6e <mi_find_page+0x11e>
               	movq	%rax, %r14
               	movl	20(%rax), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x432112 <mi_find_page+0x2c2>
               	movq	$0, 40(%r14)
               	movq	(%r15), %rdi
               	cmpq	$67108865, %rsi         # imm = 0x4000001
               	jb	0x432064 <mi_find_page+0x214>
               	addq	$528, %rdi              # imm = 0x210
               	callq	0x42bdc0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	736(%rax), %rcx
               	leaq	206084(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x4320a6 <mi_find_page+0x256>
               	leaq	206648(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x4320a6 <mi_find_page+0x256>
               	lock
               	addq	$1, 744(%rax)
               	lock
               	addq	$1, 736(%rax)
               	jmp	0x4320f0 <mi_find_page+0x2a0>
               	addq	$496, %rdi              # imm = 0x1F0
               	callq	0x42bdc0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	720(%rax), %rcx
               	leaq	206015(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x4320cc <mi_find_page+0x27c>
               	leaq	206579(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x4320cc <mi_find_page+0x27c>
               	lock
               	addq	$1, 728(%rax)
               	lock
               	addq	$1, 720(%rax)
               	jmp	0x4320f0 <mi_find_page+0x2a0>
               	movq	744(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 744(%rax)
               	movq	736(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 736(%rax)
               	jmp	0x4320f0 <mi_find_page+0x2a0>
               	movq	728(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 728(%rax)
               	movq	720(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 720(%rax)
               	movq	%r14, %rbx
               	jmp	0x431f6e <mi_find_page+0x11e>
               	leaq	79616(%rip), %rsi       # 0x4457ff <typeinfo name for kotlin::gc::GCSchedulerData+0x1846>
               	xorl	%ebx, %ebx
               	movl	$75, %edi
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	jmp	0x431f6e <mi_find_page+0x11e>
               	movq	%r14, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x432129 <mi_find_page+0x2d9>
               	movq	72(%rax), %rdx
               	jmp	0x432135 <mi_find_page+0x2e5>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%r14), %bl
               	testb	%bl, %bl
               	je	0x432144 <mi_find_page+0x2f4>
               	movq	%rdx, %rsi
               	jmp	0x43200b <mi_find_page+0x1bb>
               	movq	80(%rax), %r8
               	movq	%rdx, %rcx
               	subq	%r8, %rcx
               	cmpl	$1, %edi
               	ja	0x43218a <mi_find_page+0x33a>
               	testl	%esi, %esi
               	je	0x43218a <mi_find_page+0x33a>
               	movzbl	%bl, %edi
               	imulq	%rdi, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x432174 <mi_find_page+0x324>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x432178 <mi_find_page+0x328>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	jmp	0x43200b <mi_find_page+0x1bb>
               	nopw	%cs:(%rax,%rax)

<mi_page_fresh_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r13
               	movq	%rdi, %r12
               	movq	(%rdi), %r14
               	leaq	32(%r14), %rbx
               	leaq	160(%r14), %r9
               	cmpq	$16384, %rdx            # imm = 0x4000
               	movq	%rdx, 16(%rsp)
               	ja	0x432205 <mi_page_fresh_alloc+0x65>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	jne	0x432397 <mi_page_fresh_alloc+0x1f7>
               	xorl	%r15d, %r15d
               	movl	$16, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %r8
               	callq	0x433280 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x4323a2 <mi_page_fresh_alloc+0x202>
               	movq	(%rbx), %rdi
               	jmp	0x432397 <mi_page_fresh_alloc+0x1f7>
               	cmpq	$131072, %rdx           # imm = 0x20000
               	ja	0x432245 <mi_page_fresh_alloc+0xa5>
               	movq	48(%r14), %rdi
               	testq	%rdi, %rdi
               	jne	0x432397 <mi_page_fresh_alloc+0x1f7>
               	movl	$19, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$1, %edx
               	movq	%rbx, %r8
               	callq	0x433280 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x432305 <mi_page_fresh_alloc+0x165>
               	movq	48(%r14), %rdi
               	jmp	0x432397 <mi_page_fresh_alloc+0x1f7>
               	cmpq	$2097152, %rdx          # imm = 0x200000
               	ja	0x432277 <mi_page_fresh_alloc+0xd7>
               	movl	$22, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$2, %edx
               	movq	%rbx, %r8
               	callq	0x433280 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x432305 <mi_page_fresh_alloc+0x165>
               	movq	%rax, %rdi
               	jmp	0x432397 <mi_page_fresh_alloc+0x1f7>
               	xorl	%r15d, %r15d
               	movl	$22, %ecx
               	xorl	%edi, %edi
               	movq	%rdx, %rsi
               	movl	$3, %edx
               	movq	%rbx, %r8
               	callq	0x4338e0 <mi_segment_init>
               	testq	%rax, %rax
               	je	0x4323a2 <mi_page_fresh_alloc+0x202>
               	movq	%rax, %rdi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%rdi)
               	movq	72(%rdi), %r8
               	movq	144(%r14), %rdx
               	leaq	205451(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%cl
               	leaq	206014(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%cl, %al
               	testq	%r8, %r8
               	jle	0x43230d <mi_page_fresh_alloc+0x16d>
               	testb	%al, %al
               	je	0x432347 <mi_page_fresh_alloc+0x1a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	cmpq	%rsi, %rax
               	jge	0x4322fd <mi_page_fresh_alloc+0x15d>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x4322f0 <mi_page_fresh_alloc+0x150>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x432369 <mi_page_fresh_alloc+0x1c9>
               	xorl	%r15d, %r15d
               	jmp	0x4323a2 <mi_page_fresh_alloc+0x202>
               	testb	%al, %al
               	je	0x432626 <mi_page_fresh_alloc+0x486>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rbp
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x43233d <mi_page_fresh_alloc+0x19d>
               	lock
               	cmpxchgq	%rbp, 16(%rdx)
               	jne	0x432330 <mi_page_fresh_alloc+0x190>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x432646 <mi_page_fresh_alloc+0x4a6>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43235d <mi_page_fresh_alloc+0x1bd>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	jbe	0x432382 <mi_page_fresh_alloc+0x1e2>
               	movq	%rax, 96(%r14)
               	movq	104(%r14), %rax
               	subq	%r8, %rax
               	movq	%rax, 104(%r14)
               	cmpq	112(%r14), %rax
               	jbe	0x432397 <mi_page_fresh_alloc+0x1f7>
               	movq	%rax, 112(%r14)
               	movq	%rbx, %rsi
               	callq	0x433660 <mi_segment_find_free>
               	movq	%rax, %r15
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4324d4 <mi_page_fresh_alloc+0x334>
               	movq	%r12, 8(%rsp)
               	leaq	24(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	72(%r14), %r12
               	testq	%r12, %r12
               	je	0x4324b7 <mi_page_fresh_alloc+0x317>
               	movq	24(%rsp), %rcx
               	movq	32(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x432429 <mi_page_fresh_alloc+0x289>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	$0, 16(%rbp)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 48(%rbp)
               	testq	%r12, %r12
               	je	0x4324b7 <mi_page_fresh_alloc+0x317>
               	movq	%r12, %rbp
               	cmpl	%ebx, 16(%r12)
               	jg	0x4324c3 <mi_page_fresh_alloc+0x323>
               	movq	56(%rbp), %r12
               	movl	$10, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x432410 <mi_page_fresh_alloc+0x270>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x432410 <mi_page_fresh_alloc+0x270>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x432410 <mi_page_fresh_alloc+0x270>
               	cmpl	$3, 112(%rdx)
               	jne	0x432474 <mi_page_fresh_alloc+0x2d4>
               	movq	72(%rdx), %rsi
               	jmp	0x432480 <mi_page_fresh_alloc+0x2e0>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x43249f <mi_page_fresh_alloc+0x2ff>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x432410 <mi_page_fresh_alloc+0x270>
               	callq	0x42dfd0 <_mi_os_reset>
               	jmp	0x432410 <mi_page_fresh_alloc+0x270>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 64(%r14)
               	jmp	0x4324cf <mi_page_fresh_alloc+0x32f>
               	movq	%rbp, 72(%r14)
               	movq	$0, 48(%rbp)
               	movq	8(%rsp), %r12
               	testq	%r15, %r15
               	je	0x432992 <mi_page_fresh_alloc+0x7f2>
               	movq	%r15, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	movq	%r12, 40(%r15)
               	movl	112(%rsi), %edx
               	cmpl	$3, %edx
               	jne	0x4324f9 <mi_page_fresh_alloc+0x359>
               	movq	72(%rsi), %rax
               	jmp	0x432505 <mi_page_fresh_alloc+0x365>
               	movq	96(%rsi), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	movq	16(%rsp), %rbx
               	movb	(%r15), %cl
               	movzbl	%cl, %edi
               	testb	%dil, %dil
               	jne	0x43255f <mi_page_fresh_alloc+0x3bf>
               	movq	80(%rsi), %rbp
               	movq	%rax, %rcx
               	subq	%rbp, %rcx
               	cmpl	$1, %edx
               	ja	0x43255c <mi_page_fresh_alloc+0x3bc>
               	testq	%rbx, %rbx
               	je	0x43255c <mi_page_fresh_alloc+0x3bc>
               	imulq	%rdi, %rax
               	addq	%rsi, %rax
               	addq	%rbp, %rax
               	movq	%rax, %rdx
               	orq	%rbx, %rdx
               	shrq	$32, %rdx
               	je	0x432546 <mi_page_fresh_alloc+0x3a6>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x43254a <mi_page_fresh_alloc+0x3aa>
               	xorl	%edx, %edx
               	divl	%ebx
               	movq	%rbx, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbx, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	cmpq	$67108864, %rbx         # imm = 0x4000000
               	movl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbx, %rbp
               	movl	%ebp, 20(%r15)
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x432586 <mi_page_fresh_alloc+0x3e6>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x43258a <mi_page_fresh_alloc+0x3ea>
               	xorl	%edx, %edx
               	divl	%ebx
               	movw	%ax, 4(%r15)
               	movb	1(%r15), %cl
               	shrb	$3, %cl
               	andb	$1, %cl
               	movb	7(%r15), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 7(%r15)
               	cmpq	$0, 8(%r15)
               	jne	0x4326e0 <mi_page_fresh_alloc+0x540>
               	movzwl	2(%r15), %ecx
               	cmpw	%ax, %cx
               	jae	0x4326e0 <mi_page_fresh_alloc+0x540>
               	movzwl	%cx, %r8d
               	movl	112(%rsi), %edx
               	cmpl	$3, %edx
               	jne	0x4325dc <mi_page_fresh_alloc+0x43c>
               	movq	72(%rsi), %rax
               	testb	%dil, %dil
               	je	0x4325ed <mi_page_fresh_alloc+0x44d>
               	movq	%r12, %rbx
               	jmp	0x43267d <mi_page_fresh_alloc+0x4dd>
               	movq	96(%rsi), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%dil, %dil
               	jne	0x4325d4 <mi_page_fresh_alloc+0x434>
               	movq	80(%rsi), %rbx
               	movq	%rax, %rcx
               	subq	%rbx, %rcx
               	cmpl	$1, %edx
               	ja	0x432621 <mi_page_fresh_alloc+0x481>
               	testq	%rbp, %rbp
               	je	0x432621 <mi_page_fresh_alloc+0x481>
               	imulq	%rdi, %rax
               	addq	%rax, %rsi
               	addq	%rbx, %rsi
               	movq	%rsi, %rax
               	movq	%r12, %rbx
               	shrq	$32, %rax
               	je	0x432662 <mi_page_fresh_alloc+0x4c2>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x432668 <mi_page_fresh_alloc+0x4c8>
               	movq	%r12, %rbx
               	jmp	0x43267a <mi_page_fresh_alloc+0x4da>
               	movq	24(%rdx), %rcx
               	leaq	1(%rcx), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rcx
               	jl	0x43263c <mi_page_fresh_alloc+0x49c>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	ja	0x43237e <mi_page_fresh_alloc+0x1de>
               	jmp	0x432382 <mi_page_fresh_alloc+0x1e2>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	movl	20(%r15), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	cmovaeq	%rax, %rsi
               	movzwl	4(%r15), %r12d
               	subq	%r8, %r12
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x4326ad <mi_page_fresh_alloc+0x50d>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %r12
               	cmovaq	%rax, %r12
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	callq	0x4331b0 <mi_page_free_list_extend>
               	movzwl	2(%r15), %eax
               	addl	%r12d, %eax
               	movw	%ax, 2(%r15)
               	testb	$8, 1(%r15)
               	movq	%rbx, %r12
               	jne	0x4326e0 <mi_page_fresh_alloc+0x540>
               	movb	7(%r15), %al
               	andb	$-2, %al
               	movb	%al, 7(%r15)
               	movq	(%r12), %rdx
               	leaq	208(%rdx), %rcx
               	leaq	204366(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x43273f <mi_page_fresh_alloc+0x59f>
               	leaq	204930(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x43273f <mi_page_fresh_alloc+0x59f>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 232(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	224(%rdx), %rax
               	cmpq	%rsi, %rax
               	jg	0x432730 <mi_page_fresh_alloc+0x590>
               	lock
               	cmpxchgq	%rdi, 224(%rdx)
               	jne	0x432720 <mi_page_fresh_alloc+0x580>
               	lock
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	jne	0x432774 <mi_page_fresh_alloc+0x5d4>
               	jmp	0x432992 <mi_page_fresh_alloc+0x7f2>
               	movq	232(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 232(%rdx)
               	cmpq	224(%rdx), %rsi
               	jl	0x432761 <mi_page_fresh_alloc+0x5c1>
               	movq	%rax, 224(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	testq	%r13, %r13
               	je	0x432992 <mi_page_fresh_alloc+0x7f2>
               	cmpq	$2097168, 16(%r13)      # imm = 0x200010
               	sete	%al
               	movb	6(%r15), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%r15)
               	movq	(%r13), %rax
               	movq	%rax, 48(%r15)
               	movq	$0, 56(%r15)
               	leaq	56(%rax), %rcx
               	leaq	8(%r13), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, (%r13)
               	movq	16(%r13), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43297e <mi_page_fresh_alloc+0x7de>
               	leaq	7(%rcx), %rax
               	shrq	$3, %rax
               	cmpq	%r15, 8(%r12,%rax,8)
               	je	0x43297e <mi_page_fresh_alloc+0x7de>
               	cmpq	$9, %rcx
               	jae	0x4327e3 <mi_page_fresh_alloc+0x643>
               	xorl	%ecx, %ecx
               	jmp	0x4328a1 <mi_page_fresh_alloc+0x701>
               	cmpq	$64, %rcx
               	ja	0x4327f1 <mi_page_fresh_alloc+0x651>
               	leal	1(%rax), %edx
               	andb	$-2, %dl
               	jmp	0x43280a <mi_page_fresh_alloc+0x66a>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %edx
               	addb	$-3, %dl
               	leaq	1040(%r12), %rsi
               	addq	$-24, %r13
               	nopw	%cs:(%rax,%rax)
               	movq	16(%r13), %rdi
               	addq	$7, %rdi
               	movq	%rdi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rdi
               	jb	0x432880 <mi_page_fresh_alloc+0x6e0>
               	cmpq	$71, %rdi
               	ja	0x432850 <mi_page_fresh_alloc+0x6b0>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432880 <mi_page_fresh_alloc+0x6e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdi          # imm = 0x200007
               	ja	0x432880 <mi_page_fresh_alloc+0x6e0>
               	leaq	-1(%rbp), %rdi
               	bsrq	%rdi, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdi
               	andl	$3, %edi
               	leal	(%rdi,%rbx,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %r13
               	jbe	0x43288d <mi_page_fresh_alloc+0x6ed>
               	addq	$-24, %r13
               	cmpb	%cl, %dl
               	je	0x432820 <mi_page_fresh_alloc+0x680>
               	leaq	1(%rbp), %rcx
               	cmpq	%rax, %rbp
               	cmovaeq	%rax, %rcx
               	cmpq	%rax, %rcx
               	ja	0x43297e <mi_page_fresh_alloc+0x7de>
               	addq	$1, %rax
               	movq	%rax, %rdx
               	subq	%rcx, %rdx
               	cmpq	$4, %rdx
               	jb	0x432970 <mi_page_fresh_alloc+0x7d0>
               	movq	%rdx, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x4328e4 <mi_page_fresh_alloc+0x744>
               	xorl	%ebx, %ebx
               	jmp	0x432939 <mi_page_fresh_alloc+0x799>
               	leaq	(%r12,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rdi
               	jne	0x432900 <mi_page_fresh_alloc+0x760>
               	testq	%rbp, %rbp
               	je	0x432962 <mi_page_fresh_alloc+0x7c2>
               	addq	%rcx, %rbx
               	leaq	(%r12,%rbx,8), %rsi
               	addq	$24, %rsi
               	negq	%rbp
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rbp
               	jne	0x432950 <mi_page_fresh_alloc+0x7b0>
               	cmpq	%r8, %rdx
               	je	0x43297e <mi_page_fresh_alloc+0x7de>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %rax
               	jne	0x432970 <mi_page_fresh_alloc+0x7d0>
               	movq	3016(%r12), %rax
               	addq	$1, %rax
               	movq	%rax, 3016(%r12)
               	movq	%r15, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_queue_find_free_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorb	$1, %dl
               	leaq	-24(%rsi), %rax
               	movq	%rax, 8(%rsp)
               	leaq	1040(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movl	%edx, 4(%rsp)
               	movq	(%r14), %r13
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	testq	%r13, %r13
               	je	0x432fd0 <mi_page_queue_find_free_ex+0x620>
               	movq	%r13, %rbx
               	movq	48(%r13), %r13
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432a60 <mi_page_queue_find_free_ex+0xb0>
               	movq	32(%rbx), %rax
               	nop
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432a10 <mi_page_queue_find_free_ex+0x60>
               	andq	$-4, %rcx
               	je	0x432a60 <mi_page_queue_find_free_ex+0xb0>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x432a42 <mi_page_queue_find_free_ex+0x92>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x432a30 <mi_page_queue_find_free_ex+0x80>
               	cmpl	%edx, %eax
               	jbe	0x432b33 <mi_page_queue_find_free_ex+0x183>
               	movl	$14, %edi
               	leaq	76648(%rip), %rsi       # 0x4455be <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432a84 <mi_page_queue_find_free_ex+0xd4>
               	cmpq	$0, 8(%rbx)
               	jne	0x432a84 <mi_page_queue_find_free_ex+0xd4>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	cmpq	$0, 8(%rbx)
               	jne	0x43318a <mi_page_queue_find_free_ex+0x7da>
               	movzwl	2(%rbx), %eax
               	movzwl	4(%rbx), %ecx
               	cmpw	%cx, %ax
               	jb	0x4330b7 <mi_page_queue_find_free_ex+0x707>
               	testb	$1, 6(%rbx)
               	jne	0x4329f0 <mi_page_queue_find_free_ex+0x40>
               	movq	40(%rbx), %rdx
               	movq	40(%rbx), %r9
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432ac3 <mi_page_queue_find_free_ex+0x113>
               	movq	48(%rbx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	48(%rbx), %r15
               	testq	%r15, %r15
               	je	0x432ad0 <mi_page_queue_find_free_ex+0x120>
               	movq	%rax, 56(%r15)
               	cmpq	%rbx, 8(%r14)
               	je	0x432ae1 <mi_page_queue_find_free_ex+0x131>
               	cmpq	%rbx, (%r14)
               	jne	0x432cf0 <mi_page_queue_find_free_ex+0x340>
               	jmp	0x432af2 <mi_page_queue_find_free_ex+0x142>
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r14)
               	cmpq	%rbx, (%r14)
               	jne	0x432cf0 <mi_page_queue_find_free_ex+0x340>
               	movq	%r15, (%r14)
               	movq	16(%r14), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x432cf0 <mi_page_queue_find_free_ex+0x340>
               	testq	%r15, %r15
               	leaq	79665(%rip), %rcx       # 0x446240 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r10
               	shrq	$3, %r10
               	cmpq	%r15, 8(%r9,%r10,8)
               	je	0x432cf0 <mi_page_queue_find_free_ex+0x340>
               	cmpq	$9, %rax
               	jae	0x432b58 <mi_page_queue_find_free_ex+0x1a8>
               	xorl	%ecx, %ecx
               	jmp	0x432c12 <mi_page_queue_find_free_ex+0x262>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x432a69 <mi_page_queue_find_free_ex+0xb9>
               	jmp	0x432a84 <mi_page_queue_find_free_ex+0xd4>
               	cmpq	$64, %rax
               	ja	0x432b68 <mi_page_queue_find_free_ex+0x1b8>
               	leal	1(%r10), %r8d
               	andb	$-2, %r8b
               	jmp	0x432b83 <mi_page_queue_find_free_ex+0x1d3>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r9), %rax
               	movq	8(%rsp), %rdi
               	nop
               	movq	16(%rdi), %rsi
               	addq	$7, %rsi
               	movq	%rsi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rsi
               	jb	0x432bf0 <mi_page_queue_find_free_ex+0x240>
               	cmpq	$71, %rsi
               	ja	0x432bc0 <mi_page_queue_find_free_ex+0x210>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432bf0 <mi_page_queue_find_free_ex+0x240>
               	movb	$73, %cl
               	cmpq	$2097159, %rsi          # imm = 0x200007
               	ja	0x432bf0 <mi_page_queue_find_free_ex+0x240>
               	leaq	-1(%rbp), %rsi
               	bsrq	%rsi, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rdi
               	jbe	0x432bfe <mi_page_queue_find_free_ex+0x24e>
               	addq	$-24, %rdi
               	cmpb	%cl, %r8b
               	je	0x432b90 <mi_page_queue_find_free_ex+0x1e0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r10, %rbp
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x432cf0 <mi_page_queue_find_free_ex+0x340>
               	addq	$1, %r10
               	movq	%r10, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432ce0 <mi_page_queue_find_free_ex+0x330>
               	movq	%r11, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x432c55 <mi_page_queue_find_free_ex+0x2a5>
               	xorl	%ebp, %ebp
               	jmp	0x432ca9 <mi_page_queue_find_free_ex+0x2f9>
               	leaq	(%r9,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbp,8)
               	movdqu	%xmm0, -96(%rsi,%rbp,8)
               	movdqu	%xmm0, -80(%rsi,%rbp,8)
               	movdqu	%xmm0, -64(%rsi,%rbp,8)
               	movdqu	%xmm0, -48(%rsi,%rbp,8)
               	movdqu	%xmm0, -32(%rsi,%rbp,8)
               	movdqu	%xmm0, -16(%rsi,%rbp,8)
               	movdqu	%xmm0, (%rsi,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdi
               	jne	0x432c70 <mi_page_queue_find_free_ex+0x2c0>
               	testq	%rax, %rax
               	je	0x432cd2 <mi_page_queue_find_free_ex+0x322>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rsi
               	addq	$24, %rsi
               	negq	%rax
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rax
               	jne	0x432cc0 <mi_page_queue_find_free_ex+0x310>
               	cmpq	%r8, %r11
               	je	0x432cf0 <mi_page_queue_find_free_ex+0x340>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x432ce0 <mi_page_queue_find_free_ex+0x330>
               	nop
               	movq	2824(%rdx), %rax
               	movq	%rax, 56(%rbx)
               	movq	$0, 48(%rbx)
               	testq	%rax, %rax
               	je	0x432d1f <mi_page_queue_find_free_ex+0x36f>
               	movq	%rbx, 48(%rax)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	jmp	0x432f00 <mi_page_queue_find_free_ex+0x550>
               	movq	%rbx, 2816(%rdx)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x432f00 <mi_page_queue_find_free_ex+0x550>
               	leaq	7(%r8), %r15
               	shrq	$3, %r15
               	cmpq	%rbx, 8(%r9,%r15,8)
               	je	0x432f00 <mi_page_queue_find_free_ex+0x550>
               	cmpq	$9, %r8
               	jae	0x432d61 <mi_page_queue_find_free_ex+0x3b1>
               	xorl	%ecx, %ecx
               	jmp	0x432e22 <mi_page_queue_find_free_ex+0x472>
               	cmpq	$64, %r8
               	ja	0x432d71 <mi_page_queue_find_free_ex+0x3c1>
               	leal	1(%r15), %ebp
               	andb	$-2, %bpl
               	jmp	0x432d8b <mi_page_queue_find_free_ex+0x3db>
               	leaq	-1(%r15), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %ebp
               	addb	$-3, %bpl
               	leaq	1040(%r9), %rsi
               	addq	$2792, %rdx             # imm = 0xAE8
               	nopl	(%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x432e00 <mi_page_queue_find_free_ex+0x450>
               	cmpq	$71, %rax
               	ja	0x432dd0 <mi_page_queue_find_free_ex+0x420>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x432e00 <mi_page_queue_find_free_ex+0x450>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x432e00 <mi_page_queue_find_free_ex+0x450>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r10
               	movl	%r10d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r10,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x432e0e <mi_page_queue_find_free_ex+0x45e>
               	addq	$-24, %rdx
               	cmpb	%cl, %bpl
               	je	0x432da0 <mi_page_queue_find_free_ex+0x3f0>
               	leaq	1(%rdi), %rcx
               	cmpq	%r15, %rdi
               	cmovaeq	%r15, %rcx
               	cmpq	%r15, %rcx
               	ja	0x432f00 <mi_page_queue_find_free_ex+0x550>
               	addq	$1, %r15
               	movq	%r15, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432ef0 <mi_page_queue_find_free_ex+0x540>
               	movq	%r11, %r10
               	andq	$-4, %r10
               	movq	%rbx, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r10), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rdx
               	jae	0x432e65 <mi_page_queue_find_free_ex+0x4b5>
               	xorl	%ebp, %ebp
               	jmp	0x432eb9 <mi_page_queue_find_free_ex+0x509>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rbp,8)
               	movdqu	%xmm0, -96(%rdx,%rbp,8)
               	movdqu	%xmm0, -80(%rdx,%rbp,8)
               	movdqu	%xmm0, -64(%rdx,%rbp,8)
               	movdqu	%xmm0, -48(%rdx,%rbp,8)
               	movdqu	%xmm0, -32(%rdx,%rbp,8)
               	movdqu	%xmm0, -16(%rdx,%rbp,8)
               	movdqu	%xmm0, (%rdx,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rsi
               	jne	0x432e80 <mi_page_queue_find_free_ex+0x4d0>
               	testq	%rax, %rax
               	je	0x432ee2 <mi_page_queue_find_free_ex+0x532>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x432ed0 <mi_page_queue_find_free_ex+0x520>
               	cmpq	%r10, %r11
               	je	0x432f00 <mi_page_queue_find_free_ex+0x550>
               	addq	%r10, %rcx
               	nop
               	movq	%rbx, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r15
               	jne	0x432ef0 <mi_page_queue_find_free_ex+0x540>
               	nop
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rbx), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rbx)
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432f80 <mi_page_queue_find_free_ex+0x5d0>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432f30 <mi_page_queue_find_free_ex+0x580>
               	andq	$-4, %rcx
               	je	0x432f80 <mi_page_queue_find_free_ex+0x5d0>
               	movzwl	2(%rbx), %esi
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rdx
               	addl	$1, %eax
               	cmpl	%esi, %eax
               	ja	0x432f62 <mi_page_queue_find_free_ex+0x5b2>
               	movq	(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x432f50 <mi_page_queue_find_free_ex+0x5a0>
               	cmpl	%esi, %eax
               	jbe	0x432fb1 <mi_page_queue_find_free_ex+0x601>
               	movl	$14, %edi
               	leaq	75336(%rip), %rsi       # 0x4455be <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42c010 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rcx
               	testq	%rcx, %rcx
               	je	0x4329f0 <mi_page_queue_find_free_ex+0x40>
               	cmpq	$0, 8(%rbx)
               	jne	0x4329f0 <mi_page_queue_find_free_ex+0x40>
               	movq	%rcx, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	jmp	0x4329f0 <mi_page_queue_find_free_ex+0x40>
               	movq	24(%rbx), %rsi
               	movq	%rsi, (%rdx)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %edx
               	subl	%eax, %edx
               	movl	%edx, 16(%rbx)
               	testq	%rcx, %rcx
               	jne	0x432f8d <mi_page_queue_find_free_ex+0x5dd>
               	jmp	0x4329f0 <mi_page_queue_find_free_ex+0x40>
               	nop
               	movq	3024(%r12), %rbp
               	cmpq	3032(%r12), %rbp
               	jbe	0x433030 <mi_page_queue_find_free_ex+0x680>
               	movl	$74, %r13d
               	xorl	%r15d, %r15d
               	movq	%r13, 3024(%r12)
               	movq	%r15, 3032(%r12)
               	movq	16(%r14), %rdx
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x4321a0 <mi_page_fresh_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	setne	%al
               	orb	4(%rsp), %al
               	movb	$1, %dl
               	testb	$1, %al
               	je	0x4329dc <mi_page_queue_find_free_ex+0x2c>
               	jmp	0x433192 <mi_page_queue_find_free_ex+0x7e2>
               	nopw	%cs:(%rax,%rax)
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	movq	16(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %rbx
               	movl	$74, %r13d
               	xorl	%r15d, %r15d
               	jmp	0x433076 <mi_page_queue_find_free_ex+0x6c6>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r12), %rbp
               	ja	0x432feb <mi_page_queue_find_free_ex+0x63b>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x433060 <mi_page_queue_find_free_ex+0x6b0>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x433060 <mi_page_queue_find_free_ex+0x6b0>
               	cmpl	$0, 16(%rax)
               	jne	0x43304f <mi_page_queue_find_free_ex+0x69f>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	cmpb	$1, %cl
               	ja	0x4330a7 <mi_page_queue_find_free_ex+0x6f7>
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	callq	0x42d320 <_mi_page_free>
               	jmp	0x433060 <mi_page_queue_find_free_ex+0x6b0>
               	cmpq	%r13, %rbp
               	cmovbq	%rbp, %r13
               	cmpq	%r15, %rbp
               	cmovaq	%rbp, %r15
               	jmp	0x433060 <mi_page_queue_find_free_ex+0x6b0>
               	movzwl	%ax, %r8d
               	movzwl	%cx, %ebp
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rbx), %edi
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x4330de <mi_page_queue_find_free_ex+0x72e>
               	movq	72(%rax), %rsi
               	movb	(%rbx), %cl
               	testb	%cl, %cl
               	jne	0x433139 <mi_page_queue_find_free_ex+0x789>
               	jmp	0x4330f0 <mi_page_queue_find_free_ex+0x740>
               	movq	96(%rax), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movb	(%rbx), %cl
               	testb	%cl, %cl
               	jne	0x433139 <mi_page_queue_find_free_ex+0x789>
               	movq	80(%rax), %r9
               	movq	%rsi, %r10
               	subq	%r9, %r10
               	cmpl	$1, %edx
               	ja	0x433136 <mi_page_queue_find_free_ex+0x786>
               	testl	%edi, %edi
               	je	0x433136 <mi_page_queue_find_free_ex+0x786>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rsi
               	addq	%rsi, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x433120 <mi_page_queue_find_free_ex+0x770>
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x433124 <mi_page_queue_find_free_ex+0x774>
               	xorl	%edx, %edx
               	divl	%edi
               	movq	%rdi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rdi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r10
               	movq	%r10, %rsi
               	cmpl	$67108864, %edi         # imm = 0x4000000
               	cmovbq	%rdi, %rsi
               	subq	%r8, %rbp
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x433160 <mi_page_queue_find_free_ex+0x7b0>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %rbp
               	cmovaq	%rax, %rbp
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x4331b0 <mi_page_free_list_extend>
               	movzwl	2(%rbx), %eax
               	addl	%ebp, %eax
               	movw	%ax, 2(%rbx)
               	testb	$8, 1(%rbx)
               	jne	0x43318a <mi_page_queue_find_free_ex+0x7da>
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	movb	7(%rbx), %al
               	andb	$1, %al
               	movb	%al, 7(%rbx)
               	movq	%rbx, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_free_list_extend>:
               	movq	%rdx, %r8
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rdi), %r9d
               	movl	112(%rax), %r10d
               	cmpl	$3, %r10d
               	jne	0x4331d0 <mi_page_free_list_extend+0x20>
               	movq	72(%rax), %r11
               	jmp	0x4331dd <mi_page_free_list_extend+0x2d>
               	movq	96(%rax), %rcx
               	movl	$1, %r11d
               	shlq	%cl, %r11
               	movb	(%rdi), %cl
               	movzbl	%cl, %edx
               	movq	%rdx, %rcx
               	imulq	%r11, %rcx
               	addq	%rax, %rcx
               	testb	%dl, %dl
               	jne	0x43322a <mi_page_free_list_extend+0x7a>
               	addq	80(%rax), %rcx
               	cmpl	$1, %r10d
               	ja	0x43322a <mi_page_free_list_extend+0x7a>
               	testl	%r9d, %r9d
               	je	0x43322a <mi_page_free_list_extend+0x7a>
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433212 <mi_page_free_list_extend+0x62>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%r9
               	jmp	0x433219 <mi_page_free_list_extend+0x69>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%r9d
               	movq	%r9, %rax
               	subq	%rdx, %rax
               	leaq	(%rcx,%rax), %rdx
               	cmpq	%r9, %rax
               	cmovbq	%rdx, %rcx
               	movzwl	2(%rdi), %r10d
               	movq	%r10, %r11
               	imulq	%rsi, %r11
               	leaq	(%rcx,%r11), %r9
               	leaq	(%r8,%r10), %rax
               	addq	$-1, %rax
               	imulq	%rsi, %rax
               	leaq	(%rcx,%rax), %rdx
               	cmpq	%rax, %r11
               	jg	0x43326e <mi_page_free_list_extend+0xbe>
               	addq	$1, %r10
               	imulq	%rsi, %r10
               	addq	%r10, %rcx
               	movq	%r9, %rax
               	nopl	(%rax)
               	movq	%rcx, (%rax)
               	addq	%rsi, %rax
               	addq	%rsi, %rcx
               	cmpq	%rdx, %rax
               	jbe	0x433260 <mi_page_free_list_extend+0xb0>
               	movq	8(%rdi), %rax
               	movq	%rax, (%rdx)
               	movq	%r9, 8(%rdi)
               	retq
               	nopw	(%rax,%rax)

<mi_segment_reclaim_or_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%r9, %r14
               	movq	%r8, %rbx
               	movq	%rcx, %r12
               	movl	%edx, %r13d
               	movq	104(%r8), %rbp
               	testq	%rbp, %rbp
               	je	0x43332e <mi_segment_reclaim_or_alloc+0xae>
               	movq	88(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 88(%rbx)
               	movq	24(%rbp), %rax
               	movq	%rax, 104(%rbx)
               	movq	$0, 24(%rbp)
               	movq	112(%rbx), %rcx
               	leaq	416(%rcx), %rax
               	leaq	201323(%rip), %rdx      # 0x464540 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x4335b9 <mi_segment_reclaim_or_alloc+0x339>
               	leaq	201883(%rip), %rdx      # 0x464780 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x4335b9 <mi_segment_reclaim_or_alloc+0x339>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x433320 <mi_segment_reclaim_or_alloc+0xa0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x433310 <mi_segment_reclaim_or_alloc+0x90>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x4335ed <mi_segment_reclaim_or_alloc+0x36d>
               	movq	%rdi, %r15
               	movq	%rsi, 24(%rsp)
               	movb	$0, 3(%rsp)
               	movl	$7, %eax
               	xorl	%ebp, %ebp
               	movl	%r13d, 4(%rsp)
               	movq	%rdi, 8(%rsp)
               	movl	%eax, 20(%rsp)
               	movq	300969(%rip), %rax      # 0x47cb00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x43341c <mi_segment_reclaim_or_alloc+0x19c>
               	movq	301078(%rip), %rax      # 0x47cb80 <abandoned_visited>
               	testq	%rax, %rax
               	je	0x4335aa <mi_segment_reclaim_or_alloc+0x32a>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 301060(%rip)      # 0x47cb80 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x4335aa <mi_segment_reclaim_or_alloc+0x32a>
               	movq	300916(%rip), %rax      # 0x47cb00 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x4333b2 <mi_segment_reclaim_or_alloc+0x132>
               	movq	301093(%rip), %rdx      # 0x47cbc0 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 300880(%rip)      # 0x47cb00 <abandoned>
               	je	0x43340c <mi_segment_reclaim_or_alloc+0x18c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x4333c0 <mi_segment_reclaim_or_alloc+0x140>
               	movq	300841(%rip), %rax      # 0x47cb00 <abandoned>
               	nopw	(%rax,%rax)
               	movq	301017(%rip), %rdx      # 0x47cbc0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 300790(%rip)      # 0x47cb00 <abandoned>
               	jne	0x4333e0 <mi_segment_reclaim_or_alloc+0x160>
               	lock
               	addq	%rdx, 300844(%rip)      # 0x47cb40 <abandoned_count>
               	lock
               	subq	%rdx, 300964(%rip)      # 0x47cbc0 <abandoned_visited_count>
               	lock
               	addq	$1, 300699(%rip)        # 0x47cac0 <abandoned_readers>
               	movq	300756(%rip), %rax      # 0x47cb00 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	je	0x43359a <mi_segment_reclaim_or_alloc+0x31a>
               	movq	16(%r15), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 300711(%rip)      # 0x47cb00 <abandoned>
               	jne	0x433430 <mi_segment_reclaim_or_alloc+0x1b0>
               	lock
               	subq	$1, 300636(%rip)        # 0x47cac0 <abandoned_readers>
               	movq	$0, 16(%r15)
               	lock
               	subq	$1, 300747(%rip)        # 0x47cb40 <abandoned_count>
               	movq	48(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 48(%r15)
               	cmpq	$0, 64(%r15)
               	je	0x433511 <mi_segment_reclaim_or_alloc+0x291>
               	movq	%r12, 32(%rsp)
               	movq	%rbx, 40(%rsp)
               	movq	%r14, 48(%rsp)
               	leaq	120(%r15), %r14
               	xorl	%ebp, %ebp
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	xorl	%ebx, %ebx
               	jmp	0x4334c0 <mi_segment_reclaim_or_alloc+0x240>
               	addq	$1, %r12
               	movb	$1, %bpl
               	addq	$1, %r13
               	addq	$64, %r14
               	cmpq	64(%r15), %r13
               	jae	0x4334fd <mi_segment_reclaim_or_alloc+0x27d>
               	testb	$1, 1(%r14)
               	je	0x4334af <mi_segment_reclaim_or_alloc+0x22f>
               	addq	$1, %rbx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d250 <_mi_page_free_collect>
               	movl	16(%r14), %eax
               	testl	%eax, %eax
               	je	0x4334ab <mi_segment_reclaim_or_alloc+0x22b>
               	movl	20(%r14), %ecx
               	cmpq	24(%rsp), %rcx
               	jne	0x4334b2 <mi_segment_reclaim_or_alloc+0x232>
               	movzwl	4(%r14), %ecx
               	cmpl	%ecx, %eax
               	jb	0x4334af <mi_segment_reclaim_or_alloc+0x22f>
               	movq	32(%r14), %rax
               	cmpq	$4, %rax
               	jae	0x4334af <mi_segment_reclaim_or_alloc+0x22f>
               	jmp	0x4334b2 <mi_segment_reclaim_or_alloc+0x232>
               	cmpq	%r12, %rbx
               	movq	48(%rsp), %r14
               	movq	40(%rsp), %rbx
               	movq	32(%rsp), %r12
               	jne	0x43353e <mi_segment_reclaim_or_alloc+0x2be>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fc30 <mi_segment_reclaim>
               	movl	4(%rsp), %r13d
               	movl	20(%rsp), %eax
               	subl	$1, %eax
               	movl	$0, %ebp
               	jae	0x43334c <mi_segment_reclaim_or_alloc+0xcc>
               	jmp	0x4335aa <mi_segment_reclaim_or_alloc+0x32a>
               	testb	$1, %bpl
               	movl	4(%rsp), %r13d
               	je	0x433553 <mi_segment_reclaim_or_alloc+0x2d3>
               	cmpl	%r13d, 112(%r15)
               	je	0x433615 <mi_segment_reclaim_or_alloc+0x395>
               	cmpq	$3, 48(%r15)
               	jb	0x433570 <mi_segment_reclaim_or_alloc+0x2f0>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fc30 <mi_segment_reclaim>
               	jmp	0x43352a <mi_segment_reclaim_or_alloc+0x2aa>
               	movq	300553(%rip), %rax      # 0x47cb80 <abandoned_visited>
               	nopw	(%rax,%rax)
               	movq	%rax, 16(%r15)
               	lock
               	cmpxchgq	%r15, 300531(%rip)      # 0x47cb80 <abandoned_visited>
               	jne	0x433580 <mi_segment_reclaim_or_alloc+0x300>
               	lock
               	addq	$1, 300584(%rip)        # 0x47cbc0 <abandoned_visited_count>
               	jmp	0x43352a <mi_segment_reclaim_or_alloc+0x2aa>
               	lock
               	subq	$1, 300317(%rip)        # 0x47cac0 <abandoned_readers>
               	xorl	%ebp, %ebp
               	movl	4(%rsp), %r13d
               	cmpb	$0, 3(%rsp)
               	je	0x43363d <mi_segment_reclaim_or_alloc+0x3bd>
               	xorl	%ebp, %ebp
               	jmp	0x433603 <mi_segment_reclaim_or_alloc+0x383>
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x4335db <mi_segment_reclaim_or_alloc+0x35b>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%rbx, %r8
               	movq	%r14, %r9
               	callq	0x4338e0 <mi_segment_init>
               	movq	%rbp, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	3(%rsp), %rcx
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	movq	24(%rsp), %rdx
               	movq	%rbx, %r8
               	callq	0x42fc30 <mi_segment_reclaim>
               	movq	%rax, %rbp
               	cmpb	$0, 3(%rsp)
               	jne	0x4335b5 <mi_segment_reclaim_or_alloc+0x335>
               	testq	%rbp, %rbp
               	jne	0x433603 <mi_segment_reclaim_or_alloc+0x383>
               	xorl	%edi, %edi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%rbx, %r8
               	movq	%r14, %r9
               	callq	0x4338e0 <mi_segment_init>
               	movq	%rax, %rbp
               	jmp	0x433603 <mi_segment_reclaim_or_alloc+0x383>
               	nopl	(%rax)

<mi_segment_find_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 64(%rdi)
               	je	0x433854 <mi_segment_find_free+0x1f4>
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	120(%rdi), %rbx
               	leaq	6(%rsp), %r12
               	leaq	7(%rsp), %r13
               	xorl	%ebp, %ebp
               	jmp	0x4336c6 <mi_segment_find_free+0x66>
               	nop
               	movzbl	1(%rbx), %ecx
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	testb	%al, %al
               	jne	0x433858 <mi_segment_find_free+0x1f8>
               	andb	$-2, %cl
               	movb	%cl, 1(%rbx)
               	movq	56(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%r15)
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	64(%r15), %rbp
               	jae	0x433854 <mi_segment_find_free+0x1f4>
               	movzbl	1(%rbx), %ecx
               	testb	$1, %cl
               	jne	0x4336b4 <mi_segment_find_free+0x54>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rdx
               	testq	%rax, %rax
               	je	0x4336e3 <mi_segment_find_free+0x83>
               	testq	%rdx, %rdx
               	jne	0x4336ec <mi_segment_find_free+0x8c>
               	jmp	0x4336f9 <mi_segment_find_free+0x99>
               	testq	%rdx, %rdx
               	je	0x43383b <mi_segment_find_free+0x1db>
               	movq	%rax, 48(%rdx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4336fd <mi_segment_find_free+0x9d>
               	movq	%rdx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x43372d <mi_segment_find_free+0xcd>
               	cmpq	32(%r14), %rbx
               	je	0x43373b <mi_segment_find_free+0xdb>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movzbl	1(%rbx), %ecx
               	testb	$4, %cl
               	jne	0x43379e <mi_segment_find_free+0x13e>
               	cmpl	$3, 112(%r15)
               	jne	0x433741 <mi_segment_find_free+0xe1>
               	movq	72(%r15), %rsi
               	jmp	0x43374d <mi_segment_find_free+0xed>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x433709 <mi_segment_find_free+0xa9>
               	movq	%rax, 32(%r14)
               	jmp	0x433709 <mi_segment_find_free+0xa9>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%al, %al
               	jne	0x43376b <mi_segment_find_free+0x10b>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 6(%rsp)
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r12, %r8
               	callq	0x42da50 <mi_os_commitx>
               	testb	%al, %al
               	je	0x4336b4 <mi_segment_find_free+0x54>
               	cmpb	$0, 6(%rsp)
               	movzbl	1(%rbx), %ecx
               	je	0x433798 <mi_segment_find_free+0x138>
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	orb	$4, %cl
               	movb	%cl, 1(%rbx)
               	orb	$1, %cl
               	movb	%cl, 1(%rbx)
               	movq	56(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 56(%r15)
               	movzbl	1(%rbx), %eax
               	testb	$2, %al
               	je	0x433858 <mi_segment_find_free+0x1f8>
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433858 <mi_segment_find_free+0x1f8>
               	cmpb	$0, 8(%r15)
               	jne	0x433858 <mi_segment_find_free+0x1f8>
               	andb	$-3, %al
               	movb	%al, 1(%rbx)
               	cmpl	$3, 112(%r15)
               	jne	0x4337e7 <mi_segment_find_free+0x187>
               	movq	72(%r15), %rsi
               	jmp	0x4337f3 <mi_segment_find_free+0x193>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%al, %al
               	jne	0x433811 <mi_segment_find_free+0x1b1>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 7(%rsp)
               	testq	%rsi, %rsi
               	je	0x433858 <mi_segment_find_free+0x1f8>
               	movq	%r13, %rdx
               	callq	0x434960 <_mi_os_unreset>
               	cmpb	$0, 7(%rsp)
               	jne	0x433690 <mi_segment_find_free+0x30>
               	testb	%al, %al
               	jne	0x433858 <mi_segment_find_free+0x1f8>
               	movzbl	1(%rbx), %ecx
               	jmp	0x4336a2 <mi_segment_find_free+0x42>
               	cmpq	32(%r14), %rbx
               	je	0x4336fd <mi_segment_find_free+0x9d>
               	cmpq	40(%r14), %rbx
               	jne	0x43371b <mi_segment_find_free+0xbb>
               	jmp	0x4336fd <mi_segment_find_free+0x9d>
               	xorl	%ebx, %ebx
               	jmp	0x4338c1 <mi_segment_find_free+0x261>
               	movq	64(%r15), %rax
               	cmpq	%rax, 56(%r15)
               	jne	0x4338c1 <mi_segment_find_free+0x261>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4338c1 <mi_segment_find_free+0x261>
               	testl	%eax, %eax
               	je	0x433878 <mi_segment_find_free+0x218>
               	cmpl	$1, %eax
               	jne	0x4338c1 <mi_segment_find_free+0x261>
               	addq	$16, %r14
               	leaq	24(%r15), %rax
               	movq	24(%r15), %rcx
               	movq	32(%r15), %rdx
               	testq	%rcx, %rcx
               	je	0x433890 <mi_segment_find_free+0x230>
               	testq	%rdx, %rdx
               	jne	0x433895 <mi_segment_find_free+0x235>
               	jmp	0x4338a1 <mi_segment_find_free+0x241>
               	testq	%rdx, %rdx
               	je	0x4338d3 <mi_segment_find_free+0x273>
               	movq	%rcx, 24(%rdx)
               	movq	(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4338a5 <mi_segment_find_free+0x245>
               	movq	%rdx, 32(%rcx)
               	cmpq	%r15, (%r14)
               	jne	0x4338ad <mi_segment_find_free+0x24d>
               	movq	%rcx, (%r14)
               	cmpq	%r15, 8(%r14)
               	jne	0x4338bb <mi_segment_find_free+0x25b>
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%r14)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpq	%r15, (%r14)
               	jne	0x4338c1 <mi_segment_find_free+0x261>
               	jmp	0x4338a5 <mi_segment_find_free+0x245>
               	nopw	(%rax,%rax)

<mi_segment_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%r9, 56(%rsp)
               	movq	%r8, %r12
               	movq	%rcx, %r14
               	movl	%edx, %r13d
               	movq	%rdi, %rbp
               	movl	$4194304, %eax          # imm = 0x400000
               	movl	$4194304, %edx          # imm = 0x400000
               	shrq	%cl, %rdx
               	cmpl	$3, %r13d
               	movl	$1, %r15d
               	cmovneq	%rdx, %r15
               	movl	%r15d, %ecx
               	shll	$6, %ecx
               	addl	$391, %ecx              # imm = 0x187
               	andl	$1073741568, %ecx       # imm = 0x3FFFFF00
               	movq	%rcx, 88(%rsp)
               	leaq	(%rsi,%rcx), %rbx
               	addq	$262143, %rbx           # imm = 0x3FFFF
               	andq	$-262144, %rbx          # imm = 0xFFFC0000
               	testq	%rsi, %rsi
               	cmoveq	%rax, %rbx
               	cmpl	$1, %r13d
               	movq	%rbx, 80(%rsp)
               	ja	0x433975 <mi_segment_init+0x95>
               	movq	56(%r12), %rbx
               	movl	$13, %edi
               	callq	0x42abb0 <mi_option_get>
               	xorl	%ecx, %ecx
               	movl	$0, %edx
               	cmpq	%rax, %rbx
               	movq	80(%rsp), %rbx
               	jb	0x433987 <mi_segment_init+0xa7>
               	movl	$3, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%dl
               	movb	$1, %cl
               	movb	%dl, 9(%rsp)
               	movb	$0, 8(%rsp)
               	testq	%rbp, %rbp
               	je	0x433ab6 <mi_segment_init+0x1d6>
               	movq	%r14, 96(%rsp)
               	cmpl	$1, %r13d
               	ja	0x4339dc <mi_segment_init+0xfc>
               	cmpl	%r13d, 112(%rbp)
               	jne	0x4339dc <mi_segment_init+0xfc>
               	cmpq	%rbx, 72(%rbp)
               	jne	0x4339dc <mi_segment_init+0xfc>
               	movq	$0, 16(%rbp)
               	leaq	24(%rbp), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbp)
               	movups	%xmm0, 88(%rbp)
               	movups	%xmm0, 72(%rbp)
               	movups	%xmm0, 56(%rbp)
               	movups	%xmm0, 40(%rbp)
               	movups	%xmm0, 24(%rbp)
               	jmp	0x433bcc <mi_segment_init+0x2ec>
               	movl	%r13d, 24(%rsp)
               	movq	%r12, %r14
               	cmpq	$0, 64(%rbp)
               	je	0x433b0d <mi_segment_init+0x22d>
               	movb	9(%rsp), %r13b
               	leaq	121(%rbp), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x433a35 <mi_segment_init+0x155>
               	movl	$5, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x433a3f <mi_segment_init+0x15f>
               	movzbl	(%rbx), %eax
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	addq	$1, %r12
               	movq	64(%rbp), %rax
               	addq	$64, %rbx
               	cmpq	%rax, %r12
               	jae	0x433b0f <mi_segment_init+0x22f>
               	testb	$2, (%rbx)
               	je	0x433a20 <mi_segment_init+0x140>
               	testb	%r13b, %r13b
               	je	0x4339fd <mi_segment_init+0x11d>
               	cmpb	$0, 8(%rbp)
               	jne	0x433a20 <mi_segment_init+0x140>
               	movzbl	(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433a20 <mi_segment_init+0x140>
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	cmpl	$3, 112(%rbp)
               	jne	0x433a62 <mi_segment_init+0x182>
               	movq	72(%rbp), %rsi
               	jmp	0x433a6e <mi_segment_init+0x18e>
               	movq	96(%rbp), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	-1(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%rbp, %rdi
               	testb	%al, %al
               	jne	0x433a8d <mi_segment_init+0x1ad>
               	movq	80(%rbp), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 16(%rsp)
               	testq	%rsi, %rsi
               	je	0x433a20 <mi_segment_init+0x140>
               	leaq	16(%rsp), %rdx
               	callq	0x434960 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x433a20 <mi_segment_init+0x140>
               	movzbl	(%rbx), %eax
               	orb	$8, %al
               	jmp	0x433a11 <mi_segment_init+0x131>
               	movb	%cl, 10(%rsp)
               	movb	$0, 8(%rsp)
               	movb	$0, 11(%rsp)
               	testq	%rbx, %rbx
               	je	0x434501 <mi_segment_init+0xc21>
               	movq	193700(%rip), %rcx      # 0x462f78 <os_page_size>
               	leaq	-1(%rcx), %rax
               	leaq	(%rbx,%rcx), %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x433c20 <mi_segment_init+0x340>
               	negq	%rcx
               	andq	%rcx, %rbp
               	leaq	4194303(%rbp), %rcx
               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
               	movq	%r14, 96(%rsp)
               	jbe	0x433c84 <mi_segment_init+0x3a4>
               	jmp	0x434397 <mi_segment_init+0xab7>
               	xorl	%eax, %eax
               	cmpq	%r15, %rax
               	jae	0x433b4f <mi_segment_init+0x26f>
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movq	88(%rsp), %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da50 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	movq	%r14, %r12
               	movl	24(%rsp), %r13d
               	je	0x433b46 <mi_segment_init+0x266>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	jne	0x433b57 <mi_segment_init+0x277>
               	jmp	0x434501 <mi_segment_init+0xc21>
               	movq	%r14, %r12
               	movl	24(%rsp), %r13d
               	movq	$0, 16(%rbp)
               	leaq	24(%rbp), %r14
               	movq	88(%rsp), %rax
               	leaq	-24(%rax), %rdx
               	xorl	%ebx, %ebx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movb	$1, %al
               	nopw	(%rax,%rax)
               	leal	-1(%rax), %ecx
               	shlq	$6, %rbx
               	movb	%cl, 120(%rbp,%rbx)
               	movzbl	121(%rbp,%rbx), %ecx
               	movl	%ecx, %edx
               	andb	$-3, %dl
               	movb	%dl, 121(%rbp,%rbx)
               	movzbl	9(%rsp), %edx
               	shlb	$2, %dl
               	andb	$-7, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%rbp,%rbx)
               	movzbl	8(%rsp), %edx
               	shlb	$3, %dl
               	andb	$-11, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%rbp,%rbx)
               	movzbl	%al, %ebx
               	movl	%ebx, %eax
               	addb	$1, %al
               	cmpq	%rbx, %r15
               	ja	0x433b80 <mi_segment_init+0x2a0>
               	movq	80(%rsp), %rbx
               	movl	%r13d, 112(%rbp)
               	movq	%r15, 64(%rbp)
               	movq	96(%rsp), %rax
               	movq	%rax, 96(%rbp)
               	movq	%rbx, 72(%rbp)
               	movq	88(%rsp), %rax
               	movq	%rax, 80(%rbp)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%rbp)
               	movq	192442(%rip), %rax      # 0x462bb8 <_mi_heap_main+0xb28>
               	xorq	%rbp, %rax
               	movq	%rax, 88(%rbp)
               	cmpl	$1, %r13d
               	ja	0x434503 <mi_segment_init+0xc23>
               	movl	112(%rbp), %eax
               	cmpl	$1, %eax
               	je	0x433c36 <mi_segment_init+0x356>
               	testl	%eax, %eax
               	je	0x433c3a <mi_segment_init+0x35a>
               	xorl	%r12d, %r12d
               	jmp	0x433c3a <mi_segment_init+0x35a>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433c62 <mi_segment_init+0x382>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x433c68 <mi_segment_init+0x388>
               	addq	$16, %r12
               	movq	$0, (%r14)
               	movq	8(%r12), %rax
               	movq	%rax, 32(%rbp)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r12, %rcx
               	movq	%rbp, (%rcx)
               	movq	%rbp, 8(%r12)
               	jmp	0x434503 <mi_segment_init+0xc23>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	leaq	4194303(%rbp), %rcx
               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
               	movq	%r14, 96(%rsp)
               	ja	0x434397 <mi_segment_init+0xab7>
               	movq	232909(%rip), %rax      # 0x46ca58 <_mi_numa_node_count>
               	testq	%rax, %rax
               	movq	%rcx, 32(%rsp)
               	je	0x434576 <mi_segment_init+0xc96>
               	movq	%rbp, 104(%rsp)
               	movl	%r13d, 24(%rsp)
               	movq	%r12, 72(%rsp)
               	movl	$4294967295, %r10d      # imm = 0xFFFFFFFF
               	cmpq	$2, %rax
               	jb	0x433cc8 <mi_segment_init+0x3e8>
               	movq	232861(%rip), %rax      # 0x46ca58 <_mi_numa_node_count>
               	xorl	%r10d, %r10d
               	cmpq	$1, %rax
               	jne	0x434585 <mi_segment_init+0xca5>
               	shrq	$22, %rcx
               	movq	%rcx, 40(%rsp)
               	movb	10(%rsp), %r9b
               	movq	232915(%rip), %r12      # 0x46cab0 <regions_count>
               	testq	%r12, %r12
               	je	0x433e78 <mi_segment_init+0x598>
               	movq	56(%rsp), %rax
               	movq	(%rax), %rbp
               	testl	%r10d, %r10d
               	js	0x433d9f <mi_segment_init+0x4bf>
               	xorl	%edi, %edi
               	leaq	232896(%rip), %r8       # 0x46cac0 <regions>
               	movq	%r12, %r13
               	movq	%r15, 112(%rsp)
               	movq	%r12, 64(%rsp)
               	jmp	0x433d1e <mi_segment_init+0x43e>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %r13
               	je	0x433e78 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	cmovaeq	%rdi, %rbp
               	movq	%rbp, %rbx
               	shlq	$6, %rbx
               	movq	(%rbx,%r8), %rax
               	testq	%rax, %rax
               	je	0x433d10 <mi_segment_init+0x430>
               	testb	%r9b, %r9b
               	sete	%dl
               	movl	%eax, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	testl	%eax, %eax
               	sets	%cl
               	sarl	$16, %eax
               	cmpl	%r10d, %eax
               	sete	%al
               	testb	%sil, %dl
               	jne	0x433d10 <mi_segment_init+0x430>
               	orb	%al, %cl
               	je	0x433d10 <mi_segment_init+0x430>
               	movl	%r10d, %r12d
               	leaq	(%rbx,%r8), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %r14
               	movl	%r9d, %r15d
               	callq	0x4346c0 <_mi_bitmap_try_find_claim_field>
               	xorl	%edi, %edi
               	movl	%r15d, %r9d
               	movl	%r12d, %r10d
               	movq	64(%rsp), %r12
               	movq	112(%rsp), %r15
               	movq	%r14, %r8
               	testb	%al, %al
               	je	0x433d10 <mi_segment_init+0x430>
               	addq	%rbx, %r8
               	jmp	0x433e61 <mi_segment_init+0x581>
               	testb	%r9b, %r9b
               	je	0x433e01 <mi_segment_init+0x521>
               	leaq	232725(%rip), %r8       # 0x46cac0 <regions>
               	movq	%r12, %r14
               	jmp	0x433dbe <mi_segment_init+0x4de>
               	addq	$1, %rbp
               	addq	$-1, %r14
               	je	0x433e78 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	movl	$0, %eax
               	cmovaeq	%rax, %rbp
               	movq	%rbp, %r13
               	shlq	$6, %r13
               	movq	(%r13,%r8), %rax
               	testq	%rax, %rax
               	je	0x433db0 <mi_segment_init+0x4d0>
               	leaq	(%r8,%r13), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %rbx
               	callq	0x4346c0 <_mi_bitmap_try_find_claim_field>
               	movq	%rbx, %r8
               	testb	%al, %al
               	je	0x433db0 <mi_segment_init+0x4d0>
               	addq	%r13, %r8
               	jmp	0x433e61 <mi_segment_init+0x581>
               	xorl	%ecx, %ecx
               	leaq	232630(%rip), %r8       # 0x46cac0 <regions>
               	movq	%r12, %rbx
               	jmp	0x433e1a <mi_segment_init+0x53a>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %rbx
               	je	0x433e78 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	cmovaeq	%rcx, %rbp
               	movq	%rbp, %r14
               	shlq	$6, %r14
               	movq	(%r14,%r8), %rax
               	testq	%rax, %rax
               	je	0x433e10 <mi_segment_init+0x530>
               	andl	$256, %eax              # imm = 0x100
               	testq	%rax, %rax
               	jne	0x433e10 <mi_segment_init+0x530>
               	leaq	(%r14,%r8), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %r13
               	callq	0x4346c0 <_mi_bitmap_try_find_claim_field>
               	xorl	%ecx, %ecx
               	movq	%r13, %r8
               	testb	%al, %al
               	je	0x433e10 <mi_segment_init+0x530>
               	addq	%r14, %r8
               	movq	72(%rsp), %r12
               	movl	24(%rsp), %r13d
               	movq	56(%rsp), %rax
               	movq	%rbp, (%rax)
               	jmp	0x434031 <mi_segment_init+0x751>
               	movb	9(%rsp), %bl
               	movb	10(%rsp), %bpl
               	movq	232488(%rip), %rax      # 0x46cab0 <regions_count>
               	cmpq	$1022, %rax             # imm = 0x3FE
               	movq	72(%rsp), %r12
               	movl	24(%rsp), %r13d
               	ja	0x43437c <mi_segment_init+0xa9c>
               	testb	%bl, %bl
               	je	0x433eb4 <mi_segment_init+0x5d4>
               	movl	$4, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%al
               	jmp	0x433eb6 <mi_segment_init+0x5d6>
               	xorl	%eax, %eax
               	testb	%bpl, %bpl
               	setne	%cl
               	testb	%bl, %bl
               	setne	%dl
               	movb	%al, 12(%rsp)
               	andb	%cl, %dl
               	movb	%dl, 15(%rsp)
               	movb	$0, 14(%rsp)
               	movb	$0, 13(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	12(%rsp), %rsi
               	leaq	15(%rsp), %rdx
               	leaq	13(%rsp), %rcx
               	leaq	14(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movl	$268435456, %edi        # imm = 0x10000000
               	callq	0x434780 <_mi_arena_alloc_aligned>
               	testq	%rax, %rax
               	je	0x433f5c <mi_segment_init+0x67c>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 232348(%rip)      # 0x46cab0 <regions_count>
               	cmpq	$1024, %rdx             # imm = 0x400
               	jb	0x433f63 <mi_segment_init+0x683>
               	lock
               	subq	$1, 232330(%rip)        # 0x46cab0 <regions_count>
               	movq	16(%rsp), %rdx
               	xorl	%ecx, %ecx
               	cmpb	$0, 12(%rsp)
               	setne	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	movq	%rax, %rdi
               	callq	0x42d5a0 <_mi_arena_free>
               	leaq	71907(%rip), %rdi       # 0x44582c <typeinfo name for kotlin::gc::GCSchedulerData+0x1873>
               	xorl	%ebx, %ebx
               	movl	$256, %esi              # imm = 0x100
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	jmp	0x434029 <mi_segment_init+0x749>
               	xorl	%ebx, %ebx
               	jmp	0x434029 <mi_segment_init+0x749>
               	shlq	$6, %rdx
               	leaq	232274(%rip), %rsi      # 0x46cac0 <regions>
               	movq	16(%rsp), %rcx
               	xchgq	%rcx, 48(%rdx,%rsi)
               	leaq	(%rdx,%rsi), %rdi
               	addq	$16, %rdi
               	movq	$0, 16(%rdx,%rsi)
               	movsbq	14(%rsp), %rcx
               	addq	$-1, %rcx
               	movq	%rcx, 24(%rdx,%rsi)
               	movb	12(%rsp), %cl
               	andb	$1, %cl
               	negb	%cl
               	movsbq	%cl, %rcx
               	movq	%rcx, 32(%rdx,%rsi)
               	movq	$0, 40(%rdx,%rsi)
               	movq	$0, 48(%rsp)
               	movq	$-1, %rbp
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x433fe9 <mi_segment_init+0x709>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x433fe7 <mi_segment_init+0x707>
               	movq	$-1, %rbp
               	shlq	%cl, %rbp
               	notq	%rbp
               	jmp	0x433fe9 <mi_segment_init+0x709>
               	xorl	%ebp, %ebp
               	lock
               	orq	%rbp, (%rdi)
               	leaq	(%rsi,%rdx), %r8
               	movq	%rax, 8(%rdx,%rsi)
               	movzbl	13(%rsp), %eax
               	addq	%rax, %rax
               	movzbl	15(%rsp), %ebx
               	orq	%rax, %rbx
               	movq	232011(%rip), %rax      # 0x46ca58 <_mi_numa_node_count>
               	cmpq	$1, %rax
               	jne	0x434597 <mi_segment_init+0xcb7>
               	xorl	%eax, %eax
               	shlq	$8, %rbx
               	orq	%rax, %rbx
               	orq	$1, %rbx
               	movq	%rbx, (%r8)
               	movb	$1, %bl
               	testb	%bl, %bl
               	je	0x43437c <mi_segment_init+0xa9c>
               	movq	(%r8), %rdx
               	movq	8(%r8), %r9
               	movq	48(%rsp), %rax
               	movq	%rax, %rsi
               	shrq	$6, %rsi
               	movq	$-1, %rdi
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x434079 <mi_segment_init+0x799>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x434077 <mi_segment_init+0x797>
               	andl	$63, %eax
               	movq	$-1, %rdi
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x434079 <mi_segment_init+0x799>
               	xorl	%edi, %edi
               	movq	24(%r8,%rsi,8), %rax
               	nop
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 24(%r8,%rsi,8)
               	jne	0x434080 <mi_segment_init+0x7a0>
               	testq	%rdi, %rax
               	sete	8(%rsp)
               	movq	%rdx, %rax
               	shrq	$8, %rax
               	andb	$1, %al
               	movb	%al, 10(%rsp)
               	shrq	$9, %rdx
               	andb	$1, %dl
               	movb	%dl, 11(%rsp)
               	movq	48(%rsp), %rdi
               	movl	%edi, %ebp
               	andl	$63, %ebp
               	shlq	$22, %rbp
               	addq	%r9, %rbp
               	cmpb	$0, 9(%rsp)
               	je	0x434103 <mi_segment_init+0x823>
               	movq	%rdi, %rdx
               	shrq	$6, %rdx
               	movq	$-1, %rsi
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x43414d <mi_segment_init+0x86d>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43414b <mi_segment_init+0x86b>
               	movl	%edi, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	jmp	0x43414d <mi_segment_init+0x86d>
               	movq	$-1, %rdx
               	movq	32(%rsp), %rbx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	ja	0x434226 <mi_segment_init+0x946>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x434224 <mi_segment_init+0x944>
               	movl	%edi, %eax
               	andl	$63, %eax
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%eax, %ecx
               	shlq	%cl, %rdx
               	movq	32(%rsp), %rbx
               	jmp	0x434226 <mi_segment_init+0x946>
               	xorl	%esi, %esi
               	movq	32(%r8,%rdx,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rsi, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r8,%rdx,8)
               	jne	0x434160 <mi_segment_init+0x880>
               	andq	%rsi, %rax
               	cmpq	%rsi, %rax
               	movq	32(%rsp), %rbx
               	je	0x43423d <mi_segment_init+0x95d>
               	movq	%rdi, 64(%rsp)
               	movq	%r9, 56(%rsp)
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	movq	%rbx, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da50 <mi_os_commitx>
               	testb	%al, %al
               	je	0x4341d8 <mi_segment_init+0x8f8>
               	cmpb	$0, 16(%rsp)
               	je	0x4341c2 <mi_segment_init+0x8e2>
               	movb	$1, 8(%rsp)
               	movq	32(%rsp), %rbx
               	movq	24(%rsp), %r8
               	movq	56(%rsp), %r9
               	movq	64(%rsp), %rdi
               	jmp	0x43423d <mi_segment_init+0x95d>
               	movq	48(%rsp), %rdx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	jbe	0x4341f2 <mi_segment_init+0x912>
               	xorl	%esi, %esi
               	movq	24(%rsp), %rdi
               	jmp	0x434372 <mi_segment_init+0xa92>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	movq	24(%rsp), %rdi
               	je	0x43436b <mi_segment_init+0xa8b>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	jmp	0x434372 <mi_segment_init+0xa92>
               	xorl	%edx, %edx
               	movq	%rdi, %rax
               	shrq	$6, %rax
               	movq	32(%r8,%rax,8), %rax
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	sete	9(%rsp)
               	movq	48(%rsp), %rdx
               	movq	$-1, %rsi
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	ja	0x43427c <mi_segment_init+0x99c>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43427a <mi_segment_init+0x99a>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	movq	32(%rsp), %rbx
               	jmp	0x43427c <mi_segment_init+0x99c>
               	xorl	%esi, %esi
               	shrq	$6, %rdx
               	movq	40(%r8,%rdx,8), %rax
               	testq	%rsi, %rax
               	je	0x43434f <mi_segment_init+0xa6f>
               	movq	48(%rsp), %rdx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	jbe	0x4342a0 <mi_segment_init+0x9c0>
               	xorl	%esi, %esi
               	jmp	0x4342d2 <mi_segment_init+0x9f2>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x4342cb <mi_segment_init+0x9eb>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	movq	32(%rsp), %rbx
               	notq	%rsi
               	jmp	0x4342d2 <mi_segment_init+0x9f2>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 40(%r8,%rdx,8)
               	cmpb	$0, 9(%rsp)
               	movq	%r9, 56(%rsp)
               	movq	%rdi, 64(%rsp)
               	je	0x43432b <mi_segment_init+0xa4b>
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	leaq	16(%rsp), %rdx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x434960 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x43431a <mi_segment_init+0xa3a>
               	movb	$1, 8(%rsp)
               	movq	24(%rsp), %r8
               	movq	56(%rsp), %r9
               	movq	64(%rsp), %rdi
               	jmp	0x43434f <mi_segment_init+0xa6f>
               	movl	$5, %edi
               	movq	%r8, %rbx
               	callq	0x42abb0 <mi_option_get>
               	movq	64(%rsp), %rdi
               	movq	56(%rsp), %r9
               	movq	%rbx, %r8
               	movq	32(%rsp), %rbx
               	testq	%rax, %rax
               	je	0x4342ed <mi_segment_init+0xa0d>
               	testq	%r9, %r9
               	je	0x43437c <mi_segment_init+0xa9c>
               	leaq	231269(%rip), %rax      # 0x46cac0 <regions>
               	subq	%rax, %r8
               	addq	%rdi, %r8
               	addq	%r8, %r8
               	movq	80(%rsp), %rbx
               	jmp	0x4343c8 <mi_segment_init+0xae8>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 16(%rdi,%rdx,8)
               	leaq	70925(%rip), %rdi       # 0x445890 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
               	movq	104(%rsp), %rbp
               	movq	%rbp, %rsi
               	xorl	%eax, %eax
               	callq	0x42bc10 <_mi_warning_message>
               	movq	80(%rsp), %rbx
               	leaq	9(%rsp), %rsi
               	leaq	10(%rsp), %rdx
               	leaq	11(%rsp), %rcx
               	leaq	8(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movq	%rbp, %rdi
               	callq	0x434780 <_mi_arena_alloc_aligned>
               	movq	%rax, %rbp
               	movq	16(%rsp), %rax
               	leaq	(%rax,%rax), %r8
               	addq	$1, %r8
               	testq	%rbp, %rbp
               	je	0x434501 <mi_segment_init+0xc21>
               	movb	$1, %al
               	cmpb	$0, 9(%rsp)
               	jne	0x434418 <mi_segment_init+0xb38>
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movq	88(%rsp), %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da50 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	je	0x434409 <mi_segment_init+0xb29>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x4344ec <mi_segment_init+0xc0c>
               	xorl	%eax, %eax
               	movq	%r8, (%rbp)
               	movb	11(%rsp), %cl
               	andb	$1, %cl
               	orb	10(%rsp), %cl
               	movb	%cl, 8(%rbp)
               	movb	%al, 9(%rbp)
               	movq	112(%r12), %rcx
               	leaq	196871(%rip), %rax      # 0x464540 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	197434(%rip), %rax      # 0x464780 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rbx, %rbx
               	js	0x43448c <mi_segment_init+0xbac>
               	testb	%al, %al
               	je	0x4344c5 <mi_segment_init+0xbe5>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jg	0x43447d <mi_segment_init+0xb9d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x434470 <mi_segment_init+0xb90>
               	lock
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x43453e <mi_segment_init+0xc5e>
               	testb	%al, %al
               	je	0x434515 <mi_segment_init+0xc35>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x4344bd <mi_segment_init+0xbdd>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x4344b0 <mi_segment_init+0xbd0>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x434537 <mi_segment_init+0xc57>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x4344db <mi_segment_init+0xbfb>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	jmp	0x43453e <mi_segment_init+0xc5e>
               	movl	$4194304, %esi          # imm = 0x400000
               	movq	%rbp, %rdi
               	movq	%r8, %rdx
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	callq	0x42dd60 <_mi_mem_free>
               	xorl	%ebp, %ebp
               	movq	%rbp, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x43452b <mi_segment_init+0xc4b>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x434554 <mi_segment_init+0xc74>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	addq	%rbx, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x433b57 <mi_segment_init+0x277>
               	movq	%rax, 80(%r12)
               	jmp	0x433b57 <mi_segment_init+0x277>
               	callq	0x42bf60 <_mi_os_numa_node_count_get>
               	movq	32(%rsp), %rcx
               	jmp	0x433c99 <mi_segment_init+0x3b9>
               	callq	0x4345b0 <_mi_os_numa_node_get>
               	movq	32(%rsp), %rcx
               	movl	%eax, %r10d
               	jmp	0x433cc8 <mi_segment_init+0x3e8>
               	movq	%r8, %rbp
               	callq	0x4345b0 <_mi_os_numa_node_get>
               	movq	%rbp, %r8
               	shll	$16, %eax
               	jmp	0x434019 <mi_segment_init+0x739>
               	nopw	(%rax,%rax)

<_mi_os_numa_node_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	230549(%rip), %rbx      # 0x46ca58 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	je	0x434637 <_mi_os_numa_node_get+0x87>
               	xorl	%eax, %eax
               	cmpq	$2, %rbx
               	jb	0x43462a <_mi_os_numa_node_get+0x7a>
               	movq	$0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	xorl	%r14d, %r14d
               	leaq	8(%rsp), %rsi
               	leaq	16(%rsp), %rdx
               	movl	$309, %edi              # imm = 0x135
               	xorl	%ecx, %ecx
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	testq	%rax, %rax
               	movq	16(%rsp), %rax
               	cmovneq	%r14, %rax
               	cmpq	%rbx, %rax
               	jb	0x43462a <_mi_os_numa_node_get+0x7a>
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x434624 <_mi_os_numa_node_get+0x74>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rdx, %rax
               	jmp	0x43462a <_mi_os_numa_node_get+0x7a>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%edx, %eax
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	230426(%rip), %rbx      # 0x46ca58 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x4345c8 <_mi_os_numa_node_get+0x18>
               	movl	$15, %edi
               	callq	0x42abb0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x4346a1 <_mi_os_numa_node_get+0xf1>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	68632(%rip), %r14       # 0x445279 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	leaq	16(%rsp), %r15
               	cmpl	$255, %ebx
               	je	0x434699 <_mi_os_numa_node_get+0xe9>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x4138c0 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x434666 <_mi_os_numa_node_get+0xb6>
               	jmp	0x43469e <_mi_os_numa_node_get+0xee>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 230320(%rip)      # 0x46ca58 <_mi_numa_node_count>
               	leaq	68586(%rip), %rdi       # 0x445299 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a890 <_mi_verbose_message>
               	jmp	0x4345c8 <_mi_os_numa_node_get+0x18>
               	nop

<_mi_bitmap_try_find_claim_field>:
               	movq	(%rdi), %rax
               	cmpq	$-1, %rax
               	je	0x434715 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	$-1, %r8
               	cmpq	$63, %rsi
               	ja	0x4346ef <_mi_bitmap_try_find_claim_field+0x2f>
               	testq	%rsi, %rsi
               	je	0x4346ec <_mi_bitmap_try_find_claim_field+0x2c>
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x4346ef <_mi_bitmap_try_find_claim_field+0x2f>
               	xorl	%r8d, %r8d
               	movl	$64, %ecx
               	movl	$64, %r9d
               	subq	%rsi, %r9
               	cmpq	$-1, %rax
               	je	0x43470d <_mi_bitmap_try_find_claim_field+0x4d>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %rcx
               	shlq	%cl, %r8
               	cmpq	%r9, %rcx
               	jbe	0x434718 <_mi_bitmap_try_find_claim_field+0x58>
               	xorl	%eax, %eax
               	retq
               	cmpq	$1, %rsi
               	jne	0x43475e <_mi_bitmap_try_find_claim_field+0x9e>
               	jmp	0x43472c <_mi_bitmap_try_find_claim_field+0x6c>
               	addq	$1, %rcx
               	addq	%r8, %r8
               	cmpq	%r9, %rcx
               	ja	0x434715 <_mi_bitmap_try_find_claim_field+0x55>
               	testq	%r8, %rax
               	jne	0x434720 <_mi_bitmap_try_find_claim_field+0x60>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434727 <_mi_bitmap_try_find_claim_field+0x67>
               	jmp	0x434773 <_mi_bitmap_try_find_claim_field+0xb3>
               	bsrq	%rsi, %r10
               	movl	%r10d, %esi
               	subl	%ecx, %esi
               	addq	$1, %r10
               	addb	$1, %sil
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	movq	%r10, %rcx
               	cmpq	%r9, %rcx
               	ja	0x434715 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	%rax, %rsi
               	andq	%r8, %rsi
               	jne	0x434740 <_mi_bitmap_try_find_claim_field+0x80>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434759 <_mi_bitmap_try_find_claim_field+0x99>
               	movq	%rcx, (%rdx)
               	movb	$1, %al
               	retq
               	nopl	(%rax)

<_mi_arena_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, %r14
               	movq	%rcx, %r15
               	movq	%rdx, %r12
               	movq	%rsi, (%rsp)
               	movq	%r9, 8(%rsp)
               	movq	$0, (%r9)
               	movb	$0, (%r8)
               	movb	$0, (%rcx)
               	movq	%rdi, 16(%rsp)
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x4348eb <_mi_arena_alloc_aligned+0x16b>
               	movq	196601(%rip), %rax      # 0x4647c0 <mi_arena_count>
               	testq	%rax, %rax
               	je	0x4348eb <_mi_arena_alloc_aligned+0x16b>
               	movq	%r15, 24(%rsp)
               	movq	16(%rsp), %rax
               	leaq	16777215(%rax), %rbx
               	movq	230000(%rip), %rax      # 0x46ca58 <_mi_numa_node_count>
               	xorl	%r13d, %r13d
               	cmpq	$1, %rax
               	jne	0x43494e <_mi_arena_alloc_aligned+0x1ce>
               	shrq	$24, %rbx
               	leaq	196608(%rip), %rbp      # 0x464800 <mi_arenas>
               	xorl	%r15d, %r15d
               	jmp	0x43484f <_mi_arena_alloc_aligned+0xcf>
               	nopl	(%rax,%rax)
               	cmpb	$0, (%r12)
               	je	0x434866 <_mi_arena_alloc_aligned+0xe6>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	movq	(%rsp), %rcx
               	movq	%r12, %r8
               	movq	24(%rsp), %r9
               	pushq	8(%rsp)
               	pushq	%r14
               	callq	0x434a80 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x43493f <_mi_arena_alloc_aligned+0x1bf>
               	addq	$1, %r15
               	addq	$8, %rbp
               	cmpq	$64, %r15
               	je	0x43486e <_mi_arena_alloc_aligned+0xee>
               	movq	(%rbp), %rdi
               	testq	%rdi, %rdi
               	je	0x43486e <_mi_arena_alloc_aligned+0xee>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x434810 <_mi_arena_alloc_aligned+0x90>
               	cmpl	%r13d, %eax
               	jne	0x434841 <_mi_arena_alloc_aligned+0xc1>
               	jmp	0x434810 <_mi_arena_alloc_aligned+0x90>
               	cmpb	$0, 30(%rdi)
               	jne	0x434841 <_mi_arena_alloc_aligned+0xc1>
               	jmp	0x434817 <_mi_arena_alloc_aligned+0x97>
               	movq	%rbx, 32(%rsp)
               	leaq	196486(%rip), %rbx      # 0x464800 <mi_arenas>
               	xorl	%ebp, %ebp
               	movq	24(%rsp), %r15
               	jmp	0x4348c8 <_mi_arena_alloc_aligned+0x148>
               	nopw	%cs:(%rax,%rax)
               	movq	%rbp, %rsi
               	movq	32(%rsp), %rdx
               	movq	(%rsp), %rcx
               	movq	%r12, %r8
               	movq	%r15, %r9
               	pushq	8(%rsp)
               	pushq	%r14
               	callq	0x434a80 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x43493f <_mi_arena_alloc_aligned+0x1bf>
               	addq	$1, %rbp
               	addq	$8, %rbx
               	cmpq	$64, %rbp
               	je	0x4348eb <_mi_arena_alloc_aligned+0x16b>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4348eb <_mi_arena_alloc_aligned+0x16b>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x4348ba <_mi_arena_alloc_aligned+0x13a>
               	cmpl	%r13d, %eax
               	je	0x4348ba <_mi_arena_alloc_aligned+0x13a>
               	cmpb	$0, (%r12)
               	jne	0x434890 <_mi_arena_alloc_aligned+0x110>
               	cmpb	$0, 30(%rdi)
               	jne	0x4348ba <_mi_arena_alloc_aligned+0x13a>
               	jmp	0x434890 <_mi_arena_alloc_aligned+0x110>
               	movl	$16, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x434909 <_mi_arena_alloc_aligned+0x189>
               	callq	0x413820 <__errno_location@plt>
               	movl	$12, (%rax)
               	xorl	%eax, %eax
               	jmp	0x43493f <_mi_arena_alloc_aligned+0x1bf>
               	movb	$1, (%r14)
               	movq	8(%rsp), %rax
               	movq	$0, (%rax)
               	xorl	%esi, %esi
               	movq	(%rsp), %rax
               	cmpb	$0, (%rax)
               	setne	%sil
               	movq	16(%rsp), %rdi
               	movq	%r12, %rdx
               	callq	0x42afc0 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x434905 <_mi_arena_alloc_aligned+0x185>
               	movb	(%r12), %cl
               	movb	%cl, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x4345b0 <_mi_os_numa_node_get>
               	movl	%eax, %r13d
               	jmp	0x4347f5 <_mi_arena_alloc_aligned+0x75>
               	nopl	(%rax,%rax)

<_mi_os_unreset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$5, %edi
               	callq	0x42abb0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x43499a <_mi_os_unreset+0x3a>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movl	$1, %edx
               	movl	$1, %ecx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42da50 <mi_os_commitx>
               	movb	$0, (%rbx)
               	testq	%r15, %r15
               	je	0x434a77 <_mi_os_unreset+0x117>
               	testq	%r14, %r14
               	je	0x434a77 <_mi_os_unreset+0x117>
               	movq	189890(%rip), %rdi      # 0x462f78 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%r15,%rdi), %rcx
               	addq	$-1, %rcx
               	testq	%rax, %rdi
               	jne	0x4349e0 <_mi_os_unreset+0x80>
               	negq	%rdi
               	andq	%rdi, %rcx
               	addq	%r14, %r15
               	andq	%rdi, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jg	0x434a2f <_mi_os_unreset+0xcf>
               	jmp	0x434a77 <_mi_os_unreset+0x117>
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x4349f9 <_mi_os_unreset+0x99>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rsi
               	jmp	0x434a01 <_mi_os_unreset+0xa1>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %esi
               	addq	%r14, %r15
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x434a1a <_mi_os_unreset+0xba>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x434a21 <_mi_os_unreset+0xc1>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rsi, %rcx
               	subq	%rdx, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jle	0x434a77 <_mi_os_unreset+0x117>
               	movq	%r15, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 195479(%rip)      # 0x4645d8 <_mi_stats_main+0x98>
               	subq	%r15, %rdx
               	movq	195461(%rip), %rax      # 0x4645d0 <_mi_stats_main+0x90>
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x434a60 <_mi_os_unreset+0x100>
               	lock
               	cmpxchgq	%rdx, 195442(%rip)      # 0x4645d0 <_mi_stats_main+0x90>
               	jne	0x434a50 <_mi_os_unreset+0xf0>
               	testq	%r15, %r15
               	js	0x434a6f <_mi_os_unreset+0x10f>
               	lock
               	addq	%r15, 195419(%rip)      # 0x4645c8 <_mi_stats_main+0x88>
               	jmp	0x434a77 <_mi_os_unreset+0x117>
               	lock
               	addq	%rcx, 195401(%rip)      # 0x4645c0 <_mi_stats_main+0x80>
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<mi_arena_alloc_from>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %rbp
               	movq	%rdx, %rbx
               	movq	%rdi, %r12
               	movq	32(%rdi), %rax
               	movq	16(%rdi), %r10
               	cmpq	$1, %rdx
               	jne	0x434b67 <mi_arena_alloc_from+0xe7>
               	testq	%r10, %r10
               	je	0x434ff9 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r9, 64(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%esi, %esi
               	movq	%rax, 48(%rsp)
               	movq	%rax, %rdx
               	jmp	0x434ae1 <mi_arena_alloc_from+0x61>
               	nop
               	addq	$1, %rsi
               	addq	$1, %rdx
               	cmpq	%r10, %rsi
               	je	0x434ffc <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %rdx
               	cmovaeq	%r15, %rdx
               	movq	56(%r12,%rdx,8), %rax
               	cmpq	$-1, %rax
               	je	0x434ad0 <mi_arena_alloc_from+0x50>
               	je	0x434b10 <mi_arena_alloc_from+0x90>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpl	$63, %r14d
               	ja	0x434ad0 <mi_arena_alloc_from+0x50>
               	jmp	0x434b1c <mi_arena_alloc_from+0x9c>
               	nop
               	movl	$64, %r14d
               	cmpl	$63, %r14d
               	ja	0x434ad0 <mi_arena_alloc_from+0x50>
               	movl	$1, %edi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	jmp	0x434b3d <mi_arena_alloc_from+0xbd>
               	nopl	(%rax)
               	addq	$1, %r14
               	addq	%rdi, %rdi
               	cmpq	$64, %r14
               	jae	0x434ad0 <mi_arena_alloc_from+0x50>
               	testq	%rax, %rdi
               	jne	0x434b30 <mi_arena_alloc_from+0xb0>
               	movq	%rdi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%rdx,8)
               	jne	0x434b37 <mi_arena_alloc_from+0xb7>
               	movq	%rbp, 40(%rsp)
               	movq	%r8, 32(%rsp)
               	shlq	$6, %rdx
               	addq	%rdx, %r14
               	jmp	0x434f6d <mi_arena_alloc_from+0x4ed>
               	testq	%r10, %r10
               	je	0x434ff9 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r8, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movq	%rbp, 40(%rsp)
               	movq	$-1, %rdx
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	movl	$64, %r13d
               	movl	$64, %ecx
               	subq	%rbx, %rcx
               	leaq	63(%rbx), %rdi
               	movq	%rdi, 120(%rsp)
               	testq	%rbx, %rbx
               	notq	%rsi
               	cmoveq	%rbx, %rsi
               	cmpq	$63, %rbx
               	cmovaq	%rdx, %rsi
               	movq	%rcx, %rbp
               	movq	%rsi, 24(%rsp)
               	leaq	48(%r12), %rcx
               	movq	%rcx, 88(%rsp)
               	leaq	64(%r12), %rcx
               	movq	%rcx, 80(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%edx, %edx
               	movq	%rax, 48(%rsp)
               	movq	%rax, %r8
               	movq	%r10, 72(%rsp)
               	movq	%rbp, 16(%rsp)
               	jmp	0x434c29 <mi_arena_alloc_from+0x1a9>
               	nopl	(%rax,%rax)
               	movq	128(%rsp), %rdx
               	addq	$1, %rdx
               	addq	$1, %r8
               	movq	72(%rsp), %r10
               	cmpq	%r10, %rdx
               	movl	$0, %r15d
               	movq	16(%rsp), %rbp
               	je	0x434ffc <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %r8
               	cmovaeq	%r15, %r8
               	cmpq	$64, %rbx
               	ja	0x434c70 <mi_arena_alloc_from+0x1f0>
               	movq	56(%r12,%r8,8), %rax
               	cmpq	$-1, %rax
               	je	0x434c70 <mi_arena_alloc_from+0x1f0>
               	je	0x434c57 <mi_arena_alloc_from+0x1d7>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	%rbp, %r14
               	ja	0x434c70 <mi_arena_alloc_from+0x1f0>
               	jmp	0x434e9c <mi_arena_alloc_from+0x41c>
               	movl	$64, %r14d
               	cmpq	%rbp, %r14
               	jbe	0x434e9c <mi_arena_alloc_from+0x41c>
               	nopw	%cs:(%rax,%rax)
               	movq	%rdx, 128(%rsp)
               	movq	56(%r12,%r8,8), %r10
               	testq	%r10, %r10
               	je	0x434ca0 <mi_arena_alloc_from+0x220>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	testq	%rbp, %rbp
               	jne	0x434cae <mi_arena_alloc_from+0x22e>
               	jmp	0x434c00 <mi_arena_alloc_from+0x180>
               	nopl	(%rax)
               	movl	$64, %ebp
               	testq	%rbp, %rbp
               	je	0x434c00 <mi_arena_alloc_from+0x180>
               	leaq	(%r12,%r8,8), %r11
               	addq	$56, %r11
               	movq	72(%rsp), %r15
               	subq	%r8, %r15
               	movq	88(%rsp), %rax
               	leaq	(%rax,%r8,8), %r14
               	movq	80(%rsp), %rax
               	leaq	(%rax,%r8,8), %rax
               	movq	%rax, 96(%rsp)
               	xorl	%edx, %edx
               	cmpq	%rbx, %rbp
               	jae	0x434ee8 <mi_arena_alloc_from+0x468>
               	movq	120(%rsp), %rax
               	subq	%rbp, %rax
               	shrq	$6, %rax
               	cmpq	%r15, %rax
               	jae	0x434c00 <mi_arena_alloc_from+0x180>
               	movq	%r14, %r9
               	movq	%rbp, %rax
               	nopl	(%rax,%rax)
               	leaq	64(%rax), %rsi
               	movq	%rbx, %rcx
               	subq	%rax, %rcx
               	cmpq	%rbx, %rsi
               	cmovbeq	%r13, %rcx
               	movq	16(%r9), %rdi
               	movq	$-1, %rsi
               	cmpq	$63, %rcx
               	ja	0x434d34 <mi_arena_alloc_from+0x2b4>
               	testq	%rcx, %rcx
               	je	0x434d4b <mi_arena_alloc_from+0x2cb>
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	testq	%rdi, %rsi
               	jne	0x434c00 <mi_arena_alloc_from+0x180>
               	addq	%rcx, %rax
               	addq	$8, %r9
               	cmpq	%rbx, %rax
               	jb	0x434d00 <mi_arena_alloc_from+0x280>
               	jmp	0x434d60 <mi_arena_alloc_from+0x2e0>
               	xorl	%esi, %esi
               	testq	%rdi, %rsi
               	je	0x434d3d <mi_arena_alloc_from+0x2bd>
               	jmp	0x434c00 <mi_arena_alloc_from+0x180>
               	nopl	(%rax,%rax)
               	movq	%rdx, 104(%rsp)
               	movq	%r14, 112(%rsp)
               	movl	$64, %r14d
               	subq	%rbp, %r14
               	movq	$-1, %rax
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	notq	%rax
               	negq	%rbp
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	cmpq	$1, %r10
               	movl	$0, %ecx
               	sbbq	%rcx, %rcx
               	orq	%rax, %rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	testq	%rcx, %rax
               	jne	0x434de0 <mi_arena_alloc_from+0x360>
               	movq	%rax, %rdi
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, (%r11)
               	jne	0x434da0 <mi_arena_alloc_from+0x320>
               	movq	96(%rsp), %rdi
               	movq	$-1, %rdx
               	nop
               	movq	%rdi, %rbp
               	leaq	-8(%rdi), %rax
               	cmpq	%r9, %rax
               	jae	0x434e70 <mi_arena_alloc_from+0x3f0>
               	leaq	8(%rbp), %rdi
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, (%rbp)
               	je	0x434dc0 <mi_arena_alloc_from+0x340>
               	jmp	0x434de3 <mi_arena_alloc_from+0x363>
               	movq	%r11, %rbp
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %rdx
               	jbe	0x434e11 <mi_arena_alloc_from+0x391>
               	nopw	(%rax,%rax)
               	movq	$0, (%rbp)
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	ja	0x434e00 <mi_arena_alloc_from+0x380>
               	cmpq	%r11, %rbp
               	jne	0x434e2d <mi_arena_alloc_from+0x3ad>
               	movq	(%r11), %rax
               	notq	%rcx
               	movq	%rax, %rsi
               	andq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, (%r11)
               	jne	0x434e20 <mi_arena_alloc_from+0x3a0>
               	cmpq	$4, %rdx
               	je	0x434c00 <mi_arena_alloc_from+0x180>
               	movq	(%r11), %r10
               	testq	%r10, %r10
               	je	0x434e59 <mi_arena_alloc_from+0x3d9>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434cd7 <mi_arena_alloc_from+0x257>
               	jmp	0x434c00 <mi_arena_alloc_from+0x180>
               	movl	$64, %ebp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434cd7 <mi_arena_alloc_from+0x257>
               	jmp	0x434c00 <mi_arena_alloc_from+0x180>
               	movq	(%rbp), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rsi, %rax
               	jne	0x434de3 <mi_arena_alloc_from+0x363>
               	movq	%rax, %rdi
               	orq	%rsi, %rdi
               	lock
               	cmpxchgq	%rdi, (%rbp)
               	jne	0x434e80 <mi_arena_alloc_from+0x400>
               	jmp	0x434f66 <mi_arena_alloc_from+0x4e6>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434ecf <mi_arena_alloc_from+0x44f>
               	nopl	(%rax)
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	%rbp, %r14
               	ja	0x434c70 <mi_arena_alloc_from+0x1f0>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434eb0 <mi_arena_alloc_from+0x430>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%r8,8)
               	jne	0x434ec6 <mi_arena_alloc_from+0x446>
               	jmp	0x434f66 <mi_arena_alloc_from+0x4e6>
               	movq	(%r11), %rax
               	cmpq	$-1, %rax
               	je	0x434c00 <mi_arena_alloc_from+0x180>
               	je	0x434f0e <mi_arena_alloc_from+0x48e>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434c00 <mi_arena_alloc_from+0x180>
               	jmp	0x434f1f <mi_arena_alloc_from+0x49f>
               	movl	$64, %r14d
               	cmpq	16(%rsp), %r14
               	ja	0x434c00 <mi_arena_alloc_from+0x180>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434f51 <mi_arena_alloc_from+0x4d1>
               	nop
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434c00 <mi_arena_alloc_from+0x180>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434f30 <mi_arena_alloc_from+0x4b0>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, (%r11)
               	jne	0x434f46 <mi_arena_alloc_from+0x4c6>
               	shlq	$6, %r8
               	addq	%r8, %r14
               	movq	200(%rsp), %rax
               	movq	192(%rsp), %r13
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%r12)
               	movq	(%r12), %r15
               	movq	%r14, %rbp
               	shlq	$24, %rbp
               	movq	%r14, %rcx
               	shlq	$8, %rcx
               	movq	56(%rsp), %rdx
               	addl	$1, %edx
               	movzbl	%dl, %edx
               	orq	%rcx, %rdx
               	movq	%rdx, (%rax)
               	movq	40(%r12), %rdi
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	xorl	%ecx, %ecx
               	callq	0x435250 <_mi_bitmap_claim_across>
               	movb	%al, (%r13)
               	movb	30(%r12), %al
               	movq	32(%rsp), %rcx
               	movb	%al, (%rcx)
               	movb	$1, %al
               	cmpb	$0, 30(%r12)
               	jne	0x434fdb <mi_arena_alloc_from+0x55b>
               	movb	29(%r12), %al
               	addq	%rbp, %r15
               	movq	64(%rsp), %rcx
               	movb	%al, (%rcx)
               	cmpb	$0, 29(%r12)
               	movq	40(%rsp), %r13
               	je	0x435011 <mi_arena_alloc_from+0x591>
               	movb	$1, (%r13)
               	jmp	0x434ffc <mi_arena_alloc_from+0x57c>
               	xorl	%r15d, %r15d
               	movq	%r15, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpb	$0, (%r13)
               	je	0x435063 <mi_arena_alloc_from+0x5e3>
               	movq	48(%r12), %rdi
               	leaq	15(%rsp), %rcx
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	callq	0x435250 <_mi_bitmap_claim_across>
               	cmpb	$0, 15(%rsp)
               	je	0x434ffc <mi_arena_alloc_from+0x57c>
               	shlq	$24, %rbx
               	leaq	14(%rsp), %r8
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da50 <mi_os_commitx>
               	cmpb	$0, 14(%rsp)
               	je	0x434ffc <mi_arena_alloc_from+0x57c>
               	movq	192(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x434ffc <mi_arena_alloc_from+0x57c>
               	movq	%r15, %r11
               	movq	48(%r12), %rdi
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	andl	$63, %r14d
               	leaq	(%r14,%rbx), %rax
               	cmpq	$64, %rax
               	ja	0x4351da <mi_arena_alloc_from+0x75a>
               	cmpq	$63, %rbx
               	jbe	0x435093 <mi_arena_alloc_from+0x613>
               	movq	$-1, %rsi
               	jmp	0x4350b1 <mi_arena_alloc_from+0x631>
               	testq	%rbx, %rbx
               	je	0x4351d0 <mi_arena_alloc_from+0x750>
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	xorl	%r10d, %r10d
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	(%rdi,%rbp,8), %rcx
               	andq	%rsi, %rcx
               	cmpq	%rsi, %rcx
               	sete	%cl
               	leaq	(%rdi,%rbp,8), %rdi
               	addq	$8, %rdi
               	testq	%rdx, %rdx
               	je	0x4351ab <mi_arena_alloc_from+0x72b>
               	leaq	-1(%rdx), %r9
               	movq	%rdx, %rsi
               	andq	$3, %rsi
               	je	0x43510d <mi_arena_alloc_from+0x68d>
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	andq	%r10, %rbp
               	cmpq	%r10, %rbp
               	movzbl	%cl, %ecx
               	cmovnel	%ebx, %ecx
               	addq	$8, %rdi
               	addq	$-1, %rsi
               	jne	0x4350f0 <mi_arena_alloc_from+0x670>
               	andq	$-4, %rdx
               	cmpq	$3, %r9
               	movq	%r11, %r15
               	jb	0x4351ae <mi_arena_alloc_from+0x72e>
               	leaq	-4(%rdx), %rsi
               	testb	$4, %sil
               	jne	0x435154 <mi_arena_alloc_from+0x6d4>
               	movq	(%rdi), %rdx
               	movq	8(%rdi), %rbp
               	andq	%rdx, %rbp
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rbx
               	andq	%rdx, %rbx
               	andq	%rbp, %rbx
               	movq	%r11, %r15
               	andq	%r10, %rbx
               	xorl	%edx, %edx
               	cmpq	%r10, %rbx
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	addq	$32, %rdi
               	movq	%rsi, %rdx
               	cmpq	$4, %rsi
               	jb	0x4351ae <mi_arena_alloc_from+0x72e>
               	xorl	%r9d, %r9d
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	movq	8(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	16(%rdi), %rbp
               	movq	24(%rdi), %rsi
               	andq	%rbp, %rsi
               	andq	%rbx, %rsi
               	movq	32(%rdi), %rbp
               	movq	40(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	48(%rdi), %rbp
               	movq	56(%rdi), %rax
               	andq	%rbp, %rax
               	andq	%rbx, %rax
               	andq	%rsi, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%r9d, %ecx
               	addq	$64, %rdi
               	addq	$-8, %rdx
               	jne	0x435160 <mi_arena_alloc_from+0x6e0>
               	movq	%r11, %r15
               	testq	%r8, %r8
               	je	0x4351c4 <mi_arena_alloc_from+0x744>
               	movq	(%rdi), %rax
               	andq	%r8, %rax
               	xorl	%edx, %edx
               	cmpq	%r8, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	andb	$1, %cl
               	movb	%cl, (%r13)
               	jmp	0x434ffc <mi_arena_alloc_from+0x57c>
               	xorl	%r10d, %r10d
               	xorl	%esi, %esi
               	jmp	0x4350b4 <mi_arena_alloc_from+0x634>
               	movl	$64, %r9d
               	subq	%r14, %r9
               	movq	%r14, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r14d, %ecx
               	shlq	%cl, %rdx
               	xorl	%r8d, %r8d
               	cmpq	$1, %r14
               	movl	$0, %esi
               	sbbq	%rsi, %rsi
               	orq	%rdx, %rsi
               	subq	%r9, %rbx
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rbx
               	je	0x4350b9 <mi_arena_alloc_from+0x639>
               	movq	$-1, %r10
               	movq	$-1, %r8
               	movl	%ebx, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x4350b9 <mi_arena_alloc_from+0x639>
               	nopw	%cs:(%rax,%rax)

<_mi_bitmap_claim_across>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rcx, %r8
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x435507 <_mi_bitmap_claim_across+0x2b7>
               	cmpq	$63, %rsi
               	jbe	0x435284 <_mi_bitmap_claim_across+0x34>
               	movq	$-1, %rbp
               	jmp	0x4352a1 <_mi_bitmap_claim_across+0x51>
               	testq	%rsi, %rsi
               	je	0x4353cc <_mi_bitmap_claim_across+0x17c>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	xorl	%edx, %edx
               	leaq	(%rdi,%rax,8), %rcx
               	movq	(%rdi,%rax,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%rbp, %rsi
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	jne	0x4352c0 <_mi_bitmap_claim_across+0x70>
               	xorl	%edi, %edi
               	andq	%rbp, %rax
               	sete	%r15b
               	xorl	%esi, %esi
               	cmpq	%rbp, %rax
               	setne	%r11b
               	addq	$8, %rcx
               	testq	%rdx, %rdx
               	je	0x4352fb <_mi_bitmap_claim_across+0xab>
               	testb	$1, %dl
               	jne	0x435303 <_mi_bitmap_claim_across+0xb3>
               	movq	%rdx, %r13
               	cmpq	$1, %rdx
               	jne	0x435349 <_mi_bitmap_claim_across+0xf9>
               	jmp	0x4354b3 <_mi_bitmap_claim_across+0x263>
               	movl	%r15d, %edi
               	jmp	0x4354b3 <_mi_bitmap_claim_across+0x263>
               	leaq	-1(%rdx), %r13
               	movq	(%rcx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rbp
               	orq	%r10, %rbp
               	lock
               	cmpxchgq	%rbp, (%rcx)
               	jne	0x435310 <_mi_bitmap_claim_across+0xc0>
               	xorl	%ebp, %ebp
               	andq	%r10, %rax
               	movb	%r15b, %dil
               	cmovnel	%ebp, %edi
               	cmpq	%r10, %rax
               	movb	%r11b, %sil
               	movl	$1, %r11d
               	cmovel	%esi, %r11d
               	addq	$8, %rcx
               	movl	%edi, %r15d
               	cmpq	$1, %rdx
               	je	0x4354b3 <_mi_bitmap_claim_across+0x263>
               	leaq	-2(%r13), %rbp
               	testb	$2, %bpl
               	jne	0x4353d6 <_mi_bitmap_claim_across+0x186>
               	movq	(%rcx), %rdx
               	nopw	(%rax,%rax)
               	movq	%rdx, %rsi
               	orq	%r10, %rsi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	movq	%rax, %rdx
               	jne	0x435360 <_mi_bitmap_claim_across+0x110>
               	movq	8(%rcx), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 8(%rcx)
               	jne	0x435380 <_mi_bitmap_claim_across+0x130>
               	movq	%rax, %rsi
               	orq	%rdx, %rsi
               	xorl	%ebx, %ebx
               	testq	%rsi, %r10
               	movzbl	%r15b, %edi
               	cmovnel	%ebx, %edi
               	andq	%rdx, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	addq	$16, %rcx
               	movq	%rbp, %r13
               	movl	%edi, %r15d
               	cmpq	$2, %rbp
               	jae	0x4353e0 <_mi_bitmap_claim_across+0x190>
               	jmp	0x4354b3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r10d, %r10d
               	xorl	%ebp, %ebp
               	jmp	0x4352a4 <_mi_bitmap_claim_across+0x54>
               	cmpq	$2, %rbp
               	jb	0x4354b3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r14d, %r14d
               	movl	$1, %r12d
               	movl	%r15d, %edi
               	nopl	(%rax)
               	movq	(%rcx), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	orq	%r10, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	movq	%rax, %rsi
               	jne	0x435400 <_mi_bitmap_claim_across+0x1b0>
               	movq	8(%rcx), %rbp
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdx
               	orq	%r10, %rdx
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdx, 8(%rcx)
               	movq	%rax, %rbp
               	jne	0x435420 <_mi_bitmap_claim_across+0x1d0>
               	movq	%rbp, %rdx
               	orq	%rsi, %rdx
               	andq	%rsi, %rbp
               	movq	16(%rcx), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbx, %rsi
               	orq	%r10, %rsi
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	movq	%rax, %rbx
               	jne	0x435450 <_mi_bitmap_claim_across+0x200>
               	addq	$-4, %r13
               	movq	24(%rcx), %rax
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 24(%rcx)
               	jne	0x435470 <_mi_bitmap_claim_across+0x220>
               	movq	%rax, %rsi
               	orq	%rbx, %rsi
               	orq	%rdx, %rsi
               	testq	%rsi, %r10
               	movzbl	%dil, %edi
               	cmovnel	%r14d, %edi
               	andq	%rbx, %rax
               	andq	%rbp, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %r11d
               	cmovnel	%r12d, %r11d
               	addq	$32, %rcx
               	testq	%r13, %r13
               	jne	0x4353f0 <_mi_bitmap_claim_across+0x1a0>
               	testq	%r9, %r9
               	je	0x4354ea <_mi_bitmap_claim_across+0x29a>
               	movq	(%rcx), %rax
               	nop
               	movq	%rax, %rdx
               	orq	%r9, %rdx
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	jne	0x4354c0 <_mi_bitmap_claim_across+0x270>
               	xorl	%ecx, %ecx
               	andq	%r9, %rax
               	movzbl	%dil, %edi
               	cmovnel	%ecx, %edi
               	cmpq	%r9, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	testq	%r8, %r8
               	je	0x4354f6 <_mi_bitmap_claim_across+0x2a6>
               	andb	$1, %r11b
               	movb	%r11b, (%r8)
               	andb	$1, %dil
               	movl	%edi, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$64, %r11d
               	subq	%rdx, %r11
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r9d, %r9d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r11, %rsi
               	movq	%rsi, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rsi
               	je	0x4352a9 <_mi_bitmap_claim_across+0x59>
               	movq	$-1, %r10
               	movq	$-1, %r9
               	movl	%esi, %ecx
               	shlq	%cl, %r9
               	notq	%r9
               	jmp	0x4352a9 <_mi_bitmap_claim_across+0x59>

<_mi_usable_size>:
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	je	0x4355b0 <_mi_usable_size+0x40>
               	movl	%edi, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	shlq	$6, %rdx
               	leaq	(%rax,%rdx), %r8
               	addq	$120, %r8
               	testb	$2, 126(%rax,%rdx)
               	movl	140(%rax,%rdx), %esi
               	jne	0x4355b6 <_mi_usable_size+0x46>
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x4355c4 <_mi_usable_size+0x54>
               	movq	%rsi, %rax
               	retq
               	xorl	%esi, %esi
               	movq	%rsi, %rax
               	retq
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x4355db <_mi_usable_size+0x6b>
               	movq	72(%rax), %r9
               	jmp	0x4355e4 <_mi_usable_size+0x74>
               	movq	%r8, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x43561b <_mi_usable_size+0xab>
               	movq	72(%rax), %rdx
               	jmp	0x435627 <_mi_usable_size+0xb7>
               	movl	$1, %r9d
               	shlq	%cl, %r9
               	movb	(%r8), %cl
               	movzbl	%cl, %r11d
               	imulq	%r11, %r9
               	addq	%rax, %r9
               	testb	%r11b, %r11b
               	jne	0x43567e <_mi_usable_size+0x10e>
               	addq	80(%rax), %r9
               	cmpl	$1, %edx
               	ja	0x43567e <_mi_usable_size+0x10e>
               	testl	%esi, %esi
               	je	0x43567e <_mi_usable_size+0x10e>
               	movq	%r9, %rax
               	shrq	$32, %rax
               	je	0x435666 <_mi_usable_size+0xf6>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43566d <_mi_usable_size+0xfd>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%r8), %cl
               	testb	%cl, %cl
               	je	0x435632 <_mi_usable_size+0xc2>
               	movq	%rdx, %rax
               	retq
               	movq	80(%rax), %r8
               	movq	%rdx, %r9
               	subq	%r8, %r9
               	cmpl	$1, %edi
               	ja	0x435662 <_mi_usable_size+0xf2>
               	testl	%esi, %esi
               	je	0x435662 <_mi_usable_size+0xf2>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4356b3 <_mi_usable_size+0x143>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4356b7 <_mi_usable_size+0x147>
               	movq	%r9, %rax
               	retq
               	movl	%r9d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	leaq	(%r9,%rax), %rcx
               	cmpq	%rsi, %rax
               	cmovbq	%rcx, %r9
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x4356cd <_mi_usable_size+0x15d>
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x4356a4 <_mi_usable_size+0x134>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rdi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %edi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %rax
               	retq
               	andq	$-4194304, %r8          # imm = 0xFFC00000
               	movl	112(%r8), %eax
               	cmpl	$3, %eax
               	jne	0x4356e3 <_mi_usable_size+0x173>
               	movq	72(%r8), %r10
               	jmp	0x4356f0 <_mi_usable_size+0x180>
               	movq	96(%r8), %rcx
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	testb	%r11b, %r11b
               	jne	0x435741 <_mi_usable_size+0x1d1>
               	movq	80(%r8), %rdx
               	movq	%r10, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x43573e <_mi_usable_size+0x1ce>
               	testl	%esi, %esi
               	je	0x43573e <_mi_usable_size+0x1ce>
               	imulq	%r11, %r10
               	addq	%r8, %r10
               	addq	%rdx, %r10
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x435725 <_mi_usable_size+0x1b5>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43572c <_mi_usable_size+0x1bc>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r10
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	orq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43575d <_mi_usable_size+0x1ed>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	movq	%rdx, %rdi
               	jmp	0x435766 <_mi_usable_size+0x1f6>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movl	%edx, %edi
               	movl	112(%r8), %edx
               	cmpl	$3, %edx
               	jne	0x435775 <_mi_usable_size+0x205>
               	movq	72(%r8), %rax
               	jmp	0x435781 <_mi_usable_size+0x211>
               	movq	96(%r8), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%r11b, %r11b
               	je	0x435790 <_mi_usable_size+0x220>
               	movq	%rax, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movq	80(%r8), %r9
               	movq	%rax, %rcx
               	subq	%r9, %rcx
               	cmpl	$1, %edx
               	ja	0x4357d9 <_mi_usable_size+0x269>
               	testl	%esi, %esi
               	je	0x4357d9 <_mi_usable_size+0x269>
               	imulq	%r11, %rax
               	addq	%rax, %r8
               	addq	%r9, %r8
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x4357c0 <_mi_usable_size+0x250>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4357c7 <_mi_usable_size+0x257>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_heap_malloc_zero>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x43587e <_mi_heap_malloc_zero+0x8e>
               	leaq	7(%r14), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x43587e <_mi_heap_malloc_zero+0x8e>
               	movl	16(%rax), %ecx
               	addl	$1, %ecx
               	movl	%ecx, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	testq	%rbx, %rbx
               	je	0x435873 <_mi_heap_malloc_zero+0x83>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	%ebx, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	cmpq	$9, %r14
               	jb	0x43585e <_mi_heap_malloc_zero+0x6e>
               	shlq	$6, %rdx
               	movb	127(%rax,%rdx), %al
               	andb	$1, %al
               	je	0x43585e <_mi_heap_malloc_zero+0x6e>
               	movq	$0, (%rbx)
               	jmp	0x435873 <_mi_heap_malloc_zero+0x83>
               	movq	%rbx, %rdi
               	callq	0x435570 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413710 <memset@plt>
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%r14, %rsi
               	callq	0x431d20 <_mi_malloc_generic>
               	movq	%rax, %rbx
               	testq	%rbx, %rbx
               	jne	0x43582b <_mi_heap_malloc_zero+0x3b>
               	jmp	0x435873 <_mi_heap_malloc_zero+0x83>

<__cxa_demangle>:
               	movl	$4294967294, (%rcx)     # imm = 0xFFFFFFFE
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<konan::consoleErrorf(char const*, ...)>:
               	subq	$1240, %rsp             # imm = 0x4D8
               	movq	%rdi, %r10
               	testb	%al, %al
               	je	0x4358e5 <konan::consoleErrorf(char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	1248(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$1024, %esi             # imm = 0x400
               	movq	%r10, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43595e <konan::consoleErrorf(char const*, ...)+0xbe>
               	cmpl	$1023, %eax             # imm = 0x3FF
               	movl	$1023, %edx             # imm = 0x3FF
               	cmovbl	%eax, %edx
               	leaq	208(%rsp), %rsi
               	movl	$2, %edi
               	callq	0x4138e0 <write@plt>
               	addq	$1240, %rsp             # imm = 0x4D8
               	retq
               	nopw	%cs:(%rax,%rax)

<konan::gettid()>:
               	movl	$186, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	nopl	(%rax)

<kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$216, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x4359cb <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x4b>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x435a15 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x95>
               	cmpq	$1, %rbx
               	jne	0x435a19 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x99>
               	movb	$0, (%r14)
               	movl	$1, %ebx
               	jmp	0x435a3e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	xorl	%ebx, %ebx
               	jmp	0x435a3e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movq	%rsp, %rcx
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x435a3e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	addq	%rax, %r14
               	subq	%rax, %rbx
               	movq	%r14, %rax
               	movq	%rbx, %rdx
               	addq	$216, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>:
               	subq	$216, %rsp
               	movq	%rdx, %rdi
               	testb	%al, %al
               	je	0x435a95 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rsi
               	callq	0x435ae0 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>
               	callq	0x435b80 <konan::abort()>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$1024, %rsp             # imm = 0x400
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	64961(%rip), %rdx       # 0x4458ba <typeinfo name for kotlin::gc::GCSchedulerData+0x1901>
               	movq	%rsp, %rdi
               	movl	$1024, %esi             # imm = 0x400
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	testq	%rdx, %rdx
               	je	0x435b20 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x40>
               	movq	%rdx, %rbx
               	cmpq	$1, %rdx
               	jne	0x435b24 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x44>
               	movb	$0, (%rax)
               	movl	$1, %ebx
               	jmp	0x435b49 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	xorl	%ebx, %ebx
               	jmp	0x435b49 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x435b49 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	subq	%rax, %rbx
               	movl	$1024, %edx             # imm = 0x400
               	subl	%ebx, %edx
               	movq	%rsp, %rsi
               	movl	$2, %edi
               	callq	0x4138e0 <write@plt>
               	leaq	65033(%rip), %rdi       # 0x44596d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	xorl	%eax, %eax
               	callq	0x4358a0 <konan::consoleErrorf(char const*, ...)>
               	addq	$1024, %rsp             # imm = 0x400
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>

<konan::abort()>:
               	pushq	%rax
               	callq	0x4138f0 <abort@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r14
               	leaq	8(%rsp), %rdi
               	callq	0x436460 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
               	movq	16(%rsp), %r12
               	movq	8(%rsp), %rbx
               	movq	%r12, %r13
               	subq	%rbx, %r13
               	movq	%r13, %r15
               	sarq	$3, %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	$0, 16(%r14)
               	testq	%r13, %r13
               	je	0x435be4 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x54>
               	movl	$8, %esi
               	movq	%r15, %rdi
               	callq	0x4136c0 <calloc@plt>
               	jmp	0x435be6 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x56>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	%rax, 8(%r14)
               	leaq	(%rax,%r15,8), %rcx
               	movq	%rcx, 16(%r14)
               	cmpq	%r12, %rbx
               	je	0x435d18 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	addq	$-8, %r13
               	cmpq	$24, %r13
               	jb	0x435d00 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	shrq	$3, %r13
               	addq	$1, %r13
               	leaq	(%rbx,%r13,8), %rcx
               	cmpq	%rcx, %rax
               	jae	0x435c2a <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x9a>
               	leaq	(%rax,%r13,8), %rcx
               	cmpq	%rcx, %rbx
               	jb	0x435d00 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	%r13, %rcx
               	andq	$-4, %rcx
               	leaq	-4(%rcx), %rdi
               	movq	%rdi, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$3, %edx
               	cmpq	$12, %rdi
               	jae	0x435c4f <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xbf>
               	xorl	%edi, %edi
               	jmp	0x435cb8 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x128>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edi, %edi
               	nopl	(%rax,%rax)
               	movups	(%rbx,%rdi,8), %xmm0
               	movups	16(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, (%rax,%rdi,8)
               	movups	%xmm1, 16(%rax,%rdi,8)
               	movups	32(%rbx,%rdi,8), %xmm0
               	movups	48(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 32(%rax,%rdi,8)
               	movups	%xmm1, 48(%rax,%rdi,8)
               	movups	64(%rbx,%rdi,8), %xmm0
               	movups	80(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 64(%rax,%rdi,8)
               	movups	%xmm1, 80(%rax,%rdi,8)
               	movups	96(%rbx,%rdi,8), %xmm0
               	movups	112(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 96(%rax,%rdi,8)
               	movups	%xmm1, 112(%rax,%rdi,8)
               	addq	$16, %rdi
               	addq	$4, %rsi
               	jne	0x435c60 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xd0>
               	testq	%rdx, %rdx
               	je	0x435ceb <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x15b>
               	leaq	16(,%rdi,8), %rsi
               	negq	%rdx
               	nopl	(%rax)
               	movups	-16(%rbx,%rsi), %xmm0
               	movups	(%rbx,%rsi), %xmm1
               	movups	%xmm0, -16(%rax,%rsi)
               	movups	%xmm1, (%rax,%rsi)
               	addq	$32, %rsi
               	incq	%rdx
               	jne	0x435cd0 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x140>
               	leaq	(%rax,%rcx,8), %rax
               	cmpq	%rcx, %r13
               	je	0x435d18 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	leaq	(%rbx,%rcx,8), %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, (%rax)
               	addq	$8, %rbx
               	addq	$8, %rax
               	cmpq	%rbx, %r12
               	jne	0x435d00 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r14)
               	testq	%rbx, %rbx
               	je	0x435d29 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x199>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1016, %rsp             # imm = 0x3F8
               	movq	%r9, %r13
               	movl	%r8d, %r15d
               	movq	%rcx, %rbx
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x435da4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x64>
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm1, 240(%rsp)
               	movaps	%xmm2, 256(%rsp)
               	movaps	%xmm3, 272(%rsp)
               	movaps	%xmm4, 288(%rsp)
               	movaps	%xmm5, 304(%rsp)
               	movaps	%xmm6, 320(%rsp)
               	movaps	%xmm7, 336(%rsp)
               	movl	$3176496, 496(%rsp)     # imm = 0x307830
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	leaq	112(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413900 <dladdr@plt>
               	movq	112(%rsp), %rbp
               	testq	%rbp, %rbp
               	je	0x435ebe <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x17e>
               	movq	%rbp, %rdi
               	movl	$47, %esi
               	callq	0x413910 <strrchr@plt>
               	leaq	1(%rax), %r8
               	testq	%rax, %rax
               	cmoveq	%rbp, %r8
               	testq	%rbx, %rbx
               	je	0x435ece <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x18e>
               	movq	%r8, 64(%rsp)
               	leaq	144(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413900 <dladdr@plt>
               	testl	%eax, %eax
               	je	0x435e2e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	160(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x435e2e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	%rbx, %rbp
               	subq	168(%rsp), %rbp
               	jmp	0x435ea2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x162>
               	cmpq	$0, 290226(%rip)        # 0x47cbe8 <(anonymous namespace)::symbols>
               	je	0x435f8f <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x24f>
               	movq	290213(%rip), %rcx      # 0x47cbe8 <(anonymous namespace)::symbols>
               	movq	(%rcx), %rax
               	movq	8(%rcx), %rcx
               	jmp	0x435e54 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x114>
               	nop
               	addq	$24, %rax
               	cmpq	%rcx, %rax
               	je	0x435ed3 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x193>
               	movq	(%rax), %rdx
               	movq	8(%rax), %rsi
               	jmp	0x435e74 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x134>
               	nopl	(%rax)
               	addq	$24, %rdx
               	cmpq	%rsi, %rdx
               	jae	0x435e50 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x110>
               	movq	8(%rdx), %rdi
               	cmpq	%rbx, %rdi
               	ja	0x435e70 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rdx), %rbp
               	addq	%rdi, %rbp
               	cmpq	%rbx, %rbp
               	jbe	0x435e70 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rax), %rsi
               	movq	%rbx, %rbp
               	subq	%rdi, %rbp
               	testq	%rsi, %rsi
               	je	0x435ed6 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	movl	(%rdx), %eax
               	addq	%rax, %rsi
               	leaq	496(%rsp), %rdi
               	movl	$512, %edx              # imm = 0x200
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 1007(%rsp)
               	jmp	0x435ed6 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	leaq	64010(%rip), %r8        # 0x4458cf <typeinfo name for kotlin::gc::GCSchedulerData+0x1916>
               	testq	%rbx, %rbx
               	jne	0x435dfb <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xbb>
               	movq	%rbx, %rbp
               	jmp	0x435edb <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x19b>
               	movq	%rbx, %rbp
               	movq	64(%rsp), %r8
               	leaq	496(%rsp), %r10
               	leaq	63977(%rip), %rdx       # 0x4458d3 <typeinfo name for kotlin::gc::GCSchedulerData+0x191a>
               	movl	$1023, %esi             # imm = 0x3FF
               	movq	%r14, %rdi
               	movq	%r12, %rcx
               	movq	%rbx, %r9
               	movl	$0, %eax
               	pushq	%rbp
               	pushq	%r10
               	callq	0x435980 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	addq	$16, %rsp
               	testb	%r15b, %r15b
               	je	0x435f25 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x1e5>
               	leaq	63961(%rip), %rcx       # 0x4458ee <typeinfo name for kotlin::gc::GCSchedulerData+0x1935>
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	leaq	176(%rsp), %rcx
               	movq	%rcx, 368(%rsp)
               	leaq	1072(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movabsq	$206158430256, %rcx     # imm = 0x3000000030
               	movq	%rcx, 352(%rsp)
               	testq	%rdx, %rdx
               	je	0x435f7d <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	cmpq	$1, %rdx
               	jne	0x435f67 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x227>
               	movb	$0, (%rax)
               	jmp	0x435f7d <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	leaq	352(%rsp), %rcx
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%r13, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	addq	$1016, %rsp             # imm = 0x3F8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x435fb3 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x273>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	jmp	0x435fb5 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x275>
               	xorl	%eax, %eax
               	movq	%rax, 289836(%rip)      # 0x47cbe8 <(anonymous namespace)::symbols>
               	leaq	63798(%rip), %rdi       # 0x4458f9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1940>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x413920 <open@plt>
               	testl	%eax, %eax
               	js	0x435e3c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movl	%eax, %ebp
               	leaq	352(%rsp), %rdx
               	movl	$1, %edi
               	movl	%eax, %esi
               	callq	0x413930 <__fxstat@plt>
               	testl	%eax, %eax
               	js	0x435e3c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	400(%rsp), %rsi
               	xorl	%edi, %edi
               	movl	$1, %edx
               	movl	$2, %ecx
               	movl	%ebp, %r8d
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	$-1, %rax
               	je	0x435e3c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	testq	%rax, %rax
               	je	0x435e3c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	cmpw	$0, 60(%rax)
               	je	0x435e3c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	40(%rax), %rsi
               	addq	%rax, %rsi
               	xorl	%edx, %edx
               	movq	%r13, 48(%rsp)
               	movl	%r15d, 12(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	%rsi, 72(%rsp)
               	movq	%r14, 104(%rsp)
               	jmp	0x436097 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x357>
               	addq	$8, %r15
               	movq	%rbp, (%r12)
               	movq	%r9, 8(%r12)
               	movq	%r14, 16(%r12)
               	movq	(%r15), %rcx
               	addq	$24, %rcx
               	movq	%r15, %rdi
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	%rcx, (%rdi)
               	addq	$1, %rdx
               	movzwl	60(%rax), %ecx
               	cmpq	%rcx, %rdx
               	movq	104(%rsp), %r14
               	jae	0x435e3c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	%rdx, %r14
               	shlq	$6, %r14
               	movl	4(%rsi,%r14), %ecx
               	cmpl	$2, %ecx
               	jne	0x436247 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x507>
               	leaq	(%rsi,%r14), %r8
               	addq	$4, %r8
               	movq	24(%rsi,%r14), %r15
               	addq	%rax, %r15
               	movq	32(%rsi,%r14), %r10
               	addq	%r15, %r10
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %rbp
               	addq	%rax, %rbp
               	movq	289548(%rip), %r12      # 0x47cbe8 <(anonymous namespace)::symbols>
               	movq	8(%r12), %r13
               	cmpq	16(%r12), %r13
               	je	0x436117 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x3d7>
               	addq	$8, %r12
               	movq	%r15, (%r13)
               	movq	%r10, 8(%r13)
               	movq	%rbp, 16(%r13)
               	movq	(%r12), %rcx
               	addq	$24, %rcx
               	movq	%r12, %rdi
               	movq	48(%rsp), %r13
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	jmp	0x436241 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x501>
               	movq	(%r12), %r9
               	movq	%r13, %rax
               	subq	%r9, %rax
               	movq	%rax, %rsi
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %rsi
               	testq	%rax, %rax
               	movq	%rsi, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rsi), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%rsi, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%r8, 40(%rsp)
               	movq	%rdi, 32(%rsp)
               	je	0x4361a2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x462>
               	movq	%rsi, 88(%rsp)
               	movl	$24, %esi
               	movq	%r9, 24(%rsp)
               	movq	%r10, 96(%rsp)
               	callq	0x4136c0 <calloc@plt>
               	movq	88(%rsp), %rsi
               	movq	96(%rsp), %r10
               	movq	24(%rsp), %r9
               	movq	%rax, %rdx
               	jmp	0x4361a4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x464>
               	xorl	%edx, %edx
               	leaq	(%rsi,%rsi,2), %rax
               	movq	%r15, (%rdx,%rax,8)
               	movq	%r10, 8(%rdx,%rax,8)
               	movq	%rbp, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r9, %r13
               	je	0x4361ec <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4ac>
               	movq	%rdx, %rbp
               	movq	%r9, %rax
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r13
               	jne	0x4361d0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x490>
               	addq	$24, %rbp
               	testq	%r9, %r9
               	movl	12(%rsp), %r15d
               	je	0x436208 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4c8>
               	movq	%r9, %rdi
               	movq	%rdx, %r13
               	callq	0x4136d0 <free@plt>
               	movq	%r13, %rdx
               	leaq	16(%r12), %rdi
               	movq	%rdx, (%r12)
               	movq	%rbp, 8(%r12)
               	movq	32(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movq	48(%rsp), %r13
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	movq	40(%rsp), %r8
               	movq	%rcx, (%rdi)
               	movl	(%r8), %ecx
               	cmpl	$11, %ecx
               	jne	0x436081 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x341>
               	movq	24(%rsi,%r14), %rbp
               	addq	%rax, %rbp
               	movq	32(%rsi,%r14), %r9
               	addq	%rbp, %r9
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %r14
               	addq	%rax, %r14
               	movq	289136(%rip), %r15      # 0x47cbe8 <(anonymous namespace)::symbols>
               	movq	8(%r15), %r12
               	cmpq	16(%r15), %r12
               	jne	0x436058 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x318>
               	movq	(%r15), %r8
               	movq	%r12, %rax
               	subq	%r8, %rax
               	movq	%rax, %r13
               	sarq	$3, %r13
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %r13
               	testq	%rax, %rax
               	movq	%r13, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r13), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%r13, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%rdi, 40(%rsp)
               	je	0x436301 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c1>
               	movl	$24, %esi
               	movq	%r8, 32(%rsp)
               	movq	%r9, 24(%rsp)
               	callq	0x4136c0 <calloc@plt>
               	movq	24(%rsp), %r9
               	movq	32(%rsp), %r8
               	movq	%rax, %rdx
               	jmp	0x436303 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c3>
               	xorl	%edx, %edx
               	leaq	(,%r13,2), %rax
               	addq	%r13, %rax
               	movq	%rbp, (%rdx,%rax,8)
               	movq	%r9, 8(%rdx,%rax,8)
               	movq	%r14, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r8, %r12
               	je	0x43634c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x60c>
               	movq	%rdx, %rbp
               	movq	%r8, %rax
               	nop
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r12
               	jne	0x436330 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5f0>
               	addq	$24, %rbp
               	testq	%r8, %r8
               	movq	48(%rsp), %r13
               	je	0x436368 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x628>
               	movq	%r8, %rdi
               	movq	%rdx, %r14
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rdx
               	leaq	16(%r15), %rdi
               	movq	%rdx, (%r15)
               	movq	%rbp, 8(%r15)
               	movq	40(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	jmp	0x43607e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x33e>
               	nop

<std::__throw_length_error(char const*)>:
               	pushq	%rax
               	movq	%rdi, %rcx
               	leaq	62753(%rip), %rdx       # 0x4458cc <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435a50 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	8(%rdi), %r15
               	cmpq	%r15, %rbx
               	je	0x4363ff <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3f>
               	movq	%rdi, %r14
               	jmp	0x4363e9 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x29>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%r15, %rbx
               	je	0x4363fc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4363e0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4363e0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x436411 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x51>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>:
               	movq	%rdi, %rax
               	movq	8(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43644a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	movl	16(%rax), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x43644a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	cmpl	$1, %eax
               	jne	0x43644a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	movb	188498(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43644b <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2b>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	(%rax,%rax)

<kotlin::internal::GetCurrentStackTrace(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdi, %r13
               	movq	$0, 48(%rsp)
               	movl	$1, 56(%rsp)
               	movb	$0, 60(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	testq	%rax, %rax
               	je	0x4364b8 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x58>
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	%rax, 48(%rsp)
               	movl	%ecx, 56(%rsp)
               	movb	$1, 60(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	$0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	leaq	920(%rip), %rdi         # 0x436870 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
               	leaq	32(%rsp), %rsi
               	callq	0x413940 <_Unwind_Backtrace@plt>
               	movq	32(%rsp), %r12
               	cmpq	$4, %r12
               	jbe	0x43658a <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x12a>
               	addq	$-4, %r12
               	movq	8(%rsp), %r15
               	movq	(%rsp), %rbx
               	movq	%r15, %rdx
               	subq	%rbx, %rdx
               	movq	%rdx, %r14
               	sarq	$3, %r14
               	movq	%r12, %rbp
               	subq	%r14, %rbp
               	jbe	0x4365b1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x151>
               	je	0x43679c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	movq	16(%rsp), %rax
               	subq	%r15, %rax
               	sarq	$3, %rax
               	cmpq	%rbp, %rax
               	jae	0x4365d1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x171>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%r14, %rcx
               	xorq	%rax, %rcx
               	cmpq	%rbp, %rcx
               	jb	0x436836 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3d6>
               	movq	%rdx, 64(%rsp)
               	movq	%r13, 80(%rsp)
               	cmpq	%rbp, %r14
               	movq	%r14, %rcx
               	cmovbq	%rbp, %rcx
               	leaq	(%rcx,%r14), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%r14, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	movq	%rdi, 72(%rsp)
               	je	0x4365f1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x191>
               	movl	$8, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x4365f4 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x194>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r13)
               	movq	$0, 16(%r13)
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4367f2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4367f2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
               	jae	0x43679c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	leaq	(%rbx,%r12,8), %rax
               	cmpq	%r15, %rax
               	je	0x43679c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	movq	%rax, 8(%rsp)
               	movq	%rax, %r15
               	jmp	0x43679c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	leaq	8(%rsp), %rbx
               	leaq	(,%rbp,8), %rdx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	(%r15,%rbp,8), %rax
               	jmp	0x436790 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x330>
               	xorl	%r13d, %r13d
               	leaq	(,%r14,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %rbp
               	xorl	%esi, %esi
               	movq	%rbp, %rdx
               	callq	0x413710 <memset@plt>
               	cmpq	%r15, %rbx
               	je	0x436755 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
               	movq	64(%rsp), %rdi
               	addq	$-8, %rdi
               	movq	%r13, %rcx
               	cmpq	$24, %rdi
               	jb	0x436732 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
               	shrq	$3, %rdi
               	addq	$1, %rdi
               	leaq	(%rbx,%rdi,8), %rax
               	cmpq	%rax, %r13
               	jae	0x436654 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x1f4>
               	leaq	(,%rdi,8), %rax
               	addq	%r13, %rax
               	movq	%r13, %rcx
               	cmpq	%rbx, %rax
               	ja	0x436732 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
               	movq	%rdi, %rax
               	andq	$-4, %rax
               	leaq	-4(%rax), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %ecx
               	andl	$3, %ecx
               	cmpq	$12, %rsi
               	jae	0x436679 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x219>
               	xorl	%esi, %esi
               	jmp	0x4366e3 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x283>
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	movups	(%rbx,%rsi,8), %xmm0
               	movups	16(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, (%r13,%rsi,8)
               	movups	%xmm1, 16(%r13,%rsi,8)
               	movups	32(%rbx,%rsi,8), %xmm0
               	movups	48(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 32(%r13,%rsi,8)
               	movups	%xmm1, 48(%r13,%rsi,8)
               	movups	64(%rbx,%rsi,8), %xmm0
               	movups	80(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 64(%r13,%rsi,8)
               	movups	%xmm1, 80(%r13,%rsi,8)
               	movups	96(%rbx,%rsi,8), %xmm0
               	movups	112(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 96(%r13,%rsi,8)
               	movups	%xmm1, 112(%r13,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x436682 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x222>
               	testq	%rcx, %rcx
               	je	0x43671e <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2be>
               	leaq	16(,%rsi,8), %rdx
               	negq	%rcx
               	nopw	(%rax,%rax)
               	movups	-16(%rbx,%rdx), %xmm0
               	movups	(%rbx,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rcx
               	jne	0x436700 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2a0>
               	cmpq	%rax, %rdi
               	je	0x436755 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
               	leaq	(,%rax,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rbx,%rax,8), %rbx
               	subq	%rbx, %r15
               	xorl	%eax, %eax
               	nopw	(%rax,%rax)
               	movq	(%rbx,%rax), %rdx
               	movq	%rdx, (%rcx,%rax)
               	addq	$8, %rax
               	cmpq	%rax, %r15
               	jne	0x436740 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2e0>
               	movq	(%rsp), %rbx
               	testq	%rbx, %rbx
               	je	0x436762 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x302>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	leaq	16(%rsp), %rbx
               	movq	%r13, (%rsp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 8(%rsp)
               	movq	72(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	80(%rsp), %r13
               	movq	%rax, (%rbx)
               	movq	(%rsp), %rbx
               	movq	8(%rsp), %r15
               	subq	%rbx, %r15
               	sarq	$3, %r15
               	movq	$0, 88(%rsp)
               	movq	$4, 96(%rsp)
               	movq	%rbx, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	leaq	186(%rip), %rdi         # 0x436880 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
               	leaq	88(%rsp), %rsi
               	callq	0x413940 <_Unwind_Backtrace@plt>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	16(%rsp), %rax
               	movq	%rax, 16(%r13)
               	movq	$0, 16(%rsp)
               	movq	48(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x436827 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	movl	56(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x436827 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	cmpl	$1, %eax
               	jne	0x436827 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	movb	187521(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x436827 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	61643(%rip), %rdi       # 0x445908 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4363a0 <std::__throw_length_error(char const*)>
               	jmp	0x436844 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3e4>
               	movq	%rax, %rbx
               	movq	%rsp, %rdi
               	callq	0x4368c0 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
               	leaq	40(%rsp), %rdi
               	callq	0x436420 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>:
               	movq	(%rsi), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsi)
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	8(%rsi), %rax
               	testq	%rax, %rax
               	je	0x436899 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x19>
               	addq	$-1, %rax
               	movq	%rax, 8(%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	movq	24(%rbx), %rax
               	cmpq	%rax, (%rbx)
               	jae	0x436895 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
               	callq	0x413950 <_Unwind_GetIP@plt>
               	movq	(%rbx), %rcx
               	leaq	1(%rcx), %rdx
               	movq	%rdx, (%rbx)
               	movq	16(%rbx), %rdx
               	movq	%rax, (%rdx,%rcx,8)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4368cd <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()+0xd>
               	jmp	0x4136d0 <free@plt>
               	retq
               	nop

<CreateStringFromCString>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	testq	%rdi, %rdi
               	je	0x4369d2 <CreateStringFromCString+0x102>
               	movq	%rdi, %r12
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, %r13
               	leaq	(%r12,%rax), %rbx
               	movq	%r12, (%rsp)
               	testq	%rax, %rax
               	movq	%r15, 24(%rsp)
               	jle	0x4369d9 <CreateStringFromCString+0x109>
               	movq	%r13, 32(%rsp)
               	movq	%r12, 16(%rsp)
               	xorl	%r14d, %r14d
               	movq	%rsp, %r13
               	leaq	12(%rsp), %rbp
               	movl	$52, %r12d
               	movl	$10, %r15d
               	jmp	0x436949 <CreateStringFromCString+0x79>
               	nop
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	movl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jae	0x4369b9 <CreateStringFromCString+0xe9>
               	movl	$0, 12(%rsp)
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	callq	0x436b40 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r12d
               	jb	0x436930 <CreateStringFromCString+0x60>
               	btl	%eax, %r15d
               	jae	0x43699d <CreateStringFromCString+0xcd>
               	movq	(%rsp), %rcx
               	addq	$1, %rcx
               	nopl	(%rax,%rax)
               	movq	%rcx, %rax
               	movq	%rcx, (%rsp)
               	cmpq	%rbx, %rcx
               	jae	0x43693c <CreateStringFromCString+0x6c>
               	movzbl	(%rax), %edx
               	andb	$-64, %dl
               	leaq	1(%rax), %rcx
               	cmpb	$-128, %dl
               	je	0x436980 <CreateStringFromCString+0xb0>
               	jmp	0x43693c <CreateStringFromCString+0x6c>
               	xorl	%ecx, %ecx
               	cmpl	$65535, 12(%rsp)        # imm = 0xFFFF
               	movq	(%rsp), %rax
               	seta	%cl
               	addl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jb	0x436949 <CreateStringFromCString+0x79>
               	testl	%r14d, %r14d
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %r12
               	movq	32(%rsp), %r13
               	jns	0x4369dc <CreateStringFromCString+0x10c>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	xorl	%eax, %eax
               	jmp	0x436b1f <CreateStringFromCString+0x24f>
               	xorl	%r14d, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%r14d, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	137253(%rip), %rax      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbp)
               	movl	%r14d, 24(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	%rcx, (%r15)
               	movq	%r12, (%rsp)
               	testq	%r13, %r13
               	je	0x436b15 <CreateStringFromCString+0x245>
               	addq	$32, %rbp
               	movq	%rsp, %r15
               	leaq	12(%rsp), %r12
               	movl	$52, %r14d
               	movl	$10, %r13d
               	jmp	0x436a90 <CreateStringFromCString+0x1c0>
               	movl	%eax, %ecx
               	shrl	$10, %ecx
               	addl	$4294956992, %ecx       # imm = 0xFFFFD7C0
               	movw	%cx, (%rbp)
               	andl	$1023, %eax             # imm = 0x3FF
               	orl	$56320, %eax            # imm = 0xDC00
               	movw	%ax, 2(%rbp)
               	addq	$4, %rbp
               	cmpq	%rbx, (%rsp)
               	je	0x436b15 <CreateStringFromCString+0x245>
               	nopl	(%rax)
               	movl	$0, 12(%rsp)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x436b40 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r14d
               	jae	0x436ac0 <CreateStringFromCString+0x1f0>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	jmp	0x436af0 <CreateStringFromCString+0x220>
               	nopl	(%rax)
               	btl	%eax, %r13d
               	jae	0x436b05 <CreateStringFromCString+0x235>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	nop
               	movq	%rax, (%rsp)
               	cmpq	%rbx, %rax
               	jae	0x436af0 <CreateStringFromCString+0x220>
               	movzbl	(%rax), %ecx
               	andb	$-64, %cl
               	addq	$1, %rax
               	cmpb	$-128, %cl
               	je	0x436ad0 <CreateStringFromCString+0x200>
               	movl	$65533, %eax            # imm = 0xFFFD
               	movw	%ax, (%rbp)
               	addq	$2, %rbp
               	cmpq	%rbx, (%rsp)
               	jne	0x436a90 <CreateStringFromCString+0x1c0>
               	jmp	0x436b15 <CreateStringFromCString+0x245>
               	movl	12(%rsp), %eax
               	cmpl	$65536, %eax            # imm = 0x10000
               	jb	0x436af5 <CreateStringFromCString+0x225>
               	jmp	0x436a62 <CreateStringFromCString+0x192>
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %rax
               	movq	%rax, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>:
               	movq	(%rdi), %r8
               	movb	(%r8), %al
               	movzbl	%al, %ecx
               	testb	%cl, %cl
               	js	0x436b65 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x25>
               	movq	%r8, %r9
               	cmpq	%rsi, %r8
               	je	0x436d5b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movl	%ecx, (%rdx)
               	addq	$1, %r9
               	movq	%r9, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movl	%ecx, %eax
               	andl	$-32, %eax
               	cmpl	$192, %eax
               	jne	0x436bc9 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x89>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%sil, %eax
               	andl	$31, %ecx
               	shll	$6, %ecx
               	andl	$63, %eax
               	orl	%eax, %ecx
               	movl	$4, %eax
               	cmpl	$128, %ecx
               	jae	0x436b59 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	jmp	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	%ecx, %eax
               	andl	$-16, %eax
               	cmpl	$224, %eax
               	jne	0x436c8e <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x14e>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %r9b
               	movl	%r9d, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%r9b, %r10d
               	shll	$12, %ecx
               	movzwl	%cx, %eax
               	andl	$63, %r10d
               	shll	$6, %r10d
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	andl	$63488, %ecx            # imm = 0xF800
               	movl	$5, %eax
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	$4, %eax
               	cmpl	$2048, %r10d            # imm = 0x800
               	jb	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	2(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %ecx
               	andb	$-64, %cl
               	movl	$3, %eax
               	cmpb	$-128, %cl
               	jne	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%sil, %eax
               	andl	$63, %eax
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	jmp	0x436b59 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	movl	%ecx, %r9d
               	andl	$-8, %r9d
               	movl	$2, %eax
               	cmpl	$240, %r9d
               	jne	0x436b64 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x24>
               	cmpq	%rsi, %r8
               	je	0x436d5b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	leaq	1(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x436d5b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movb	(%rax), %r9b
               	movl	%r9d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x436d64 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
               	movzbl	%r9b, %r10d
               	andl	$7, %ecx
               	shll	$18, %ecx
               	andl	$63, %r10d
               	shll	$12, %r10d
               	orl	%ecx, %r10d
               	movl	$5, %eax
               	cmpl	$1114111, %r10d         # imm = 0x10FFFF
               	ja	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	$4, %eax
               	cmpl	$65536, %r10d           # imm = 0x10000
               	jae	0x436d05 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c5>
               	movq	%r8, (%rdi)
               	retq
               	leaq	2(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x436d5b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movb	(%rax), %cl
               	movl	%ecx, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x436d64 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
               	leaq	3(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %r11d
               	andb	$-64, %r11b
               	movl	$3, %eax
               	cmpb	$-128, %r11b
               	jne	0x436d01 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%cl, %eax
               	andl	$63, %eax
               	shll	$6, %eax
               	orl	%r10d, %eax
               	movzbl	%sil, %ecx
               	andl	$63, %ecx
               	orl	%eax, %ecx
               	jmp	0x436b59 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	movl	$1, %eax
               	movq	%r8, (%rdi)
               	retq
               	movl	$3, %eax
               	movq	%r8, (%rdi)
               	retq
               	nopl	(%rax)

<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %r14d
               	cmpl	$127, %edi
               	ja	0x436da7 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x436ea3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x133>
               	movq	16(%rbx), %rcx
               	jmp	0x436eb3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	%r14d, %ebp
               	cmpl	$2047, %r14d            # imm = 0x7FF
               	ja	0x436e1b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xab>
               	shrl	$6, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436f5f <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ef>
               	movq	16(%rbx), %rcx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436de9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	andb	$63, %r14b
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436eaa <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13a>
               	movq	16(%rbx), %rcx
               	jmp	0x436eaf <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13f>
               	cmpl	$65535, %r14d           # imm = 0xFFFF
               	ja	0x436ee8 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x178>
               	shrl	$12, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436f8d <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x21d>
               	movq	16(%rbx), %rcx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436e5e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$6, %ebp
               	andb	$63, %bpl
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436f76 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x206>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436ddb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436de9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	jmp	0x436eb3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	$15, %ecx
               	orb	$-128, %r14b
               	cmpq	%rcx, %r15
               	jbe	0x436ec6 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x156>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x436fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r14b, (%rax,%rbp)
               	movq	%r15, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, (%rax,%r15)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	shrl	$18, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436fa4 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x234>
               	movq	16(%rbx), %rcx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436f1e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$12, %ebp
               	andb	$63, %bpl
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436fbb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x24b>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436e50 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436e5e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436ddb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436de9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436ddb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436de9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436e50 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436e5e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436f10 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1a0>
               	jmp	0x436f1e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436e50 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436e5e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	nopw	%cs:(%rax,%rax)

<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movq	8(%rdi), %r12
               	leaq	1(%r12), %rbp
               	movq	(%rdi), %r14
               	leaq	16(%rdi), %rcx
               	cmpq	%rcx, %r14
               	je	0x43705e <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x7e>
               	movq	16(%r15), %rax
               	testq	%rbp, %rbp
               	js	0x437068 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x88>
               	cmpq	%rax, %rbp
               	movq	%rcx, (%rsp)
               	jbe	0x437031 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x437031 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	subq	%rbx, %r12
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	testq	%rbx, %rbx
               	je	0x437057 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x77>
               	cmpq	$1, %rbx
               	jne	0x437074 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x94>
               	movb	(%r14), %al
               	movb	%al, (%r13)
               	testq	%r12, %r12
               	jne	0x437087 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xa7>
               	jmp	0x43709c <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	movl	$15, %eax
               	testq	%rbp, %rbp
               	jns	0x43700f <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x2f>
               	leaq	59617(%rip), %rdi       # 0x445950 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4363a0 <std::__throw_length_error(char const*)>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	testq	%r12, %r12
               	je	0x43709c <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	leaq	(%rbx,%r13), %rdi
               	addq	$1, %rdi
               	addq	%r14, %rbx
               	cmpq	$1, %r12
               	jne	0x4370c0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xe0>
               	movb	(%rbx), %al
               	movb	%al, (%rdi)
               	cmpq	(%rsp), %r14
               	je	0x4370aa <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, (%r15)
               	movq	%rbp, 16(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	cmpq	(%rsp), %r14
               	jne	0x4370a2 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xc2>
               	jmp	0x4370aa <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_plusImpl>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movl	8(%rdi), %ebp
               	addl	8(%rsi), %ebp
               	js	0x4371a0 <Kotlin_String_plusImpl+0xc0>
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	135426(%rip), %rax      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r12, (%r14)
               	leaq	32(%rbx), %rdi
               	leaq	16(%r15), %rsi
               	movl	8(%r15), %edx
               	addq	%rdx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movslq	8(%r15), %rax
               	leaq	(%rbx,%rax,2), %rdi
               	addq	$32, %rdi
               	movl	8(%r13), %edx
               	addq	$16, %r13
               	addq	%rdx, %rdx
               	movq	%r13, %rsi
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_subSequence>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	testl	%esi, %esi
               	js	0x4372e1 <Kotlin_String_subSequence+0x131>
               	movl	%edx, %ebp
               	movl	%esi, %ebx
               	cmpl	%esi, %edx
               	jl	0x4372e1 <Kotlin_String_subSequence+0x131>
               	movq	%rdi, %r15
               	cmpl	%ebp, 8(%rdi)
               	jb	0x4372e1 <Kotlin_String_subSequence+0x131>
               	movq	%rcx, %r14
               	subl	%ebx, %ebp
               	jne	0x43725a <Kotlin_String_subSequence+0xaa>
               	movq	$0, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbx
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 16(%rsp)
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 24(%rsp)
               	movb	184937(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437238 <Kotlin_String_subSequence+0x88>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	159721(%rip), %r12      # 0x45e228 <__unnamed_6>
               	movq	%r12, (%r14)
               	movq	%rbx, %rax
               	movq	-64(%rbx), %rax
               	movq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	jmp	0x4372d1 <Kotlin_String_subSequence+0x121>
               	js	0x4372e6 <Kotlin_String_subSequence+0x136>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	135077(%rip), %rcx      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%r12, (%r14)
               	leaq	32(%rax), %rdi
               	movl	%ebx, %eax
               	leaq	(%r15,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	nopl	(%rax,%rax)

<Kotlin_String_get>:
               	pushq	%rax
               	cmpl	%esi, 8(%rdi)
               	jbe	0x437300 <Kotlin_String_get+0x10>
               	movslq	%esi, %rax
               	movzwl	16(%rdi,%rax,2), %eax
               	popq	%rcx
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<konan::snprintf(char*, unsigned long, char const*, ...)>:
               	subq	$216, %rsp
               	testb	%al, %al
               	je	0x437352 <konan::snprintf(char*, unsigned long, char const*, ...)+0x42>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rcx
               	callq	0x413850 <vsnprintf@plt>
               	addq	$216, %rsp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_equals>:
               	pushq	%rax
               	testq	%rsi, %rsi
               	je	0x4373bc <Kotlin_String_equals+0x1c>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	134809(%rip), %rcx      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, %rax
               	je	0x4373c0 <Kotlin_String_equals+0x20>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	cmpq	%rdi, %rsi
               	je	0x4373e4 <Kotlin_String_equals+0x44>
               	movl	8(%rdi), %edx
               	cmpl	8(%rsi), %edx
               	jne	0x4373bc <Kotlin_String_equals+0x1c>
               	addq	$16, %rdi
               	addq	$16, %rsi
               	addq	%rdx, %rdx
               	callq	0x413960 <bcmp@plt>
               	testl	%eax, %eax
               	sete	%al
               	popq	%rcx
               	retq
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopl	(%rax,%rax)

<Kotlin_String_hashCode>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	8(%rdi), %r14d
               	cmpb	$0, 284654(%rip)        # 0x47cbf0 <(anonymous namespace)::initialized>
               	jne	0x437427 <Kotlin_String_hashCode+0x37>
               	movb	$1, 284645(%rip)        # 0x47cbf0 <(anonymous namespace)::initialized>
               	movl	284859(%rip), %eax      # 0x47cccc <__cpu_model+0xc>
               	movl	%eax, %ecx
               	shrb	$7, %cl
               	movb	%cl, 284629(%rip)       # 0x47cbf1 <(anonymous namespace)::sseSupported>
               	shrl	$10, %eax
               	andb	$1, %al
               	movb	%al, 284619(%rip)       # 0x47cbf2 <(anonymous namespace)::avx2Supported>
               	cmpl	$16, %r14d
               	jge	0x437439 <Kotlin_String_hashCode+0x49>
               	testl	%r14d, %r14d
               	jg	0x437467 <Kotlin_String_hashCode+0x77>
               	xorl	%eax, %eax
               	jmp	0x4375d1 <Kotlin_String_hashCode+0x1e1>
               	movb	284595(%rip), %al       # 0x47cbf2 <(anonymous namespace)::avx2Supported>
               	movb	284588(%rip), %cl       # 0x47cbf1 <(anonymous namespace)::sseSupported>
               	orb	%al, %cl
               	je	0x437467 <Kotlin_String_hashCode+0x77>
               	leaq	16(%rbx), %rsi
               	movl	%r14d, %edi
               	shrl	$2, %edi
               	cmpl	$31, %r14d
               	jg	0x43750b <Kotlin_String_hashCode+0x11b>
               	callq	0x4375e0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
               	jmp	0x437538 <Kotlin_String_hashCode+0x148>
               	leaq	-1(%r14), %rax
               	movl	%r14d, %ecx
               	andl	$3, %ecx
               	cmpq	$3, %rax
               	jae	0x43747e <Kotlin_String_hashCode+0x8e>
               	xorl	%r14d, %r14d
               	xorl	%eax, %eax
               	jmp	0x4374d1 <Kotlin_String_hashCode+0xe1>
               	andl	$-4, %r14d
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	16(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	18(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	20(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	22(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$4, %rdx
               	cmpq	%rdx, %r14
               	jne	0x437490 <Kotlin_String_hashCode+0xa0>
               	testq	%rcx, %rcx
               	je	0x4375d1 <Kotlin_String_hashCode+0x1e1>
               	leaq	(%rbx,%r14,2), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%eax, %edi
               	shll	$5, %edi
               	subl	%eax, %edi
               	movzwl	(%rdx,%rsi,2), %eax
               	addl	%edi, %eax
               	addq	$1, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x4374f0 <Kotlin_String_hashCode+0x100>
               	jmp	0x4375d1 <Kotlin_String_hashCode+0x1e1>
               	testb	%al, %al
               	je	0x43751c <Kotlin_String_hashCode+0x12c>
               	cmpl	$127, %r14d
               	jg	0x437523 <Kotlin_String_hashCode+0x133>
               	callq	0x437810 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x437538 <Kotlin_String_hashCode+0x148>
               	callq	0x437690 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x437538 <Kotlin_String_hashCode+0x148>
               	cmpl	$575, %r14d             # imm = 0x23F
               	jg	0x437533 <Kotlin_String_hashCode+0x143>
               	callq	0x437910 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>
               	jmp	0x437538 <Kotlin_String_hashCode+0x148>
               	callq	0x437b00 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>
               	movl	%r14d, %ecx
               	andl	$-4, %ecx
               	cmpl	%r14d, %ecx
               	jge	0x4375d1 <Kotlin_String_hashCode+0x1e1>
               	movq	%rcx, %r8
               	notq	%r8
               	addq	%r14, %r8
               	movq	%r14, %r9
               	andq	$3, %r9
               	je	0x437589 <Kotlin_String_hashCode+0x199>
               	movl	%r14d, %edx
               	andl	$-4, %edx
               	leaq	(%rbx,%rdx,2), %rdi
               	addq	$16, %rdi
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	(%rdi,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$1, %rdx
               	cmpq	%rdx, %r9
               	jne	0x437570 <Kotlin_String_hashCode+0x180>
               	orq	%r9, %rcx
               	cmpq	$3, %r8
               	jb	0x4375d1 <Kotlin_String_hashCode+0x1e1>
               	nop
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	16(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	18(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	20(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	22(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	addq	$4, %rcx
               	cmpq	%rcx, %r14
               	jne	0x437590 <Kotlin_String_hashCode+0x1a0>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>:
               	addl	$2, %edi
               	pxor	%xmm1, %xmm1
               	movdqa	47601(%rip), %xmm2      # 0x442fe0 <_IO_stdin_used+0xa0>
               	movdqa	47609(%rip), %xmm3      # 0x442ff0 <_IO_stdin_used+0xb0>
               	movdqa	47617(%rip), %xmm4      # 0x443000 <_IO_stdin_used+0xc0>
               	pxor	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rax
               	pmovzxwd	(%rsi), %xmm5           # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm5
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm4, %xmm6
               	pmulld	%xmm2, %xmm0
               	paddd	%xmm5, %xmm0
               	pmulld	%xmm2, %xmm1
               	paddd	%xmm6, %xmm1
               	addl	$-2, %edi
               	addq	$16, %rsi
               	cmpl	$3, %edi
               	jg	0x437610 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0x30>
               	phaddd	%xmm1, %xmm0
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	cmpl	$3, %edi
               	jne	0x437680 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0xa0>
               	pmovzxwd	16(%rax), %xmm1         # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47527(%rip), %xmm0      # 0x443010 <_IO_stdin_used+0xd0>
               	pmulld	47502(%rip), %xmm1      # 0x443000 <_IO_stdin_used+0xc0>
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm0
               	movd	%xmm0, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	pxor	%xmm5, %xmm5
               	movdqa	47491(%rip), %xmm12     # 0x443020 <_IO_stdin_used+0xe0>
               	movdqa	47498(%rip), %xmm10     # 0x443030 <_IO_stdin_used+0xf0>
               	movdqa	47505(%rip), %xmm11     # 0x443040 <_IO_stdin_used+0x100>
               	movdqa	47416(%rip), %xmm8      # 0x442ff0 <_IO_stdin_used+0xb0>
               	movdqa	47423(%rip), %xmm9      # 0x443000 <_IO_stdin_used+0xc0>
               	pxor	%xmm7, %xmm7
               	pxor	%xmm1, %xmm1
               	pxor	%xmm3, %xmm3
               	nopl	(%rax)
               	movl	%edi, %eax
               	pmovzxwd	(%rsi), %xmm2           # xmm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm10, %xmm2
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm7, %xmm0
               	pmovzxwd	16(%rsi), %xmm7         # xmm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm11, %xmm6
               	movdqa	%xmm5, %xmm4
               	pmovzxwd	24(%rsi), %xmm5         # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm12, %xmm3
               	paddd	%xmm2, %xmm3
               	pmulld	%xmm12, %xmm1
               	paddd	%xmm6, %xmm1
               	pmulld	%xmm12, %xmm0
               	pmulld	%xmm12, %xmm4
               	pmulld	%xmm8, %xmm7
               	paddd	%xmm0, %xmm7
               	pmulld	%xmm9, %xmm5
               	paddd	%xmm4, %xmm5
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x4376d0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x40>
               	phaddd	%xmm1, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm5, %xmm7
               	phaddd	%xmm7, %xmm7
               	phaddd	%xmm7, %xmm7
               	paddd	%xmm3, %xmm7
               	leal	4(%rdi), %eax
               	cmpl	$6, %eax
               	jl	0x4377df <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x14f>
               	pxor	%xmm4, %xmm4
               	movdqa	47205(%rip), %xmm3      # 0x442fe0 <_IO_stdin_used+0xa0>
               	pxor	%xmm1, %xmm1
               	nop
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm1, %xmm2
               	movl	%edi, %eax
               	movdqa	%xmm4, %xmm5
               	pmovzxwd	8(%rsi), %xmm4          # xmm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm2
               	pmulld	%xmm3, %xmm5
               	pmulld	%xmm8, %xmm0
               	movdqa	%xmm0, %xmm1
               	paddd	%xmm2, %xmm1
               	pmulld	%xmm9, %xmm4
               	paddd	%xmm5, %xmm4
               	addq	$16, %rsi
               	leal	-2(%rax), %edi
               	cmpl	$3, %eax
               	jg	0x437780 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf0>
               	pmulld	47124(%rip), %xmm7      # 0x442fe0 <_IO_stdin_used+0xa0>
               	phaddd	%xmm4, %xmm1
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm7
               	testl	%edi, %edi
               	jle	0x437808 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x178>
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47135(%rip), %xmm7      # 0x443010 <_IO_stdin_used+0xd0>
               	pmulld	47110(%rip), %xmm0      # 0x443000 <_IO_stdin_used+0xc0>
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	paddd	%xmm0, %xmm7
               	movd	%xmm7, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	addl	$-2, %edi
               	vpbroadcastd	46888(%rip), %ymm1 # 0x442f44 <_IO_stdin_used+0x4>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vmovdqa	47192(%rip), %ymm2      # 0x443080 <_IO_stdin_used+0x140>
               	vmovdqa	47216(%rip), %ymm3      # 0x4430a0 <_IO_stdin_used+0x160>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm5   # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm2, %ymm5, %ymm5
               	vpmovzxwd	16(%rsi), %ymm6 # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm1, %ymm4, %ymm4
               	vpaddd	%ymm4, %ymm5, %ymm4
               	vpmulld	%ymm1, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm6, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	addl	$2, %eax
               	cmpl	$7, %eax
               	jg	0x437840 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x30>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	leal	6(%rdi), %eax
               	cmpl	$6, %eax
               	jge	0x4378a2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x92>
               	addl	$2, %edi
               	testl	%edi, %edi
               	jg	0x4378de <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xce>
               	jmp	0x437908 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46744(%rip), %xmm2 # 0x442f48 <_IO_stdin_used+0x8>
               	vpmulld	47079(%rip), %ymm1, %ymm1 # 0x4430a0 <_IO_stdin_used+0x160>
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	addq	$16, %rsi
               	testl	%edi, %edi
               	jle	0x437908 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %xmm1   # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46688(%rip), %xmm2 # 0x442f4c <_IO_stdin_used+0xc>
               	vpmulld	46859(%rip), %xmm1, %xmm1 # 0x443000 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vmovd	%xmm0, %eax
               	vzeroupper
               	retq

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>:
               	vpbroadcastd	46647(%rip), %ymm3 # 0x442f50 <_IO_stdin_used+0x10>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	47003(%rip), %ymm4      # 0x4430c0 <_IO_stdin_used+0x180>
               	vmovdqa	47027(%rip), %ymm5      # 0x4430e0 <_IO_stdin_used+0x1a0>
               	vmovdqa	46923(%rip), %ymm0      # 0x443080 <_IO_stdin_used+0x140>
               	vmovdqa	46947(%rip), %ymm1      # 0x4430a0 <_IO_stdin_used+0x160>
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	nopw	(%rax,%rax)
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm9   # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm9, %ymm9
               	vpmovzxwd	16(%rsi), %ymm10 # ymm10 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm11 # ymm11 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm5, %ymm10, %ymm10
               	vpmovzxwd	48(%rsi), %ymm12 # ymm12 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm8, %ymm8
               	vpaddd	%ymm8, %ymm9, %ymm8
               	vpmulld	%ymm3, %ymm7, %ymm7
               	vpaddd	%ymm7, %ymm10, %ymm7
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm3, %ymm2, %ymm2
               	vpmulld	%ymm0, %ymm11, %ymm9
               	vpaddd	%ymm6, %ymm9, %ymm6
               	vpmulld	%ymm1, %ymm12, %ymm9
               	vpaddd	%ymm2, %ymm9, %ymm2
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x437950 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x40>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm6, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm3, %xmm4
               	vextracti128	$1, %ymm2, %xmm5
               	vpaddd	%xmm2, %xmm3, %xmm2
               	vpaddd	%xmm2, %xmm4, %xmm2
               	vpaddd	%xmm5, %xmm2, %xmm2
               	leal	8(%rdi), %eax
               	cmpl	$12, %eax
               	jge	0x437a2b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x11b>
               	cmpl	$2, %edi
               	jge	0x437aa9 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x199>
               	testl	%edi, %edi
               	jle	0x437a23 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46405(%rip), %xmm1 # 0x442f4c <_IO_stdin_used+0xc>
               	vpmulld	46576(%rip), %xmm0, %xmm0 # 0x443000 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpxor	%xmm3, %xmm3, %xmm3
               	vpbroadcastd	46348(%rip), %ymm4 # 0x442f44 <_IO_stdin_used+0x4>
               	vpxor	%xmm5, %xmm5, %xmm5
               	nopl	(%rax)
               	vpmovzxwd	(%rsi), %ymm6   # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm7 # ymm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm5, %ymm5
               	vpmulld	%ymm4, %ymm3, %ymm3
               	vpmulld	%ymm0, %ymm6, %ymm6
               	vpaddd	%ymm5, %ymm6, %ymm5
               	vpmulld	%ymm1, %ymm7, %ymm6
               	vpaddd	%ymm3, %ymm6, %ymm3
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437a40 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x130>
               	vpbroadcastd	46278(%rip), %xmm0 # 0x442f44 <_IO_stdin_used+0x4>
               	vphaddd	%ymm3, %ymm5, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm0, %xmm2, %xmm0
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x4379f5 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe5>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46225(%rip), %xmm1 # 0x442f48 <_IO_stdin_used+0x8>
               	vpmulld	46560(%rip), %ymm0, %ymm0 # 0x4430a0 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x4379f9 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe9>
               	jmp	0x437a23 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>:
               	vpbroadcastd	46155(%rip), %ymm6 # 0x442f54 <_IO_stdin_used+0x14>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46571(%rip), %ymm10     # 0x443100 <_IO_stdin_used+0x1c0>
               	vmovdqa	46659(%rip), %ymm11     # 0x443160 <_IO_stdin_used+0x220>
               	vmovdqa	46427(%rip), %ymm7      # 0x443080 <_IO_stdin_used+0x140>
               	vmovdqa	46451(%rip), %ymm8      # 0x4430a0 <_IO_stdin_used+0x160>
               	vpxor	%xmm5, %xmm5, %xmm5
               	vpxor	%xmm9, %xmm9, %xmm9
               	vpxor	%xmm12, %xmm12, %xmm12
               	vpxor	%xmm13, %xmm13, %xmm13
               	vpxor	%xmm14, %xmm14, %xmm14
               	vpxor	%xmm15, %xmm15, %xmm15
               	vpxor	%xmm0, %xmm0, %xmm0
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	46513(%rip), %ymm3, %ymm3 # 0x443120 <_IO_stdin_used+0x1e0>
               	vpmulld	46536(%rip), %ymm4, %ymm4 # 0x443140 <_IO_stdin_used+0x200>
               	vpmulld	%ymm6, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm1, %ymm0
               	vpmovzxwd	48(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm11, %ymm1, %ymm1
               	vpmulld	%ymm6, %ymm15, %ymm15
               	vpaddd	%ymm3, %ymm15, %ymm15
               	vpmovzxwd	64(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm14, %ymm14
               	vpaddd	%ymm4, %ymm14, %ymm14
               	vpmovzxwd	80(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm13, %ymm13
               	vpaddd	%ymm1, %ymm13, %ymm13
               	vpmulld	%ymm6, %ymm12, %ymm1
               	vpmulld	46335(%rip), %ymm3, %ymm3 # 0x4430c0 <_IO_stdin_used+0x180>
               	vpaddd	%ymm1, %ymm3, %ymm12
               	vpmovzxwd	96(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm9, %ymm3
               	vpmulld	46343(%rip), %ymm4, %ymm4 # 0x4430e0 <_IO_stdin_used+0x1a0>
               	vpaddd	%ymm3, %ymm4, %ymm9
               	vpmulld	%ymm6, %ymm5, %ymm3
               	vpmulld	%ymm7, %ymm1, %ymm1
               	vpaddd	%ymm3, %ymm1, %ymm5
               	vpmovzxwd	112(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm2, %ymm2
               	vpmulld	%ymm8, %ymm1, %ymm1
               	vpaddd	%ymm2, %ymm1, %ymm2
               	movl	%edi, %eax
               	subq	$-128, %rsi
               	leal	-16(%rax), %edi
               	cmpl	$31, %eax
               	jg	0x437b50 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x50>
               	vmovdqa	%ymm8, %ymm11
               	vmovdqa	%ymm7, %ymm10
               	vphaddd	%ymm15, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm13, %ymm14, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm9, %ymm12, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm5, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm0, %xmm4
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm1, %xmm5
               	vextracti128	$1, %ymm3, %xmm6
               	vextracti128	$1, %ymm2, %xmm7
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm4, %xmm0
               	vpaddd	%xmm3, %xmm5, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm6, %xmm1
               	vpaddd	%xmm7, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm2
               	leal	16(%rdi), %eax
               	cmpl	$24, %eax
               	jge	0x437cda <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1da>
               	cmpl	$4, %edi
               	jge	0x437dbe <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2be>
               	cmpl	$2, %edi
               	jge	0x437e39 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x339>
               	testl	%edi, %edi
               	jle	0x437cd2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	45718(%rip), %xmm1 # 0x442f4c <_IO_stdin_used+0xc>
               	vpmulld	45889(%rip), %xmm0, %xmm0 # 0x443000 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpbroadcastd	45677(%rip), %ymm5 # 0x442f50 <_IO_stdin_used+0x10>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	vmovdqa	46020(%rip), %ymm12     # 0x4430c0 <_IO_stdin_used+0x180>
               	vmovdqa	46044(%rip), %ymm13     # 0x4430e0 <_IO_stdin_used+0x1a0>
               	nopw	%cs:(%rax,%rax)
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	48(%rsi), %ymm9 # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmulld	%ymm5, %ymm8, %ymm8
               	vpmulld	%ymm5, %ymm7, %ymm7
               	vpmulld	%ymm5, %ymm6, %ymm6
               	vpmulld	%ymm5, %ymm0, %ymm0
               	vpmulld	%ymm12, %ymm1, %ymm1
               	vpaddd	%ymm1, %ymm8, %ymm8
               	vpmulld	%ymm13, %ymm3, %ymm1
               	vpaddd	%ymm7, %ymm1, %ymm7
               	vpmulld	%ymm10, %ymm4, %ymm1
               	vpaddd	%ymm6, %ymm1, %ymm6
               	vpmulld	%ymm11, %ymm9, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x437d10 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x210>
               	vpbroadcastd	45530(%rip), %xmm1 # 0x442f50 <_IO_stdin_used+0x10>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm6, %ymm0
               	vextracti128	$1, %ymm3, %xmm2
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm4
               	vpaddd	%xmm3, %xmm1, %xmm1
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm4, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	cmpl	$4, %edi
               	jl	0x437c9b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x19b>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpbroadcastd	45433(%rip), %ymm3 # 0x442f44 <_IO_stdin_used+0x4>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm5 # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm4, %ymm4
               	vpmulld	%ymm3, %ymm0, %ymm0
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpaddd	%ymm4, %ymm1, %ymm4
               	vpmulld	%ymm11, %ymm5, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437dd0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2d0>
               	vpbroadcastd	45366(%rip), %xmm1 # 0x442f44 <_IO_stdin_used+0x4>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437ca4 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a4>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45313(%rip), %xmm1 # 0x442f48 <_IO_stdin_used+0x8>
               	vpmulld	45648(%rip), %ymm0, %ymm0 # 0x4430a0 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437ca8 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a8>
               	jmp	0x437cd2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	leaq	134171(%rip), %rax      # 0x458ac0 <ktypeglobal:kotlin.native.internal.CleanerImpl#internal>
               	cmpq	%rax, %rsi
               	je	0x437f06 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x76>
               	leaq	134015(%rip), %rax      # 0x458a30 <ktypeglobal:kotlin.native.concurrent.WorkerBoundReference#internal>
               	cmpq	%rax, %rsi
               	jne	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movq	8(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	cmpq	$0, (%rbx)
               	je	0x437ef0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x60>
               	movq	8(%rbx), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$8, %rdi
               	movq	%rbp, %rsi
               	callq	0x4246a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	%rbx, %rdi
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4136d0 <free@plt>
               	movl	281831(%rip), %r13d     # 0x47cbf4 <(anonymous namespace)::globalCleanerWorker>
               	cmpl	$-2, %r13d
               	je	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movslq	%r13d, %r15
               	movq	8(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	callq	0x4383a0 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	movq	%r12, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437f80 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x437f80 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	cmpl	$1, %eax
               	jne	0x437f80 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movb	181540(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437f80 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movq	%rbp, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	152(%r12), %rdi
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x437fb5 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x125>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x437fd3 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x143>
               	jmp	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	(%rax), %rbp
               	cmpl	%r13d, 8(%rbp)
               	jne	0x438004 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x174>
               	testq	%rbp, %rbp
               	jne	0x43803e <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1ae>
               	jmp	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	cmpl	%r13d, %esi
               	je	0x438035 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1a5>
               	movq	%rbp, %rbx
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movl	8(%rbp), %esi
               	movslq	%esi, %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x437ff0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x437fff <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x16f>
               	jmp	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	testq	%rbx, %rbx
               	je	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	16(%rbp), %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movups	80(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	%r14, 16(%rsp)
               	movq	%r14, %rax
               	movq	-64(%r14), %rdx
               	movl	$1, %r13d
               	movl	$1, %ecx
               	movq	%rdx, %r14
               	xchgl	%ecx, 328(%rdx)
               	movl	%ecx, 12(%rsp)
               	leaq	144(%rbx), %rdi
               	movq	-64(%rax), %rbp
               	xchgl	%r13d, 328(%rbp)
               	movq	%rdi, %r15
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x4380c8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%r13d, %eax
               	xchgl	%eax, (%rbp)
               	testl	%r13d, %r13d
               	jne	0x4380c8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	cmpl	$1, %eax
               	jne	0x4380c8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	movb	181212(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4380c8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	movq	%rbp, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	56(%rbx), %rax
               	movq	72(%rbx), %rcx
               	addq	$-40, %rcx
               	cmpq	%rcx, %rax
               	je	0x438116 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x286>
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movq	56(%rbx), %rax
               	addq	$40, %rax
               	movq	%rax, 56(%rbx)
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	jmp	0x4382c1 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x431>
               	movq	16(%rbx), %rax
               	movq	80(%rbx), %rdx
               	movq	8(%rbx), %rcx
               	movq	%rdx, %rsi
               	subq	%rcx, %rsi
               	sarq	$3, %rsi
               	movq	%rax, %rdi
               	subq	%rsi, %rdi
               	cmpq	$1, %rdi
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	ja	0x438262 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x3d2>
               	movq	%r13, 72(%rsp)
               	movq	48(%rbx), %rsi
               	subq	%rsi, %rdx
               	movq	%rdx, %rbp
               	sarq	$3, %rbp
               	leaq	2(%rbp), %r8
               	leaq	4(,%rbp), %rdi
               	addq	%rbp, %rdi
               	cmpq	%rdi, %rax
               	jbe	0x438197 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x307>
               	subq	%r8, %rax
               	andq	$-2, %rax
               	leaq	(%rcx,%rax,4), %r13
               	addq	$8, %rdx
               	cmpq	%rsi, %r13
               	jae	0x438209 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x379>
               	testq	%rdx, %rdx
               	je	0x438225 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	movq	%r13, %rdi
               	jmp	0x438220 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x390>
               	movq	%rbp, 64(%rsp)
               	testq	%rax, %rax
               	movl	$1, %ecx
               	cmovneq	%rax, %rcx
               	leaq	(%rax,%rcx), %r13
               	addq	$2, %r13
               	movl	$8, %esi
               	movq	%r13, %rdi
               	movq	%r8, %rbp
               	callq	0x4136c0 <calloc@plt>
               	movq	%r13, 56(%rsp)
               	subq	%rbp, %r13
               	andq	$-2, %r13
               	movq	%rax, %rbp
               	leaq	(%rax,%r13,4), %r13
               	movq	48(%rbx), %rsi
               	movq	80(%rbx), %rdx
               	subq	%rsi, %rdx
               	addq	$8, %rdx
               	je	0x4381ec <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x35c>
               	movq	%r13, %rdi
               	callq	0x4136b0 <memmove@plt>
               	movq	8(%rbx), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, 8(%rbx)
               	movq	56(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	64(%rsp), %rbp
               	jmp	0x438225 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	testq	%rdx, %rdx
               	je	0x438225 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	leaq	1(%rbp), %rax
               	leaq	(,%rax,8), %rdi
               	addq	%r13, %rdi
               	subq	%rdx, %rdi
               	callq	0x4136b0 <memmove@plt>
               	movq	%r13, 48(%rbx)
               	movq	(%r13), %rax
               	movq	%rax, 32(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 40(%rbx)
               	leaq	(,%rbp,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbx)
               	movq	(%r13,%rbp,8), %rax
               	movq	%rax, 64(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 72(%rbx)
               	movq	72(%rsp), %r13
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	80(%rbx), %rcx
               	movq	%rax, 8(%rcx)
               	movq	56(%rbx), %rax
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movq	80(%rbx), %rax
               	leaq	8(%rax), %rcx
               	movq	%rcx, 80(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rbx)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 72(%rbx)
               	movq	%rax, 56(%rbx)
               	addq	$184, %rbx
               	movq	%rbx, %rdi
               	callq	0x413970 <pthread_cond_signal@plt>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438315 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438315 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	cmpl	$1, %eax
               	jne	0x438315 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	movb	180623(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438315 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	addq	$328, %r15              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ecx, %ecx
               	jne	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	cmpl	$1, %eax
               	jne	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movb	180575(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438345 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	cmpl	$1, %eax
               	jne	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movb	180506(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43838a <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<(anonymous namespace)::theState()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	280650(%rip), %r14      # 0x47cbf8 <(anonymous namespace)::theState()::state>
               	testq	%r14, %r14
               	jne	0x438687 <(anonymous namespace)::theState()+0x2e7>
               	movl	$1, %edi
               	movl	$272, %esi              # imm = 0x110
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x4384f2 <(anonymous namespace)::theState()+0x152>
               	movq	%rax, %rbx
               	addq	$136, %rax
               	movq	%rax, 88(%rbx)
               	movq	$1, 96(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movl	$1065353216, 120(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 128(%rbx)
               	leaq	192(%rbx), %rax
               	movq	%rax, 144(%rbx)
               	movq	$1, 152(%rbx)
               	movups	%xmm0, 160(%rbx)
               	movl	$1065353216, 176(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 184(%rbx)
               	leaq	248(%rbx), %rax
               	movq	%rax, 200(%rbx)
               	movq	$1, 208(%rbx)
               	movups	%xmm0, 216(%rbx)
               	movl	$1065353216, 232(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 240(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r14)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413980 <pthread_mutex_init@plt>
               	movq	%rbx, %rdi
               	addq	$40, %rdi
               	xorl	%esi, %esi
               	callq	0x413990 <pthread_cond_init@plt>
               	movabsq	$4294967297, %rax       # imm = 0x100000001
               	movq	%rax, 256(%rbx)
               	movl	$0, 264(%rbx)
               	testq	%r14, %r14
               	je	0x4384d9 <(anonymous namespace)::theState()+0x139>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x4384d9 <(anonymous namespace)::theState()+0x139>
               	cmpl	$1, %eax
               	jne	0x4384d9 <(anonymous namespace)::theState()+0x139>
               	movb	180171(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4384d9 <(anonymous namespace)::theState()+0x139>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 280340(%rip)      # 0x47cbf8 <(anonymous namespace)::theState()::state>
               	jne	0x438501 <(anonymous namespace)::theState()+0x161>
               	movq	280331(%rip), %r14      # 0x47cbf8 <(anonymous namespace)::theState()::state>
               	jmp	0x438687 <(anonymous namespace)::theState()+0x2e7>
               	xorl	%ebx, %ebx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 280313(%rip)      # 0x47cbf8 <(anonymous namespace)::theState()::state>
               	je	0x4384e6 <(anonymous namespace)::theState()+0x146>
               	movq	%rax, %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rbx, %rdi
               	callq	0x4139a0 <pthread_mutex_destroy@plt>
               	leaq	40(%rbx), %rdi
               	callq	0x4139b0 <pthread_cond_destroy@plt>
               	testq	%r15, %r15
               	je	0x438560 <(anonymous namespace)::theState()+0x1c0>
               	addq	$328, %r15              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x438560 <(anonymous namespace)::theState()+0x1c0>
               	cmpl	$1, %eax
               	jne	0x438560 <(anonymous namespace)::theState()+0x1c0>
               	movb	180036(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438560 <(anonymous namespace)::theState()+0x1c0>
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	leaq	216(%rbx), %r15
               	movq	216(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438590 <(anonymous namespace)::theState()+0x1f0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438580 <(anonymous namespace)::theState()+0x1e0>
               	movq	200(%rbx), %rdi
               	movq	208(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	200(%rbx), %rdi
               	leaq	248(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x4385c8 <(anonymous namespace)::theState()+0x228>
               	callq	0x4136d0 <free@plt>
               	leaq	160(%rbx), %r15
               	movq	160(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4385f0 <(anonymous namespace)::theState()+0x250>
               	nop
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x4385e0 <(anonymous namespace)::theState()+0x240>
               	movq	144(%rbx), %rdi
               	movq	152(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	144(%rbx), %rdi
               	leaq	192(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x438628 <(anonymous namespace)::theState()+0x288>
               	callq	0x4136d0 <free@plt>
               	leaq	104(%rbx), %r15
               	movq	104(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438650 <(anonymous namespace)::theState()+0x2b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438640 <(anonymous namespace)::theState()+0x2a0>
               	movq	88(%rbx), %rdi
               	movq	96(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	88(%rbx), %rdi
               	leaq	136(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x43867f <(anonymous namespace)::theState()+0x2df>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_initRuntimeIfNeeded>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%fs:0, %rax
               	cmpq	$0, -48(%rax)
               	jne	0x43920e <Kotlin_initRuntimeIfNeeded+0xb6e>
               	movq	%rax, %r12
               	movb	279879(%rip), %al       # 0x47cc18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x439313 <Kotlin_initRuntimeIfNeeded+0xc73>
               	leaq	24(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	leaq	-8(%rax), %rax
               	leaq	96(%rsp), %rcx
               	movq	%rcx, (%rax)
               	leaq	-67122(%rip), %rbx      # 0x4280d0 <void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	%rbx, (%rax)
               	cmpq	$0, 166043(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x43934b <Kotlin_initRuntimeIfNeeded+0xcab>
               	leaq	179686(%rip), %rdi      # 0x464510 <(anonymous namespace)::initOptions>
               	leaq	19473(%rip), %rsi       # 0x43d342 <__once_proxy>
               	callq	0x4139c0 <pthread_once@plt>
               	testl	%eax, %eax
               	jne	0x439350 <Kotlin_initRuntimeIfNeeded+0xcb0>
               	callq	0x42a9b0 <mi_thread_init>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x4391b6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movq	%rax, %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	movq	%r12, %rax
               	cmpq	$0, -48(%r12)
               	jne	0x439357 <Kotlin_initRuntimeIfNeeded+0xcb7>
               	movq	%r14, -48(%r12)
               	lock
               	addl	$1, 279670(%rip)        # 0x47cc04 <(anonymous namespace)::aliveRuntimesCount>
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, 279651(%rip)      # 0x47cc00 <(anonymous namespace)::globalRuntimeStatus>
               	sete	%r13b
               	callq	0x435970 <konan::gettid()>
               	movl	%eax, %ebx
               	movl	$1, %edi
               	movl	$368, %esi              # imm = 0x170
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r15
               	leaq	8(%rax), %rbp
               	movl	%ebx, 8(%rax)
               	leaq	175312(%rip), %rax      # 0x463498 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 16(%r15)
               	leaq	24(%r15), %rax
               	movq	%rax, 32(%r15)
               	movq	%rax, 24(%r15)
               	leaq	48(%r15), %rax
               	movq	%rax, 56(%r15)
               	movq	%rax, 48(%r15)
               	leaq	144(%r15), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 64(%r15)
               	movups	%xmm0, 80(%r15)
               	movq	%rax, 96(%r15)
               	movq	$1, 104(%r15)
               	movups	%xmm0, 112(%r15)
               	movl	$1065353216, 128(%r15)  # imm = 0x3F800000
               	movups	%xmm0, 136(%r15)
               	movups	%xmm0, 152(%r15)
               	xorps	%xmm0, %xmm0
               	movq	$0, 168(%r15)
               	leaq	175255(%rip), %rax      # 0x4634d0 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 176(%r15)
               	leaq	184(%r15), %rax
               	movq	%rax, 192(%r15)
               	movq	%rax, 184(%r15)
               	leaq	208(%r15), %rax
               	movq	%rax, 216(%r15)
               	movq	%rax, 208(%r15)
               	leaq	175255(%rip), %rax      # 0x463508 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 232(%r15)
               	leaq	240(%r15), %rax
               	movq	%rax, 248(%r15)
               	movq	%rax, 240(%r15)
               	leaq	264(%r15), %rax
               	movq	%rax, 272(%r15)
               	movq	%rax, 264(%r15)
               	leaq	296(%r15), %rdi
               	movups	%xmm0, 280(%r15)
               	leaq	175240(%rip), %rsi      # 0x463540 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	%rbp, %rdx
               	callq	0x427cc0 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 304(%r15)
               	movq	$0, 320(%r15)
               	movl	$1, 328(%r15)
               	movq	%rbp, 336(%r15)
               	movb	$0, 344(%r15)
               	movups	%xmm0, 352(%r15)
               	cmpq	$0, 165560(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x438916 <Kotlin_initRuntimeIfNeeded+0x276>
               	leaq	174935(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439367 <Kotlin_initRuntimeIfNeeded+0xcc7>
               	leaq	352(%r15), %rax
               	movq	174892(%rip), %rcx      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x438932 <Kotlin_initRuntimeIfNeeded+0x292>
               	movq	%r15, 360(%rcx)
               	jmp	0x43893b <Kotlin_initRuntimeIfNeeded+0x29b>
               	movq	%r15, 174879(%rip)      # 0x463458 <kotlin::mm::GlobalData::instance_+0x20>
               	xorl	%ecx, %ecx
               	movq	$0, 174858(%rip)        # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	(%rax), %rbx
               	movq	%rcx, (%rax)
               	testq	%rbx, %rbx
               	je	0x438989 <Kotlin_initRuntimeIfNeeded+0x2e9>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x43896d <Kotlin_initRuntimeIfNeeded+0x2cd>
               	movq	%rbp, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424150 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	174784(%rip), %rbx      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	%r15, 174777(%rip)      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rbx, %rbx
               	je	0x4389d4 <Kotlin_initRuntimeIfNeeded+0x334>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x4389b8 <Kotlin_initRuntimeIfNeeded+0x318>
               	movq	%rbp, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424150 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, 165340(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x4389ea <Kotlin_initRuntimeIfNeeded+0x34a>
               	leaq	174715(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	%r13b, 15(%rsp)
               	leaq	328(%r15), %rbx
               	movq	%r12, %rax
               	movq	%r15, -64(%r12)
               	movq	%r15, (%r14)
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%r15)
               	movl	%eax, 36(%rsp)
               	cmpl	$1, %eax
               	jne	0x438a28 <Kotlin_initRuntimeIfNeeded+0x388>
               	movb	178812(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438a28 <Kotlin_initRuntimeIfNeeded+0x388>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 48(%rsp)
               	movq	(%r14), %rbx
               	movq	%r12, %rax
               	movq	-40(%r12), %r13
               	movq	%rbx, %rbp
               	testq	%r13, %r13
               	movq	%r12, 56(%rsp)
               	movq	%r14, 40(%rsp)
               	jne	0x438f46 <Kotlin_initRuntimeIfNeeded+0x8a6>
               	movq	%rbx, 88(%rsp)
               	callq	0x4383a0 <(anonymous namespace)::theState()>
               	movq	%rax, %rdi
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rax, 16(%rsp)
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbx, %rbx
               	je	0x438aa6 <Kotlin_initRuntimeIfNeeded+0x406>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438aa6 <Kotlin_initRuntimeIfNeeded+0x406>
               	cmpl	$1, %eax
               	jne	0x438aa6 <Kotlin_initRuntimeIfNeeded+0x406>
               	movb	178686(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438aa6 <Kotlin_initRuntimeIfNeeded+0x406>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$1, %edi
               	movl	$256, %esi              # imm = 0x100
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438bfc <Kotlin_initRuntimeIfNeeded+0x55c>
               	movq	%rax, %r13
               	movq	16(%rsp), %rdx
               	movl	256(%rdx), %eax
               	leal	1(%rax), %ecx
               	movl	%ecx, 256(%rdx)
               	movl	%eax, (%r13)
               	movl	$1, 4(%r13)
               	movq	$8, 16(%r13)
               	movl	$8, %edi
               	movl	$8, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 8(%r13)
               	movq	16(%r13), %rax
               	leaq	-4(,%rax,4), %rbp
               	andq	$-8, %rbp
               	leaq	(%rbx,%rbp), %r14
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, (%rbx,%rbp)
               	movq	%r14, 48(%r13)
               	movq	(%rbx,%rbp), %rax
               	movq	%rax, 32(%r13)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 40(%r13)
               	movq	%r14, 80(%r13)
               	movq	%rax, 64(%r13)
               	movq	%rcx, 72(%r13)
               	movq	%rax, 24(%r13)
               	movq	%rax, 56(%r13)
               	leaq	96(%r13), %rax
               	movq	%rax, 112(%r13)
               	movq	%rax, 120(%r13)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 240(%r13)
               	movups	%xmm0, 128(%r13)
               	movq	-64(%r12), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r13), %rdi
               	xorl	%esi, %esi
               	callq	0x413980 <pthread_mutex_init@plt>
               	movq	%r13, %rdi
               	addq	$184, %rdi
               	xorl	%esi, %esi
               	callq	0x413990 <pthread_cond_init@plt>
               	testq	%rbp, %rbp
               	je	0x438bce <Kotlin_initRuntimeIfNeeded+0x52e>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x438bce <Kotlin_initRuntimeIfNeeded+0x52e>
               	cmpl	$1, %eax
               	jne	0x438bce <Kotlin_initRuntimeIfNeeded+0x52e>
               	movb	178390(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438bce <Kotlin_initRuntimeIfNeeded+0x52e>
               	movq	%rbp, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	(%r13), %r8d
               	movslq	%r8d, %rax
               	movq	16(%rsp), %r9
               	movq	152(%r9), %rsi
               	movq	%rax, %rcx
               	orq	%rsi, %rcx
               	shrq	$32, %rcx
               	movq	%rax, 80(%rsp)
               	je	0x438c57 <Kotlin_initRuntimeIfNeeded+0x5b7>
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rbx
               	jmp	0x438c60 <Kotlin_initRuntimeIfNeeded+0x5c0>
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	16(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438c4f <Kotlin_initRuntimeIfNeeded+0x5af>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	xorl	%r13d, %r13d
               	testl	%ebp, %ebp
               	jne	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	cmpl	$1, %eax
               	jne	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	movb	178261(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438c4f <Kotlin_initRuntimeIfNeeded+0x5af>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%r13d, %r13d
               	jmp	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ebx
               	movq	40(%rsp), %r14
               	movq	144(%r9), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x438ccc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movq	(%rax), %rbp
               	cmpl	8(%rbp), %r8d
               	jne	0x438c99 <Kotlin_initRuntimeIfNeeded+0x5f9>
               	testq	%rbp, %rbp
               	jne	0x438ee9 <Kotlin_initRuntimeIfNeeded+0x849>
               	jmp	0x438ccc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	cmpq	%rbx, %rdx
               	jne	0x438ccc <Kotlin_initRuntimeIfNeeded+0x62c>
               	cmpl	%ecx, %r8d
               	je	0x438cc3 <Kotlin_initRuntimeIfNeeded+0x623>
               	movq	%rbp, %rdi
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438ccc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movl	8(%rbp), %ecx
               	movslq	%ecx, %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x438c89 <Kotlin_initRuntimeIfNeeded+0x5e9>
               	xorl	%edx, %edx
               	divq	%rsi
               	cmpq	%rbx, %rdx
               	je	0x438c94 <Kotlin_initRuntimeIfNeeded+0x5f4>
               	jmp	0x438ccc <Kotlin_initRuntimeIfNeeded+0x62c>
               	testq	%rdi, %rdi
               	jne	0x438ee9 <Kotlin_initRuntimeIfNeeded+0x849>
               	movq	%rbx, 72(%rsp)
               	movl	$1, %edi
               	movl	$24, %esi
               	movl	%r8d, %r14d
               	movq	%r9, %rbx
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbp
               	movl	%r14d, 32(%rsp)
               	movl	%r14d, 8(%rax)
               	leaq	176(%rbx), %rdi
               	movq	152(%rbx), %rsi
               	movq	168(%rbx), %rdx
               	movl	$1, %ecx
               	callq	0x43d24a <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x438d2b <Kotlin_initRuntimeIfNeeded+0x68b>
               	movq	16(%rsp), %r9
               	movq	144(%r9), %r12
               	movq	72(%rsp), %rbx
               	jmp	0x438e59 <Kotlin_initRuntimeIfNeeded+0x7b9>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	movq	%rbp, 64(%rsp)
               	je	0x4392f7 <Kotlin_initRuntimeIfNeeded+0xc57>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r12
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	16(%rsp), %rax
               	movq	160(%rax), %rbp
               	movq	$0, 160(%rax)
               	testq	%rbp, %rbp
               	movl	32(%rsp), %r8d
               	je	0x438df9 <Kotlin_initRuntimeIfNeeded+0x759>
               	movq	16(%rsp), %rax
               	leaq	160(%rax), %rdi
               	xorl	%ebx, %ebx
               	jmp	0x438db6 <Kotlin_initRuntimeIfNeeded+0x716>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%r12,%rdx,8), %rax
               	testq	%rax, %rax
               	je	0x438de0 <Kotlin_initRuntimeIfNeeded+0x740>
               	movq	(%rax), %rax
               	movq	%rax, (%rsi)
               	movq	(%r12,%rdx,8), %rax
               	movq	%rsi, (%rax)
               	movq	%rbx, %rdx
               	movq	%rdx, %rbx
               	testq	%rbp, %rbp
               	je	0x438df9 <Kotlin_initRuntimeIfNeeded+0x759>
               	movq	%rbp, %rsi
               	movq	(%rbp), %rbp
               	movl	8(%rsi), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x438d90 <Kotlin_initRuntimeIfNeeded+0x6f0>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%r12,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x438d9e <Kotlin_initRuntimeIfNeeded+0x6fe>
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	movq	%rsi, (%rdi)
               	movq	%rdi, (%r12,%rdx,8)
               	cmpq	$0, (%rsi)
               	je	0x438dae <Kotlin_initRuntimeIfNeeded+0x70e>
               	movq	%rsi, (%r12,%rbx,8)
               	jmp	0x438dae <Kotlin_initRuntimeIfNeeded+0x70e>
               	movq	16(%rsp), %r9
               	movq	144(%r9), %rdi
               	leaq	192(%r9), %rax
               	cmpq	%rdi, %rax
               	movq	64(%rsp), %rbp
               	je	0x438e26 <Kotlin_initRuntimeIfNeeded+0x786>
               	movq	%r9, %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %r9
               	movl	32(%rsp), %r8d
               	movq	%r14, 152(%r9)
               	movq	%r12, 144(%r9)
               	movq	80(%rsp), %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x438e4f <Kotlin_initRuntimeIfNeeded+0x7af>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	jmp	0x438e59 <Kotlin_initRuntimeIfNeeded+0x7b9>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%r12,%rbx,8), %rax
               	testq	%rax, %rax
               	movq	40(%rsp), %r14
               	je	0x438e77 <Kotlin_initRuntimeIfNeeded+0x7d7>
               	movq	(%rax), %rax
               	movq	%rax, (%rbp)
               	movq	(%r12,%rbx,8), %rax
               	movq	%rbp, (%rax)
               	jmp	0x438ed2 <Kotlin_initRuntimeIfNeeded+0x832>
               	movq	%r9, %rsi
               	addq	$160, %rsi
               	movq	160(%r9), %rax
               	movq	%rax, (%rbp)
               	movq	%rbp, 160(%r9)
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	je	0x438ece <Kotlin_initRuntimeIfNeeded+0x82e>
               	movq	152(%r9), %rdi
               	movl	8(%rax), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x438ebf <Kotlin_initRuntimeIfNeeded+0x81f>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x438ec3 <Kotlin_initRuntimeIfNeeded+0x823>
               	xorl	%edx, %edx
               	divl	%edi
               	movq	%rbp, (%r12,%rdx,8)
               	movq	144(%r9), %r12
               	movq	%rsi, (%r12,%rbx,8)
               	movq	168(%r9), %rax
               	addq	$1, %rax
               	movq	%rax, 168(%r9)
               	movq	56(%rsp), %r12
               	movq	%r13, 16(%rbp)
               	movq	%r9, %rdi
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	cmpl	$1, %eax
               	jne	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	movb	177521(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438f33 <Kotlin_initRuntimeIfNeeded+0x893>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r12, %rax
               	movq	%r13, -40(%r12)
               	movq	(%r14), %rbp
               	movq	88(%rsp), %rbx
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, 240(%r13)
               	movq	%rbx, 248(%r13)
               	movq	%r13, 8(%r14)
               	movq	277668(%rip), %rbx      # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	testq	%rbx, %rbx
               	je	0x438f83 <Kotlin_initRuntimeIfNeeded+0x8e3>
               	nopl	(%rax)
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	callq	*(%rbx)
               	movq	8(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x438f70 <Kotlin_initRuntimeIfNeeded+0x8d0>
               	movq	(%r14), %rbp
               	movslq	156(%rbp), %rdx
               	leaq	80(%rbp), %r12
               	movq	80(%rbp), %r13
               	movq	72(%rbp), %rax
               	movq	%r13, %rbx
               	subq	%rax, %rbx
               	sarq	$3, %rbx
               	cmpq	%rdx, %rbx
               	jae	0x439012 <Kotlin_initRuntimeIfNeeded+0x972>
               	movq	%rdx, %r14
               	subq	%rbx, %r14
               	je	0x439109 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	88(%rbp), %rax
               	subq	%r13, %rax
               	sarq	$3, %rax
               	cmpq	%r14, %rax
               	jae	0x439026 <Kotlin_initRuntimeIfNeeded+0x986>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%rbx, %rcx
               	xorq	%rax, %rcx
               	cmpq	%r14, %rcx
               	jb	0x43936e <Kotlin_initRuntimeIfNeeded+0xcce>
               	movq	%rdx, 16(%rsp)
               	cmpq	%r14, %rbx
               	movq	%rbx, %rcx
               	cmovbq	%r14, %rcx
               	leaq	(%rcx,%rbx), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%rbx, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	je	0x43904c <Kotlin_initRuntimeIfNeeded+0x9ac>
               	movl	$8, %esi
               	movq	%rdi, %r12
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x439052 <Kotlin_initRuntimeIfNeeded+0x9b2>
               	jbe	0x439109 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(%rax,%rdx,8), %rax
               	cmpq	%r13, %rax
               	jne	0x439043 <Kotlin_initRuntimeIfNeeded+0x9a3>
               	jmp	0x439109 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(,%r14,8), %rdx
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	(,%r14,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%r12)
               	jmp	0x439109 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	%rdi, %r12
               	xorl	%r13d, %r13d
               	leaq	(,%rbx,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %r14
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x413710 <memset@plt>
               	movq	72(%rbp), %rdi
               	movq	80(%rbp), %rax
               	cmpq	%rax, %rdi
               	je	0x4390d5 <Kotlin_initRuntimeIfNeeded+0xa35>
               	movq	%rax, %rcx
               	subq	%rdi, %rcx
               	addq	$-8, %rcx
               	cmpq	$24, %rcx
               	jb	0x4390b1 <Kotlin_initRuntimeIfNeeded+0xa11>
               	shrq	$3, %rcx
               	addq	$1, %rcx
               	leaq	(%rdi,%rcx,8), %rdx
               	cmpq	%rdx, %r13
               	jae	0x43921d <Kotlin_initRuntimeIfNeeded+0xb7d>
               	leaq	(,%rcx,8), %rdx
               	addq	%r13, %rdx
               	cmpq	%rdx, %rdi
               	jae	0x43921d <Kotlin_initRuntimeIfNeeded+0xb7d>
               	movq	%r13, %rcx
               	subq	%rdi, %rax
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movq	(%rdi,%rdx), %rsi
               	movq	%rsi, (%rcx,%rdx)
               	addq	$8, %rdx
               	cmpq	%rdx, %rax
               	jne	0x4390c0 <Kotlin_initRuntimeIfNeeded+0xa20>
               	movq	72(%rbp), %rdi
               	leaq	88(%rbp), %rbx
               	testq	%rdi, %rdi
               	je	0x4390e3 <Kotlin_initRuntimeIfNeeded+0xa43>
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 72(%rbp)
               	movq	16(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%rbx)
               	movl	$1, 152(%rbp)
               	cmpb	$0, 15(%rsp)
               	movq	56(%rsp), %r12
               	movq	40(%rsp), %r14
               	movq	48(%rsp), %r13
               	je	0x439154 <Kotlin_initRuntimeIfNeeded+0xab4>
               	movq	277204(%rip), %rbp      # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x439184 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r14), %rbx
               	movl	$1, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x439140 <Kotlin_initRuntimeIfNeeded+0xaa0>
               	movq	277165(%rip), %rbp      # 0x47cc08 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x439184 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r14), %rbx
               	nopw	(%rax,%rax)
               	movl	$2, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x439170 <Kotlin_initRuntimeIfNeeded+0xad0>
               	movl	$1, 16(%r14)
               	testq	%r15, %r15
               	je	0x4391b6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movl	36(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ecx, %ecx
               	jne	0x4391b6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	cmpl	$1, %eax
               	jne	0x4391b6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movb	176878(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4391b6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movq	%r13, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-48(%r12), %rbp
               	leaq	277019(%rip), %rdi      # 0x47cbe0 <konan::terminationKeyOnceControl>
               	leaq	2884(%rip), %rsi        # 0x439d10 <konan::onThreadExitInit()>
               	callq	0x4139c0 <pthread_once@plt>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	leaq	598(%rip), %rax         # 0x439440 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>
               	movq	%rax, 8(%rbx)
               	movq	%rbp, 16(%rbx)
               	movl	276964(%rip), %edi      # 0x47cbdc <konan::terminationKey>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movq	%rax, (%rbx)
               	movl	276950(%rip), %edi      # 0x47cbdc <konan::terminationKey>
               	movq	%rbx, %rsi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rcx, %r8
               	andq	$-4, %r8
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x439242 <Kotlin_initRuntimeIfNeeded+0xba2>
               	xorl	%edx, %edx
               	jmp	0x4392ac <Kotlin_initRuntimeIfNeeded+0xc0c>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edx, %edx
               	movups	(%rdi,%rdx,8), %xmm0
               	movups	16(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, (%r13,%rdx,8)
               	movups	%xmm1, 16(%r13,%rdx,8)
               	movups	32(%rdi,%rdx,8), %xmm0
               	movups	48(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 32(%r13,%rdx,8)
               	movups	%xmm1, 48(%r13,%rdx,8)
               	movups	64(%rdi,%rdx,8), %xmm0
               	movups	80(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 64(%r13,%rdx,8)
               	movups	%xmm1, 80(%r13,%rdx,8)
               	movups	96(%rdi,%rdx,8), %xmm0
               	movups	112(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 96(%r13,%rdx,8)
               	movups	%xmm1, 112(%r13,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rsi
               	jne	0x43924b <Kotlin_initRuntimeIfNeeded+0xbab>
               	testq	%rbx, %rbx
               	je	0x4392da <Kotlin_initRuntimeIfNeeded+0xc3a>
               	leaq	16(,%rdx,8), %rdx
               	negq	%rbx
               	movups	-16(%rdi,%rdx), %xmm0
               	movups	(%rdi,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rbx
               	jne	0x4392bc <Kotlin_initRuntimeIfNeeded+0xc1c>
               	cmpq	%r8, %rcx
               	je	0x4390d1 <Kotlin_initRuntimeIfNeeded+0xa31>
               	leaq	(,%r8,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rdi,%r8,8), %rdi
               	jmp	0x4390b4 <Kotlin_initRuntimeIfNeeded+0xa14>
               	movq	16(%rsp), %rax
               	leaq	192(%rax), %r12
               	movq	$0, 192(%rax)
               	jmp	0x438d5f <Kotlin_initRuntimeIfNeeded+0x6bf>
               	leaq	276734(%rip), %rdi      # 0x47cc18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c311 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x4386d9 <Kotlin_initRuntimeIfNeeded+0x39>
               	leaq	3346(%rip), %rdi        # 0x43a040 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43c44a <std::set_terminate(void (*)())>
               	movq	%rax, 276710(%rip)      # 0x47cc20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	276695(%rip), %rdi      # 0x47cc18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c400 <__cxa_guard_release>
               	jmp	0x4386d9 <Kotlin_initRuntimeIfNeeded+0x39>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	leaq	50628(%rip), %rdx       # 0x445922 <typeinfo name for kotlin::gc::GCSchedulerData+0x1969>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435a50 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	leaq	50579(%rip), %rdi       # 0x445908 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4363a0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	testq	%r15, %r15
               	je	0x439392 <Kotlin_initRuntimeIfNeeded+0xcf2>
               	movq	%r15, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	-64(%r12), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r14)
               	movq	16(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r14, %r14
               	je	0x4393fd <Kotlin_initRuntimeIfNeeded+0xd5d>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x4393fd <Kotlin_initRuntimeIfNeeded+0xd5d>
               	cmpl	$1, %eax
               	jne	0x4393fd <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movb	176317(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4393fd <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x4393fd <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movq	%rax, %rbp
               	jmp	0x439402 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	jmp	0x4393fa <Kotlin_initRuntimeIfNeeded+0xd5a>
               	jmp	0x4393fa <Kotlin_initRuntimeIfNeeded+0xd5a>
               	movq	%rax, %rbp
               	testq	%r15, %r15
               	jne	0x43940a <Kotlin_initRuntimeIfNeeded+0xd6a>
               	movq	%rbp, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	movl	36(%rsp), %edx
               	movl	%edx, %eax
               	movq	48(%rsp), %rcx
               	xchgl	%eax, (%rcx)
               	testl	%edx, %edx
               	jne	0x439402 <Kotlin_initRuntimeIfNeeded+0xd62>
               	cmpl	$1, %eax
               	jne	0x439402 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movb	176242(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439402 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movq	48(%rsp), %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x439477 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	movb	176177(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439477 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$2, 16(%rbx)
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	%rbx, -48(%rax)
               	lock
               	addl	$-1, 276328(%rip)       # 0x47cc04 <(anonymous namespace)::aliveRuntimesCount>
               	movq	(%rbx), %rax
               	movq	72(%rax), %rcx
               	cmpq	%rcx, 80(%rax)
               	je	0x4394ad <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6d>
               	movq	%rcx, 80(%rax)
               	movl	$2, 152(%rax)
               	movq	%rbx, 16(%rsp)
               	movq	8(%rbx), %rbx
               	movl	(%rbx), %eax
               	movl	%eax, 12(%rsp)
               	movq	$0, -40(%r12)
               	callq	0x4383a0 <(anonymous namespace)::theState()>
               	movq	%rax, %r13
               	movq	%rbx, (%rsp)
               	movq	248(%rbx), %r15
               	leaq	328(%r15), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439525 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x439525 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	cmpl	$1, %eax
               	jne	0x439525 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movb	175999(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439525 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movl	(%rax), %esi
               	movslq	%esi, %rax
               	movq	152(%r13), %rcx
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x43955e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x11e>
               	xorl	%edx, %edx
               	divq	%rcx
               	movq	%rdx, %r9
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	jne	0x43957b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x13b>
               	jmp	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %r9d
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	je	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movq	(%r10), %rdi
               	cmpl	8(%rdi), %esi
               	jne	0x439590 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rdi, %rdi
               	jne	0x4395dc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19c>
               	jmp	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	nopl	(%rax)
               	movq	%rdi, %rbp
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	8(%rdi), %ebx
               	movslq	%ebx, %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x4395c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x180>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	je	0x4395cf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x18f>
               	jmp	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	jne	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	cmpl	%ebx, %esi
               	jne	0x439590 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rbp, %rbp
               	je	0x4396a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movq	%r10, %rax
               	nop
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rdi, %rax
               	jne	0x4395e0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1a0>
               	cmpq	%rsi, %r10
               	je	0x43961d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1dd>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x439686 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movl	8(%rax), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x439646 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x206>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43964f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20f>
               	jmp	0x439686 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43966d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x22d>
               	movl	8(%rbx), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x439655 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43965e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x21e>
               	jmp	0x439686 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x439686 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x439686 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x439686 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	%r10, (%r8,%rdx,8)
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	movq	%r13, %rax
               	addq	$160, %rax
               	cmpq	%r10, %rax
               	jne	0x43967e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x23e>
               	movq	%rbx, (%r10)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	callq	0x4136d0 <free@plt>
               	movq	168(%r13), %rax
               	addq	$-1, %rax
               	movq	%rax, 168(%r13)
               	testq	%r15, %r15
               	movq	%r12, 24(%rsp)
               	je	0x4396bf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x27f>
               	movl	$1, %ebx
               	xchgl	%ebx, (%r14)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4396e0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2a0>
               	movq	-64(%r12), %r15
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r15, %r15
               	je	0x43970b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	movl	%ebx, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebx, %ebx
               	jne	0x43970b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	cmpl	$1, %eax
               	jne	0x43970b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	movb	175520(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43970b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movq	24(%rax), %rbp
               	movq	56(%rax), %r13
               	cmpq	%rbp, %r13
               	je	0x439805 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movq	(%rsp), %rax
               	movq	48(%rax), %r12
               	movq	40(%rax), %r14
               	leaq	39501(%rip), %rbx       # 0x443180 <_IO_stdin_used+0x240>
               	jmp	0x439765 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	nopl	(%rax,%rax)
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rsi
               	movq	%rax, %rdi
               	callq	0x439d90 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	addq	$40, %rbp
               	cmpq	%r14, %rbp
               	je	0x4397c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
               	cmpq	%rbp, %r13
               	je	0x439805 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movl	(%rbp), %ecx
               	cmpl	$3, %ecx
               	ja	0x439753 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	8(%rbp), %rax
               	movslq	(%rbx,%rcx,4), %rcx
               	addq	%rbx, %rcx
               	jmpq	*%rcx
               	movq	%r12, 32(%rsp)
               	movq	%rbx, %r15
               	movq	24(%rbp), %rbx
               	movq	16(%rbp), %rsi
               	testq	%rsi, %rsi
               	movq	(%rsp), %r12
               	je	0x4397a4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x364>
               	movq	248(%r12), %rdi
               	addq	$8, %rdi
               	callq	0x4246a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r12), %rsi
               	movq	%rbx, %rdi
               	callq	0x439d90 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	movq	%r15, %rbx
               	movq	32(%rsp), %r12
               	jmp	0x439753 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	nop
               	movq	8(%r12), %rbp
               	addq	$8, %r12
               	leaq	480(%rbp), %r14
               	cmpq	%rbp, %r13
               	jne	0x439765 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	jmp	0x439805 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	nop
               	testq	%rax, %rax
               	je	0x439753 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rdi
               	addq	$8, %rdi
               	movq	%rax, %rsi
               	callq	0x4246a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439753 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %r14
               	movq	112(%r14), %rbx
               	leaq	96(%r14), %rbp
               	cmpq	%rbp, %rbx
               	movl	12(%rsp), %r13d
               	movq	16(%rsp), %r15
               	jne	0x439a24 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5e4>
               	movq	136(%r14), %rsi
               	testq	%rsi, %rsi
               	je	0x439840 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x400>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4246a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	144(%r14), %rdi
               	callq	0x4139a0 <pthread_mutex_destroy@plt>
               	leaq	184(%r14), %rdi
               	callq	0x4139b0 <pthread_cond_destroy@plt>
               	testq	%rbx, %rbx
               	movq	24(%rsp), %r12
               	je	0x43989a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x43989a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	cmpl	$1, %eax
               	jne	0x43989a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	movb	175114(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43989a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	104(%r14), %rdi
               	callq	0x43a000 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	8(%r14), %rdi
               	testq	%rdi, %rdi
               	je	0x4398eb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4ab>
               	movq	48(%r14), %rbx
               	movq	80(%r14), %rbp
               	leaq	8(%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x4398e6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4a6>
               	addq	$-8, %rbx
               	nopl	(%rax)
               	movq	8(%rbx), %rdi
               	addq	$8, %rbx
               	callq	0x4136d0 <free@plt>
               	cmpq	%rbp, %rbx
               	jb	0x4398d0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x490>
               	movq	8(%r14), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	(%r15), %rax
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	(%r15), %rbx
               	movl	275154(%rip), %edi      # 0x47cbdc <konan::terminationKey>
               	testl	%edi, %edi
               	je	0x439918 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4d8>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	testq	%rax, %rax
               	je	0x439927 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4e7>
               	movq	%r12, %rax
               	movq	$0, -64(%r12)
               	cmpq	$0, 161417(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x439945 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x505>
               	leaq	170792(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439cfa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x8ba>
               	movq	170756(%rip), %rax      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	%rbx, 170757(%rip)      # 0x463458 <kotlin::mm::GlobalData::instance_+0x20>
               	je	0x439a3f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5ff>
               	cmpq	%rbx, %rax
               	je	0x439a56 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x616>
               	movq	360(%rbx), %rbp
               	movq	352(%rbp), %r14
               	movq	$0, 352(%rbp)
               	movq	352(%rbx), %rax
               	movq	$0, 352(%rbx)
               	movq	352(%rbp), %rbx
               	movq	%rax, 352(%rbp)
               	testq	%rbx, %rbx
               	je	0x4399e4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5a4>
               	movq	352(%rbx), %r15
               	testq	%r15, %r15
               	je	0x4399bc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x57c>
               	movq	%r15, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424150 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	352(%rbp), %rax
               	movq	16(%rsp), %r15
               	testq	%rax, %rax
               	je	0x4399f0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5b0>
               	movq	%rbp, 360(%rax)
               	testq	%r14, %r14
               	je	0x439ac3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	movq	%r14, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	jmp	0x439ac3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	nop
               	movq	%rbx, %rdi
               	callq	0x43c831 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
               	movq	%rax, %rbx
               	cmpq	%rbp, %rax
               	je	0x439824 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3e4>
               	movq	40(%rbx), %rsi
               	testq	%rsi, %rsi
               	je	0x439a10 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d0>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4246a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439a10 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d0>
               	movq	360(%rbx), %rcx
               	movq	%rcx, 170507(%rip)      # 0x463458 <kotlin::mm::GlobalData::instance_+0x20>
               	cmpq	%rbx, %rax
               	jne	0x439962 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x522>
               	movq	352(%rbx), %rcx
               	movq	$0, 352(%rbx)
               	movq	%rcx, 170465(%rip)      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rax, %rax
               	je	0x439ab3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x673>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x439a90 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x650>
               	movq	%rbp, %rdi
               	callq	0x424100 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424150 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	170397(%rip), %rcx      # 0x463450 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x439ac3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	movq	$0, 360(%rcx)
               	movslq	%r13d, %rbp
               	cmpq	$0, 161002(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x439adc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x69c>
               	leaq	170377(%rip), %rdi      # 0x463460 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	callq	0x4383a0 <(anonymous namespace)::theState()>
               	movq	%rax, %r14
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	movq	208(%r14), %rdi
               	movq	%rbp, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x439b27 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6e7>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	200(%r14), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x439b44 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x704>
               	jmp	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	200(%r14), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movq	(%rax), %rbx
               	cmpl	%r13d, 8(%rbx)
               	jne	0x439b60 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
               	testq	%rbx, %rbx
               	jne	0x439bad <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x76d>
               	jmp	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	nop
               	movq	%rbx, %rbp
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	8(%rbx), %esi
               	movslq	%esi, %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439b90 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x750>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x439b9f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x75f>
               	jmp	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	cmpl	%r13d, %esi
               	jne	0x439b60 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
               	testq	%rbp, %rbp
               	je	0x439cc7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movq	16(%rbx), %rdi
               	callq	0x4139e0 <pthread_detach@plt>
               	movq	208(%r14), %rdi
               	movl	8(%rbx), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439bdc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x79c>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r9
               	jmp	0x439be3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7a3>
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r9d
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rbx, %rax
               	jne	0x439c00 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7c0>
               	cmpq	%rsi, %rcx
               	je	0x439c3d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7fd>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x439ca7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movl	8(%rax), %eax
               	movslq	%eax, %rdx
               	movq	%rdx, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x439c67 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x827>
               	movq	%rdx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x439c70 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x830>
               	jmp	0x439ca7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	(%rbx), %r10
               	testq	%r10, %r10
               	je	0x439c8e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x84e>
               	movl	8(%r10), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439c76 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x836>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x439c7f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x83f>
               	jmp	0x439ca7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x439ca7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x439ca7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x439ca7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	%rcx, (%r8,%rdx,8)
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%r14, %rax
               	addq	$216, %rax
               	cmpq	%rcx, %rax
               	jne	0x439c9f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x85f>
               	movq	%r10, (%rcx)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rbx), %rax
               	movq	%rax, (%rsi)
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	224(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 224(%r14)
               	movq	%r14, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	$0, -48(%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	48204(%rip), %rdx       # 0x44593d <typeinfo name for kotlin::gc::GCSchedulerData+0x1984>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435a50 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax)

<konan::onThreadExitInit()>:
               	pushq	%rax
               	leaq	274168(%rip), %rdi      # 0x47cc10 <konan::dummyKey>
               	xorl	%esi, %esi
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	274102(%rip), %rdi      # 0x47cbdc <konan::terminationKey>
               	leaq	19(%rip), %rsi          # 0x439d40 <konan::onThreadExitCallback(void*)>
               	popq	%rax
               	jmp	0x4137e0 <pthread_key_create@plt>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitCallback(void*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	274063(%rip), %edi      # 0x47cbdc <konan::terminationKey>
               	xorl	%esi, %esi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	testq	%rbx, %rbx
               	je	0x439d7a <konan::onThreadExitCallback(void*)+0x3a>
               	nopl	(%rax)
               	movq	16(%rbx), %rdi
               	callq	*8(%rbx)
               	movq	(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x439d60 <konan::onThreadExitCallback(void*)+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	leaq	328(%rsi), %r14
               	movl	$1, %ebp
               	movl	$1, %eax
               	xchgl	%eax, 328(%rsi)
               	movl	%eax, 4(%rsp)
               	leaq	16(%rdi), %r12
               	movl	$1, %r13d
               	xchgl	%r13d, 328(%rsi)
               	movq	%r12, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439e33 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xa3>
               	movl	%r13d, %eax
               	xchgl	%eax, (%r14)
               	testl	%r13d, %r13d
               	jne	0x439dfc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	cmpl	$1, %eax
               	jne	0x439dfc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movb	173736(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439dfc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x439e86 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xf6>
               	jmp	0x439e9d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x439f0f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x17f>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x439e9d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	cmpl	$1, %eax
               	jne	0x439e9d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movb	173575(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439e9d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x4383a0 <(anonymous namespace)::theState()>
               	movq	%rax, %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439f2b <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x19b>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x439ede <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	cmpl	$1, %eax
               	jne	0x439ede <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movb	173510(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439ede <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	264(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 264(%rbx)
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %r12
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	je	0x439f78 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1e8>
               	jmp	0x439f8f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	callq	0x4383a0 <(anonymous namespace)::theState()>
               	movq	%rax, %rbx
               	movl	$1, %eax
               	xchgl	%eax, 328
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	movl	264(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 264(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r12)
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r12, %r12
               	je	0x439fcb <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x23b>
               	addq	$328, %r12              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x439f8f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	cmpl	$1, %eax
               	jne	0x439f8f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	movb	173333(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439f8f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	movq	%r12, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$40, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	testq	%r15, %r15
               	je	0x439fbc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	movl	4(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ecx, %ecx
               	jne	0x439fbc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	cmpl	$1, %eax
               	jne	0x439fbc <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	movb	173280(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x439fe5 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x255>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$40, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4139f0 <pthread_cond_broadcast@plt>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax,%rax)

<std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x43a02d <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x2d>
               	movq	%rdi, %rbx
               	movq	24(%rbx), %rdi
               	callq	0x43a000 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	16(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x43a010 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x10>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::kotlinHandler()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rdi
               	callq	0x43be6d <std::current_exception()>
               	cmpq	$0, 8(%rsp)
               	jne	0x43a087 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x47>
               	leaq	8(%rsp), %rdi
               	callq	0x43bdea <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x43a0a1 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x61>
               	xorl	%ebx, %ebx
               	jmp	0x43a0a7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x67>
               	leaq	16(%rsp), %rbx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43bdac <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbx, %rdi
               	callq	0x43bec2 <std::rethrow_exception(std::__exception_ptr::exception_ptr)>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43a340 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a0de <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a0de <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	cmpl	$1, %eax
               	jne	0x43a0de <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movb	173005(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a0de <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	movq	%rdx, %r15
               	movq	%rax, %rbx
               	leaq	16(%rsp), %rdi
               	callq	0x43bdea <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%rbx, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	cmpl	$2, %r15d
               	jne	0x43a15e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x11e>
               	movq	%rax, %r14
               	callq	0x4386a0 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	xorl	%ebx, %ebx
               	xchgl	%ebx, 328(%r15)
               	addq	$328, %r15              # imm = 0x148
               	cmpl	$1, %ebx
               	jne	0x43a146 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movb	172894(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a146 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43a200 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43a330 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x43a17f <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x13f>
               	xorl	%ebx, %ebx
               	jmp	0x43a185 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x145>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43a340 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	172783(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	jmp	0x43a1d7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x197>
               	movq	%rax, %r14
               	movl	%ebx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebx, %ebx
               	jne	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	172744(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a1dc <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x43c175 <__cxa_end_catch>
               	leaq	8(%rsp), %rdi
               	callq	0x43bdea <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::processUnhandledException(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	172604(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a265 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x65>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	167861(%rip), %eax      # 0x463220 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	cmpl	$2, %eax
               	je	0x43a283 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x83>
               	leaq	167849(%rip), %rdi      # 0x463220 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	leaq	-130958(%rip), %rsi     # 0x41a2f0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>
               	callq	0x43a550 <CallInitGlobalPossiblyLock>
               	movq	167790(%rip), %rax      # 0x4631f8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	%rdi, 32(%rsp)
               	testq	%rdi, %rdi
               	je	0x43a2e3 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0xe3>
               	leaq	40(%rsp), %rdx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$44, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rbx, %rdi
               	callq	0x43a730 <ThrowException>
               	movq	%rax, %rbx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$2, %edx
               	jne	0x43a325 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x125>
               	movq	%rbx, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rdi
               	callq	0x43a330 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%rax, %rbx
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x423250 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>:
               	pushq	%rax
               	callq	0x43a470 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()>:
               	pushq	%rax
               	callq	0x43a350 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>
               	nopw	%cs:(%rax,%rax)

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 167453(%rip)      # 0x463184 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43a36e <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1e>
               	callq	0x43a420 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
               	movq	$0, 16(%rsp)
               	movl	$1, 24(%rsp)
               	movb	$0, 28(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43a3a0 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x50>
               	xorl	%ebx, %ebx
               	jmp	0x43a3b9 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x69>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rbx, 16(%rsp)
               	movl	%ebp, 24(%rsp)
               	movb	$1, 28(%rsp)
               	movl	167361(%rip), %edi      # 0x463180 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a00 <sleep@plt>
               	leaq	8(%rsp), %rdi
               	callq	0x436420 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a10 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a40a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a40a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	cmpl	$1, %eax
               	jne	0x43a40a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	movb	172193(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a40a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>:
               	pushq	%rax
               	callq	0x43a430 <(anonymous namespace)::TerminateHandler::instance()>
               	callq	*272372(%rip)           # 0x47cc20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	nopl	(%rax)

<(anonymous namespace)::TerminateHandler::instance()>:
               	pushq	%rax
               	movb	272353(%rip), %al       # 0x47cc18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x43a43d <(anonymous namespace)::TerminateHandler::instance()+0xd>
               	popq	%rax
               	retq
               	leaq	272340(%rip), %rdi      # 0x47cc18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c311 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43a43b <(anonymous namespace)::TerminateHandler::instance()+0xb>
               	leaq	-1044(%rip), %rdi       # 0x43a040 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43c44a <std::set_terminate(void (*)())>
               	movq	%rax, 272320(%rip)      # 0x47cc20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	272305(%rip), %rdi      # 0x47cc18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c400 <__cxa_guard_release>
               	popq	%rax
               	retq
               	nop

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 167160(%rip)      # 0x463184 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43a498 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x28>
               	leaq	24(%rsp), %rdi
               	callq	0x43a540 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
               	movq	$0, 8(%rsp)
               	movl	$1, 16(%rsp)
               	movb	$0, 20(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43a4ca <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x5a>
               	xorl	%ebx, %ebx
               	jmp	0x43a4e3 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x73>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rbx, 8(%rsp)
               	movl	%ebp, 16(%rsp)
               	movb	$1, 20(%rsp)
               	movl	167063(%rip), %edi      # 0x463180 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a00 <sleep@plt>
               	movq	%rsp, %rdi
               	callq	0x436420 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a10 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a532 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a532 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	cmpl	$1, %eax
               	jne	0x43a532 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	movb	171897(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a532 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>:
               	pushq	%rax
               	movq	(%rdi), %rdi
               	callq	0x41a240 <ReportUnhandledException>
               	callq	0x435b80 <konan::abort()>
               	nop

<CallInitGlobalPossiblyLock>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	(%rdi), %ebp
               	cmpl	$2, %ebp
               	je	0x43a632 <CallInitGlobalPossiblyLock+0xe2>
               	cmpl	$3, %ebp
               	je	0x43a637 <CallInitGlobalPossiblyLock+0xe7>
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	callq	0x435970 <konan::gettid()>
               	movl	%ebp, %ecx
               	andl	$3, %ecx
               	cmpl	$1, %ecx
               	jne	0x43a5be <CallInitGlobalPossiblyLock+0x6e>
               	andl	$-4, %ebp
               	shll	$2, %eax
               	cmpl	%eax, %ebp
               	je	0x43a632 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a5b0 <CallInitGlobalPossiblyLock+0x60>
               	jmp	0x43a60c <CallInitGlobalPossiblyLock+0xbc>
               	leal	1(,%rax,4), %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	jne	0x43a5d8 <CallInitGlobalPossiblyLock+0x88>
               	callq	*%r14
               	movl	$2, (%rbx)
               	jmp	0x43a632 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	nopl	(%rax)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a600 <CallInitGlobalPossiblyLock+0xb0>
               	testq	%rcx, %rcx
               	je	0x43a62d <CallInitGlobalPossiblyLock+0xdd>
               	movl	%eax, %ecx
               	xchgl	%ecx, (%rdi)
               	testl	%eax, %eax
               	jne	0x43a62d <CallInitGlobalPossiblyLock+0xdd>
               	cmpl	$1, %ecx
               	jne	0x43a62d <CallInitGlobalPossiblyLock+0xdd>
               	movb	171636(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a62d <CallInitGlobalPossiblyLock+0xdd>
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	cmpl	$3, %ebp
               	je	0x43a637 <CallInitGlobalPossiblyLock+0xe7>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a170 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43c2b4 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<Kotlin_Long_toStringRadix>:
               	subq	$72, %rsp
               	testq	%rdi, %rdi
               	je	0x43a703 <Kotlin_Long_toStringRadix+0xa3>
               	negq	%rdi
               	xorl	%r10d, %r10d
               	movl	$48, %r8d
               	movabsq	$4294967296, %r9        # imm = 0x100000000
               	xorl	%r11d, %r11d
               	nopw	%cs:(%rax,%rax)
               	leaq	15(%rdi), %rdx
               	testq	%rdi, %rdi
               	cmovnsq	%rdi, %rdx
               	sarq	$4, %rdx
               	movl	%edx, %eax
               	shll	$4, %eax
               	subl	%edi, %eax
               	cmpl	$10, %eax
               	movl	$87, %ecx
               	cmovbl	%r8d, %ecx
               	addb	%al, %cl
               	movb	%cl, (%rsp,%r11)
               	addq	$1, %r11
               	addq	%r9, %r10
               	cmpq	$-15, %rdi
               	movq	%rdx, %rdi
               	jl	0x43a690 <Kotlin_Long_toStringRadix+0x30>
               	cmpl	$1, %r11d
               	jle	0x43a713 <Kotlin_Long_toStringRadix+0xb3>
               	movl	%r11d, %r10d
               	leaq	-2(%r10), %rcx
               	xorl	%edx, %edx
               	nop
               	movzbl	(%rsp,%rdx), %edi
               	movzbl	1(%rsp,%rcx), %eax
               	movb	%al, (%rsp,%rdx)
               	movb	%dil, 1(%rsp,%rcx)
               	addq	$1, %rdx
               	leaq	-1(%rcx), %rax
               	cmpq	%rcx, %rdx
               	movq	%rax, %rcx
               	jl	0x43a6e0 <Kotlin_Long_toStringRadix+0x80>
               	jmp	0x43a717 <Kotlin_Long_toStringRadix+0xb7>
               	leaq	45665(%rip), %rdi       # 0x44596b <typeinfo name for kotlin::gc::GCSchedulerData+0x19b2>
               	addq	$72, %rsp
               	jmp	0x4368d0 <CreateStringFromCString>
               	sarq	$32, %r10
               	movb	$0, (%rsp,%r10)
               	movq	%rsp, %rdi
               	callq	0x4368d0 <CreateStringFromCString>
               	addq	$72, %rsp
               	retq
               	nopl	(%rax)

<ThrowException>:
               	pushq	%rax
               	callq	0x424760 <ExceptionObjHolder::Throw(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_Any_equals>:
               	cmpq	%rsi, %rdi
               	sete	%al
               	retq
               	nopw	(%rax,%rax)

<Kotlin_getCurrentStackTrace>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbp
               	movq	-64(%rax), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rsp, %r12
               	movq	%r12, %rdi
               	callq	0x435b90 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>
               	movq	(%rsp), %r14
               	movq	$0, (%rsp)
               	movq	8(%rsp), %r15
               	testq	%r13, %r13
               	je	0x43a7ce <Kotlin_getCurrentStackTrace+0x7e>
               	addq	$328, %r13              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ebx, %ebx
               	jne	0x43a7ce <Kotlin_getCurrentStackTrace+0x7e>
               	cmpl	$1, %eax
               	jne	0x43a7ce <Kotlin_getCurrentStackTrace+0x7e>
               	movb	171222(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a7ce <Kotlin_getCurrentStackTrace+0x7e>
               	movq	%r13, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 24(%rsp)
               	movq	%rbp, %r13
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	subq	%r14, %r15
               	movq	%r15, %rbp
               	sarq	$3, %rbp
               	testl	%ebp, %ebp
               	js	0x43a8f7 <Kotlin_getCurrentStackTrace+0x1a7>
               	movq	296(%rax), %rdi
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%r15, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	124006(%rip), %rax      # 0x458cc0 <ktypeglobal:kotlin.native.internal.NativePtrArray#internal>
               	movq	%rax, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%r12, 24(%rsp)
               	testq	%r15, %r15
               	je	0x43a8b5 <Kotlin_getCurrentStackTrace+0x165>
               	cmpq	$1, %rbp
               	movl	$1, %esi
               	cmovaq	%rbp, %rsi
               	movl	24(%rcx), %edi
               	xorl	%ebp, %ebp
               	movabsq	$4294967296, %r8        # imm = 0x100000000
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	cmpq	%rbx, %rdi
               	je	0x43a8f2 <Kotlin_getCurrentStackTrace+0x1a2>
               	movq	(%r14,%rbx,8), %rax
               	movq	16(%rcx), %rdx
               	movq	%rbp, %rdx
               	sarq	$29, %rdx
               	movq	%rax, 32(%rcx,%rdx)
               	addq	$1, %rbx
               	addq	%r8, %rbp
               	cmpq	%rbx, %rsi
               	jne	0x43a890 <Kotlin_getCurrentStackTrace+0x140>
               	movq	32(%rsp), %rax
               	movq	%r12, (%rax)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a8e0 <Kotlin_getCurrentStackTrace+0x190>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cc0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	jmp	0x43a8fe <Kotlin_getCurrentStackTrace+0x1ae>
               	movq	%rax, %r15
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a924 <Kotlin_getCurrentStackTrace+0x1d4>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax)

<Kotlin_io_Console_print>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	leaq	121089(%rip), %rcx      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, (%rax)
               	jne	0x43abaf <Kotlin_io_Console_print+0x27f>
               	leaq	24(%rsp), %r13
               	movq	%r13, 8(%rsp)
               	movq	$0, 16(%rsp)
               	movb	$0, 24(%rsp)
               	movl	8(%r14), %ebp
               	movq	16(%rsp), %r12
               	cmpq	%rbp, %r12
               	cmovaq	%r12, %rbp
               	movq	8(%rsp), %r15
               	cmpq	%r13, %r15
               	movl	$15, %eax
               	cmovneq	24(%rsp), %rax
               	cmpq	%rax, %rbp
               	je	0x43aa3a <Kotlin_io_Console_print+0x10a>
               	cmpq	$15, %rbp
               	ja	0x43a9cf <Kotlin_io_Console_print+0x9f>
               	cmpq	%rax, %rbp
               	ja	0x43a9cf <Kotlin_io_Console_print+0x9f>
               	cmpq	%r13, %r15
               	je	0x43aa3a <Kotlin_io_Console_print+0x10a>
               	cmpq	$-1, %r12
               	je	0x43ab14 <Kotlin_io_Console_print+0x1e4>
               	testq	%r12, %r12
               	jne	0x43ab02 <Kotlin_io_Console_print+0x1d2>
               	movb	(%r15), %al
               	movb	%al, 24(%rsp)
               	jmp	0x43ab14 <Kotlin_io_Console_print+0x1e4>
               	testq	%rbp, %rbp
               	js	0x43abbe <Kotlin_io_Console_print+0x28e>
               	movq	%r13, %rbx
               	cmpq	%rax, %rbp
               	jbe	0x43a9f9 <Kotlin_io_Console_print+0xc9>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x43a9f9 <Kotlin_io_Console_print+0xc9>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	cmpq	$-1, %r12
               	je	0x43aa20 <Kotlin_io_Console_print+0xf0>
               	testq	%r12, %r12
               	jne	0x43aae2 <Kotlin_io_Console_print+0x1b2>
               	movb	(%r15), %al
               	movb	%al, (%r13)
               	cmpq	%rbx, %r15
               	je	0x43aa2d <Kotlin_io_Console_print+0xfd>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 8(%rsp)
               	movq	%rbp, 24(%rsp)
               	movq	%rbx, %r13
               	movl	8(%r14), %eax
               	movq	%rax, %rcx
               	addq	%rax, %rcx
               	je	0x43ab31 <Kotlin_io_Console_print+0x201>
               	addq	$16, %r14
               	leaq	(%r14,%rax,2), %rbp
               	leaq	8(%rsp), %r15
               	jmp	0x43aa79 <Kotlin_io_Console_print+0x149>
               	nopl	(%rax)
               	movl	$65533, %edi            # imm = 0xFFFD
               	movq	%r15, %rsi
               	callq	0x436d70 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%rbx, %r14
               	cmpq	%rbp, %rbx
               	je	0x43ab31 <Kotlin_io_Console_print+0x201>
               	leaq	2(%r14), %rbx
               	movzwl	(%r14), %eax
               	movl	%eax, %ecx
               	andl	$64512, %ecx            # imm = 0xFC00
               	cmpl	$55296, %ecx            # imm = 0xD800
               	jne	0x43aac0 <Kotlin_io_Console_print+0x190>
               	cmpq	%rbp, %rbx
               	je	0x43aad1 <Kotlin_io_Console_print+0x1a1>
               	movzwl	2(%r14), %ecx
               	movl	%ecx, %edx
               	andl	$64512, %edx            # imm = 0xFC00
               	cmpl	$56320, %edx            # imm = 0xDC00
               	jne	0x43aa60 <Kotlin_io_Console_print+0x130>
               	shll	$10, %eax
               	addq	$4, %r14
               	leal	(%rax,%rcx), %edi
               	addl	$4238353408, %edi       # imm = 0xFCA02400
               	movq	%r14, %rbx
               	jmp	0x43aa65 <Kotlin_io_Console_print+0x135>
               	movl	$65533, %edi            # imm = 0xFFFD
               	cmpl	$56320, %ecx            # imm = 0xDC00
               	je	0x43aa65 <Kotlin_io_Console_print+0x135>
               	movl	%eax, %edi
               	jmp	0x43aa65 <Kotlin_io_Console_print+0x135>
               	leaq	8(%rsp), %rsi
               	movl	$65533, %edi            # imm = 0xFFFD
               	callq	0x436d70 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	jmp	0x43ab31 <Kotlin_io_Console_print+0x201>
               	addq	$1, %r12
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	cmpq	%rbx, %r15
               	jne	0x43aa25 <Kotlin_io_Console_print+0xf5>
               	jmp	0x43aa2d <Kotlin_io_Console_print+0xfd>
               	addq	$1, %r12
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 8(%rsp)
               	movl	8(%r14), %eax
               	movq	%rax, %rcx
               	addq	%rax, %rcx
               	jne	0x43aa4a <Kotlin_io_Console_print+0x11a>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	328(%rbx), %r14
               	movq	8(%rsp), %rsi
               	movq	16(%rsp), %rax
               	movl	%eax, %edx
               	movl	$1, %edi
               	callq	0x4138e0 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43ab91 <Kotlin_io_Console_print+0x261>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x43ab91 <Kotlin_io_Console_print+0x261>
               	cmpl	$1, %eax
               	jne	0x43ab91 <Kotlin_io_Console_print+0x261>
               	movb	170259(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ab91 <Kotlin_io_Console_print+0x261>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%rsp), %rdi
               	cmpq	%r13, %rdi
               	je	0x43aba0 <Kotlin_io_Console_print+0x270>
               	callq	0x4136d0 <free@plt>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	120474(%rip), %rsi      # 0x458250 <ktypeglobal:kotlin.String#internal>
               	movq	%r14, %rdi
               	callq	0x419d90 <ThrowClassCastException>
               	leaq	44427(%rip), %rdi       # 0x445950 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4363a0 <std::__throw_length_error(char const*)>
               	movq	%rax, %r15
               	testq	%rbx, %rbx
               	jne	0x43abe9 <Kotlin_io_Console_print+0x2b9>
               	movq	8(%rsp), %rdi
               	cmpq	%r13, %rdi
               	je	0x43abe1 <Kotlin_io_Console_print+0x2b1>
               	callq	0x4136d0 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x43abd2 <Kotlin_io_Console_print+0x2a2>
               	cmpl	$1, %eax
               	jne	0x43abd2 <Kotlin_io_Console_print+0x2a2>
               	movb	170139(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43abd2 <Kotlin_io_Console_print+0x2a2>
               	movq	%r14, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43abd2 <Kotlin_io_Console_print+0x2a2>
               	nopl	(%rax,%rax)

<Kotlin_io_Console_println>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43a930 <Kotlin_io_Console_print>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	328(%rbx), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	44325(%rip), %rsi       # 0x44596d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movl	$1, %edx
               	movl	$1, %edi
               	callq	0x4138e0 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43ac74 <Kotlin_io_Console_println+0x64>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43ac74 <Kotlin_io_Console_println+0x64>
               	cmpl	$1, %eax
               	jne	0x43ac74 <Kotlin_io_Console_println+0x64>
               	movb	170024(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43ac7f <Kotlin_io_Console_println+0x6f>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43acb9 <Kotlin_io_Console_println+0xa9>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43acb9 <Kotlin_io_Console_println+0xa9>
               	cmpl	$1, %eax
               	jne	0x43acb9 <Kotlin_io_Console_println+0xa9>
               	movb	169963(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43acb9 <Kotlin_io_Console_println+0xa9>
               	movq	%r15, %rdi
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<Init_and_run_start>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movl	%edx, %ebx
               	movq	%rsi, %r15
               	movl	%edi, %r14d
               	callq	0x4386a0 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x43ad24 <Init_and_run_start+0x54>
               	movb	169860(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ad24 <Init_and_run_start+0x54>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424540 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 80(%rsp)
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 72(%rsp)
               	testl	%r14d, %r14d
               	jle	0x43aef3 <Init_and_run_start+0x223>
               	movl	%ebx, 12(%rsp)
               	leal	-1(%r14), %ebp
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e60 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 24(%rbx)
               	leaq	117029(%rip), %rcx      # 0x4576d0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%rax, 80(%rsp)
               	cmpl	$1, %r14d
               	jne	0x43add0 <Init_and_run_start+0x100>
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43ae53 <Init_and_run_start+0x183>
               	movl	%r14d, %ebp
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	addq	$-1, %rbp
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %r12
               	nopl	(%rax)
               	movq	$0, 40(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	8(%r15,%r14,8), %rdi
               	leaq	40(%rsp), %rsi
               	callq	0x4368d0 <CreateStringFromCString>
               	movq	40(%rsp), %rax
               	movq	%rax, 32(%rbx,%r14,8)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$1, %r14
               	cmpq	%r14, %rbp
               	jne	0x43adf0 <Init_and_run_start+0x120>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	169483(%rip), %al       # 0x464498 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ae96 <Init_and_run_start+0x1c6>
               	callq	0x424730 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x420630 <kfun:#main(){}>
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$0, 12(%rsp)
               	je	0x43aee2 <Init_and_run_start+0x212>
               	movq	%r13, %rax
               	movq	-48(%r13), %rcx
               	movl	$1, %edx
               	movl	$2, %esi
               	movl	$1, %eax
               	lock
               	cmpxchgl	%esi, 269607(%rip)      # 0x47cc00 <(anonymous namespace)::globalRuntimeStatus>
               	movq	(%rcx), %rax
               	xchgl	%edx, 328(%rax)
               	xorl	%eax, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a0a0 <ThrowIllegalArgumentException>
               	movq	%rax, %rdi
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43af21 <Init_and_run_start+0x251>
               	movq	%rax, %rdi
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<main>:
               	pushq	%rax
               	movl	$1, %edx
               	callq	0x43acd0 <Init_and_run_start>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq

<read_uleb128(unsigned char const*, unsigned long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %r8b
               	movq	%r8, %rdi
               	andl	$127, %edi
               	shlq	%cl, %rdi
               	addl	$7, %ecx
               	orq	%rdi, %rdx
               	testb	%r8b, %r8b
               	js	0x43af56 <read_uleb128(unsigned char const*, unsigned long*)+0x7>
               	movq	%rdx, (%rsi)
               	retq

<read_sleb128(unsigned char const*, long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %dil
               	movq	%rdi, %r8
               	andl	$127, %r8d
               	shlq	%cl, %r8
               	addl	$7, %ecx
               	orq	%r8, %rdx
               	testb	%dil, %dil
               	js	0x43af7c <read_sleb128(unsigned char const*, long*)+0x7>
               	cmpl	$63, %ecx
               	ja	0x43afad <read_sleb128(unsigned char const*, long*)+0x38>
               	andb	$64, %dil
               	je	0x43afad <read_sleb128(unsigned char const*, long*)+0x38>
               	orq	$-1, %rdi
               	shlq	%cl, %rdi
               	orq	%rdi, %rdx
               	movq	%rdx, (%rsi)
               	retq

<get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$40, %rsp
               	movq	(%rdx), %rax
               	movq	%rsi, 8(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	(%rsi), %rax
               	callq	*16(%rax)
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	je	0x43afe9 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x38>
               	movq	24(%rsp), %rax
               	movq	(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movq	(%rbp), %rax
               	leaq	24(%rsp), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	testb	%al, %al
               	je	0x43b009 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x58>
               	movq	24(%rsp), %rdx
               	movq	%rdx, (%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>:
               	movq	%rdx, %r9
               	movq	%rcx, %r11
               	cmpb	$80, %dil
               	jne	0x43b02f <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x1f>
               	leaq	7(%rdx), %rax
               	andq	$-8, %rax
               	movq	(%rax), %rdx
               	leaq	8(%rax), %rax
               	movq	%rdx, (%rcx)
               	retq
               	pushq	%rbx
               	movl	%edi, %eax
               	movl	%edi, %r10d
               	andl	$15, %eax
               	subq	$16, %rsp
               	cmpb	$12, %al
               	ja	0x43b0a0 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x90>
               	leaq	45625(%rip), %rdx       # 0x446280 <_mi_page_empty+0x40>
               	movzbl	%al, %eax
               	movq	%rsi, %rbx
               	movslq	(%rdx,%rax,4), %rax
               	addq	%rdx, %rax
               	jmpq	*%rax
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43af4f <read_uleb128(unsigned char const*, unsigned long*)>
               	jmp	0x43b072 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x62>
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43af75 <read_sleb128(unsigned char const*, long*)>
               	movq	8(%rsp), %rdx
               	jmp	0x43b0a5 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movzwl	(%r9), %edx
               	jmp	0x43b088 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x78>
               	movl	(%r9), %edx
               	jmp	0x43b091 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x81>
               	movswq	(%r9), %rdx
               	leaq	2(%r9), %rax
               	jmp	0x43b0a5 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movslq	(%r9), %rdx
               	leaq	4(%r9), %rax
               	jmp	0x43b0a5 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movq	(%r9), %rdx
               	leaq	8(%r9), %rax
               	jmp	0x43b0a5 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	callq	0x4138f0 <abort@plt>
               	testq	%rdx, %rdx
               	je	0x43b0c2 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movl	%r10d, %ecx
               	andl	$112, %ecx
               	cmpb	$16, %cl
               	cmoveq	%r9, %rbx
               	addq	%rbx, %rdx
               	testb	%r10b, %r10b
               	jns	0x43b0c2 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movq	(%rdx), %rdx
               	movq	%rdx, (%r11)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<get_ttype_entry(lsda_header_info*, unsigned long)>:
               	subq	$24, %rsp
               	movq	%rdi, %r8
               	movzbl	40(%rdi), %edi
               	cmpb	$-1, %dil
               	je	0x43b10a <get_ttype_entry(lsda_header_info*, unsigned long)+0x3f>
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpb	$2, %dl
               	je	0x43b10e <get_ttype_entry(lsda_header_info*, unsigned long)+0x43>
               	ja	0x43b0f1 <get_ttype_entry(lsda_header_info*, unsigned long)+0x26>
               	movl	$8, %eax
               	testb	%dl, %dl
               	jmp	0x43b103 <get_ttype_entry(lsda_header_info*, unsigned long)+0x38>
               	movl	$4, %eax
               	cmpb	$3, %dl
               	je	0x43b113 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$8, %eax
               	cmpb	$4, %dl
               	je	0x43b113 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	callq	0x4138f0 <abort@plt>
               	xorl	%eax, %eax
               	jmp	0x43b113 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$2, %eax
               	imulq	%rsi, %rax
               	movq	24(%r8), %rdx
               	movq	16(%r8), %rsi
               	leaq	8(%rsp), %rcx
               	subq	%rax, %rdx
               	callq	0x43b010 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>:
               	pushq	%r13
               	notq	%rcx
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	24(%rdi), %rbx
               	movq	%rdx, 8(%rsp)
               	leaq	24(%rsp), %r13
               	addq	%rcx, %rbx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43af4f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rbx
               	testq	%rsi, %rsi
               	je	0x43b190 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5a>
               	movq	%rbp, %rdi
               	callq	0x43b0cb <get_ttype_entry(lsda_header_info*, unsigned long)>
               	leaq	8(%rsp), %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43afb1 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	testb	%al, %al
               	je	0x43b15a <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x24>
               	jmp	0x43b192 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5c>
               	xorl	%eax, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<base_of_encoded_value(unsigned char, _Unwind_Context*)>:
               	movl	%edi, %eax
               	cmpb	$-1, %dil
               	je	0x43b1dc <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	andl	$112, %eax
               	movq	%rsi, %rdi
               	cmpb	$32, %al
               	je	0x43b1cc <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2f>
               	ja	0x43b1bb <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1e>
               	testb	%al, %al
               	je	0x43b1dc <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$16, %al
               	je	0x43b1dc <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	jmp	0x43b1d6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	cmpb	$64, %al
               	je	0x43b1d1 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
               	cmpb	$80, %al
               	je	0x43b1dc <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$48, %al
               	jne	0x43b1d6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	jmp	0x413a20 <_Unwind_GetDataRelBase@plt>
               	jmp	0x413a30 <_Unwind_GetTextRelBase@plt>
               	jmp	0x413a40 <_Unwind_GetRegionStart@plt>
               	pushq	%rax
               	callq	0x4138f0 <abort@plt>
               	xorl	%eax, %eax
               	retq

<read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>:
               	pushq	%rbx
               	movzbl	%sil, %ebx
               	movq	%rdi, %rsi
               	movl	%ebx, %edi
               	subq	$16, %rsp
               	movq	%rdx, 8(%rsp)
               	movq	%rcx, (%rsp)
               	callq	0x43b19d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rdx
               	movl	%ebx, %edi
               	addq	$16, %rsp
               	movq	%rax, %rsi
               	popq	%rbx
               	jmp	0x43b010 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>

<parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x43b230 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x1d>
               	callq	0x413a40 <_Unwind_GetRegionStart@plt>
               	movq	%rax, (%rbx)
               	movzbl	(%r12), %esi
               	leaq	1(%r12), %rdx
               	cmpb	$-1, %sil
               	je	0x43b254 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x41>
               	leaq	8(%rbx), %rcx
               	movq	%rbp, %rdi
               	callq	0x43b1df <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movq	%rax, %rdx
               	jmp	0x43b258 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x45>
               	movq	%rax, 8(%rbx)
               	leaq	1(%rdx), %rax
               	movb	(%rdx), %dl
               	leaq	8(%rsp), %r9
               	movb	%dl, 40(%rbx)
               	incb	%dl
               	je	0x43b283 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x70>
               	movq	%r9, %rsi
               	movq	%rax, %rdi
               	callq	0x43af4f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 24(%rbx)
               	jmp	0x43b28b <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x78>
               	movq	$0, 24(%rbx)
               	leaq	1(%rax), %rdi
               	movb	(%rax), %al
               	movq	%r9, %rsi
               	movb	%al, 41(%rbx)
               	callq	0x43af4f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 32(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<__gxx_personality_v0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$152, %rsp
               	decl	%edi
               	movq	$0, 56(%rsp)
               	movl	$0, 52(%rsp)
               	jne	0x43b65e <__gxx_personality_v0+0x3ad>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	movq	%r8, %rbp
               	movq	%rcx, %rbx
               	movl	%esi, 12(%rsp)
               	addq	%rdx, %rax
               	cmpq	$1, %rax
               	movq	%rax, (%rsp)
               	setbe	35(%rsp)
               	cmpl	$6, %esi
               	sete	%al
               	andb	35(%rsp), %al
               	movb	%al, 34(%rsp)
               	je	0x43b32c <__gxx_personality_v0+0x7b>
               	movq	-16(%rcx), %r12
               	movl	-36(%rcx), %r14d
               	movq	-24(%rcx), %r15
               	cmpq	$1, %r12
               	sbbl	%eax, %eax
               	andl	$-2, %eax
               	addl	$3, %eax
               	jmp	0x43b5c5 <__gxx_personality_v0+0x314>
               	movq	%r8, %rdi
               	callq	0x413a50 <_Unwind_GetLanguageSpecificData@plt>
               	movq	%rax, %r15
               	testq	%rax, %rax
               	je	0x43b57c <__gxx_personality_v0+0x2cb>
               	leaq	96(%rsp), %rax
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	movq	%rax, %rdx
               	movq	%rax, 24(%rsp)
               	callq	0x43b213 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, %r14
               	callq	0x43b19d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	leaq	52(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	%rax, 112(%rsp)
               	callq	0x413a60 <_Unwind_GetIPInfo@plt>
               	cmpl	$0, 52(%rsp)
               	movq	%rax, %r13
               	jne	0x43b38a <__gxx_personality_v0+0xd9>
               	decq	%r13
               	leaq	64(%rsp), %r12
               	cmpq	%r14, 128(%rsp)
               	jbe	0x43b562 <__gxx_personality_v0+0x2b1>
               	movzbl	137(%rsp), %esi
               	movq	%r14, %rdx
               	movq	%r12, %rcx
               	xorl	%edi, %edi
               	callq	0x43b1df <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	72(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43b1df <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	80(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43b1df <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	leaq	88(%rsp), %rsi
               	movq	%rax, %rdi
               	callq	0x43af4f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	%rax, %r14
               	movq	64(%rsp), %rax
               	addq	96(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43b409 <__gxx_personality_v0+0x158>
               	movq	128(%rsp), %r14
               	jmp	0x43b38f <__gxx_personality_v0+0xde>
               	addq	72(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43b38f <__gxx_personality_v0+0xde>
               	movq	80(%rsp), %r12
               	testq	%r12, %r12
               	je	0x43b426 <__gxx_personality_v0+0x175>
               	addq	104(%rsp), %r12
               	movq	88(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b681 <__gxx_personality_v0+0x3d0>
               	movq	128(%rsp), %rdx
               	testq	%r12, %r12
               	je	0x43b57c <__gxx_personality_v0+0x2cb>
               	leaq	-1(%rdx,%rax), %r13
               	testq	%r13, %r13
               	je	0x43b58d <__gxx_personality_v0+0x2dc>
               	movl	12(%rsp), %eax
               	andl	$8, %eax
               	movl	%eax, 36(%rsp)
               	jne	0x43b47f <__gxx_personality_v0+0x1ce>
               	cmpq	$1, (%rsp)
               	ja	0x43b488 <__gxx_personality_v0+0x1d7>
               	leaq	32(%rbx), %rax
               	testb	$1, (%rbx)
               	je	0x43b474 <__gxx_personality_v0+0x1c3>
               	movq	-80(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movq	-112(%rax), %r14
               	jmp	0x43b48f <__gxx_personality_v0+0x1de>
               	leaq	152066(%rip), %r14      # 0x460688 <typeinfo for __cxxabiv1::__forced_unwind>
               	jmp	0x43b48f <__gxx_personality_v0+0x1de>
               	leaq	152073(%rip), %r14      # 0x460698 <typeinfo for __cxxabiv1::__foreign_exception>
               	leaq	72(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	40(%rsp), %rsi
               	movq	%r13, %rdi
               	callq	0x43af75 <read_sleb128(unsigned char const*, long*)>
               	leaq	80(%rsp), %rsi
               	movq	%rax, %rdi
               	movq	%rax, 16(%rsp)
               	callq	0x43af75 <read_sleb128(unsigned char const*, long*)>
               	movq	72(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43b546 <__gxx_personality_v0+0x295>
               	jle	0x43b4f5 <__gxx_personality_v0+0x244>
               	movq	24(%rsp), %rdi
               	movq	%rcx, %rsi
               	callq	0x43b0cb <get_ttype_entry(lsda_header_info*, unsigned long)>
               	testq	%rax, %rax
               	je	0x43b672 <__gxx_personality_v0+0x3c1>
               	testq	%r14, %r14
               	je	0x43b54b <__gxx_personality_v0+0x29a>
               	leaq	56(%rsp), %rdx
               	movq	%r14, %rsi
               	movq	%rax, %rdi
               	callq	0x43afb1 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	jmp	0x43b53d <__gxx_personality_v0+0x28c>
               	cmpl	$0, 36(%rsp)
               	sete	%al
               	testb	%al, 35(%rsp)
               	je	0x43b51f <__gxx_personality_v0+0x26e>
               	testq	%r14, %r14
               	je	0x43b51f <__gxx_personality_v0+0x26e>
               	movq	56(%rsp), %rdx
               	leaq	96(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x43b136 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	xorl	$1, %eax
               	jmp	0x43b53d <__gxx_personality_v0+0x28c>
               	notq	%rcx
               	addq	120(%rsp), %rcx
               	leaq	88(%rsp), %rsi
               	movq	%rcx, %rdi
               	callq	0x43af4f <read_uleb128(unsigned char const*, unsigned long*)>
               	cmpq	$0, 88(%rsp)
               	sete	%al
               	testb	%al, %al
               	je	0x43b54b <__gxx_personality_v0+0x29a>
               	jmp	0x43b672 <__gxx_personality_v0+0x3c1>
               	movb	$1, 34(%rsp)
               	movq	80(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b586 <__gxx_personality_v0+0x2d5>
               	movq	16(%rsp), %r13
               	addq	%rax, %r13
               	jmp	0x43b499 <__gxx_personality_v0+0x1e8>
               	xorl	%r14d, %r14d
               	xorl	%r12d, %r12d
               	xorl	%r13d, %r13d
               	movl	$1, %eax
               	testb	$1, 12(%rsp)
               	je	0x43b5c5 <__gxx_personality_v0+0x314>
               	cmpl	$2, %eax
               	jne	0x43b597 <__gxx_personality_v0+0x2e6>
               	movl	$8, %eax
               	jmp	0x43b695 <__gxx_personality_v0+0x3e4>
               	cmpb	$0, 34(%rsp)
               	je	0x43b57c <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	movl	$2, %eax
               	jmp	0x43b570 <__gxx_personality_v0+0x2bf>
               	cmpq	$1, (%rsp)
               	movl	$6, %eax
               	ja	0x43b695 <__gxx_personality_v0+0x3e4>
               	movq	56(%rsp), %rdx
               	movl	%r14d, -36(%rbx)
               	movq	%r13, -32(%rbx)
               	movq	%r15, -24(%rbx)
               	movq	%rdx, -8(%rbx)
               	movq	%r12, -16(%rbx)
               	jmp	0x43b695 <__gxx_personality_v0+0x3e4>
               	testb	$8, 12(%rsp)
               	jne	0x43b5d3 <__gxx_personality_v0+0x322>
               	cmpq	$1, (%rsp)
               	jbe	0x43b5e5 <__gxx_personality_v0+0x334>
               	decl	%eax
               	je	0x43b66d <__gxx_personality_v0+0x3bc>
               	testl	%r14d, %r14d
               	jns	0x43b62f <__gxx_personality_v0+0x37e>
               	callq	0x43c492 <std::unexpected()>
               	decl	%eax
               	jne	0x43b5f1 <__gxx_personality_v0+0x340>
               	movq	%rbx, %rdi
               	callq	0x43c61c <__cxa_call_terminate>
               	testl	%r14d, %r14d
               	jns	0x43b62f <__gxx_personality_v0+0x37e>
               	leaq	96(%rsp), %rdx
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	callq	0x43b213 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	callq	0x43b19d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, 112(%rsp)
               	callq	0x43b19d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	%rax, -16(%rbx)
               	movq	%rbx, %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x413a70 <_Unwind_SetGR@plt>
               	movslq	%r14d, %rdx
               	movl	$1, %esi
               	movq	%rbp, %rdi
               	callq	0x413a70 <_Unwind_SetGR@plt>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x413a80 <_Unwind_SetIP@plt>
               	movl	$7, %eax
               	jmp	0x43b695 <__gxx_personality_v0+0x3e4>
               	movl	$3, %eax
               	jmp	0x43b695 <__gxx_personality_v0+0x3e4>
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c463 <std::terminate()>
               	movl	72(%rsp), %r14d
               	movl	$3, %eax
               	jmp	0x43b570 <__gxx_personality_v0+0x2bf>
               	testq	%r12, %r12
               	je	0x43b57c <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	xorl	%r13d, %r13d
               	jmp	0x43b590 <__gxx_personality_v0+0x2df>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<__cxa_call_unexpected>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	-16(%rbx), %rax
               	movq	-64(%rbx), %rdi
               	movq	-24(%rbx), %r15
               	movslq	-36(%rbx), %rbp
               	movq	-56(%rbx), %r14
               	movq	%rax, 16(%rsp)
               	callq	0x43c471 <__cxxabiv1::__unexpected(void (*)())>
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c4d3 <__cxa_get_globals_fast>
               	movq	(%rax), %rax
               	leaq	112(%rax), %r13
               	testb	$1, 80(%rax)
               	je	0x43b6f8 <__cxa_call_unexpected+0x51>
               	movq	(%rax), %r13
               	movq	%rsp, %r12
               	movq	%r15, %rsi
               	xorl	%edi, %edi
               	movq	%r12, %rdx
               	callq	0x43b213 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movq	-112(%r13), %rsi
               	movq	%rbp, %rcx
               	movq	%r13, %rdx
               	movq	%r12, %rdi
               	callq	0x43b136 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b723 <__cxa_call_unexpected+0x7c>
               	callq	0x43c2b4 <__cxa_rethrow>
               	leaq	151366(%rip), %rbx      # 0x460670 <typeinfo for std::bad_exception>
               	movq	%rbp, %rcx
               	xorl	%edx, %edx
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x43b136 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b768 <__cxa_call_unexpected+0xc1>
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	151425(%rip), %rdx      # 0x4606d0 <vtable for std::bad_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	1359(%rip), %rdx        # 0x43bcb2 <std::bad_exception::~bad_exception()>
               	callq	0x43c265 <__cxa_throw>
               	movq	%r14, %rdi
               	callq	0x43c438 <__cxxabiv1::__terminate(void (*)())>
               	movq	%rax, %rbx
               	callq	0x43c175 <__cxa_end_catch>
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<operator delete(void*)>:
               	jmp	0x4136d0 <free@plt>

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	leaq	151031(%rip), %rax      # 0x460588 <vtable for __cxxabiv1::__si_class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bf8a <__cxxabiv1::__class_type_info::~__class_type_info()>
               	nop

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b78a <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
               	movq	%rbx, %rdi
               	movl	$24, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43b7d1 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43b7d1 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	cmpq	%rdx, %r8
               	jne	0x43b812 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x40>
               	movq	8(%rcx), %rsi
               	movq	8(%rdi), %rdi
               	movq	%r8, 24(%rsp)
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	callq	0x43b7b6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rdx
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	jne	0x43b828 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x56>
               	movq	16(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	(%rdi), %rax
               	movq	64(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	addq	$40, %rsp
               	movl	$6, %eax
               	popq	%rbx
               	popq	%rbp
               	retq

<__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rdx
               	movq	8(%rcx), %rsi
               	movq	96(%rsp), %r12
               	movq	104(%rsp), %r15
               	movq	%r8, 24(%rsp)
               	movq	%rdx, %rdi
               	movq	%r9, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43b7b6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %r9
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x43b8ba <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x86>
               	movq	%r8, (%r15)
               	movl	%ebp, 8(%r15)
               	testq	%rbx, %rbx
               	js	0x43b8aa <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x76>
               	addq	%rbx, %r8
               	xorl	%eax, %eax
               	cmpq	%r8, %r12
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	movl	%eax, 16(%r15)
               	jmp	0x43b916 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	$-2, %rbx
               	jne	0x43b916 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movl	$1, 16(%r15)
               	jmp	0x43b916 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	%r12, %r8
               	jne	0x43b8e9 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movq	8(%r9), %rsi
               	movq	%rdx, %rdi
               	movq	%r8, 16(%rsp)
               	movq	%r9, 8(%rsp)
               	callq	0x43b7b6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %r9
               	movq	16(%rsp), %r8
               	testb	%al, %al
               	je	0x43b8e9 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movl	%ebp, 12(%r15)
               	jmp	0x43b916 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movq	16(%r14), %rdi
               	movq	%r13, %rcx
               	movl	%ebp, %edx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	%r15, 104(%rsp)
               	movq	%r12, 96(%rsp)
               	movq	56(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax
               	addq	$40, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	callq	0x43c030 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
               	testb	%al, %al
               	jne	0x43b963 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x3b>
               	movq	16(%r13), %rdi
               	movq	%r12, %rcx
               	movq	%rbp, %rdx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	48(%rax), %rax
               	popq	%r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmpq	*%rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<__gnu_cxx::__concurrence_lock_error::what() const>:
               	leaq	40956(%rip), %rax       # 0x44596f <typeinfo name for kotlin::gc::GCSchedulerData+0x19b6>
               	retq

<__gnu_cxx::__concurrence_unlock_error::what() const>:
               	leaq	40984(%rip), %rax       # 0x445993 <typeinfo name for kotlin::gc::GCSchedulerData+0x19da>
               	retq

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	leaq	150669(%rip), %rax      # 0x460610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	leaq	150689(%rip), %rax      # 0x460638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b97c <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b990 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__mutex::lock()>:
               	cmpq	$0, 153052(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x43ba18 <__gnu_cxx::__mutex::lock()+0x44>
               	pushq	%rdx
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x43ba16 <__gnu_cxx::__mutex::lock()+0x42>
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	150551(%rip), %rdx      # 0x460610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	leaq	150496(%rip), %rsi      # 0x4605e0 <typeinfo for __gnu_cxx::__concurrence_lock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-149(%rip), %rdx        # 0x43b97c <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	callq	0x43c265 <__cxa_throw>
               	popq	%rax
               	retq
               	retq
               	nop

<__gnu_cxx::__scoped_lock::~__scoped_lock()>:
               	cmpq	$0, 152982(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x43ba73 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x59>
               	pushq	%rdx
               	movq	(%rdi), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testl	%eax, %eax
               	je	0x43ba71 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x57>
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	150518(%rip), %rdx      # 0x460638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	leaq	150447(%rip), %rsi      # 0x4605f8 <typeinfo for __gnu_cxx::__concurrence_unlock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-202(%rip), %rdx        # 0x43b990 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rdi
               	incq	%rdx
               	je	0x43ba6c <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x52>
               	callq	0x413700 <_Unwind_Resume@plt>
               	callq	0x43b6a7 <__cxa_call_unexpected>
               	popq	%rax
               	retq
               	retq

<(anonymous namespace)::pool::free(void*) (.constprop.2)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	266689(%rip), %rdi      # 0x47cc40 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b9d4 <__gnu_cxx::__mutex::lock()>
               	movq	266708(%rip), %rdx      # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	leaq	-16(%rbx), %rcx
               	testq	%rdx, %rdx
               	je	0x43baaa <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x36>
               	movq	-16(%rbx), %rax
               	leaq	(%rcx,%rax), %rsi
               	cmpq	%rsi, %rdx
               	jbe	0x43bab0 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x3c>
               	movq	%rdx, -8(%rbx)
               	jmp	0x43bacf <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x5b>
               	leaq	266673(%rip), %r8       # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	jne	0x43bae4 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x70>
               	addq	(%rdx), %rax
               	movq	%rax, -16(%rbx)
               	movq	266657(%rip), %rax      # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	movq	8(%rax), %rax
               	movq	%rax, -8(%rbx)
               	movq	%rcx, 266642(%rip)      # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x43bb27 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	cmpq	%rdi, %rsi
               	jae	0x43baed <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x79>
               	leaq	8(%rdx), %r8
               	movq	%rdi, %rdx
               	movq	8(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x43bad8 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x64>
               	cmpq	%rdi, %rsi
               	jne	0x43bafd <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x89>
               	addq	(%rsi), %rax
               	movq	8(%rsi), %rsi
               	movq	%rsi, 8(%rdx)
               	movq	(%r8), %rdx
               	movq	(%rdx), %rsi
               	leaq	(%rdx,%rsi), %rdi
               	cmpq	%rdi, %rcx
               	jne	0x43bb14 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xa0>
               	addq	%rsi, %rax
               	movq	%rax, (%rdx)
               	jmp	0x43bb27 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	movq	%rax, -16(%rbx)
               	movq	8(%rdx), %rax
               	movq	%rax, -8(%rbx)
               	movq	(%r8), %rax
               	movq	%rcx, 8(%rax)
               	leaq	8(%rsp), %rdi
               	callq	0x43ba1a <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	popq	%rbx
               	retq
               	nop

<(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	266493(%rip), %rdi      # 0x47cc40 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b9d4 <__gnu_cxx::__mutex::lock()>
               	leaq	16(%rbx), %rdi
               	movl	$16, %eax
               	movq	266503(%rip), %rbx      # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	cmpq	$16, %rdi
               	leaq	266492(%rip), %rdx      # 0x47cc68 <(anonymous namespace)::emergency_pool+0x28>
               	cmovbq	%rax, %rdi
               	addq	$15, %rdi
               	andq	$-16, %rdi
               	testq	%rbx, %rbx
               	je	0x43bbb8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x80>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rcx
               	cmpq	%rax, %rdi
               	jbe	0x43bb92 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x5a>
               	leaq	8(%rbx), %rdx
               	movq	%rcx, %rbx
               	jmp	0x43bb78 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x40>
               	subq	%rdi, %rax
               	cmpq	$15, %rax
               	jbe	0x43bbb1 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x79>
               	leaq	(%rbx,%rdi), %rsi
               	movq	%rcx, 8(%rsi)
               	movq	(%rdx), %rbx
               	movq	%rax, (%rsi)
               	movq	%rdi, (%rbx)
               	movq	%rsi, (%rdx)
               	jmp	0x43bbb4 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x7c>
               	movq	%rcx, (%rdx)
               	addq	$16, %rbx
               	leaq	8(%rsp), %rdi
               	callq	0x43ba1a <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__freeres()>:
               	movq	266398(%rip), %rdi      # 0x47cc70 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rdi, %rdi
               	je	0x43bbea <__gnu_cxx::__freeres()+0x1f>
               	pushq	%rax
               	callq	0x4136d0 <free@plt>
               	movq	$0, 266376(%rip)        # 0x47cc70 <(anonymous namespace)::emergency_pool+0x30>
               	popq	%rdx
               	retq
               	retq

<__cxa_allocate_exception>:
               	pushq	%rbx
               	leaq	128(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bc18 <__cxa_allocate_exception+0x2d>
               	movq	%rbx, %rdi
               	callq	0x43bb38 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bc18 <__cxa_allocate_exception+0x2d>
               	callq	0x43c463 <std::terminate()>
               	xorl	%eax, %eax
               	movl	$32, %ecx
               	movq	%rdx, %rdi
               	rep		stosl	%eax, %es:(%rdi)
               	leaq	128(%rdx), %rax
               	popq	%rbx
               	retq

<__cxa_free_exception>:
               	movq	266300(%rip), %rax      # 0x47cc70 <(anonymous namespace)::emergency_pool+0x30>
               	addq	$-128, %rdi
               	cmpq	%rax, %rdi
               	jbe	0x43bc4e <__cxa_free_exception+0x21>
               	addq	266292(%rip), %rax      # 0x47cc78 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43bc4e <__cxa_free_exception+0x21>
               	jmp	0x43ba74 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x4136d0 <free@plt>

<__cxa_allocate_dependent_exception>:
               	pushq	%rcx
               	movl	$112, %edi
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bc7d <__cxa_allocate_dependent_exception+0x2a>
               	movl	$112, %edi
               	callq	0x43bb38 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bc7d <__cxa_allocate_dependent_exception+0x2a>
               	callq	0x43c463 <std::terminate()>
               	xorl	%eax, %eax
               	movq	%rdx, %rdi
               	movl	$28, %ecx
               	rep		stosl	%eax, %es:(%rdi)
               	movq	%rdx, %rax
               	popq	%rdx
               	retq

<__cxa_free_dependent_exception>:
               	movq	266203(%rip), %rax      # 0x47cc70 <(anonymous namespace)::emergency_pool+0x30>
               	cmpq	%rax, %rdi
               	jbe	0x43bcab <__cxa_free_dependent_exception+0x1d>
               	addq	266199(%rip), %rax      # 0x47cc78 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43bcab <__cxa_free_dependent_exception+0x1d>
               	jmp	0x43ba74 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x4136d0 <free@plt>

<std::exception::~exception()>:
               	retq
               	nop

<std::bad_exception::~bad_exception()>:
               	leaq	150039(%rip), %rax      # 0x4606d0 <vtable for std::bad_exception>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::exception::what() const>:
               	leaq	40172(%rip), %rax       # 0x4459b9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a00>
               	retq

<std::bad_exception::what() const>:
               	leaq	40179(%rip), %rax       # 0x4459c8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a0f>
               	retq

<std::exception::~exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<std::bad_exception::~bad_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bcb2 <std::bad_exception::~bad_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	retq
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bd06 <__cxxabiv1::__forced_unwind::~__forced_unwind()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	retq
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bd20 <__cxxabiv1::__foreign_exception::~__foreign_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>

<_ZGTtNKSt9exceptionD1Ev>:
               	retq

<_ZGTtNKSt9exception4whatEv>:
               	jmp	0x43bcc6 <std::exception::what() const>

<_ZGTtNKSt13bad_exceptionD1Ev>:
               	retq

<_ZGTtNKSt13bad_exception4whatEv>:
               	jmp	0x43bcce <std::bad_exception::what() const>
               	nop

<std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>:
               	retq

<__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	movq	-80(%rsi), %rbx
               	cmpl	$1, %edi
               	jbe	0x43bd5a <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x13>
               	movq	-88(%rbx), %rdi
               	callq	0x43c438 <__cxxabiv1::__terminate(void (*)())>
               	leaq	-80(%rsi), %rax
               	movq	%rax, %rdi
               	callq	0x43bc8e <__cxa_free_dependent_exception>
               	lock
               	decl	-128(%rbx)
               	jne	0x43bd83 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x3c>
               	movq	-104(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43bd7a <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x33>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bc2d <__cxa_free_exception>
               	popq	%rbx
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr()>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::_M_addref()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43bda2 <std::__exception_ptr::exception_ptr::_M_addref()+0xc>
               	lock
               	incl	-128(%rax)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr(void*)>:
               	movq	%rsi, (%rdi)
               	jmp	0x43bd96 <std::__exception_ptr::exception_ptr::_M_addref()>

<std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bd96 <std::__exception_ptr::exception_ptr::_M_addref()>
               	nop

<std::__exception_ptr::exception_ptr::_M_release()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43bde9 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	lock
               	decl	-128(%rax)
               	jne	0x43bde9 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	pushq	%rbx
               	movq	-104(%rax), %rax
               	movq	%rdi, %rbx
               	testq	%rax, %rax
               	je	0x43bdd8 <std::__exception_ptr::exception_ptr::_M_release()+0x20>
               	movq	(%rdi), %rdi
               	callq	*%rax
               	movq	(%rbx), %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	retq

<std::__exception_ptr::exception_ptr::~exception_ptr()>:
               	jmp	0x43bdb8 <std::__exception_ptr::exception_ptr::_M_release()>
               	nop

<std::__exception_ptr::exception_ptr::_M_get() const>:
               	movq	(%rdi), %rax
               	retq

<std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	movq	%rdx, (%rdi)
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x43bdac <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43bdf4 <std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>
               	movq	%rbx, %rdi
               	callq	0x43bdea <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator!() const>:
               	cmpq	$0, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const>:
               	xorl	%eax, %eax
               	cmpq	$0, (%rdi)
               	je	0x43be4d <std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const+0xf>
               	leaq	-263(%rip), %rax        # 0x43bd46 <std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>
               	xorl	%edx, %edx
               	retq

<std::__exception_ptr::exception_ptr::__cxa_exception_type() const>:
               	movq	(%rdi), %rax
               	movq	-112(%rax), %rax
               	retq

<std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rax
               	callq	0x43be58 <std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>
               	popq	%rdx
               	xorl	$1, %eax
               	retq

<std::current_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c4e8 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	jne	0x43be88 <std::current_exception()+0x1b>
               	movq	%rbx, %rdi
               	callq	0x43bd86 <std::__exception_ptr::exception_ptr::exception_ptr()>
               	jmp	0x43bebd <std::current_exception()+0x50>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	movq	80(%rax), %rcx
               	addq	%rcx, %rdx
               	cmpq	$1, %rdx
               	ja	0x43be7e <std::current_exception()+0x11>
               	movabsq	$5138137972254386944, %rdx # imm = 0x474E5543432B2B00
               	leaq	112(%rax), %rsi
               	cmpq	%rdx, %rcx
               	je	0x43beb5 <std::current_exception()+0x48>
               	movq	(%rax), %rsi
               	movq	%rbx, %rdi
               	callq	0x43bda4 <std::__exception_ptr::exception_ptr::exception_ptr(void*)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::rethrow_exception(std::__exception_ptr::exception_ptr)>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bdf0 <std::__exception_ptr::exception_ptr::_M_get() const>
               	movq	%rax, %rbp
               	callq	0x43bc53 <__cxa_allocate_dependent_exception>
               	movq	%rax, %rbx
               	movq	%rbp, (%rax)
               	lock
               	incl	-128(%rbp)
               	callq	0x43c487 <std::get_unexpected()>
               	addq	$80, %rbx
               	movq	%rax, -64(%rbx)
               	callq	0x43c458 <std::get_terminate()>
               	movq	%rax, -56(%rbx)
               	movabsq	$5138137972254386945, %rax # imm = 0x474E5543432B2B01
               	movq	%rax, (%rbx)
               	leaq	-447(%rip), %rax        # 0x43bd47 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43c4e8 <__cxa_get_globals>
               	movq	%rbx, %rdi
               	incl	8(%rax)
               	callq	0x413ab0 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c463 <std::terminate()>
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	pushq	%rbx
               	movl	$1, %eax
               	movq	%rdx, %rbx
               	shlq	$36, %rax
               	subq	$32, %rsp
               	movq	(%rdx), %rdx
               	movq	%rax, 16(%rsp)
               	movq	(%rdi), %rax
               	leaq	8(%rsp), %rcx
               	movq	$0, 8(%rsp)
               	movq	$0, 24(%rsp)
               	callq	*48(%rax)
               	movl	16(%rsp), %edx
               	xorl	%eax, %eax
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x43bf76 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x4e>
               	movq	8(%rsp), %rax
               	movq	%rax, (%rbx)
               	movb	$1, %al
               	addq	$32, %rsp
               	popq	%rbx
               	retq

<__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	xorl	%eax, %eax
               	cmpq	%r8, %rdx
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	retq
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	leaq	149455(%rip), %rax      # 0x460760 <vtable for __cxxabiv1::__class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f55c <std::type_info::~type_info()>
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bf8a <__cxxabiv1::__class_type_info::~__class_type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43bfd1 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43bfd1 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	56(%rsp), %rbx
               	movq	8(%rdi), %r13
               	cmpq	48(%rsp), %r8
               	jne	0x43c007 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movq	8(%r9), %rsi
               	movq	%r13, %rdi
               	callq	0x43bfb6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43c007 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movl	%ebp, 12(%rbx)
               	jmp	0x43c024 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	8(%r14), %rsi
               	movq	%r13, %rdi
               	callq	0x43bfb6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43c024 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	%r12, (%rbx)
               	movl	%ebp, 8(%rbx)
               	movl	$1, 16(%rbx)
               	popq	%rbx
               	xorl	%eax, %eax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	pushq	%r8
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	callq	0x43bfb6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43c05d <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x2d>
               	movq	%rbp, (%rbx)
               	movq	$16, 16(%rbx)
               	movl	$6, 8(%rbx)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	movq	%rdx, 8(%rsp)
               	callq	0x43bfb6 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	jne	0x43c0ab <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	cmpl	$3, %r12d
               	ja	0x43c0ab <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	40(%rax), %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmpq	*%rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<operator delete(void*, unsigned long)>:
               	jmp	0x43b785 <operator delete(void*)>

<operator new(unsigned long)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	jne	0x43c0c7 <operator new(unsigned long)+0xe>
               	movl	$1, %ebx
               	movq	%rbx, %rdi
               	callq	0x413aa0 <malloc@plt>
               	testq	%rax, %rax
               	jne	0x43c110 <operator new(unsigned long)+0x57>
               	callq	0x43c309 <std::get_new_handler()>
               	testq	%rax, %rax
               	jne	0x43c10c <operator new(unsigned long)+0x53>
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	149217(%rip), %rdx      # 0x4607d0 <vtable for std::bad_alloc>
               	leaq	149186(%rip), %rsi      # 0x4607b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	929(%rip), %rdx         # 0x43c4a8 <std::bad_alloc::~bad_alloc()>
               	callq	0x43c265 <__cxa_throw>
               	callq	*%rax
               	jmp	0x43c0c7 <operator new(unsigned long)+0xe>
               	popq	%rbx
               	retq

<__cxa_get_exception_ptr>:
               	movq	-8(%rdi), %rax
               	retq

<__cxa_begin_catch>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c4e8 <__cxa_get_globals>
               	leaq	-80(%rbx), %rsi
               	movabsq	$-5138137972254386944, %rcx # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rcx
               	movq	(%rax), %rdx
               	cmpq	$1, %rcx
               	jbe	0x43c149 <__cxa_begin_catch+0x32>
               	testq	%rdx, %rdx
               	je	0x43c144 <__cxa_begin_catch+0x2d>
               	callq	0x43c463 <std::terminate()>
               	movq	%rsi, (%rax)
               	jmp	0x43c170 <__cxa_begin_catch+0x59>
               	movl	-40(%rbx), %edi
               	leal	1(%rdi), %ecx
               	testl	%edi, %edi
               	jns	0x43c15a <__cxa_begin_catch+0x43>
               	movl	$1, %ecx
               	subl	%edi, %ecx
               	movl	%ecx, -40(%rbx)
               	decl	8(%rax)
               	cmpq	%rsi, %rdx
               	je	0x43c16c <__cxa_begin_catch+0x55>
               	movq	%rdx, -48(%rbx)
               	movq	%rsi, (%rax)
               	movq	-8(%rbx), %rdx
               	movq	%rdx, %rax
               	popq	%rbx
               	retq

<__cxa_end_catch>:
               	pushq	%rcx
               	callq	0x43c4d3 <__cxa_get_globals_fast>
               	movq	(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x43c1d3 <__cxa_end_catch+0x5e>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43c1a0 <__cxa_end_catch+0x2b>
               	movq	$0, (%rax)
               	jmp	0x43c1bf <__cxa_end_catch+0x4a>
               	movl	40(%rdi), %edx
               	testl	%edx, %edx
               	jns	0x43c1b4 <__cxa_end_catch+0x3f>
               	incl	%edx
               	jne	0x43c1d0 <__cxa_end_catch+0x5b>
               	movq	32(%rdi), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x43c1d0 <__cxa_end_catch+0x5b>
               	decl	%edx
               	jne	0x43c1c9 <__cxa_end_catch+0x54>
               	movq	32(%rdi), %rdx
               	movq	%rdx, (%rax)
               	addq	$80, %rdi
               	popq	%rdx
               	jmp	0x413ac0 <_Unwind_DeleteException@plt>
               	jns	0x43c1d0 <__cxa_end_catch+0x5b>
               	callq	0x43c463 <std::terminate()>
               	movl	%edx, 40(%rdi)
               	popq	%rax
               	retq

<std::uncaught_exception()>:
               	pushq	%rax
               	callq	0x43c4e8 <__cxa_get_globals>
               	cmpl	$0, 8(%rax)
               	popq	%rdx
               	setne	%al
               	retq

<std::uncaught_exceptions()>:
               	pushq	%rax
               	callq	0x43c4e8 <__cxa_get_globals>
               	movl	8(%rax), %eax
               	popq	%rdx
               	retq

<__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	cmpl	$1, %edi
               	jbe	0x43c1fe <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0xf>
               	movq	-56(%rsi), %rdi
               	callq	0x43c438 <__cxxabiv1::__terminate(void (*)())>
               	lock
               	decl	-96(%rsi)
               	jne	0x43c21f <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x30>
               	movq	-72(%rsi), %rax
               	leaq	32(%rsi), %rbx
               	testq	%rax, %rax
               	je	0x43c216 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x27>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bc2d <__cxa_free_exception>
               	popq	%rbx
               	retq

<__cxa_init_primary_exception>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	$0, -128(%rdi)
               	movq	%rsi, -112(%rdi)
               	movq	%rdx, -104(%rdi)
               	callq	0x43c487 <std::get_unexpected()>
               	movq	%rax, -96(%rbx)
               	callq	0x43c458 <std::get_terminate()>
               	movq	%rax, -88(%rbx)
               	movabsq	$5138137972254386944, %rax # imm = 0x474E5543432B2B00
               	movq	%rax, -32(%rbx)
               	leaq	-108(%rip), %rax        # 0x43c1ef <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, -24(%rbx)
               	leaq	-128(%rbx), %rax
               	popq	%rbx
               	retq

<__cxa_throw>:
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43c4e8 <__cxa_get_globals>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %rsi
               	incl	8(%rax)
               	movq	24(%rsp), %rdi
               	callq	0x43c221 <__cxa_init_primary_exception>
               	movl	$1, (%rax)
               	leaq	96(%rax), %rbx
               	movq	%rbx, %rdi
               	callq	0x413ab0 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c463 <std::terminate()>

<__cxa_rethrow>:
               	pushq	%rbx
               	callq	0x43c4e8 <__cxa_get_globals>
               	movq	(%rax), %rdi
               	incl	8(%rax)
               	testq	%rdi, %rdi
               	je	0x43c2f9 <__cxa_rethrow+0x45>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43c2e2 <__cxa_rethrow+0x2e>
               	movq	$0, (%rax)
               	jmp	0x43c2e5 <__cxa_rethrow+0x31>
               	negl	40(%rdi)
               	leaq	80(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413ad0 <_Unwind_Resume_or_Rethrow@plt>
               	movq	%rbx, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c463 <std::terminate()>

<std::set_new_handler(void (*)())>:
               	movq	%rdi, %rax
               	xchgq	%rax, 264568(%rip)      # 0x47cc80 <(anonymous namespace)::__new_handler>
               	retq

<std::get_new_handler()>:
               	movq	264560(%rip), %rax      # 0x47cc80 <(anonymous namespace)::__new_handler>
               	retq

<__cxa_guard_acquire>:
               	movb	(%rdi), %al
               	testb	%al, %al
               	jne	0x43c3cb <__cxa_guard_acquire+0xba>
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	cmpq	$0, 150667(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x43c381 <__cxa_guard_acquire+0x70>
               	movl	$1, %r12d
               	movl	$256, %ebp              # imm = 0x100
               	xorl	%r13d, %r13d
               	movl	%r13d, %eax
               	lock
               	cmpxchgl	%ebp, (%rbx)
               	je	0x43c3be <__cxa_guard_acquire+0xad>
               	movl	%eax, %ecx
               	cmpl	%eax, %r12d
               	jne	0x43c351 <__cxa_guard_acquire+0x40>
               	xorl	%eax, %eax
               	jmp	0x43c3c3 <__cxa_guard_acquire+0xb2>
               	cmpl	%eax, %ebp
               	jne	0x43c36b <__cxa_guard_acquire+0x5a>
               	movl	$65792, %ecx            # imm = 0x10100
               	movl	%ebp, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	je	0x43c36b <__cxa_guard_acquire+0x5a>
               	cmpl	%eax, %r12d
               	je	0x43c34d <__cxa_guard_acquire+0x3c>
               	testl	%eax, %eax
               	je	0x43c33d <__cxa_guard_acquire+0x2c>
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	%rbx, %rsi
               	movl	$202, %edi
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	jmp	0x43c33d <__cxa_guard_acquire+0x2c>
               	cmpb	$0, (%rdi)
               	jne	0x43c34d <__cxa_guard_acquire+0x3c>
               	cmpb	$0, 1(%rdi)
               	je	0x43c3ba <__cxa_guard_acquire+0xa9>
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	149163(%rip), %rdx      # 0x460a48 <vtable for __gnu_cxx::recursive_init_error>
               	leaq	149132(%rip), %rsi      # 0x460a30 <typeinfo for __gnu_cxx::recursive_init_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	12869(%rip), %rdx       # 0x43f5fa <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	callq	0x43c265 <__cxa_throw>
               	movb	$1, 1(%rdi)
               	movl	$1, %eax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	xorl	%eax, %eax
               	retq

<__cxa_guard_abort>:
               	cmpq	$0, 150498(%rip)        # 0x460fb8 <write+0x460fb8>
               	movq	%rdi, %rsi
               	je	0x43c3fb <__cxa_guard_abort+0x2d>
               	xorl	%eax, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43c3ff <__cxa_guard_abort+0x31>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	movb	$0, 1(%rdi)
               	retq

<__cxa_guard_release>:
               	cmpq	$0, 150448(%rip)        # 0x460fb8 <write+0x460fb8>
               	movq	%rdi, %rsi
               	je	0x43c430 <__cxa_guard_release+0x30>
               	movl	$1, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43c437 <__cxa_guard_release+0x37>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	movb	$0, 1(%rdi)
               	movb	$1, (%rdi)
               	retq

<__cxxabiv1::__terminate(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	jmp	0x43c445 <__cxxabiv1::__terminate(void (*)())+0xd>
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x4138f0 <abort@plt>

<std::set_terminate(void (*)())>:
               	leaq	159047(%rip), %rdx      # 0x463198 <__cxxabiv1::__terminate_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_terminate()>:
               	leaq	159033(%rip), %rax      # 0x463198 <__cxxabiv1::__terminate_handler>
               	movq	(%rax), %rax
               	retq

<std::terminate()>:
               	pushq	%rax
               	callq	0x43c458 <std::get_terminate()>
               	movq	%rax, %rdi
               	callq	0x43c438 <__cxxabiv1::__terminate(void (*)())>

<__cxxabiv1::__unexpected(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	callq	0x43c463 <std::terminate()>

<std::set_unexpected(void (*)())>:
               	leaq	159016(%rip), %rdx      # 0x4631a8 <__cxxabiv1::__unexpected_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_unexpected()>:
               	leaq	159002(%rip), %rax      # 0x4631a8 <__cxxabiv1::__unexpected_handler>
               	movq	(%rax), %rax
               	retq

<std::unexpected()>:
               	pushq	%rax
               	callq	0x43c487 <std::get_unexpected()>
               	movq	%rax, %rdi
               	callq	0x43c471 <__cxxabiv1::__unexpected(void (*)())>

<std::bad_alloc::what() const>:
               	leaq	38196(%rip), %rax       # 0x4459db <typeinfo name for kotlin::gc::GCSchedulerData+0x1a22>
               	retq

<std::bad_alloc::~bad_alloc()>:
               	leaq	148257(%rip), %rax      # 0x4607d0 <vtable for std::bad_alloc>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::bad_alloc::~bad_alloc()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c4a8 <std::bad_alloc::~bad_alloc()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>

<__cxa_get_globals_fast>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__cxa_get_globals>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__gnu_cxx::__verbose_terminate_handler()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpb	$0, 264060(%rip)        # 0x47cc88 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	movq	150197(%rip), %rbx      # 0x460fc8 <write+0x460fc8>
               	je	0x43c524 <__gnu_cxx::__verbose_terminate_handler()+0x27>
               	movq	(%rbx), %rsi
               	leaq	38091(%rip), %rdi       # 0x4459ea <typeinfo name for kotlin::gc::GCSchedulerData+0x1a31>
               	jmp	0x43c5af <__gnu_cxx::__verbose_terminate_handler()+0xb2>
               	movb	$1, 264029(%rip)        # 0x47cc88 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	callq	0x43f5a2 <__cxa_current_exception_type>
               	testq	%rax, %rax
               	je	0x43c5a5 <__gnu_cxx::__verbose_terminate_handler()+0xa8>
               	movq	8(%rax), %rbp
               	cmpb	$42, (%rbp)
               	jne	0x43c542 <__gnu_cxx::__verbose_terminate_handler()+0x45>
               	incq	%rbp
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	leaq	12(%rsp), %rcx
               	movq	%rbp, %rdi
               	movl	$4294967295, 12(%rsp)   # imm = 0xFFFFFFFF
               	callq	0x435890 <__cxa_demangle>
               	movq	(%rbx), %rsi
               	leaq	38051(%rip), %rdi       # 0x445a08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a4f>
               	movq	%rax, %r12
               	callq	0x413790 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	je	0x43c57d <__gnu_cxx::__verbose_terminate_handler()+0x80>
               	movq	%rbp, %rdi
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	leaq	38061(%rip), %rdi       # 0x445a39 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a80>
               	callq	0x413790 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	jne	0x43c5a0 <__gnu_cxx::__verbose_terminate_handler()+0xa3>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	callq	0x43c2b4 <__cxa_rethrow>
               	movq	(%rbx), %rsi
               	leaq	38029(%rip), %rdi       # 0x445a3c <typeinfo name for kotlin::gc::GCSchedulerData+0x1a83>
               	callq	0x413790 <fputs@plt>
               	callq	0x4138f0 <abort@plt>
               	movq	%rax, %rdi
               	decq	%rdx
               	jne	0x43c600 <__gnu_cxx::__verbose_terminate_handler()+0x103>
               	callq	0x43c117 <__cxa_begin_catch>
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	callq	*16(%rdx)
               	movq	(%rbx), %rsi
               	leaq	38033(%rip), %rdi       # 0x445a6a <typeinfo name for kotlin::gc::GCSchedulerData+0x1ab1>
               	movq	%rax, %rbp
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	movl	$10, %edi
               	callq	0x413ae0 <fputc@plt>
               	callq	0x43c175 <__cxa_end_catch>
               	jmp	0x43c5b4 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c175 <__cxa_end_catch>
               	jmp	0x43c5b4 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	movq	%rax, %rbx
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<__cxa_call_terminate>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x43c646 <__cxa_call_terminate+0x2a>
               	movq	%rdi, %rbx
               	callq	0x43c117 <__cxa_begin_catch>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rax
               	cmpq	$1, %rax
               	ja	0x43c646 <__cxa_call_terminate+0x2a>
               	movq	-56(%rbx), %rdi
               	callq	0x43c438 <__cxxabiv1::__terminate(void (*)())>
               	callq	0x43c463 <std::terminate()>
               	nop

<std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	cmpq	%rdi, %rax
               	je	0x43c6ac <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x60>
               	cmpq	%rdx, %rsi
               	je	0x43c68f <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x43>
               	movq	%rdx, (%rdi)
               	movq	8(%rsi), %rdx
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdx, 8(%rdi)
               	movq	%rax, 8(%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdi, (%rax)
               	movq	(%rdi), %rax
               	movq	%rdi, 8(%rax)
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	retq
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rax, 8(%rsi)
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	movq	%rdi, 8(%rdi)
               	movq	%rdi, (%rdi)
               	retq
               	cmpq	%rdx, %rsi
               	je	0x43c6cd <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x81>
               	movq	%rdx, (%rax)
               	movq	8(%rsi), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rax, (%rdx)
               	movq	(%rax), %rdx
               	movq	%rax, 8(%rdx)
               	movq	%rsi, 8(%rsi)
               	movq	%rsi, (%rsi)
               	retq

<std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>:
               	cmpq	%rdx, %rdi
               	je	0x43c6f8 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)+0x2a>
               	movq	8(%rdx), %rcx
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rcx)
               	movq	%rdx, (%rax)
               	movq	8(%rdi), %rax
               	movq	%rsi, (%rax)
               	movq	%rcx, 8(%rdi)
               	movq	8(%rsi), %rcx
               	movq	%rcx, 8(%rdx)
               	movq	%rax, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_reverse()>:
               	movq	%rdi, %rax
               	movq	(%rax), %rdx
               	movq	8(%rax), %rcx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, (%rax)
               	movq	%rdx, %rax
               	cmpq	%rdx, %rdi
               	jne	0x43c6fd <std::__detail::_List_node_base::_M_reverse()+0x3>
               	retq

<std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rdi)
               	movq	%rax, 8(%rdi)
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rax)
               	movq	%rdi, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_unhook()>:
               	movq	(%rdi), %rax
               	movq	8(%rdi), %rdx
               	movq	%rax, (%rdx)
               	movq	%rdx, 8(%rax)
               	retq

<std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	24(%rdi), %rax
               	movq	16(%rax), %rdx
               	movq	%rdx, 24(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c750 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c762 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c772 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 16(%rdx)
               	jne	0x43c76e <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 16(%rdx)
               	jmp	0x43c772 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 24(%rdx)
               	movq	%rdi, 16(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	16(%rdi), %rax
               	movq	24(%rax), %rdx
               	movq	%rdx, 16(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c790 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c7a2 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c7b2 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 24(%rdx)
               	jne	0x43c7ae <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 24(%rdx)
               	jmp	0x43c7b2 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 16(%rdx)
               	movq	%rdi, 24(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	cmpl	$0, (%rdi)
               	jne	0x43c7cf <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 8(%rax)
               	jne	0x43c7cf <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	24(%rdi), %rax
               	retq
               	movq	16(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c7e6 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2b>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c7f9 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rdx, %rax
               	jmp	0x43c7d8 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x1d>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 16(%rax)
               	jne	0x43c7f9 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rax, %rdi
               	movq	8(%rax), %rax
               	jmp	0x43c7ea <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2f>
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c811 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c830 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c803 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c827 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c818 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c830 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c848 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c867 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c83a <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c85e <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c84f <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c867 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	jmp	0x43c7bb <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)>:
               	jmp	0x43c7bb <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c73b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c77b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	%rsi, %r8
               	leaq	8(%rcx), %r11
               	movq	%rdx, 8(%rsi)
               	movq	$0, 16(%rsi)
               	movq	$0, 24(%rsi)
               	movl	$0, (%rsi)
               	testb	%dil, %dil
               	je	0x43c8bd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x41>
               	movq	%rsi, 16(%rdx)
               	cmpq	%rdx, %rcx
               	jne	0x43c8b1 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x35>
               	movq	%rsi, 8(%rcx)
               	jmp	0x43c8c7 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x4b>
               	cmpq	%rdx, 16(%rcx)
               	jne	0x43c90d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 16(%rcx)
               	jmp	0x43c90d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 24(%rdx)
               	cmpq	%rdx, 24(%rcx)
               	jne	0x43c90d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%r8, 24(%rcx)
               	jmp	0x43c90d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	8(%r8), %r10
               	cmpl	$0, (%r10)
               	jne	0x43c98c <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x110>
               	movq	8(%r10), %r9
               	movq	16(%r9), %rax
               	cmpq	%rax, %r10
               	jne	0x43c94a <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xce>
               	movq	24(%r9), %rax
               	testq	%rax, %rax
               	je	0x43c918 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	cmpl	$0, (%rax)
               	jne	0x43c918 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	movl	$1, (%r10)
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	movq	%r9, %r8
               	movq	8(%rcx), %rax
               	cmpq	%r8, %rax
               	jne	0x43c8cd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x51>
               	jmp	0x43c989 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x10d>
               	cmpq	%r8, 24(%r10)
               	jne	0x43c92c <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xb0>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c73b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c77b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43c984 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x108>
               	testq	%rax, %rax
               	je	0x43c954 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd8>
               	cmpl	$0, (%rax)
               	je	0x43c8f6 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x7a>
               	cmpq	%r8, 16(%r10)
               	jne	0x43c968 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xec>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c77b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c73b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r8, %r9
               	jmp	0x43c90a <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8e>
               	movq	%r8, %rax
               	movl	$1, (%rax)
               	retq

<std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	16(%rdi), %r9
               	movq	%rsi, %r10
               	movq	%rdi, %r8
               	movq	24(%rdi), %rsi
               	testq	%r9, %r9
               	je	0x43ca38 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xa5>
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43ca40 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c9c4 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x31>
               	movq	%rdx, %rax
               	jmp	0x43c9b6 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x23>
               	movq	24(%rax), %rdx
               	cmpq	%r8, %rax
               	je	0x43ca3d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xaa>
               	movq	%rax, 8(%r9)
               	movq	%rax, %rcx
               	movq	%r9, 16(%rax)
               	cmpq	%rax, %rsi
               	je	0x43c9fe <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x6b>
               	movq	8(%rax), %rcx
               	testq	%rdx, %rdx
               	je	0x43c9ea <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x57>
               	movq	%rcx, 8(%rdx)
               	movq	8(%rax), %rdi
               	movq	%rdx, 16(%rdi)
               	movq	%rsi, 24(%rax)
               	movq	24(%r8), %rsi
               	movq	%rax, 8(%rsi)
               	cmpq	%r8, 8(%r10)
               	jne	0x43ca0a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x77>
               	movq	%rax, 8(%r10)
               	jmp	0x43ca1e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	8(%r8), %rsi
               	cmpq	%r8, 16(%rsi)
               	jne	0x43ca1a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x87>
               	movq	%rax, 16(%rsi)
               	jmp	0x43ca1e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	%rax, 24(%rsi)
               	movq	8(%r8), %rsi
               	movl	(%r8), %edi
               	movq	%rdx, %r9
               	movq	%rsi, 8(%rax)
               	movl	(%rax), %esi
               	movl	%edi, (%rax)
               	movl	%esi, (%r8)
               	jmp	0x43cabd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	movq	%rsi, %r9
               	jmp	0x43ca40 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	%rdx, %r9
               	movq	8(%r8), %rcx
               	testq	%r9, %r9
               	je	0x43ca4d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xba>
               	movq	%rcx, 8(%r9)
               	cmpq	%r8, 8(%r10)
               	jne	0x43ca59 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xc6>
               	movq	%r9, 8(%r10)
               	jmp	0x43ca6d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	8(%r8), %rax
               	cmpq	%r8, 16(%rax)
               	jne	0x43ca69 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd6>
               	movq	%r9, 16(%rax)
               	jmp	0x43ca6d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	%r9, 24(%rax)
               	cmpq	%r8, 16(%r10)
               	jne	0x43ca95 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x102>
               	cmpq	$0, 24(%r8)
               	movq	%r9, %rax
               	jne	0x43ca83 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	8(%r8), %rax
               	jmp	0x43ca91 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43ca91 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	%rdx, %rax
               	jmp	0x43ca83 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	%rax, 16(%r10)
               	cmpq	%r8, 24(%r10)
               	jne	0x43cabd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	cmpq	$0, 16(%r8)
               	movq	%r9, %rax
               	jne	0x43caab <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	8(%r8), %rax
               	jmp	0x43cab9 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43cab9 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	%rdx, %rax
               	jmp	0x43caab <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	%rax, 24(%r10)
               	cmpl	$0, (%r8)
               	leaq	8(%r10), %r11
               	je	0x43cc2c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	cmpq	%r9, 8(%r10)
               	je	0x43cc23 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	testq	%r9, %r9
               	je	0x43caec <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	cmpl	$1, (%r9)
               	je	0x43caec <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	movl	$1, (%r9)
               	jmp	0x43cc2c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	movq	16(%rcx), %rdi
               	cmpq	%r9, %rdi
               	jne	0x43cb8c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1f9>
               	movq	24(%rcx), %rdi
               	cmpl	$0, (%rdi)
               	jne	0x43cb1d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x18a>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c73b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43cb2f <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x19c>
               	cmpl	$1, (%rdx)
               	jne	0x43cb41 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1ae>
               	testq	%rax, %rax
               	je	0x43cbc8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	je	0x43cbc8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	testq	%rax, %rax
               	je	0x43cb4b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1b8>
               	cmpl	$1, (%rax)
               	jne	0x43cb63 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1d0>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c77b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	24(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43cb7c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1e9>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c73b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43cc23 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	cmpl	$0, (%rdi)
               	jne	0x43cbac <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x219>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c77b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movq	24(%rdi), %rdx
               	movq	16(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43cbbe <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x22b>
               	cmpl	$1, (%rdx)
               	jne	0x43cbdd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	testq	%rax, %rax
               	je	0x43cbc8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	jne	0x43cbdd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	movq	8(%rcx), %rax
               	movq	%rcx, %r9
               	movl	$0, (%rdi)
               	movq	%rax, %rcx
               	jmp	0x43cacb <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x138>
               	testq	%rax, %rax
               	je	0x43cbe7 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x254>
               	cmpl	$1, (%rax)
               	jne	0x43cbff <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x26c>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c73b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	16(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43cc18 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x285>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c77b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	testq	%r9, %r9
               	jne	0x43cae0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x14d>
               	movq	%r8, %rax
               	retq

<std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)>:
               	xorl	%eax, %eax
               	testq	%rdi, %rdi
               	je	0x43cc49 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	cmpl	$1, (%rdi)
               	jne	0x43cc3e <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0xe>
               	incl	%eax
               	cmpq	%rsi, %rdi
               	je	0x43cc49 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	movq	8(%rdi), %rdi
               	jmp	0x43cc37 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x7>
               	retq

<std::(anonymous namespace)::run(void*)>:
               	movq	%rdi, %rax
               	testq	%rdi, %rdi
               	jne	0x43cc53 <std::(anonymous namespace)::run(void*)+0x9>
               	retq
               	pushq	%rbx
               	movq	(%rax), %rbx
               	movq	%rax, %rdi
               	callq	*8(%rax)
               	movq	%rbx, %rax
               	testq	%rbx, %rbx
               	jne	0x43cc54 <std::(anonymous namespace)::run(void*)+0xa>
               	popq	%rbx
               	retq
               	nop

<std::(anonymous namespace)::key_init()::key_s::~key_s()>:
               	movl	262190(%rip), %edi      # 0x47cc9c <std::(anonymous namespace)::key>
               	jmp	0x413af0 <pthread_key_delete@plt>

<std::(anonymous namespace)::key_init()>:
               	movb	262167(%rip), %al       # 0x47cc90 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	leaq	91(%rip), %rdi          # 0x43ccdb <std::(anonymous namespace)::run()>
               	testb	%al, %al
               	jne	0x43ccd6 <std::(anonymous namespace)::key_init()+0x63>
               	pushq	%rdx
               	leaq	262148(%rip), %rdi      # 0x47cc90 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43c311 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43ccce <std::(anonymous namespace)::key_init()+0x5b>
               	leaq	-82(%rip), %rsi         # 0x43cc4a <std::(anonymous namespace)::run(void*)>
               	leaq	262137(%rip), %rdi      # 0x47cc9c <std::(anonymous namespace)::key>
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	262113(%rip), %rdi      # 0x47cc90 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43c400 <__cxa_guard_release>
               	leaq	149053(%rip), %rdx      # 0x4612f8 <__dso_handle>
               	leaq	262102(%rip), %rsi      # 0x47cc98 <std::(anonymous namespace)::key_init()::ks>
               	leaq	-97(%rip), %rdi         # 0x43cc68 <std::(anonymous namespace)::key_init()::key_s::~key_s()>
               	callq	0x413b00 <__cxa_atexit@plt>
               	leaq	6(%rip), %rdi           # 0x43ccdb <std::(anonymous namespace)::run()>
               	popq	%rax
               	jmp	0x442ee0 <atexit>

<std::(anonymous namespace)::run()>:
               	pushq	%rbx
               	movl	262074(%rip), %edi      # 0x47cc9c <std::(anonymous namespace)::key>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movl	262063(%rip), %edi      # 0x47cc9c <std::(anonymous namespace)::key>
               	xorl	%esi, %esi
               	movq	%rax, %rbx
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43cc4a <std::(anonymous namespace)::run(void*)>

<std::condition_variable::condition_variable()>:
               	movl	$12, %ecx
               	xorl	%eax, %eax
               	rep		stosl	%eax, %es:(%rdi)
               	retq

<std::condition_variable::~condition_variable()>:
               	jmp	0x4139b0 <pthread_cond_destroy@plt>
               	nop

<std::condition_variable::wait(std::unique_lock<std::mutex>&)>:
               	pushq	%rdx
               	movq	(%rsi), %rsi
               	callq	0x413b10 <pthread_cond_wait@plt>
               	testl	%eax, %eax
               	je	0x43cd22 <std::condition_variable::wait(std::unique_lock<std::mutex>&)+0x12>
               	callq	0x43c463 <std::terminate()>
               	popq	%rax
               	retq

<std::condition_variable::notify_one()>:
               	pushq	%rdx
               	callq	0x413970 <pthread_cond_signal@plt>
               	testl	%eax, %eax
               	je	0x43cd35 <std::condition_variable::notify_one()+0x11>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	popq	%rax
               	retq
               	nop

<std::condition_variable::notify_all()>:
               	pushq	%rdx
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	testl	%eax, %eax
               	je	0x43cd49 <std::condition_variable::notify_all()+0x11>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	popq	%rax
               	retq

<std::(anonymous namespace)::notifier::run(void*)>:
               	testq	%rdi, %rdi
               	je	0x43cd79 <std::(anonymous namespace)::notifier::run(void*)+0x2e>
               	cmpq	$0, 148064(%rip)        # 0x460fb8 <write+0x460fb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43cd67 <std::(anonymous namespace)::notifier::run(void*)+0x1c>
               	movq	24(%rdi), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	16(%rbx), %rdi
               	callq	0x43cd38 <std::condition_variable::notify_all()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>
               	retq

<std::__at_thread_exit(std::__at_thread_exit_elt*)>:
               	cmpq	$0, 148022(%rip)        # 0x460fb8 <write+0x460fb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43cd9b <std::__at_thread_exit(std::__at_thread_exit_elt*)+0x21>
               	leaq	-284(%rip), %rsi        # 0x43cc73 <std::(anonymous namespace)::key_init()>
               	leaq	261878(%rip), %rdi      # 0x47cc8c <std::__at_thread_exit(std::__at_thread_exit_elt*)::once>
               	callq	0x4139c0 <pthread_once@plt>
               	movl	261883(%rip), %edi      # 0x47cc9c <std::(anonymous namespace)::key>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movl	261872(%rip), %edi      # 0x47cc9c <std::(anonymous namespace)::key>
               	movq	%rbx, %rsi
               	movq	%rax, (%rbx)
               	popq	%rbx
               	jmp	0x4137f0 <pthread_setspecific@plt>

<std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movl	$32, %edi
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43c0b9 <operator new(unsigned long)>
               	movb	$0, 8(%rbp)
               	movq	%rax, %rbx
               	movq	%r12, 16(%rax)
               	movq	(%rbp), %rax
               	movq	$0, (%rbp)
               	movq	%rbx, %rdi
               	movq	%rax, 24(%rbx)
               	leaq	-166(%rip), %rax        # 0x43cd4b <std::(anonymous namespace)::notifier::run(void*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43cd7a <std::__at_thread_exit(std::__at_thread_exit_elt*)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b785 <operator delete(void*)>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<(anonymous namespace)::generic_error_category::name() const>:
               	leaq	35933(%rip), %rax       # 0x445a76 <typeinfo name for kotlin::gc::GCSchedulerData+0x1abd>
               	retq

<(anonymous namespace)::system_error_category::name() const>:
               	leaq	35933(%rip), %rax       # 0x445a7e <typeinfo name for kotlin::gc::GCSchedulerData+0x1ac5>
               	retq

<std::_V2::error_category::default_error_condition(int) const>:
               	movq	%rdi, %rdx
               	movl	%esi, %eax
               	retq

<std::_V2::error_category::equivalent(int, std::error_condition const&) const>:
               	movq	(%rdi), %rax
               	pushq	%rbx
               	movq	%rdx, %rbx
               	callq	*40(%rax)
               	xorl	%ecx, %ecx
               	cmpq	%rdx, 8(%rbx)
               	jne	0x43ce3f <std::_V2::error_category::equivalent(int, std::error_condition const&) const+0x17>
               	cmpl	%eax, (%rbx)
               	sete	%cl
               	movl	%ecx, %eax
               	popq	%rbx
               	retq
               	nop

<std::_V2::error_category::equivalent(std::error_code const&, int) const>:
               	xorl	%eax, %eax
               	cmpq	8(%rsi), %rdi
               	jne	0x43ce51 <std::_V2::error_category::equivalent(std::error_code const&, int) const+0xd>
               	cmpl	%edx, (%rsi)
               	sete	%al
               	retq

<std::system_error::~system_error()>:
               	leaq	146151(%rip), %rax      # 0x460940 <vtable for std::system_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f6a8 <std::runtime_error::~runtime_error()>
               	nop

<std::system_error::~system_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ce52 <std::system_error::~system_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::_V2::error_category::_M_message[abi:cxx11](int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rsi), %rax
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	8(%rsp), %rdx
               	movq	(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x43fa9c <std::__cow_string::__cow_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	addq	$40, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	%edx, %edi
               	callq	0x413830 <strerror@plt>
               	orq	$-1, %rdx
               	movq	%rax, %rsi
               	leaq	16(%rbx), %rax
               	movq	%rax, (%rbx)
               	testq	%rsi, %rsi
               	je	0x43cef7 <(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const+0x33>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%rbx, %rdi
               	callq	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::~error_category()>:
               	retq
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	leaq	145827(%rip), %rax      # 0x4608b0 <vtable for (anonymous namespace)::system_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43cf04 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf06 <(anonymous namespace)::system_error_category::~system_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	leaq	145713(%rip), %rax      # 0x460860 <vtable for (anonymous namespace)::generic_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43cf04 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf28 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::_V2::error_category::~error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf04 <std::_V2::error_category::~error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::_V2::system_category()>:
               	leaq	156237(%rip), %rax      # 0x4631b0 <(anonymous namespace)::system_category_instance>
               	retq

<std::_V2::generic_category()>:
               	leaq	156237(%rip), %rax      # 0x4631b8 <(anonymous namespace)::generic_category_instance>
               	retq

<(anonymous namespace)::system_error_category::default_error_condition(int) const>:
               	cmpl	$84, %esi
               	pushq	%rbx
               	movl	%esi, %ebx
               	je	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cfac <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x40>
               	cmpl	$43, %esi
               	jg	0x43cf91 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x25>
               	cmpl	$42, %esi
               	jge	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	testl	%esi, %esi
               	jle	0x43cfee <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	cmpl	$14, %esi
               	jle	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	subl	$16, %esi
               	cmpl	$24, %esi
               	jmp	0x43cfe5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$67, %esi
               	je	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cfa0 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x34>
               	subl	$60, %esi
               	cmpl	$3, %esi
               	jmp	0x43cfe5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$71, %esi
               	je	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jl	0x43cfee <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	subl	$74, %esi
               	jmp	0x43cfe2 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x76>
               	cmpl	$111, %esi
               	jg	0x43cfcd <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x61>
               	cmpl	$110, %esi
               	jge	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	cmpl	$95, %esi
               	je	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cfc5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x59>
               	subl	$88, %esi
               	cmpl	$5, %esi
               	jmp	0x43cfe5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$97, %esi
               	cmpl	$10, %esi
               	jmp	0x43cfe5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$125, %esi
               	je	0x43cfe7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cfdc <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x70>
               	subl	$113, %esi
               	cmpl	$2, %esi
               	jmp	0x43cfe5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$130, %esi
               	cmpl	$1, %esi
               	ja	0x43cfee <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	callq	0x43cf64 <std::_V2::generic_category()>
               	jmp	0x43cff3 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x87>
               	callq	0x43cf5c <std::_V2::system_category()>
               	movq	%rax, %rdx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq

<std::__throw_system_error(int)>:
               	pushq	%r13
               	movl	%edi, %r13d
               	movl	$32, %edi
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rsp, %r12
               	movq	%rax, %rbx
               	callq	0x43cf64 <std::_V2::generic_category()>
               	movl	%r13d, %edx
               	movq	%r12, %rdi
               	movq	%rax, %rbp
               	movq	(%rax), %rax
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d404 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r12, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	145656(%rip), %rax      # 0x460940 <vtable for std::system_error>
               	movq	%rbx, %rdi
               	movl	%r13d, 16(%rbx)
               	leaq	-516(%rip), %rdx        # 0x43ce52 <std::system_error::~system_error()>
               	leaq	145323(%rip), %rsi      # 0x460808 <typeinfo for std::system_error>
               	movq	%rbp, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%r12, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43d07d <std::__throw_system_error(int)+0x83>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::error_code::default_error_condition() const>:
               	movq	8(%rdi), %rax
               	movl	(%rdi), %esi
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	movq	40(%rdx), %rdx
               	jmpq	*%rdx

<std::chrono::_V2::system_clock::now()>:
               	subq	$24, %rsp
               	xorl	%edi, %edi
               	movq	%rsp, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<std::chrono::_V2::steady_clock::now()>:
               	subq	$24, %rsp
               	movl	$1, %edi
               	movq	%rsp, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq
               	nop

<std::bad_function_call::what() const>:
               	leaq	35226(%rip), %rax       # 0x445a85 <typeinfo name for kotlin::gc::GCSchedulerData+0x1acc>
               	retq

<std::bad_function_call::~bad_function_call()>:
               	leaq	145549(%rip), %rax      # 0x460980 <vtable for std::bad_function_call>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::bad_function_call::~bad_function_call()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d0ec <std::bad_function_call::~bad_function_call()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::__throw_bad_function_call()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	145500(%rip), %rdx      # 0x460980 <vtable for std::bad_function_call>
               	leaq	145469(%rip), %rsi      # 0x460968 <typeinfo for std::bad_function_call>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-80(%rip), %rdx         # 0x43d0ec <std::bad_function_call::~bad_function_call()>
               	callq	0x43c265 <__cxa_throw>
               	nop

<std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	cmpq	$12, %rsi
               	ja	0x43d1ac <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x6a>
               	leaq	37808(%rip), %rax       # 0x446508 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const::__fast_bkt>
               	flds	(%rdi)
               	movzbl	(%rax,%rsi), %eax
               	movl	%eax, 4(%rsp)
               	fimull	4(%rsp)
               	movl	%eax, %ebp
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b20 <ceil@plt>
               	movsd	24281(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x443058 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43d190 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x4e>
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	jmp	0x43d1a3 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x61>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	movzbl	%bpl, %eax
               	jmp	0x43d242 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x100>
               	leaq	37741(%rip), %rcx       # 0x446520 <std::__detail::__prime_list>
               	incq	%rsi
               	movl	$297, %edx              # imm = 0x129
               	leaq	48(%rcx), %rbp
               	movq	%rdx, %rax
               	sarq	%rax
               	leaq	(%rbp,%rax,8), %rdi
               	cmpq	(%rdi), %rsi
               	ja	0x43d1d9 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x97>
               	testq	%rax, %rax
               	jle	0x43d1e6 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xa4>
               	movq	%rax, %rdx
               	jmp	0x43d1bf <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x7d>
               	subq	%rax, %rdx
               	leaq	8(%rdi), %rbp
               	leaq	-1(%rdx), %rax
               	jmp	0x43d1cf <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x8d>
               	leaq	2424(%rcx), %rdx
               	orq	$-1, %rax
               	cmpq	%rdx, %rbp
               	je	0x43d23a <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	fildll	(%rbp)
               	cmpq	$0, (%rbp)
               	jns	0x43d206 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xc4>
               	fadds	23890(%rip)             # 0x442f58 <_IO_stdin_used+0x18>
               	fmuls	(%rbx)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b20 <ceil@plt>
               	movsd	24121(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x443058 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43d22c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xea>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43d23a <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>:
               	addq	%rcx, %rdx
               	cmpq	8(%rdi), %rdx
               	jb	0x43d336 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xec>
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	flds	(%rdi)
               	movq	%rdx, (%rsp)
               	fildll	(%rsp)
               	testq	%rdx, %rdx
               	jns	0x43d271 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x27>
               	fadds	23783(%rip)             # 0x442f58 <_IO_stdin_used+0x18>
               	fdiv	%st(1), %st
               	movq	%rsi, (%rsp)
               	fildll	(%rsp)
               	testq	%rsi, %rsi
               	jns	0x43d289 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x3f>
               	fadds	23763(%rip)             # 0x442f58 <_IO_stdin_used+0x18>
               	fxch	%st(1)
               	jmp	0x43d28b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x41>
               	fxch	%st(1)
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	fcomi	%st(1), %st
               	jb	0x43d2f1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xa7>
               	fstp	%st(1)
               	fstp	%st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b30 <floor@plt>
               	addsd	23984(%rip), %xmm0      # 0x443060 <_IO_stdin_used+0x120>
               	comisd	23968(%rip), %xmm0      # 0x443058 <_IO_stdin_used+0x118>
               	jae	0x43d2c1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x77>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43d2d3 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x89>
               	subsd	23951(%rip), %xmm0      # 0x443058 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	leaq	(%rbp,%rbp), %rsi
               	movq	%rbx, %rdi
               	cmpq	%rsi, %rax
               	cmovaeq	%rax, %rsi
               	callq	0x43d142 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>
               	movq	%rax, %rdx
               	movl	$1, %eax
               	jmp	0x43d33b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	fstp	%st(0)
               	fmulp	%st, %st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b30 <floor@plt>
               	comisd	23884(%rip), %xmm0      # 0x443058 <_IO_stdin_used+0x118>
               	jae	0x43d319 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xcf>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	jmp	0x43d330 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xe6>
               	subsd	23863(%rip), %xmm0      # 0x443058 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	xorl	%eax, %eax
               	xorl	%edx, %edx
               	jmp	0x43d33b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	retq
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<__once_proxy>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	jmpq	*%rax
               	nop

<std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43fa9c <std::__cow_string::__cow_string(char const*, unsigned long)>

<std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	145361(%rip), %rax      # 0x460b48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43d35a <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d366 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145348(%rip), %rax      # 0x460b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d366 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145362(%rip), %rax      # 0x460b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d366 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145376(%rip), %rax      # 0x460bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d366 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145390(%rip), %rax      # 0x460be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	145403(%rip), %rax      # 0x460c10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43d35a <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d404 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145390(%rip), %rax      # 0x460c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d404 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145404(%rip), %rax      # 0x460c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d404 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	145418(%rip), %rax      # 0x460c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
               	testq	%rdx, %rdx
               	je	0x43d491 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xa>
               	jmp	0x413780 <memcmp@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::find(char const*, unsigned long, char const&)>:
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43d4a7 <std::char_traits<char>::find(char const*, unsigned long, char const&)+0x13>
               	movsbl	(%rdx), %esi
               	movq	%rax, %rdx
               	jmp	0x413b40 <memchr@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::copy(char*, char const*, unsigned long)>:
               	movq	%rdi, %rax
               	movq	%rdx, %rcx
               	testq	%rdx, %rdx
               	je	0x43d4b7 <std::char_traits<char>::copy(char*, char const*, unsigned long)+0xd>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>:
               	movq	%rsi, 8(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>:
               	movq	%rsi, 16(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>:
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>:
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>:
               	movq	(%rsi), %rax
               	testq	%rax, %rax
               	jns	0x43d505 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x15>
               	pushq	%rax
               	leaq	33872(%rip), %rdi       # 0x445950 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x440698 <std::__throw_length_error(char const*)>
               	cmpq	%rdx, %rax
               	jbe	0x43d529 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	addq	%rdx, %rdx
               	cmpq	%rdx, %rax
               	jae	0x43d529 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	testq	%rdx, %rdx
               	js	0x43d51c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x2c>
               	movq	%rdx, (%rsi)
               	jmp	0x43d529 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	movq	%rax, (%rsi)
               	movq	(%rsi), %rdi
               	incq	%rdi
               	jmp	0x43c0b9 <operator new(unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	addq	$16, %rax
               	cmpq	%rax, %rdi
               	je	0x43d548 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x14>
               	jmp	0x43b785 <operator delete(void*)>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>:
               	movq	(%rdi), %rdi
               	jmp	0x43b785 <operator delete(void*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>:
               	movq	8(%rdi), %rcx
               	movq	%rsi, %rax
               	cmpq	%rcx, %rsi
               	jbe	0x43d57b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const+0x21>
               	pushq	%rsi
               	leaq	34089(%rip), %rdi       # 0x445a97 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x440726 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rax, %rsi
               	subq	8(%rdi), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x43d59b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const+0x1f>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x440698 <std::__throw_length_error(char const*)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const>:
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x43d5c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const+0x14>
               	addq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d5cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	jmp	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d5dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x43d5e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136b0 <memmove@plt>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x43d5f3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x43d5fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>:
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movq	%rsi, 8(%rsp)
               	cmpq	$15, %rsi
               	jbe	0x43d62c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x2e>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	8(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x43d642 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x44>
               	movq	(%rbx), %rdi
               	movsbl	%bpl, %edx
               	callq	0x43d5e7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)>:
               	movsbl	%dl, %edx
               	jmp	0x43d5fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d662 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d66f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x43d69a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	cmpq	%rsi, %rdi
               	je	0x43d71c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>
               	pushq	%r13
               	leaq	16(%rdi), %rax
               	movl	$15, %edx
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rsi), %rbp
               	cmpq	%rax, (%rdi)
               	je	0x43d6c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x25>
               	movq	16(%rdi), %rdx
               	movq	%rsi, %r12
               	movq	%rdi, %rbx
               	cmpq	%rbp, %rdx
               	jae	0x43d6f2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
               	leaq	8(%rsp), %rsi
               	movq	%rbp, 8(%rsp)
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rbx, %rdi
               	movq	%rax, %r13
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%r13, (%rbx)
               	movq	%rax, 16(%rbx)
               	testq	%rbp, %rbp
               	je	0x43d706 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6a>
               	movq	(%r12), %rsi
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	leaq	(%rbp,%rdx), %r14
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	movq	%rsi, %rax
               	subq	%r14, %rax
               	movq	%rax, 8(%rsp)
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	movl	$15, %edx
               	addq	%rsi, %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	je	0x43d76c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x4e>
               	movq	16(%rdi), %rdx
               	leaq	24(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, %r12
               	testq	%rbp, %rbp
               	je	0x43d78f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x71>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdx
               	movq	%rax, %rdi
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	testq	%r13, %r13
               	je	0x43d7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	testq	%r15, %r15
               	je	0x43d7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	leaq	(%r12,%rbp), %rdi
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	cmpq	$0, 8(%rsp)
               	je	0x43d7c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xaa>
               	movq	(%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	8(%rsp), %rdx
               	addq	%r12, %rdi
               	addq	%r14, %rsi
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	24(%rsp), %rax
               	movq	%r12, (%rbx)
               	movq	%rax, 16(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	(%rsi,%rdx), %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rdx
               	subq	%rax, %rdx
               	je	0x43d818 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	testq	%rbp, %rbp
               	je	0x43d818 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rdi), %rdi
               	addq	%rdi, %rax
               	addq	%rsi, %rdi
               	movq	%rax, %rsi
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbx), %rdx
               	subq	%rbp, %rax
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movsbl	%dl, %edx
               	movq	%rax, (%rdi)
               	jmp	0x43d5fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, (%rbp)
               	movq	(%rsi), %rax
               	cmpq	%rax, %r12
               	jne	0x43d893 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2d>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43d89f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	%rax, (%rbp)
               	movq	16(%rsi), %rax
               	movq	%rax, 16(%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	%r12, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rdx
               	movq	%rdi, (%rbp)
               	movq	-16(%rsi), %rcx
               	cmpq	%rcx, %rsi
               	jne	0x43d8fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x40>
               	movl	$16, %edx
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	jmp	0x43d91f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x63>
               	movq	%rcx, (%rbp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 8(%rbp)
               	movq	16(%rbx), %rcx
               	movq	%rcx, 16(%rbp)
               	movq	%rsi, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	jmp	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d69c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rcx
               	movq	-16(%rsi), %rax
               	movq	(%rdi), %rdi
               	cmpq	%rax, %rsi
               	jne	0x43d971 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	8(%rbx), %rdx
               	testq	%rdx, %rdx
               	je	0x43d95f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x27>
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbp), %rdx
               	movq	%rax, 8(%rbp)
               	movb	$0, (%rdx,%rax)
               	jmp	0x43d9a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	leaq	16(%rbp), %rcx
               	cmpq	%rcx, %rdi
               	je	0x43d980 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x48>
               	movq	16(%rbp), %rdx
               	jmp	0x43d982 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4a>
               	xorl	%edi, %edi
               	movq	%rax, (%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rax
               	movq	%rax, 16(%rbp)
               	testq	%rdi, %rdi
               	je	0x43d9a4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
               	movq	%rdi, (%rbx)
               	movq	%rdx, 16(%rbx)
               	jmp	0x43d9a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	movq	%rsi, (%rbx)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43da52 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x12>
               	movq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rsi, 8(%rsp)
               	cmpq	%rax, %rsi
               	jae	0x43da6d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x19>
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rsi
               	leaq	16(%rdi), %rbp
               	movl	$15, %edx
               	cmpq	%rsi, %rbp
               	je	0x43da82 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x2e>
               	movq	16(%rdi), %rdx
               	movq	8(%rsp), %rcx
               	cmpq	%rdx, %rcx
               	je	0x43daef <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	movq	%rdi, %rbx
               	cmpq	$15, %rcx
               	ja	0x43da9a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x46>
               	cmpq	%rdx, %rcx
               	jbe	0x43dad3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x7f>
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%rax, %rbp
               	movq	8(%rbx), %rax
               	movq	%rbp, %rdi
               	leaq	1(%rax), %rdx
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%rbp, (%rbx)
               	movq	%rax, 16(%rbx)
               	jmp	0x43daef <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	cmpq	%rsi, %rbp
               	je	0x43daef <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	leaq	1(%rax), %rdx
               	movq	%rbp, %rdi
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rdi
               	callq	0x43b785 <operator delete(void*)>
               	movq	%rbp, (%rbx)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43db08 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x12>
               	movq	16(%rdi), %rax
               	cmpq	%rax, 8(%rdi)
               	jae	0x43db26 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x30>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x43da54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43c175 <__cxa_end_catch>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()>:
               	movq	(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movb	$0, (%rax)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const>:
               	cmpq	$0, 8(%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43db6a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const+0x18>
               	pushq	%rax
               	leaq	32619(%rip), %rdi       # 0x445ace <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440726 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43db8a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)+0x18>
               	pushq	%rax
               	leaq	32587(%rip), %rdi       # 0x445ace <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440726 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
               	pushq	%r13
               	movl	%esi, %r13d
               	movl	$15, %eax
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	8(%rdi), %rbp
               	leaq	16(%rdi), %rdx
               	leaq	1(%rbp), %r12
               	cmpq	%rdx, (%rdi)
               	je	0x43dbdd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x27>
               	movq	16(%rdi), %rax
               	cmpq	%rax, %r12
               	jbe	0x43dbf7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x41>
               	movl	$1, %r8d
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d71e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r13b, (%rax,%rbp)
               	movq	(%rbx), %rax
               	movq	%r12, 8(%rbx)
               	movb	$0, 1(%rax,%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x43dbb6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d69c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	jmp	0x43d938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	32462(%rip), %rdx       # 0x445b12 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	cmpq	$-1, %r12
               	jne	0x43dc64 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	jmp	0x43dc82 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	testq	%r12, %r12
               	je	0x43dc82 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	movq	8(%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	subq	%rbp, %rdx
               	cmpq	%r12, %rdx
               	cmovaq	%r12, %rdx
               	callq	0x43d7ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43d7ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	subq	%rax, %rbx
               	addq	8(%rdi), %rax
               	cmpq	%rax, %rdx
               	jne	0x43dccf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x21>
               	movq	%rbx, 8(%rdi)
               	movb	$0, (%rsi)
               	jmp	0x43dcda <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x2c>
               	subq	%rsi, %rdx
               	movq	%rbx, %rsi
               	callq	0x43d7ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()>:
               	movq	8(%rdi), %rax
               	movl	$1, %edx
               	leaq	-1(%rax), %rsi
               	jmp	0x43d7ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r15
               	movl	%r8d, %r15d
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	32278(%rip), %rcx       # 0x445b26 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	movq	%r12, %rdx
               	movq	%r12, %r14
               	pushq	%rbx
               	movq	%rbp, %rsi
               	movq	%rdi, %rbx
               	subq	%rbp, %r14
               	pushq	%r9
               	callq	0x43d57c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%rbx), %rdx
               	movq	(%rbx), %rdi
               	leaq	16(%rbx), %rcx
               	movl	$15, %eax
               	addq	%rdx, %r14
               	cmpq	%rcx, %rdi
               	je	0x43dd47 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x4f>
               	movq	16(%rbx), %rax
               	cmpq	%r14, %rax
               	jb	0x43dd6c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x74>
               	leaq	(%rbp,%r13), %rax
               	subq	%rax, %rdx
               	je	0x43dd7f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	cmpq	%r12, %rbp
               	je	0x43dd7f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	addq	%r13, %rdi
               	leaq	(%rdi,%rbp), %rsi
               	addq	%r12, %rdi
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43dd7f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	movq	%r12, %r8
               	xorl	%ecx, %ecx
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d71e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	testq	%r12, %r12
               	je	0x43dd96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x9e>
               	movq	(%rbx), %rdi
               	movsbl	%r15b, %edx
               	movq	%r12, %rsi
               	addq	%r13, %rdi
               	callq	0x43d5e7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r14, 8(%rbx)
               	movb	$0, (%rax,%r14)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>:
               	movq	%rsi, %rcx
               	movq	8(%rdi), %rsi
               	movsbl	%dl, %r8d
               	xorl	%edx, %edx
               	jmp	0x43dcf8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>:
               	movq	8(%rdi), %rax
               	cmpq	%rsi, %rax
               	jae	0x43ddd8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x14>
               	movsbl	%dl, %edx
               	subq	%rax, %rsi
               	jmp	0x43ddb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	jbe	0x43dde5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x21>
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x43ddc4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>:
               	movsbl	%dl, %r8d
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43dcf8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x43ddee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	32027(%rip), %rdx       # 0x445b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43dcf8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43dcf8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movl	%r8d, 4(%rsp)
               	cmpq	%rdx, %rax
               	leaq	31933(%rip), %rdx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x43dcf8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x43dcf8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	callq	0x43dec6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	leaq	31836(%rip), %rcx       # 0x445b6e <typeinfo name for kotlin::gc::GCSchedulerData+0x1bb5>
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%r8, %rdx
               	movq	%rbx, %rsi
               	subq	$40, %rsp
               	callq	0x43d57c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%r12), %rax
               	movq	%r15, %rcx
               	movq	(%r12), %rbp
               	subq	%rbx, %rcx
               	movl	$15, %edx
               	movq	%rcx, 16(%rsp)
               	addq	%rax, %rcx
               	movq	%rcx, 8(%rsp)
               	leaq	16(%r12), %rcx
               	cmpq	%rcx, %rbp
               	je	0x43df5b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	16(%r12), %rdx
               	cmpq	8(%rsp), %rdx
               	jb	0x43e05a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x15e>
               	addq	%r14, %rbp
               	addq	%rbx, %r14
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	subq	%r14, %rax
               	movq	%rax, %r14
               	callq	0x43d5ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>
               	cmpq	%r15, %rbx
               	setne	%cl
               	testq	%r14, %r14
               	setne	%dl
               	andl	%edx, %ecx
               	testb	%al, %al
               	je	0x43dfb6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xba>
               	testb	%cl, %cl
               	je	0x43dfa5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xa9>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	testq	%r15, %r15
               	je	0x43e06e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	jmp	0x43e02a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x12e>
               	testq	%r15, %r15
               	je	0x43dfe0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	cmpq	%r15, %rbx
               	jb	0x43dfe0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movb	%cl, 31(%rsp)
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movb	31(%rsp), %cl
               	testb	%cl, %cl
               	je	0x43e06e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	jmp	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe8>
               	testb	%cl, %cl
               	je	0x43dff6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xfa>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	cmpq	%r15, %rbx
               	jae	0x43e06e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	leaq	(%rbp,%rbx), %rdi
               	leaq	(%r13,%r15), %rax
               	cmpq	%rax, %rdi
               	jb	0x43e01a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x11e>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43e06e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	cmpq	%r13, %rdi
               	ja	0x43e02f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x133>
               	movq	16(%rsp), %rsi
               	movq	%r15, %rdx
               	addq	%r13, %rsi
               	movq	%rbp, %rdi
               	jmp	0x43e053 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x157>
               	movq	%rdi, %rbx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	subq	%r13, %rbx
               	movq	%rbx, %rdx
               	callq	0x43d5d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	%r15, %rdx
               	leaq	(%rbp,%r15), %rsi
               	leaq	(%rbp,%rbx), %rdi
               	subq	%rbx, %rdx
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43e06e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %r8
               	movq	%r13, %rcx
               	movq	%rbx, %rdx
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x43d71e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	8(%rsp), %rax
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r12)
               	movq	(%r12), %rax
               	movb	$0, (%rax,%rbx)
               	addq	$40, %rsp
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %r8
               	movq	(%rdi), %rbx
               	subq	%rdx, %r8
               	leaq	31439(%rip), %rdx       # 0x445b87 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %r8
               	cmovaq	%rcx, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rbp), %rdx
               	movq	8(%rsp), %r8
               	xorl	%esi, %esi
               	addq	$24, %rsp
               	leaq	(%rbx,%rax), %rcx
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43defc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>:
               	movq	%rdx, %r8
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43defc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e0e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)>:
               	jmp	0x43e0e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	movq	8(%r9), %rdx
               	leaq	-1(%rcx), %r8
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43defc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)>:
               	jmp	0x43e10c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movq	%r8, (%rsp)
               	cmpq	%rdx, %rax
               	leaq	31220(%rip), %rdx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	(%rsp), %r8
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43defc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rdx), %r8
               	movq	(%rdx), %rcx
               	xorl	%edx, %edx
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rdx, %rdi
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	8(%rdx), %rax
               	movq	(%rdx), %rbx
               	leaq	31113(%rip), %rdx       # 0x445b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	$16, %rsp
               	xorl	%edx, %edx
               	leaq	(%rbx,%rax), %rcx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>:
               	movq	%rcx, %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x43e1ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	31004(%rip), %rdx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%r8, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rcx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rcx), %rax
               	movq	%r9, %rbx
               	movq	(%rcx), %rbp
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r14, %rdx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rcx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43e2aa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43e2aa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	jmp	0x43e2aa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e13e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rax
               	leaq	16(%rbx), %r8
               	movl	$15, %ecx
               	movq	(%rdi), %rdi
               	leaq	(%rax,%rdx), %rbp
               	cmpq	%r8, %rdi
               	je	0x43e347 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x23>
               	movq	16(%rbx), %rcx
               	cmpq	%rcx, %rbp
               	ja	0x43e35b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x37>
               	testq	%rdx, %rdx
               	je	0x43e36e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	addq	%rax, %rdi
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43e36e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	movq	%rdx, %r8
               	movq	%rsi, %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d71e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43e324 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43e380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rdi), %rax
               	movq	%rcx, %rbx
               	movq	(%rdi), %rbp
               	subq	%rdx, %rax
               	leaq	30697(%rip), %rdx       # 0x445b9c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rsi
               	movq	%rbx, %rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e324 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>:
               	pushq	%r12
               	leaq	30655(%rip), %rcx       # 0x445b9c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %r12
               	xorl	%esi, %esi
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d57c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e324 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)>:
               	jmp	0x43e3d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)>:
               	jmp	0x43e3d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	xorl	%esi, %esi
               	pushq	%rbx
               	repne		scasb	%es:(%rdi), %al
               	movq	%rbp, %rdi
               	movq	%rcx, %rdx
               	leaq	30570(%rip), %rcx       # 0x445b9c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	movq	%rbx, %rdx
               	callq	0x43d57c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rdx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e324 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>:
               	jmp	0x43e40e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	30539(%rip), %rdx       # 0x445bb1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	testq	%rbx, %rbx
               	je	0x43e4a3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const+0x49>
               	movq	(%r12), %rsi
               	movq	%rbx, %rdx
               	movq	%r13, %rdi
               	addq	%rbp, %rsi
               	callq	0x43d5c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
               	cmpq	%rsi, %rdi
               	je	0x43e603 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x153>
               	pushq	%r14
               	pushq	%r13
               	leaq	16(%rdi), %r13
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdx
               	movq	(%rsi), %rax
               	cmpq	%rdx, %r13
               	jne	0x43e5ae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xfe>
               	cmpq	%rax, %r12
               	jne	0x43e58a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xda>
               	cmpq	$0, 8(%rdi)
               	movq	8(%rsi), %rax
               	je	0x43e533 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x83>
               	testq	%rax, %rax
               	je	0x43e561 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xb1>
               	movq	%rsp, %r14
               	movq	%r12, %rsi
               	movl	$16, %edx
               	movq	%r14, %rdi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	movl	$16, %edx
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movl	$16, %edx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43e5e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	testq	%rax, %rax
               	je	0x43e5e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	jmp	0x43e585 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xd5>
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbp), %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	movq	$0, 8(%rbp)
               	movb	$0, (%rax)
               	jmp	0x43e5f6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x146>
               	movq	16(%rsi), %r14
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rax, (%rbp)
               	movq	%r12, (%rbx)
               	movq	%r14, 16(%rbp)
               	jmp	0x43e5e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movq	16(%rdi), %r14
               	cmpq	%rax, %r12
               	jne	0x43e5d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x124>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43d4aa <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%rax, (%rbx)
               	movq	%r13, (%rbp)
               	jmp	0x43e5e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x132>
               	movq	%rax, (%rdi)
               	movq	16(%rsi), %rax
               	movq	%rdx, (%rsi)
               	movq	%rax, 16(%rdi)
               	movq	%r14, 16(%rbx)
               	movq	8(%rbp), %rax
               	movq	8(%rbx), %rdx
               	movq	%rdx, 8(%rbp)
               	movq	%rax, 8(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	testq	%rcx, %rcx
               	jne	0x43e634 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x24>
               	cmpq	%rdx, %rsi
               	jae	0x43e6ab <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x43e6a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x43e6a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	(%rdi), %rbp
               	movb	(%r13), %dl
               	movq	%rcx, %rbx
               	movl	$1, %r12d
               	leaq	31(%rsp), %r15
               	subq	%rbx, %r12
               	leaq	(%rbp,%rsi), %rcx
               	movb	%dl, 31(%rsp)
               	leaq	(%rbp,%rax), %rdi
               	subq	%rax, %rsi
               	movq	%rcx, 8(%rsp)
               	cmpq	%rbx, %rsi
               	jb	0x43e6a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r12, %rsi
               	movq	%r15, %rdx
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	je	0x43e6a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rax, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e699 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%r14, %rax
               	subq	%rbp, %rax
               	jmp	0x43e6ab <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%r14), %rdi
               	subq	%rdi, %rsi
               	jmp	0x43e667 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	subq	$24, %rsp
               	movb	%sil, 12(%rsp)
               	movq	8(%rdi), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x43e71d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	movq	(%rdi), %rbp
               	movq	%rdx, %rax
               	leaq	12(%rsp), %rdx
               	subq	%rax, %rsi
               	leaq	(%rbp,%rax), %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e71d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	subq	%rbp, %rax
               	movq	%rax, %rbx
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rcx
               	ja	0x43e779 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x43e779 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x43e775 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x43e753 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e728 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e728 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e7db <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x43e7db <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	(%rdi), %rdx
               	leaq	-1(%rax), %rcx
               	cmpb	%sil, (%rdx,%rax)
               	je	0x43e7db <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	%rcx, %rax
               	jmp	0x43e7c3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x17>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%r12, %r12
               	je	0x43e817 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	cmpq	8(%rbp), %rbx
               	jae	0x43e817 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%rbp), %rdx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e81b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x43e7f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e7dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e7dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e6e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e8a4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x43e8a4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	cmpq	%rdx, %rax
               	movq	%rsi, %r12
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e8a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e884 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x43e8a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e858 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e858 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e7ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	8(%rdi), %r12
               	movq	%rdx, %rbx
               	cmpq	%r12, %rbx
               	jae	0x43e91f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x39>
               	movq	(%rbp), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e923 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3d>
               	incq	%rbx
               	jmp	0x43e8fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e8e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e8e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	movq	%rdx, %rax
               	cmpq	%rcx, %rax
               	jae	0x43e972 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1a>
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e976 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x43e95f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x7>
               	orq	$-1, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e9c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %r12
               	cmpq	%rdx, %rax
               	movq	%rsi, %rbp
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e9c1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e9a3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e978 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e978 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43ea1d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43ea1d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x43ea0e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rbx
               	movq	8(%rsi), %rbp
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	cmpq	%rbp, %rbx
               	movq	%rbp, %rdx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ea51 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d67c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	29016(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	(%r13), %rdi
               	movq	(%r14), %rsi
               	subq	%rbp, %rbx
               	cmpq	%r12, %rbx
               	cmovaq	%r12, %rbx
               	movq	8(%r14), %r12
               	movq	%rbx, %rdx
               	cmpq	%rbx, %r12
               	cmovbeq	%r12, %rdx
               	addq	%rbp, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43eab8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d67c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rcx, %r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	28899(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	leaq	28877(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	movq	%r15, %rdi
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbx
               	movq	8(%rsp), %r9
               	movq	(%r15), %rsi
               	movq	(%r14), %rdi
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	8(%r15), %rbp
               	subq	%r13, %rbp
               	movq	%rbx, %rdx
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43eb5b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const+0x99>
               	addq	$24, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d67c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	%rdi, %r8
               	movq	8(%rdi), %rbp
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r8), %rdi
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbx, %rbp
               	movq	%rbx, %rdx
               	cmovbeq	%rbp, %rdx
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ebad <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d67c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	28663(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbp
               	movq	%r12, %rdi
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r14), %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rsi
               	notq	%rsi
               	leaq	-1(%rsi), %rbx
               	movq	%r12, %rsi
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r13, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ec24 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const+0x72>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d67c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	28554(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	pushq	%r9
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	%r12, %rdx
               	movq	(%r13), %rdi
               	movq	%r14, %rsi
               	subq	%rbp, %rbx
               	cmpq	%r15, %rbx
               	cmovaq	%r15, %rbx
               	cmpq	%r12, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%rbp, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ec96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x68>
               	popq	%rcx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d67c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbx), %rax
               	movb	$0, 16(%rbx)
               	movq	%rbx, %rdi
               	movq	%rax, (%rbx)
               	movq	$0, 8(%rbx)
               	movq	8(%r12), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbp
               	addq	%rbp, %rsi
               	callq	0x43da54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e3d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	$0, 8(%rdi)
               	movb	$0, 16(%rdi)
               	movq	8(%rdx), %rax
               	leaq	1(%rax), %rsi
               	callq	0x43da54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x43ddb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43edc6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d662 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ed8c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ee34 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d66f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43edfa <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>
               	nop

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43ee9d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43ee9d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	leaq	27970(%rip), %rdi       # 0x445bda <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x4405c3 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43eec9 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d662 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43ee76 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x43eef0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ee76 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43ef6f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43ef6f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	leaq	27760(%rip), %rdi       # 0x445bda <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x4405c3 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ef9b <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43d4f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d66f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	27698(%rip), %rdx       # 0x445c04 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c4b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rdi, %r8
               	orq	$-1, %rdx
               	movq	%rax, (%rdi)
               	testq	%rsi, %rsi
               	je	0x43f06c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x28>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%r8, %rdi
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	27539(%rip), %rdx       # 0x445c13 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r13, %rsi
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	movq	%rsi, %rdx
               	subq	%r13, %rdx
               	addq	8(%r12), %rdx
               	popq	%rcx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	27461(%rip), %rdx       # 0x445c13 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	27404(%rip), %rdx       # 0x445c2e <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x43d55a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43f0be <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<bool __gnu_cxx::operator==<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>:
               	testq	%rdi, %rdi
               	je	0x43f173 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)+0xb>
               	movq	(%rdi), %rax
               	jmpq	*8(%rax)
               	retq

<execute_native_thread_routine>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	movq	%rbx, %rdi
               	callq	0x43f168 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	popq	%rdx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f168 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::system_error::system_error(std::error_code, char const*)>:
               	pushq	%r15
               	movq	%rsi, %r15
               	pushq	%r14
               	movq	%rdx, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$104, %rsp
               	movq	(%rdx), %rax
               	movl	%esi, %edx
               	movq	%r14, %rsi
               	leaq	64(%rsp), %rbp
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	leaq	27245(%rip), %rdx       # 0x445c43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8a>
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x43e202 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	leaq	32(%rsp), %r12
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	callq	0x43d866 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rdx
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	callq	0x43e202 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	movq	%rsp, %r13
               	movq	%rax, %rsi
               	movq	%r13, %rdi
               	callq	0x43d866 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d404 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r13, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%r12, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	136971(%rip), %rax      # 0x460940 <vtable for std::system_error>
               	movq	%r15, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rbx
               	movq	%r13, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43f263 <std::system_error::system_error(std::error_code, char const*)+0xc1>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43f270 <std::system_error::system_error(std::error_code, char const*)+0xce>
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::thread::_State::~_State()>:
               	retq
               	nop

<std::thread::_State::~_State()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f280 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::thread::join()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43f2ad <std::thread::join()+0x19>
               	xorl	%esi, %esi
               	callq	0x413b50 <pthread_join@plt>
               	testl	%eax, %eax
               	je	0x43f2b9 <std::thread::join()+0x25>
               	jmp	0x43f2b2 <std::thread::join()+0x1e>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::detach()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43f2d9 <std::thread::detach()+0x17>
               	callq	0x4139e0 <pthread_detach@plt>
               	testl	%eax, %eax
               	je	0x43f2e5 <std::thread::detach()+0x23>
               	jmp	0x43f2de <std::thread::detach()+0x1c>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>:
               	pushq	%rbx
               	movq	(%rsi), %rcx
               	movq	%rsi, %rbx
               	leaq	-392(%rip), %rdx        # 0x43f174 <execute_native_thread_routine>
               	xorl	%esi, %esi
               	callq	0x413b60 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43f30e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())+0x20>
               	movl	%eax, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::thread::hardware_concurrency()>:
               	pushq	%rax
               	callq	0x413b70 <get_nprocs@plt>
               	movl	$0, %edx
               	testl	%eax, %eax
               	cmovsl	%edx, %eax
               	popq	%rdx
               	retq

<std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdi, (%rsp)
               	movq	%rsp, %rbx
               	movq	%rsi, 8(%rsp)
               	movq	%rbx, %rsi
               	movq	%rbx, %rdi
               	callq	0x413b80 <nanosleep@plt>
               	incl	%eax
               	jne	0x43f354 <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x2a>
               	callq	0x413820 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x43f33b <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x11>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43f3bc <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	138316(%rip), %rbp      # 0x460fb8 <write+0x460fb8>
               	testq	%rbp, %rbp
               	je	0x43f37b <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x21>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 8(%rbx)
               	jmp	0x43f384 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x2a>
               	movl	8(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 8(%rbx)
               	decl	%eax
               	jne	0x43f3bc <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	testq	%rbp, %rbp
               	je	0x43f3a0 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x46>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 12(%rbx)
               	jmp	0x43f3a9 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x4f>
               	movl	12(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 12(%rbx)
               	decl	%eax
               	jne	0x43f3bc <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	movq	24(%rax), %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<execute_native_thread_routine_compat>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rsp, %rbx
               	movq	%rax, (%rsp)
               	movq	16(%rdi), %rax
               	movq	$0, 16(%rdi)
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	leaq	8(%rbx), %rdi
               	callq	0x43f35a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43f35a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rbx
               	movq	8(%rsi), %rdx
               	movq	$0, (%rsi)
               	movq	$0, 8(%rsi)
               	leaq	8(%rsp), %r12
               	movq	8(%rbx), %rax
               	movq	%rbx, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	%rdx, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43f35a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	xorl	%esi, %esi
               	movq	%rbx, %rcx
               	movq	%rbp, %rdi
               	leaq	-172(%rip), %rdx        # 0x43f3c0 <execute_native_thread_routine_compat>
               	callq	0x413b60 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43f4a7 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())+0x91>
               	movl	%eax, %ebp
               	movq	8(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	$0, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43f35a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movl	%ebp, %edi
               	callq	0x43cffa <std::__throw_system_error(int)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	cmpq	$0, 137978(%rip)        # 0x460fb8 <write+0x460fb8>
               	jne	0x43f4ff <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0x4f>
               	movl	$32, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	callq	0x43cf64 <std::_V2::generic_category()>
               	leaq	26477(%rip), %rcx       # 0x445c46 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8d>
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43f1a2 <std::system_error::system_error(std::error_code, char const*)>
               	leaq	-9886(%rip), %rdx       # 0x43ce52 <std::system_error::~system_error()>
               	leaq	135953(%rip), %rsi      # 0x460808 <typeinfo for std::system_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	(%rsi), %rax
               	movq	$0, (%rsi)
               	movq	%rsp, %rbx
               	xorl	%edx, %edx
               	movq	%rax, (%rsp)
               	movq	8(%rsi), %rax
               	movq	$0, 8(%rsi)
               	movq	%rbx, %rsi
               	movq	%rax, 8(%rsp)
               	callq	0x43f416 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>
               	leaq	8(%rbx), %rdi
               	callq	0x43f35a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	jmp	0x43f554 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0xa4>
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43f35a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::type_info::~type_info()>:
               	retq
               	nop

<std::type_info::__is_function_p() const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::~type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f55c <std::type_info::~type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	movq	8(%rdi), %rdi
               	movq	8(%rsi), %rsi
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43f5a1 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43f5a1 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxa_current_exception_type>:
               	pushq	%rcx
               	callq	0x43c4e8 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	je	0x43f5c0 <__cxa_current_exception_type+0x1e>
               	movq	(%rax), %rdx
               	testb	$1, 80(%rax)
               	je	0x43f5bd <__cxa_current_exception_type+0x1b>
               	leaq	-112(%rdx), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	retq

<__cxa_pure_virtual>:
               	pushq	%rax
               	movl	$27, %edx
               	movl	$2, %edi
               	leaq	26267(%rip), %rsi       # 0x445c6f <typeinfo name for kotlin::gc::GCSchedulerData+0x1cb6>
               	callq	0x4138e0 <write@plt>
               	callq	0x43c463 <std::terminate()>

<__cxa_deleted_virtual>:
               	pushq	%rax
               	movl	$30, %edx
               	movl	$2, %edi
               	leaq	26267(%rip), %rsi       # 0x445c8b <typeinfo name for kotlin::gc::GCSchedulerData+0x1cd2>
               	callq	0x4138e0 <write@plt>
               	callq	0x43c463 <std::terminate()>

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	leaq	136263(%rip), %rax      # 0x460a48 <vtable for __gnu_cxx::recursive_init_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f5fa <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<std::logic_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::runtime_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::logic_error::~logic_error()>:
               	leaq	136463(%rip), %rax      # 0x460b48 <vtable for std::logic_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::domain_error::~domain_error()>:
               	leaq	136465(%rip), %rax      # 0x460b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f632 <std::logic_error::~logic_error()>
               	nop

<std::invalid_argument::~invalid_argument()>:
               	leaq	136485(%rip), %rax      # 0x460b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f632 <std::logic_error::~logic_error()>
               	nop

<std::length_error::~length_error()>:
               	leaq	136505(%rip), %rax      # 0x460bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f632 <std::logic_error::~logic_error()>
               	nop

<std::out_of_range::~out_of_range()>:
               	leaq	136525(%rip), %rax      # 0x460be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f632 <std::logic_error::~logic_error()>
               	nop

<std::runtime_error::~runtime_error()>:
               	leaq	136545(%rip), %rax      # 0x460c10 <vtable for std::runtime_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::range_error::~range_error()>:
               	leaq	136547(%rip), %rax      # 0x460c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f6a8 <std::runtime_error::~runtime_error()>
               	nop

<std::overflow_error::~overflow_error()>:
               	leaq	136567(%rip), %rax      # 0x460c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f6a8 <std::runtime_error::~runtime_error()>
               	nop

<std::underflow_error::~underflow_error()>:
               	leaq	136587(%rip), %rax      # 0x460c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f6a8 <std::runtime_error::~runtime_error()>
               	nop

<std::logic_error::~logic_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f632 <std::logic_error::~logic_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::domain_error::~domain_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f658 <std::domain_error::~domain_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::invalid_argument::~invalid_argument()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f66c <std::invalid_argument::~invalid_argument()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::length_error::~length_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f680 <std::length_error::~length_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::out_of_range::~out_of_range()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f694 <std::out_of_range::~out_of_range()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::runtime_error::~runtime_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6a8 <std::runtime_error::~runtime_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::range_error::~range_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6ce <std::range_error::~range_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::overflow_error::~overflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6e2 <std::overflow_error::~overflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::underflow_error::~underflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6f6 <std::underflow_error::~underflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b785 <operator delete(void*)>

<std::logic_error::logic_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	136075(%rip), %rax      # 0x460b48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7ac <std::logic_error::logic_error(std::string const&)>
               	leaq	136062(%rip), %rax      # 0x460b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7ac <std::logic_error::logic_error(std::string const&)>
               	leaq	136076(%rip), %rax      # 0x460b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7ac <std::logic_error::logic_error(std::string const&)>
               	leaq	136090(%rip), %rax      # 0x460bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f7ac <std::logic_error::logic_error(std::string const&)>
               	leaq	136104(%rip), %rax      # 0x460be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	136117(%rip), %rax      # 0x460c10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f84a <std::runtime_error::runtime_error(std::string const&)>
               	leaq	136104(%rip), %rax      # 0x460c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f84a <std::runtime_error::runtime_error(std::string const&)>
               	leaq	136118(%rip), %rax      # 0x460c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f84a <std::runtime_error::runtime_error(std::string const&)>
               	leaq	136132(%rip), %rax      # 0x460c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<_txnal_cow_string_D1_commit(void*)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rsi
               	callq	0x441620 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::logic_error::logic_error(std::logic_error const&)>:
               	leaq	135777(%rip), %rax      # 0x460b48 <vtable for std::logic_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::logic_error::operator=(std::logic_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x44228e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::runtime_error::runtime_error(std::runtime_error const&)>:
               	leaq	135927(%rip), %rax      # 0x460c10 <vtable for std::runtime_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::runtime_error::operator=(std::runtime_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x44228e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::logic_error::logic_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	135664(%rip), %rax      # 0x460b48 <vtable for std::logic_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442644 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::domain_error::domain_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	leaq	135644(%rip), %rax      # 0x460b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	leaq	135658(%rip), %rax      # 0x460b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	leaq	135672(%rip), %rax      # 0x460bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	leaq	135686(%rip), %rax      # 0x460be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	135696(%rip), %rax      # 0x460c10 <vtable for std::runtime_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442644 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bcb0 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::range_error::range_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f9ec <std::runtime_error::runtime_error(char const*)>
               	leaq	135676(%rip), %rax      # 0x460c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f9ec <std::runtime_error::runtime_error(char const*)>
               	leaq	135690(%rip), %rax      # 0x460c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f9ec <std::runtime_error::runtime_error(char const*)>
               	leaq	135704(%rip), %rax      # 0x460c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::__sso_string::__sso_string(std::string const&)>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rdx
               	jmp	0x44096a <std::__sso_string::__sso_string(char const*, unsigned long)>

<std::__cow_string::__cow_string()>:
               	leaq	250387(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::__cow_string::__cow_string(std::string const&)>:
               	jmp	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::__cow_string(char const*, unsigned long)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rcx
               	callq	0x44268e <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq
               	nop

<std::__cow_string::__cow_string(std::__cow_string const&)>:
               	jmp	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::operator=(std::__cow_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44228e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cow_string::~__cow_string()>:
               	jmp	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	nop

<std::__cow_string::__cow_string(std::__cow_string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	250313(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__cow_string::operator=(std::__cow_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441474 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::_M_message(int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rsi), %rax
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	*24(%rax)
               	movq	8(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	-24(%rsi), %rdx
               	callq	0x44096a <std::__sso_string::__sso_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movl	$1, %ebp
               	pushq	%rbx
               	leaq	-1(%rsi), %rbx
               	pushq	%rdx
               	leaq	(%rbx,%rbp), %rdi
               	callq	0x413b90 <_ITM_RU1@plt>
               	testb	%al, %al
               	je	0x43fb63 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x28>
               	incq	%rbp
               	jmp	0x43fb51 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x16>
               	leaq	24(%rbp), %rdi
               	callq	0x413ba0 <_ZGTtnam@plt>
               	leaq	-1(%rbp), %rdx
               	movl	$0, 16(%rax)
               	leaq	24(%rax), %rbx
               	movq	%r12, %rsi
               	movq	%rdx, 8(%rax)
               	movq	%rbx, %rdi
               	movq	%rdx, (%rax)
               	movq	%rbp, %rdx
               	callq	0x413bb0 <_ITM_memcpyRtWn@plt>
               	movq	%rbx, (%r13)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	callq	0x43c2b4 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43c175 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_txnal_cow_string_c_str(void const*)>:
               	jmp	0x413bc0 <_ITM_RU8@plt>

<_txnal_sso_string_c_str(void const*)>:
               	jmp	0x413bc0 <_ITM_RU8@plt>

<_txnal_cow_string_D1(void*)>:
               	pushq	%rax
               	callq	0x43fbb9 <_txnal_cow_string_c_str(void const*)>
               	leaq	-771(%rip), %rdi        # 0x43f8cd <_txnal_cow_string_D1_commit(void*)>
               	movl	$1, %esi
               	popq	%rcx
               	leaq	-24(%rax), %rdx
               	jmp	0x413bd0 <_ITM_addUserCommitAction@plt>

<_txnal_logic_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_txnal_runtime_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_ZGTtNSt11logic_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	23766(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f632 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f632 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	23660(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f632 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f632 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11logic_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fcc8 <_ZGTtNSt11logic_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNKSt11logic_error4whatEv>:
               	pushq	%rax
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbb9 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt12domain_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	23495(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f984 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f658 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f658 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	23389(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f984 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f658 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f658 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12domain_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fdd7 <_ZGTtNSt12domain_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt16invalid_argumentC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	23239(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f99e <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f66c <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f66c <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	23133(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f99e <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f66c <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f66c <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentD2Ev>:
               	pushq	%rax
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt16invalid_argumentD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fed7 <_ZGTtNSt16invalid_argumentD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt12length_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22983(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9b8 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f680 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f680 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22877(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9b8 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f680 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f680 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12length_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ffd7 <_ZGTtNSt12length_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt12out_of_rangeC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22727(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9d2 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f694 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f694 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22621(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9d2 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f694 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f694 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeD2Ev>:
               	pushq	%rax
               	callq	0x43fbdf <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12out_of_rangeD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4400d7 <_ZGTtNSt12out_of_rangeD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt13runtime_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22471(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9ec <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6a8 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6a8 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22365(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9ec <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6a8 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6a8 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt13runtime_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4401d7 <_ZGTtNSt13runtime_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNKSt13runtime_error4whatEv>:
               	pushq	%rax
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbb9 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt11range_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22200(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa2c <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6ce <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6ce <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	22094(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa2c <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6ce <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6ce <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11range_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4402e6 <_ZGTtNSt11range_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt14overflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21944(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa46 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6e2 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6e2 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21838(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa46 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6e2 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6e2 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt14overflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4403e6 <_ZGTtNSt14overflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt15underflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21688(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa60 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6f6 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6f6 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21582(%rip), %rsi       # 0x4458cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa60 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fbbe <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fb3b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6f6 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6f6 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fbe4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fbc3 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt15underflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4404e6 <_ZGTtNSt15underflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<std::__throw_bad_exception()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	131511(%rip), %rdx      # 0x4606d0 <vtable for std::bad_exception>
               	leaq	131408(%rip), %rsi      # 0x460670 <typeinfo for std::bad_exception>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-18559(%rip), %rdx      # 0x43bcb2 <std::bad_exception::~bad_exception()>
               	callq	0x43c265 <__cxa_throw>

<std::__throw_bad_alloc()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	131720(%rip), %rdx      # 0x4607d0 <vtable for std::bad_alloc>
               	leaq	131689(%rip), %rsi      # 0x4607b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-16568(%rip), %rdx      # 0x43c4a8 <std::bad_alloc::~bad_alloc()>
               	callq	0x43c265 <__cxa_throw>

<std::__throw_bad_cast()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	132945(%rip), %rdx      # 0x460cc8 <vtable for std::bad_cast>
               	leaq	132914(%rip), %rsi      # 0x460cb0 <typeinfo for std::bad_cast>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9363(%rip), %rdx        # 0x442a22 <std::bad_cast::~bad_cast()>
               	callq	0x43c265 <__cxa_throw>

<std::__throw_bad_typeid()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	leaq	132962(%rip), %rdx      # 0x460d08 <vtable for std::bad_typeid>
               	leaq	132931(%rip), %rsi      # 0x460cf0 <typeinfo for std::bad_typeid>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9368(%rip), %rdx        # 0x442a56 <std::bad_typeid::~bad_typeid()>
               	callq	0x43c265 <__cxa_throw>

<std::__throw_logic_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f944 <std::logic_error::logic_error(char const*)>
               	leaq	-4022(%rip), %rdx       # 0x43f632 <std::logic_error::~logic_error()>
               	leaq	132225(%rip), %rsi      # 0x460a70 <typeinfo for std::logic_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_domain_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f984 <std::domain_error::domain_error(char const*)>
               	leaq	-4055(%rip), %rdx       # 0x43f658 <std::domain_error::~domain_error()>
               	leaq	132178(%rip), %rsi      # 0x460a88 <typeinfo for std::domain_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_invalid_argument(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f99e <std::invalid_argument::invalid_argument(char const*)>
               	leaq	-4106(%rip), %rdx       # 0x43f66c <std::invalid_argument::~invalid_argument()>
               	leaq	132131(%rip), %rsi      # 0x460aa0 <typeinfo for std::invalid_argument>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_length_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f9b8 <std::length_error::length_error(char const*)>
               	leaq	-4157(%rip), %rdx       # 0x43f680 <std::length_error::~length_error()>
               	leaq	132084(%rip), %rsi      # 0x460ab8 <typeinfo for std::length_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_out_of_range(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f9d2 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4208(%rip), %rdx       # 0x43f694 <std::out_of_range::~out_of_range()>
               	leaq	132037(%rip), %rsi      # 0x460ad0 <typeinfo for std::out_of_range>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_out_of_range_fmt(char const*, ...)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rsp, %rbp
               	pushq	%r12
               	pushq	%rbx
               	subq	$208, %rsp
               	movq	%rsi, -184(%rbp)
               	movq	%rdx, -176(%rbp)
               	movq	%rcx, -168(%rbp)
               	movq	%r8, -160(%rbp)
               	movq	%r9, -152(%rbp)
               	testb	%al, %al
               	je	0x440781 <std::__throw_out_of_range_fmt(char const*, ...)+0x5b>
               	movaps	%xmm0, -144(%rbp)
               	movaps	%xmm1, -128(%rbp)
               	movaps	%xmm2, -112(%rbp)
               	movaps	%xmm3, -96(%rbp)
               	movaps	%xmm4, -80(%rbp)
               	movaps	%xmm5, -64(%rbp)
               	movaps	%xmm6, -48(%rbp)
               	movaps	%xmm7, -32(%rbp)
               	movq	%r10, %rdi
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbp), %rax
               	movl	$8, -216(%rbp)
               	movq	%rax, -208(%rbp)
               	leaq	-192(%rbp), %rax
               	movl	$48, -212(%rbp)
               	movq	%rax, -200(%rbp)
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	leaq	511(%rdx), %rsi
               	movq	%r10, %rdx
               	addq	$534, %rcx              # imm = 0x216
               	andq	$-16, %rcx
               	subq	%rcx, %rsp
               	leaq	-216(%rbp), %rcx
               	leaq	15(%rsp), %rbx
               	andq	$-16, %rbx
               	movq	%rbx, %rdi
               	callq	0x440a76 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>
               	movl	$16, %edi
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %r12
               	callq	0x43f9d2 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4477(%rip), %rdx       # 0x43f694 <std::out_of_range::~out_of_range()>
               	leaq	131768(%rip), %rsi      # 0x460ad0 <typeinfo for std::out_of_range>
               	movq	%r12, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_runtime_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f9ec <std::runtime_error::runtime_error(char const*)>
               	leaq	-4528(%rip), %rdx       # 0x43f6a8 <std::runtime_error::~runtime_error()>
               	leaq	131721(%rip), %rsi      # 0x460ae8 <typeinfo for std::runtime_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_range_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43fa2c <std::range_error::range_error(char const*)>
               	leaq	-4561(%rip), %rdx       # 0x43f6ce <std::range_error::~range_error()>
               	leaq	131674(%rip), %rsi      # 0x460b00 <typeinfo for std::range_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_overflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43fa46 <std::overflow_error::overflow_error(char const*)>
               	leaq	-4612(%rip), %rdx       # 0x43f6e2 <std::overflow_error::~overflow_error()>
               	leaq	131627(%rip), %rsi      # 0x460b18 <typeinfo for std::overflow_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_underflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbeb <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43fa60 <std::underflow_error::underflow_error(char const*)>
               	leaq	-4663(%rip), %rdx       # 0x43f6f6 <std::underflow_error::~underflow_error()>
               	leaq	131580(%rip), %rsi      # 0x460b30 <typeinfo for std::underflow_error>
               	movq	%rbx, %rdi
               	callq	0x43c265 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc2d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::__sso_string::__sso_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__sso_string::__sso_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43eef0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::__sso_string(char const*, unsigned long)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43ef48 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__sso_string::__sso_string(std::__sso_string const&)>:
               	jmp	0x43eef0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::operator=(std::__sso_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d69c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__sso_string::~__sso_string()>:
               	jmp	0x43d534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__sso_string::__sso_string(std::__sso_string&&)>:
               	jmp	0x43d866 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__sso_string::operator=(std::__sso_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__throw_insufficient_space(char const*, char const*)>:
               	pushq	%rbp
               	movq	%rdi, %r8
               	movq	%rsi, %rdx
               	movl	$105, %ecx
               	subq	%r8, %rdx
               	leaq	21228(%rip), %rsi       # 0x445caa <typeinfo name for kotlin::gc::GCSchedulerData+0x1cf1>
               	leaq	128(%rdx), %rax
               	movq	%rsp, %rbp
               	andq	$-16, %rax
               	subq	$112, %rsp
               	subq	%rax, %rsp
               	leaq	-105(%rbp), %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	leaq	15(%rsp), %rax
               	leaq	-105(%rbp), %rsi
               	movl	$26, %ecx
               	andq	$-16, %rax
               	leaq	104(%rax), %r9
               	movq	%rax, %rdi
               	rep		movsl	(%rsi), %es:(%rdi)
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	movq	%rdx, %rcx
               	rep		movsb	(%rsi), %es:(%rdi)
               	movb	$0, 104(%rax,%rdx)
               	movq	%rax, %rdi
               	callq	0x4405c3 <std::__throw_logic_error(char const*)>

<__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rdx, %r9
               	movl	$10, %r11d
               	movq	%rsp, %rbp
               	pushq	%rbx
               	leaq	21231(%rip), %rbx       # 0x445d13 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d5a>
               	subq	$40, %rsp
               	leaq	15(%rsp), %rdi
               	andq	$-16, %rdi
               	leaq	24(%rdi), %rcx
               	movq	%rcx, %r8
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	decq	%r8
               	divq	%r11
               	movb	(%rbx,%rdx), %dl
               	movb	%dl, (%r8)
               	cmpq	$9, %r9
               	jbe	0x440a54 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x48>
               	movq	%rax, %r9
               	jmp	0x440a38 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x2c>
               	subq	%r8, %rcx
               	orl	$-1, %eax
               	movq	%rcx, %rdx
               	cmpq	%rsi, %rcx
               	ja	0x440a70 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x64>
               	subq	%rcx, %rdi
               	movl	%edx, %eax
               	leaq	24(%rdi), %rsi
               	movq	%r10, %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	movq	-8(%rbp), %rbx
               	leave
               	retq

<__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>:
               	pushq	%r14
               	leaq	-1(%rdi,%rsi), %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	(%rbp), %al
               	testb	%al, %al
               	je	0x440b7b <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x105>
               	cmpq	%r14, %rbx
               	jae	0x440b67 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cmpb	$37, %al
               	jne	0x440b56 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movb	1(%rbp), %al
               	cmpb	$115, %al
               	je	0x440ac6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x50>
               	cmpb	$122, %al
               	je	0x440b06 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x90>
               	cmpb	$37, %al
               	jne	0x440b56 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	incq	%rbp
               	jmp	0x440b56 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x440adf <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x69>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x440aed <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x77>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	(%rax), %rax
               	movb	(%rax), %dl
               	testb	%dl, %dl
               	je	0x440b72 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xfc>
               	cmpq	%r14, %rbx
               	je	0x440b67 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	incq	%rbx
               	incq	%rax
               	movb	%dl, -1(%rbx)
               	jmp	0x440af0 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x7a>
               	cmpb	$117, 2(%rbp)
               	jne	0x440b56 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x440b25 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xaf>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x440b33 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xbd>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	%r14, %rsi
               	movq	(%rax), %rdx
               	movq	%rbx, %rdi
               	subq	%rbx, %rsi
               	callq	0x440a0c <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>
               	testl	%eax, %eax
               	jle	0x440b67 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cltq
               	addq	$3, %rbp
               	addq	%rax, %rbx
               	jmp	0x440a8f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movb	(%rbp), %al
               	incq	%rbx
               	incq	%rbp
               	movb	%al, -1(%rbx)
               	jmp	0x440a8f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x4409a8 <__gnu_cxx::__throw_insufficient_space(char const*, char const*)>
               	addq	$2, %rbp
               	jmp	0x440a8f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rax
               	movb	$0, (%rbx)
               	popq	%rbx
               	subq	%r13, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_data(char*)>:
               	movq	%rsi, %rax
               	movq	%rsi, (%rdi)
               	retq
               	nop

<std::string::_M_rep() const>:
               	movq	(%rdi), %rax
               	subq	$24, %rax
               	retq

<std::string::_M_ibegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_iend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::_M_check(unsigned long, char const*) const>:
               	movq	(%rdi), %rcx
               	movq	%rsi, %rax
               	movq	-24(%rcx), %rcx
               	cmpq	%rsi, %rcx
               	jae	0x440bd2 <std::string::_M_check(unsigned long, char const*) const+0x24>
               	pushq	%rsi
               	leaq	20178(%rip), %rdi       # 0x445a97 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x440726 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq
               	nop

<std::string::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	addq	%rax, %rsi
               	movq	(%rdi), %rax
               	subq	-24(%rax), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x440bf6 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const+0x22>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x440698 <std::__throw_length_error(char const*)>
               	retq
               	nop

<std::string::_M_limit(unsigned long, unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq

<std::string::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x440c1e <std::string::_M_disjunct(char const*) const+0x14>
               	addq	-24(%rdx), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::string::_M_copy(char*, char const*, unsigned long)>:
               	movq	%rdx, %rcx
               	cmpq	$1, %rdx
               	jne	0x440c2d <std::string::_M_copy(char*, char const*, unsigned long)+0xe>
               	movb	(%rsi), %dl
               	movb	%dl, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440c34 <std::string::_M_copy(char*, char const*, unsigned long)+0x15>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::string::_M_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x440c40 <std::string::_M_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440c4a <std::string::_M_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136b0 <memmove@plt>
               	retq

<std::string::_M_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x440c57 <std::string::_M_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x440c60 <std::string::_M_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq

<std::string::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	jmp	0x440c61 <std::string::_S_copy_chars(char*, char*, char*)>

<std::string::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	jmp	0x440c6e <std::string::_S_copy_chars(char*, char const*, char const*)>

<std::string::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x440c99 <std::string::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq

<std::string::_S_empty_rep()>:
               	leaq	245759(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	245751(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	245729(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::string::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::end() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x440ccc <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::cend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::crbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x440ccc <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::size() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::length() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::max_size() const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	retq
               	nop

<std::string::capacity() const>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rax
               	retq

<std::string::empty() const>:
               	movq	(%rdi), %rax
               	cmpq	$0, -24(%rax)
               	sete	%al
               	retq

<std::string::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::at(unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x440d6f <std::string::at(unsigned long) const+0x1b>
               	pushq	%rax
               	leaq	19814(%rip), %rdi       # 0x445ace <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440726 <std::__throw_out_of_range_fmt(char const*, ...)>
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::back() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	leaq	-1(%rax,%rdx), %rax
               	retq
               	nop

<std::string::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	19999(%rip), %rdx       # 0x445bb1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rsi
               	movq	-24(%rsi), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x440dcd <std::string::copy(char*, unsigned long, unsigned long) const+0x47>
               	addq	%rbp, %rsi
               	movq	%rbx, %rdx
               	movq	%r12, %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::string::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rsi
               	testq	%rcx, %rcx
               	jne	0x440e0b <std::string::find(char const*, unsigned long, unsigned long) const+0x27>
               	cmpq	%rdx, %rsi
               	jae	0x440e7f <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x440e7b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x440e7b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movb	(%r12), %dl
               	movq	%rcx, %rbp
               	leaq	(%r13,%rsi), %rcx
               	movl	$1, %r14d
               	movq	%rcx, 8(%rsp)
               	leaq	(%r13,%rax), %rdi
               	subq	%rax, %rsi
               	subq	%rbp, %r14
               	movb	%dl, 31(%rsp)
               	leaq	31(%rsp), %r15
               	cmpq	%rbp, %rsi
               	jb	0x440e7b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x440e7b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440e6d <std::string::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%rbx, %rax
               	subq	%r13, %rax
               	jmp	0x440e7f <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%rbx), %rdi
               	subq	%rdi, %rsi
               	jmp	0x440e3b <std::string::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::find(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440de4 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440de4 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char, unsigned long) const>:
               	pushq	%rbp
               	orq	$-1, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rbx
               	movb	%sil, 12(%rsp)
               	movq	-24(%rbx), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x440eef <std::string::find(char, unsigned long) const+0x39>
               	movq	%rdx, %rdi
               	leaq	12(%rsp), %rdx
               	subq	%rdi, %rsi
               	addq	%rbx, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440eef <std::string::find(char, unsigned long) const+0x39>
               	subq	%rbx, %rax
               	movq	%rax, %rbp
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	cmpq	%rax, %rcx
               	ja	0x440f4b <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x440f4b <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x440f47 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x440f25 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::rfind(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440efa <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440efa <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x440fae <std::string::rfind(char, unsigned long) const+0x30>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x440fae <std::string::rfind(char, unsigned long) const+0x30>
               	leaq	-1(%rax), %rdx
               	cmpb	%sil, 1(%rdi,%rdx)
               	je	0x440fae <std::string::rfind(char, unsigned long) const+0x30>
               	movq	%rdx, %rax
               	jmp	0x440f98 <std::string::rfind(char, unsigned long) const+0x1a>
               	retq
               	nop

<std::string::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%rbp, %rbp
               	je	0x440feb <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%r13), %rdx
               	cmpq	-24(%rdx), %rbx
               	jae	0x440feb <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	addq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x440fef <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x440fc4 <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_first_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440fb0 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440fb0 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440eb6 <std::string::find(char, unsigned long) const>
               	nop

<std::string::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x441078 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x441078 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x44107c <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x441058 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x44107c <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::find_last_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x44102c <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x44102c <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440f7e <std::string::rfind(char, unsigned long) const>
               	nop

<std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbp
               	movq	%rdx, %rbx
               	movq	-24(%rbp), %r12
               	cmpq	%r12, %rbx
               	jae	0x4410f1 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x37>
               	leaq	(%rbp,%rbx), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x4410f5 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3b>
               	incq	%rbx
               	jmp	0x4410d2 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::find_first_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x4410ba <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x4410ba <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rcx
               	movq	%rdx, %rax
               	movq	-24(%rcx), %rdi
               	cmpq	%rdi, %rax
               	jae	0x441144 <std::string::find_first_not_of(char, unsigned long) const+0x1a>
               	cmpb	%sil, (%rcx,%rax)
               	jne	0x441148 <std::string::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x441134 <std::string::find_first_not_of(char, unsigned long) const+0xa>
               	orq	$-1, %rax
               	retq
               	nop

<std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x441193 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d494 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x441193 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x441175 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_last_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x44114a <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x44114a <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x4411ef <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpb	%sil, (%rdi,%rax)
               	jne	0x4411ef <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x4411e0 <std::string::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::string::compare(std::string const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441223 <std::string::compare(std::string const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x440c7b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&) const>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	18823(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r12, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441289 <std::string::compare(unsigned long, unsigned long, std::string const&) const+0x61>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x440c7b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	18726(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	18684(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%rbp), %rsi
               	movq	8(%rsp), %r9
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	subq	%r13, %rbp
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441328 <std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const+0x96>
               	addq	$16, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x440c7b <std::string::_S_compare(unsigned long, unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r8
               	movq	%rsi, %rdi
               	movq	-24(%r8), %rbp
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441379 <std::string::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x440c7b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	18477(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r8
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rsi
               	movq	%r12, %rdi
               	movq	-24(%rsi), %rbp
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	leaq	(%rsi,%r13), %rdi
               	movq	%r12, %rsi
               	movq	%rbp, %rdx
               	notq	%rcx
               	leaq	-1(%rcx), %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4413ee <std::string::compare(unsigned long, unsigned long, char const*) const+0x70>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x440c7b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	18370(%rip), %rdx       # 0x445bc4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%r8, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r12, %rdi
               	callq	0x43d487 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441456 <std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x60>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x440c7b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::string::_Rep::_S_empty_rep()>:
               	leaq	243765(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::string::_Rep::_M_is_leaked() const>:
               	movl	16(%rdi), %eax
               	shrl	$31, %eax
               	retq
               	nop

<std::string::swap(std::string&)>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44146c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	je	0x441497 <std::string::swap(std::string&)+0x23>
               	movq	(%rbx), %rax
               	movl	$0, -8(%rax)
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44146c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	movq	(%rbp), %rax
               	je	0x4414b3 <std::string::swap(std::string&)+0x3f>
               	movl	$0, -8(%rax)
               	movq	(%rbx), %rdx
               	movq	%rax, (%rbx)
               	movq	%rdx, (%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::operator=(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441474 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441474 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_is_shared() const>:
               	movl	16(%rdi), %eax
               	testl	%eax, %eax
               	setg	%al
               	retq
               	nop

<std::string::_Rep::_M_set_leaked()>:
               	movl	$4294967295, 16(%rdi)   # imm = 0xFFFFFFFF
               	retq

<std::string::_Rep::_M_set_sharable()>:
               	movl	$0, 16(%rdi)
               	retq

<std::string::_Rep::_M_set_length_and_sharable(unsigned long)>:
               	cmpq	129761(%rip), %rdi      # 0x460fe0 <write+0x460fe0>
               	je	0x441510 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)+0x18>
               	movl	$0, 16(%rdi)
               	movq	%rsi, (%rdi)
               	movb	$0, 24(%rdi,%rsi)
               	retq
               	nop

<std::string::_Rep::_M_refdata()>:
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	pushq	%rbx
               	cmpq	%rax, %rdi
               	jbe	0x441534 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x1c>
               	leaq	18415(%rip), %rdi       # 0x445d1e <typeinfo name for kotlin::gc::GCSchedulerData+0x1d65>
               	callq	0x440698 <std::__throw_length_error(char const*)>
               	movq	%rdi, %rbx
               	cmpq	%rsi, %rdi
               	jbe	0x441547 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x2f>
               	leaq	(%rsi,%rsi), %rax
               	cmpq	%rax, %rdi
               	cmovbq	%rax, %rbx
               	leaq	57(%rbx), %rax
               	cmpq	$4096, %rax             # imm = 0x1000
               	jbe	0x441578 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	cmpq	%rsi, %rbx
               	jbe	0x441578 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	andl	$4095, %eax             # imm = 0xFFF
               	addq	$4096, %rbx             # imm = 0x1000
               	subq	%rax, %rbx
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	cmpq	%rax, %rbx
               	cmovaq	%rax, %rbx
               	leaq	25(%rbx), %rdi
               	callq	0x43c0b9 <operator new(unsigned long)>
               	movq	%rbx, 8(%rax)
               	movl	$0, 16(%rax)
               	popq	%rbx
               	retq

<std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	testq	%rdi, %rdi
               	je	0x4415c9 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x3b>
               	movl	%esi, %ebp
               	xorl	%esi, %esi
               	movq	%rdi, %rbx
               	callq	0x441518 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movsbl	%bpl, %edx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c4b <std::string::_M_assign(char*, unsigned long, char)>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x4415d4 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x46>
               	leaq	243408(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rdx
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	xorl	%edi, %edi
               	callq	0x44158e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movl	%edx, %esi
               	movsbl	%sil, %esi
               	movq	%rcx, %rdx
               	callq	0x44158e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)>:
               	movsbl	%sil, %esi
               	jmp	0x44158e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	nop

<std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
               	jmp	0x43b785 <operator delete(void*)>
               	nop

<std::string::_Rep::_M_dispose(std::allocator<char> const&)>:
               	cmpq	129465(%rip), %rdi      # 0x460fe0 <write+0x460fe0>
               	je	0x44164f <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	cmpq	$0, 129415(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x44163d <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x1d>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 16(%rdi)
               	jmp	0x441646 <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x26>
               	movl	16(%rdi), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 16(%rdi)
               	testl	%eax, %eax
               	jg	0x44164f <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	jmp	0x44161a <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	subq	$24, %rsp
               	movq	(%rdi), %rdi
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441620 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::string::clear()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	movq	(%rbx), %rdi
               	testb	%al, %al
               	je	0x4416a3 <std::string::clear()+0x39>
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441620 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	leaq	243206(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rbx)
               	jmp	0x4416ae <std::string::clear()+0x44>
               	subq	$24, %rdi
               	xorl	%esi, %esi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	subq	%rdx, %r13
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rbp
               	leaq	(%r13,%rbp), %rax
               	leaq	(%rdx,%rsi), %r13
               	movq	%rax, 8(%rsp)
               	subq	%r13, %rbp
               	cmpq	-16(%rdi), %rax
               	jbe	0x441732 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x7e>
               	leaq	47(%rsp), %rax
               	movq	8(%rsp), %rdi
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rdx
               	movq	-16(%rax), %rsi
               	callq	0x441518 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	testq	%r14, %r14
               	leaq	24(%rax), %r15
               	je	0x441763 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	movq	(%rbx), %rsi
               	movq	%r14, %rdx
               	movq	%r15, %rdi
               	movq	%rax, 24(%rsp)
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	24(%rsp), %rax
               	jmp	0x441763 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	subq	$24, %rdi
               	movq	%rdx, %r15
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4416ef <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x3b>
               	testq	%rbp, %rbp
               	je	0x441792 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	cmpq	%r15, %r12
               	je	0x441792 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	movq	(%rbx), %rdi
               	addq	%r14, %r12
               	movq	%rbp, %rdx
               	leaq	(%rdi,%r13), %rsi
               	addq	%r12, %rdi
               	callq	0x440c35 <std::string::_M_move(char*, char const*, unsigned long)>
               	jmp	0x441792 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	testq	%rbp, %rbp
               	je	0x44177e <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xca>
               	movq	(%rbx), %rsi
               	leaq	24(%r14,%r12), %rdi
               	movq	%rbp, %rdx
               	addq	%rax, %rdi
               	addq	%r13, %rsi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441620 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r15, (%rbx)
               	movq	(%rbx), %rdi
               	movq	8(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::_M_leak_hard()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	cmpq	129052(%rip), %rdi      # 0x460fe0 <write+0x460fe0>
               	je	0x4417e7 <std::string::_M_leak_hard()+0x35>
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	je	0x4417dd <std::string::_M_leak_hard()+0x2b>
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbx), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nop

<std::string::_M_leak()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	callq	0x44146c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	jne	0x441807 <std::string::_M_leak()+0x1d>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x4417b2 <std::string::_M_leak_hard()>
               	popq	%rbx
               	retq
               	nop

<std::string::begin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4417ea <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::rend()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44180a <std::string::begin()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::end()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4417ea <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44182c <std::string::end()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::operator[](unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	callq	0x4417ea <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::front()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4417ea <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::back()>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rbx
               	callq	0x4417ea <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	decq	%rbx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::string::at(unsigned long)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x4418b9 <std::string::at(unsigned long)+0x1f>
               	leaq	16924(%rip), %rdi       # 0x445ace <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440726 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	%rdi, %rbx
               	movq	%rsi, 8(%rsp)
               	callq	0x4417ea <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	16925(%rip), %rdx       # 0x445b12 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	cmovbeq	%rax, %rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	xorl	%ecx, %ecx
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::pop_back()>:
               	movq	(%rdi), %rax
               	movl	$1, %edx
               	movq	-24(%rax), %rsi
               	decq	%rsi
               	jmp	0x4418d8 <std::string::erase(unsigned long, unsigned long)>

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	movq	%rsi, %rax
               	subq	%rsi, %rdx
               	je	0x441988 <std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)+0x30>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rcx
               	subq	(%rdi), %rax
               	xorl	%ecx, %ecx
               	movq	%rax, %rsi
               	movq	%rax, %rbx
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rsi
               	popq	%rbx
               	popq	%rbp
               	retq
               	retq
               	nop

<std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	16779(%rip), %rcx       # 0x445b26 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%r12, %rdx
               	movq	%rsi, %rbp
               	movq	%r13, %rsi
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movl	%r8d, 12(%rsp)
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rcx
               	movq	%r13, %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	testq	%r12, %r12
               	movl	12(%rsp), %r8d
               	je	0x4419e4 <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x5a>
               	movq	(%rbx), %rdi
               	movsbl	%r8b, %edx
               	movq	%r12, %rsi
               	addq	%rbp, %rdi
               	callq	0x440c4b <std::string::_M_assign(char*, unsigned long, char)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::assign(unsigned long, char)>:
               	movq	(%rdi), %rax
               	movq	%rsi, %rcx
               	movsbl	%dl, %r8d
               	xorl	%esi, %esi
               	movq	-24(%rax), %rax
               	movq	%rax, %rdx
               	jmp	0x44198a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::string::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x4419f2 <std::string::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::string::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	16657(%rip), %rdx       # 0x445b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x44198a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x44198a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	movq	-24(%rax), %rax
               	movl	%r8d, 4(%rsp)
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	16552(%rip), %rdx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x44198a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x44198a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	movq	%rsi, %rdx
               	jmp	0x441adc <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>
               	nop

<std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rcx, %r12
               	movq	%r8, %rcx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	%r8, 8(%rsp)
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	8(%rsp), %r8
               	testq	%r8, %r8
               	je	0x441b36 <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)+0x3a>
               	addq	(%rbp), %rbx
               	movq	%r8, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	addq	$16, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::assign(char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	16441(%rip), %rcx       # 0x445b87 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	movq	-24(%rax), %rsi
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x440c0a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441b8c <std::string::assign(char const*, unsigned long)+0x4a>
               	movq	(%rbx), %rax
               	movq	%rbp, %r8
               	movq	%r12, %rcx
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	popq	%rbx
               	popq	%rbp
               	movq	-24(%rax), %rdx
               	popq	%r12
               	jmp	0x441afc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441b71 <std::string::assign(char const*, unsigned long)+0x2f>
               	movq	(%rbx), %rdi
               	movq	%r12, %rax
               	subq	%rdi, %rax
               	cmpq	%rax, %rbp
               	ja	0x441bb7 <std::string::assign(char const*, unsigned long)+0x75>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x441bc7 <std::string::assign(char const*, unsigned long)+0x85>
               	testq	%rax, %rax
               	je	0x441bc7 <std::string::assign(char const*, unsigned long)+0x85>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440c35 <std::string::_M_move(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441b42 <std::string::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %rax
               	subq	%rdx, %rax
               	leaq	16253(%rip), %rdx       # 0x445b87 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rcx
               	movq	%rcx, %rbp
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x441b42 <std::string::assign(char const*, unsigned long)>

<std::string::assign(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x441b42 <std::string::assign(char const*, unsigned long)>

<std::string::operator=(char const*)>:
               	jmp	0x441c2c <std::string::assign(char const*)>
               	nop

<std::string::assign(std::initializer_list<char>)>:
               	jmp	0x441b42 <std::string::assign(char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, char const*, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16095(%rip), %rdx       # 0x445b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	leaq	16060(%rip), %rcx       # 0x445b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x440c0a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441cb6 <std::string::insert(unsigned long, char const*, unsigned long)+0x5e>
               	popq	%rbx
               	movq	%rbp, %r8
               	movq	%r14, %rcx
               	popq	%rbp
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	xorl	%edx, %edx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x441afc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%r12), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441c9b <std::string::insert(unsigned long, char const*, unsigned long)+0x43>
               	xorl	%edx, %edx
               	movq	%r13, %rsi
               	movq	%rbp, %rcx
               	movq	%r12, %rdi
               	subq	(%r12), %r14
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%r12), %rbx
               	movq	%rbp, %rdx
               	leaq	(%rbx,%r14), %rsi
               	addq	%r13, %rbx
               	leaq	(%rsi,%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x441cfa <std::string::insert(unsigned long, char const*, unsigned long)+0xa2>
               	cmpq	%rbx, %rsi
               	jb	0x441cff <std::string::insert(unsigned long, char const*, unsigned long)+0xa7>
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	jmp	0x441d1b <std::string::insert(unsigned long, char const*, unsigned long)+0xc3>
               	subq	%r14, %r13
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	%rbp, %rdx
               	leaq	(%rbx,%rbp), %rsi
               	leaq	(%rbx,%r13), %rdi
               	subq	%r13, %rdx
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x441c58 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rdx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdx), %rbx
               	leaq	15858(%rip), %rdx       # 0x445b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	movq	-24(%rbx), %rax
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, %rbp
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	popq	%r8
               	movq	%rbp, %rcx
               	movq	%r13, %rsi
               	leaq	(%rbx,%rax), %rdx
               	movq	%r12, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441c58 <std::string::insert(unsigned long, char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, std::string const&)>:
               	movq	(%rdx), %rax
               	xorl	%ecx, %ecx
               	movq	-24(%rax), %r8
               	jmp	0x441d34 <std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>

<std::string::insert(unsigned long, char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441c58 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::_Rep::_M_refcopy()>:
               	cmpq	127533(%rip), %rdi      # 0x460fe0 <write+0x460fe0>
               	je	0x441dc8 <std::string::_Rep::_M_refcopy()+0x1c>
               	cmpq	$0, 127483(%rip)        # 0x460fb8 <write+0x460fb8>
               	je	0x441dc5 <std::string::_Rep::_M_refcopy()+0x19>
               	lock
               	incl	16(%rdi)
               	jmp	0x441dc8 <std::string::_Rep::_M_refcopy()+0x1c>
               	incl	16(%rdi)
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	addq	%rdx, %rdi
               	movq	%rsi, %rdx
               	movq	8(%rbx), %rsi
               	callq	0x441518 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	(%rbx), %rdx
               	movq	%rax, %r12
               	leaq	24(%rax), %rbp
               	testq	%rdx, %rdx
               	je	0x441e02 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)+0x34>
               	leaq	24(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::string::reserve(unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdi
               	cmpq	-16(%rdi), %rsi
               	je	0x441e6c <std::string::reserve(unsigned long)+0x56>
               	movq	(%rbp), %rdi
               	movq	%rbx, %rdx
               	movq	-24(%rdi), %rax
               	cmpq	%rax, %rbx
               	leaq	15(%rsp), %rbx
               	cmovbq	%rax, %rdx
               	movq	%rbx, %rsi
               	subq	$24, %rdi
               	subq	%rax, %rdx
               	callq	0x441dce <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	movq	%rbx, %rsi
               	movq	%rax, %r12
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441620 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbp)
               	jmp	0x441e79 <std::string::reserve(unsigned long)+0x63>
               	subq	$24, %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441e2d <std::string::reserve(unsigned long)+0x17>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::shrink_to_fit()>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rdx
               	cmpq	%rdx, -24(%rax)
               	jae	0x441ea7 <std::string::shrink_to_fit()+0x25>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43c117 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43c175 <__cxa_end_catch>
               	retq

<std::string::append(std::string const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rsi), %rax
               	movq	-24(%rax), %r12
               	testq	%r12, %r12
               	je	0x441f0d <std::string::append(std::string const&)+0x65>
               	movq	(%rdi), %rdi
               	movq	%rsi, %r13
               	movq	-24(%rdi), %rbp
               	addq	%r12, %rbp
               	cmpq	-16(%rdi), %rbp
               	jbe	0x441ede <std::string::append(std::string const&)+0x36>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	jmp	0x441eeb <std::string::append(std::string const&)+0x43>
               	subq	$24, %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441ed1 <std::string::append(std::string const&)+0x29>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	%r12, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::operator+=(std::string const&)>:
               	jmp	0x441ea8 <std::string::append(std::string const&)>
               	nop

<std::string::append(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	15464(%rip), %rdx       # 0x445b9c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	pushq	%rbp
               	movq	%r12, %rsi
               	movq	%rdi, %rbp
               	movq	%r14, %rdi
               	pushq	%rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%r14), %rax
               	movq	-24(%rax), %rbx
               	subq	%r12, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x441fab <std::string::append(std::string const&, unsigned long, unsigned long)+0x8d>
               	movq	(%rbp), %rdi
               	movq	-24(%rdi), %r13
               	addq	%rbx, %r13
               	cmpq	-16(%rdi), %r13
               	jbe	0x441f78 <std::string::append(std::string const&, unsigned long, unsigned long)+0x5a>
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	jmp	0x441f85 <std::string::append(std::string const&, unsigned long, unsigned long)+0x67>
               	subq	$24, %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441f6b <std::string::append(std::string const&, unsigned long, unsigned long)+0x4d>
               	movq	(%rbp), %rdi
               	movq	(%r14), %rsi
               	movq	%rbx, %rdx
               	addq	%r12, %rsi
               	addq	-24(%rdi), %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%r13, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rbx
               	movq	%rbp, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::append(char const*, unsigned long)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rdx, %rdx
               	je	0x44204c <std::string::append(char const*, unsigned long)+0x94>
               	movq	%rsi, %rbp
               	leaq	15303(%rip), %rcx       # 0x445b9c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	xorl	%esi, %esi
               	movq	%rdx, %r13
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%r13, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x44200b <std::string::append(char const*, unsigned long)+0x53>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x440c0a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x44201a <std::string::append(char const*, unsigned long)+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	jmp	0x44202b <std::string::append(char const*, unsigned long)+0x73>
               	subq	$24, %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441fef <std::string::append(char const*, unsigned long)+0x37>
               	jmp	0x44202b <std::string::append(char const*, unsigned long)+0x73>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	subq	(%rbx), %rbp
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	addq	(%rbx), %rbp
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	%r13, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::operator+=(std::initializer_list<char>)>:
               	jmp	0x441fb8 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x441fb8 <std::string::append(char const*, unsigned long)>

<std::string::operator+=(char const*)>:
               	jmp	0x44205e <std::string::append(char const*)>
               	nop

<std::string::append(std::initializer_list<char>)>:
               	jmp	0x441fb8 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(unsigned long, char)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rsi, %rsi
               	je	0x4420fc <std::string::append(unsigned long, char)+0x72>
               	movq	%rsi, %rbp
               	movsbl	%dl, %r13d
               	leaq	15093(%rip), %rcx       # 0x445b9c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %rdx
               	xorl	%esi, %esi
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%rbp, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x4420ce <std::string::append(unsigned long, char)+0x44>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	jmp	0x4420db <std::string::append(unsigned long, char)+0x51>
               	subq	$24, %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4420c1 <std::string::append(unsigned long, char)+0x37>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movl	%r13d, %edx
               	addq	-24(%rdi), %rdi
               	callq	0x440c4b <std::string::_M_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long, char)>:
               	pushq	%r13
               	leaq	15397(%rip), %rcx       # 0x445d36 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d7d>
               	pushq	%r12
               	movl	%edx, %r12d
               	movq	%rsi, %rdx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	movq	(%rdi), %rax
               	movq	-24(%rax), %r13
               	movq	%r13, %rsi
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	cmpq	%r13, %rbx
               	jbe	0x442151 <std::string::resize(unsigned long, char)+0x49>
               	subq	%r13, %rbx
               	popq	%r8
               	movsbl	%r12b, %edx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x44208a <std::string::append(unsigned long, char)>
               	jae	0x442169 <std::string::resize(unsigned long, char)+0x61>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	orq	$-1, %rdx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x4418d8 <std::string::erase(unsigned long, unsigned long)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x442108 <std::string::resize(unsigned long, char)>
               	nop

<std::string::push_back(char)>:
               	pushq	%r12
               	movl	%esi, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rax
               	leaq	1(%rax), %rbx
               	cmpq	-16(%rdi), %rbx
               	jbe	0x4421a2 <std::string::push_back(char)+0x28>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	jmp	0x4421af <std::string::push_back(char)+0x35>
               	subq	$24, %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442195 <std::string::push_back(char)+0x1b>
               	movq	(%rbp), %rax
               	movq	%rbx, %rsi
               	movq	-24(%rax), %rdx
               	movb	%r12b, (%rax,%rdx)
               	movq	(%rbp), %rdi
               	popq	%rbx
               	popq	%rbp
               	subq	$24, %rdi
               	popq	%r12
               	jmp	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	nop

<std::string::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x44217a <std::string::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rsi, 8(%rsp)
               	callq	0x44146c <std::string::_Rep::_M_is_leaked() const>
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	jne	0x44220a <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)+0x28>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x441dac <std::string::_Rep::_M_refcopy()>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	jmp	0x441dce <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	leaq	14(%rsp), %rax
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rax, %rsi
               	callq	0x4421e2 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::assign(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	cmpq	%rdi, (%rbx)
               	je	0x442282 <std::string::assign(std::string const&)+0x3e>
               	leaq	14(%rsp), %rbp
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rbp, %rsi
               	callq	0x4421e2 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rbp, %rsi
               	movq	%rax, %r12
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441620 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbx)
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::string const&)>:
               	jmp	0x442244 <std::string::assign(std::string const&)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	240107(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	movq	%rbp, %rdi
               	addq	$24, %rax
               	movq	%rax, (%rbp)
               	movq	(%r12), %rax
               	movq	-24(%rax), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	addq	%rbx, %rsi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441fb8 <std::string::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x441ea8 <std::string::append(std::string const&)>
               	popq	%rdx
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	240008(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	addq	$24, %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	(%rdx), %rax
               	movq	-24(%rax), %rsi
               	incq	%rsi
               	callq	0x441e16 <std::string::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x44208a <std::string::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441ea8 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x44221a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441ea8 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rdi, %rsi
               	je	0x4423e9 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x45>
               	movq	%rsi, %r14
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441518 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c61 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x4423f4 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x50>
               	leaq	239792(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x4423a4 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x44246e <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x442462 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441518 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c61 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442479 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	14562(%rip), %rdi       # 0x445d4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x4405c3 <std::__throw_logic_error(char const*)>
               	leaq	239659(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	%r8, 8(%rsp)
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	14175(%rip), %rdx       # 0x445c13 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	%rbp, %rbx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	movq	%r8, %rdx
               	callq	0x442418 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442418 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	leaq	14078(%rip), %rdx       # 0x445c13 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %r12
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	addq	%rbx, %r12
               	leaq	(%rbx,%rax), %rdi
               	movq	%r12, %rsi
               	callq	0x442418 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbp)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	13994(%rip), %rdx       # 0x445c13 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	addq	%rbp, %rbx
               	leaq	15(%rsp), %rdx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	callq	0x442418 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	13962(%rip), %rdx       # 0x445c2e <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x442540 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x44262c <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x442620 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441518 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c6e <std::string::_S_copy_chars(char*, char const*, char const*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x4414f8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442637 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	14116(%rip), %rdi       # 0x445d4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x4405c3 <std::__throw_logic_error(char const*)>
               	leaq	239213(%rip), %rax      # 0x47cca0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	movq	%rsi, %r8
               	pushq	%rbx
               	orq	$-1, %rsi
               	movq	%rdi, %rbx
               	testq	%r8, %r8
               	je	0x442669 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x25>
               	xorl	%eax, %eax
               	movq	%rsi, %rcx
               	movq	%r8, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%r8,%rax), %rsi
               	movq	%r8, %rdi
               	callq	0x4425d6 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x4425d6 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x4425d6 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	13476(%rip), %rdx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r14
               	movq	%r8, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	subq	$24, %rsp
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	movq	%r14, %rdx
               	leaq	13430(%rip), %rcx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	movq	-24(%rax), %r12
               	subq	%r13, %r12
               	cmpq	%r15, %r12
               	cmovaq	%r15, %r12
               	movq	%r12, %rsi
               	callq	0x440bd4 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x440c0a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x442723 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x7b>
               	movq	%rbp, %rdi
               	movq	%r14, %r8
               	movq	%rbx, %rcx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	callq	0x441afc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%rax, %rbp
               	jmp	0x4427d4 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4414de <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442707 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	(%rbp), %rax
               	leaq	(%rbx,%r14), %rsi
               	leaq	(%rax,%r13), %rcx
               	cmpq	%rcx, %rsi
               	jbe	0x44278d <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	(%r13,%r12), %rdx
               	addq	%rax, %rdx
               	cmpq	%rdx, %rbx
               	jae	0x44278d <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	8(%rsp), %r15
               	leaq	7(%rsp), %rcx
               	movq	%r14, %rdx
               	movq	%rbx, %rsi
               	movq	%r15, %rdi
               	callq	0x44268e <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	movq	8(%rsp), %rcx
               	movq	%r14, %r8
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441afc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%r15, %rdi
               	movq	%rax, %rbp
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	jmp	0x4427d4 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	subq	%rax, %rbx
               	cmpq	%rcx, %rsi
               	jbe	0x44279b <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xf3>
               	addq	%r14, %rbx
               	subq	%r12, %rbx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movq	%r14, %rcx
               	callq	0x4416b4 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rdi
               	movq	%r14, %rdx
               	leaq	(%rdi,%rbx), %rsi
               	addq	%r13, %rdi
               	callq	0x440c1f <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x4427d4 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	%rax, %rbx
               	movq	%r15, %rdi
               	callq	0x441650 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::replace(unsigned long, unsigned long, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%r9, %r14
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	13141(%rip), %rdx       # 0x445b58 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%r8, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rcx, %rdi
               	pushq	%rbx
               	movq	(%rcx), %rbx
               	movq	-24(%rbx), %rax
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %r14
               	callq	0x440bae <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rcx
               	movq	%r14, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x44286a <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x44286a <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	addq	%rcx, %r8
               	jmp	0x4428b4 <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x4426a8 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x4425d6 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<bool __gnu_cxx::operator==<char*, std::string>(__gnu_cxx::__normal_iterator<char*, std::string> const&, __gnu_cxx::__normal_iterator<char*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::random_device::_M_init(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	13402(%rip), %rsi       # 0x445d82 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x441336 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x442960 <std::random_device::_M_init(std::string const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x442992 <std::random_device::_M_init(std::string const&)+0x7e>
               	testl	%eax, %eax
               	je	0x442992 <std::random_device::_M_init(std::string const&)+0x7e>
               	movl	$1, %eax
               	leaq	13351(%rip), %r12       # 0x445d75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x442999 <std::random_device::_M_init(std::string const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x4429b1 <std::random_device::_M_init(std::string const&)+0x9d>
               	leaq	13326(%rip), %rsi       # 0x445d75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x441336 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442999 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	13328(%rip), %rsi       # 0x445d8a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x441336 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442999 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	13321(%rip), %rdi       # 0x445d96 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440833 <std::__throw_runtime_error(char const*)>
               	leaq	13276(%rip), %r12       # 0x445d75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	13351(%rip), %rsi       # 0x445dc7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c00 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x442986 <std::random_device::_M_init(std::string const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_init_pretr1(std::string const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	13317(%rip), %rsi       # 0x445dca <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x441336 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442a02 <std::random_device::_M_init_pretr1(std::string const&)+0x4c>
               	movq	(%rbx), %rbx
               	xorl	%edx, %edx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413c10 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	je	0x4429f6 <std::random_device::_M_init_pretr1(std::string const&)+0x40>
               	movq	8(%rsp), %rdx
               	cmpb	$0, (%rdx)
               	je	0x442a07 <std::random_device::_M_init_pretr1(std::string const&)+0x51>
               	leaq	13209(%rip), %rdi       # 0x445d96 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440833 <std::__throw_runtime_error(char const*)>
               	movl	$5489, %eax             # imm = 0x1571
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	0x442c2c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::bad_cast::what() const>:
               	leaq	13233(%rip), %rax       # 0x445dd2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e19>
               	retq

<std::bad_cast::~bad_cast()>:
               	leaq	123551(%rip), %rax      # 0x460cc8 <vtable for std::bad_cast>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::bad_cast::~bad_cast()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x442a22 <std::bad_cast::~bad_cast()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>
               	nop

<std::bad_typeid::what() const>:
               	leaq	13195(%rip), %rax       # 0x445de0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e27>
               	retq

<std::bad_typeid::~bad_typeid()>:
               	leaq	123563(%rip), %rax      # 0x460d08 <vtable for std::bad_typeid>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bcb0 <std::exception::~exception()>
               	nop

<std::bad_typeid::~bad_typeid()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x442a56 <std::bad_typeid::~bad_typeid()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c0b4 <operator delete(void*, unsigned long)>

<std::(anonymous namespace)::__x86_rdrand()>:
               	subq	$24, %rsp
               	movl	$100, %edx
               	movl	$1, %ecx
               	rdrandl	%eax
               	movl	%eax, 12(%rsp)
               	cmovbl	%ecx, %eax
               	testl	%eax, %eax
               	jne	0x442aad <std::(anonymous namespace)::__x86_rdrand()+0x2c>
               	decl	%edx
               	jne	0x442a8f <std::(anonymous namespace)::__x86_rdrand()+0xe>
               	leaq	13128(%rip), %rdi       # 0x445df0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e37>
               	callq	0x440833 <std::__throw_runtime_error(char const*)>
               	movl	12(%rsp), %eax
               	addq	$24, %rsp
               	retq

<std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	12984(%rip), %rsi       # 0x445d82 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x43eb6a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x442b02 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x442b34 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	testl	%eax, %eax
               	je	0x442b34 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	movl	$1, %eax
               	leaq	12933(%rip), %r12       # 0x445d75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x442b3b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x442b53 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
               	leaq	12908(%rip), %rsi       # 0x445d75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x43eb6a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442b3b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	12910(%rip), %rsi       # 0x445d8a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x43eb6a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442b3b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	12903(%rip), %rdi       # 0x445d96 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440833 <std::__throw_runtime_error(char const*)>
               	leaq	12858(%rip), %r12       # 0x445d75 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	12933(%rip), %rsi       # 0x445dc7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c00 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x442b28 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_fini()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x442b65 <std::random_device::_M_fini()+0xd>
               	jmp	0x413c20 <fclose@plt>
               	retq

<std::random_device::_M_getval()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpq	$0, (%rdi)
               	jne	0x442b7b <std::random_device::_M_getval()+0x15>
               	callq	0x442a81 <std::(anonymous namespace)::__x86_rdrand()>
               	jmp	0x442bcc <std::random_device::_M_getval()+0x66>
               	movq	%rdi, %r12
               	movl	$4, %ebx
               	leaq	12(%rsp), %rbp
               	movq	(%r12), %rdi
               	callq	0x413c30 <fileno@plt>
               	movq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movl	%eax, %edi
               	callq	0x413c40 <read@plt>
               	testl	%eax, %eax
               	jle	0x442bb2 <std::random_device::_M_getval()+0x4c>
               	cltq
               	addq	%rax, %rbp
               	subq	%rax, %rbx
               	jne	0x442b88 <std::random_device::_M_getval()+0x22>
               	movl	12(%rsp), %eax
               	jmp	0x442bcc <std::random_device::_M_getval()+0x66>
               	incl	%eax
               	jne	0x442bc0 <std::random_device::_M_getval()+0x5a>
               	callq	0x413820 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x442b88 <std::random_device::_M_getval()+0x22>
               	leaq	12875(%rip), %rdi       # 0x445e12 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e59>
               	callq	0x440833 <std::__throw_runtime_error(char const*)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::random_device::_M_getentropy() const>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x442c27 <std::random_device::_M_getentropy() const+0x51>
               	subq	$24, %rsp
               	callq	0x413c30 <fileno@plt>
               	testl	%eax, %eax
               	jns	0x442bf0 <std::random_device::_M_getentropy() const+0x1a>
               	xorps	%xmm0, %xmm0
               	jmp	0x442c22 <std::random_device::_M_getentropy() const+0x4c>
               	movl	%eax, %edi
               	leaq	12(%rsp), %rdx
               	xorl	%eax, %eax
               	movl	$2147766784, %esi       # imm = 0x80045200
               	callq	0x413c50 <ioctl@plt>
               	testl	%eax, %eax
               	js	0x442beb <std::random_device::_M_getentropy() const+0x15>
               	movl	12(%rsp), %eax
               	testl	%eax, %eax
               	js	0x442beb <std::random_device::_M_getentropy() const+0x15>
               	cmpl	$32, %eax
               	jle	0x442c1c <std::random_device::_M_getentropy() const+0x46>
               	movl	$32, 12(%rsp)
               	cvtsi2sdl	12(%rsp), %xmm0
               	addq	$24, %rsp
               	retq
               	xorps	%xmm0, %xmm0
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>:
               	andl	$-1, %esi
               	movl	$1, %edx
               	movq	%rsi, (%rdi)
               	movq	-8(%rdi,%rdx,8), %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	$1812433253, %rax, %rax # imm = 0x6C078965
               	addl	%edx, %eax
               	movq	%rax, (%rdi,%rdx,8)
               	incq	%rdx
               	cmpq	$624, %rdx              # imm = 0x270
               	jne	0x442c37 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0xb>
               	movq	$624, 4992(%rdi)        # imm = 0x270
               	retq
               	nop

<std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	12623(%rip), %rsi       # 0x445dca <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x43eb6a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	movl	$5489, %esi             # imm = 0x1571
               	testl	%eax, %eax
               	je	0x442cc0 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	movq	(%rbx), %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x413c10 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	movq	%rax, %rsi
               	je	0x442cb4 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
               	movq	8(%rsp), %rax
               	cmpb	$0, (%rax)
               	je	0x442cc0 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	leaq	12663(%rip), %rdi       # 0x445e32 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e79>
               	callq	0x440833 <std::__throw_runtime_error(char const*)>
               	movq	%rbp, %rdi
               	callq	0x442c2c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>:
               	jmp	0x442c2c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::min()>:
               	xorl	%eax, %eax
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::max()>:
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>:
               	xorl	%eax, %eax
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	3168(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442d16 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x38>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$227, %rax
               	jne	0x442ce5 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7>
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	-1824(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442d5c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7e>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$623, %rax              # imm = 0x26F
               	jne	0x442d2b <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x4d>
               	movq	4984(%rdi), %rax
               	movq	(%rdi), %rdx
               	andq	$-2147483648, %rax      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	%rdx
               	xorq	3168(%rdi), %rdx
               	andl	$1, %eax
               	je	0x442d9c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0xbe>
               	movl	$2567483615, %eax       # imm = 0x9908B0DF
               	movq	$0, 4992(%rdi)
               	xorq	%rdx, %rax
               	movq	%rax, 4984(%rdi)
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)>:
               	pushq	%r12
               	movl	$624, %r12d             # imm = 0x270
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	4992(%rbp), %rax
               	movq	%r12, %rdx
               	subq	%rax, %rdx
               	cmpq	%rbx, %rdx
               	jae	0x442de6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x34>
               	movq	%rbp, %rdi
               	leaq	-624(%rax,%rbx), %rbx
               	callq	0x442cde <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	jmp	0x442dc2 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x10>
               	addq	%rbx, %rax
               	popq	%rbx
               	movq	%rax, 4992(%rbp)
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>:
               	cmpq	$623, 4992(%rdi)        # imm = 0x26F
               	pushq	%rbx
               	movq	%rdi, %rbx
               	jbe	0x442e0c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()+0x16>
               	callq	0x442cde <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	movq	4992(%rbx), %rax
               	leaq	1(%rax), %rdx
               	movq	(%rbx,%rax,8), %rax
               	movq	%rdx, 4992(%rbx)
               	popq	%rbx
               	movq	%rax, %rcx
               	shrq	$11, %rcx
               	movl	%ecx, %edx
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$7, %rax
               	andl	$2636928640, %eax       # imm = 0x9D2C5680
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$15, %rax
               	andl	$4022730752, %eax       # imm = 0xEFC60000
               	xorq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	$18, %rdx
               	xorq	%rdx, %rax
               	retq

<std::random_device::_M_getval_pretr1()>:
               	pushq	%rax
               	callq	0x442df6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
               	popq	%rdx
               	retq
               	nop
		...
               	addb	%al, (%rax)

<__libc_csu_init>:
               	pushq	%r15
               	movq	%rdx, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movl	%edi, %r13d
               	pushq	%r12
               	leaq	122536(%rip), %r12      # 0x460d30 <__init_array_start>
               	pushq	%rbp
               	leaq	122600(%rip), %rbp      # 0x460d78 <_DYNAMIC>
               	pushq	%rbx
               	subq	%r12, %rbp
               	subq	$8, %rsp
               	callq	0x413640 <_init>
               	sarq	$3, %rbp
               	je	0x442ebe <__libc_csu_init+0x4e>
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	movq	%r15, %rdx
               	movq	%r14, %rsi
               	movl	%r13d, %edi
               	callq	*(%r12,%rbx,8)
               	addq	$1, %rbx
               	cmpq	%rbx, %rbp
               	jne	0x442ea8 <__libc_csu_init+0x38>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<__libc_csu_fini>:
               	retq
               	nopw	%cs:(%rax,%rax)

<atexit>:
               	leaq	123921(%rip), %rax      # 0x4612f8 <__dso_handle>
               	xorl	%edx, %edx
               	testq	%rax, %rax
               	je	0x442ef1 <atexit+0x11>
               	movq	(%rax), %rdx
               	xorl	%esi, %esi
               	jmp	0x413b00 <__cxa_atexit@plt>

<__do_global_ctors_aux>:
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%rbx
               	movl	$4552200, %ebx          # imm = 0x457608
               	pushq	%rdx
               	movq	(%rbx), %rax
               	cmpq	$-1, %rax
               	je	0x442f14 <__do_global_ctors_aux+0x1c>
               	callq	*%rax
               	subq	$8, %rbx
               	jmp	0x442f03 <__do_global_ctors_aux+0xb>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

Disassembly of section .fini:

<_fini>:
               	subq	$8, %rsp
               	callq	0x41527a <__do_global_dtors_aux>
               	addq	$8, %rsp
               	retq
